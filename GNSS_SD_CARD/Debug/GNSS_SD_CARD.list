
GNSS_SD_CARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003950  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000210c  08003a5c  08003a5c  00013a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b68  08005b68  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08005b68  08005b68  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b68  08005b68  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b68  08005b68  00015b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b6c  08005b6c  00015b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08005b70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f0  20000034  08005ba4  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000524  08005ba4  00020524  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002005d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a36b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000224e  00000000  00000000  0002a40b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b10  00000000  00000000  0002c660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000086b  00000000  00000000  0002d170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000180e0  00000000  00000000  0002d9db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ee63  00000000  00000000  00045abb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084598  00000000  00000000  0005491e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c48  00000000  00000000  000d8eb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000dbb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000034 	.word	0x20000034
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a44 	.word	0x08003a44

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000038 	.word	0x20000038
 8000148:	08003a44 	.word	0x08003a44

0800014c <initDisplay>:
#include "aplication.h"


displayConfig Display;

void initDisplay(displayConfig *disp){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]

	if(disp->configurado != NONE){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	781b      	ldrb	r3, [r3, #0]
 8000158:	2b00      	cmp	r3, #0
 800015a:	d019      	beq.n	8000190 <initDisplay+0x44>
		SSD1306_Init();
 800015c:	f000 fe4e 	bl	8000dfc <SSD1306_Init>
		if(disp->configurado == VELOCIDADE){
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	781b      	ldrb	r3, [r3, #0]
 8000164:	2b01      	cmp	r3, #1
 8000166:	d113      	bne.n	8000190 <initDisplay+0x44>
			SSD1306_GotoXY (10,0);
 8000168:	2100      	movs	r1, #0
 800016a:	200a      	movs	r0, #10
 800016c:	f000 ffae 	bl	80010cc <SSD1306_GotoXY>
			SSD1306_Puts ("Velocidade", &Font_11x18, 1);
 8000170:	2201      	movs	r2, #1
 8000172:	4909      	ldr	r1, [pc, #36]	; (8000198 <initDisplay+0x4c>)
 8000174:	4809      	ldr	r0, [pc, #36]	; (800019c <initDisplay+0x50>)
 8000176:	f001 f83f 	bl	80011f8 <SSD1306_Puts>
			SSD1306_GotoXY (80, 36);
 800017a:	2124      	movs	r1, #36	; 0x24
 800017c:	2050      	movs	r0, #80	; 0x50
 800017e:	f000 ffa5 	bl	80010cc <SSD1306_GotoXY>
			SSD1306_Puts ("km/h", &Font_11x18, 1);
 8000182:	2201      	movs	r2, #1
 8000184:	4904      	ldr	r1, [pc, #16]	; (8000198 <initDisplay+0x4c>)
 8000186:	4806      	ldr	r0, [pc, #24]	; (80001a0 <initDisplay+0x54>)
 8000188:	f001 f836 	bl	80011f8 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 800018c:	f000 fefa 	bl	8000f84 <SSD1306_UpdateScreen>
		}
	}
}
 8000190:	bf00      	nop
 8000192:	3708      	adds	r7, #8
 8000194:	46bd      	mov	sp, r7
 8000196:	bd80      	pop	{r7, pc}
 8000198:	20000004 	.word	0x20000004
 800019c:	08003a5c 	.word	0x08003a5c
 80001a0:	08003a68 	.word	0x08003a68

080001a4 <updateDisplay>:

void updateDisplay(displayConfig *disp){
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
	if(disp->configurado == VELOCIDADE){
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	781b      	ldrb	r3, [r3, #0]
 80001b0:	2b01      	cmp	r3, #1
 80001b2:	d102      	bne.n	80001ba <updateDisplay+0x16>
		updateDisplayVelocidade(disp);
 80001b4:	6878      	ldr	r0, [r7, #4]
 80001b6:	f000 f805 	bl	80001c4 <updateDisplayVelocidade>
	}else if(disp->configurado == INFO){

	}
}
 80001ba:	bf00      	nop
 80001bc:	3708      	adds	r7, #8
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
	...

080001c4 <updateDisplayVelocidade>:

void updateDisplayVelocidade(displayConfig *disp){
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b084      	sub	sp, #16
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
	char _snum[4];
	itoa(disp->velocidade, _snum, 10);
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	785b      	ldrb	r3, [r3, #1]
 80001d0:	4618      	mov	r0, r3
 80001d2:	f107 030c 	add.w	r3, r7, #12
 80001d6:	220a      	movs	r2, #10
 80001d8:	4619      	mov	r1, r3
 80001da:	f003 fbc2 	bl	8003962 <itoa>

	SSD1306_GotoXY (25, 30);
 80001de:	211e      	movs	r1, #30
 80001e0:	2019      	movs	r0, #25
 80001e2:	f000 ff73 	bl	80010cc <SSD1306_GotoXY>
	if(disp->velocidade < 10) {// 1 DIGIT
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	785b      	ldrb	r3, [r3, #1]
 80001ea:	2b09      	cmp	r3, #9
 80001ec:	d808      	bhi.n	8000200 <updateDisplayVelocidade+0x3c>

		_snum[3] = 0;
 80001ee:	2300      	movs	r3, #0
 80001f0:	73fb      	strb	r3, [r7, #15]
		_snum[2] = _snum[0];
 80001f2:	7b3b      	ldrb	r3, [r7, #12]
 80001f4:	73bb      	strb	r3, [r7, #14]
		_snum[1] = ' ';
 80001f6:	2320      	movs	r3, #32
 80001f8:	737b      	strb	r3, [r7, #13]
		_snum[0] = ' ';
 80001fa:	2320      	movs	r3, #32
 80001fc:	733b      	strb	r3, [r7, #12]
 80001fe:	e014      	b.n	800022a <updateDisplayVelocidade+0x66>

	}
	else if (disp->velocidade < 100 ) {// 2 DIGITS
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	785b      	ldrb	r3, [r3, #1]
 8000204:	2b63      	cmp	r3, #99	; 0x63
 8000206:	d808      	bhi.n	800021a <updateDisplayVelocidade+0x56>
		_snum[3] = 0;
 8000208:	2300      	movs	r3, #0
 800020a:	73fb      	strb	r3, [r7, #15]
		_snum[2] = _snum[1];
 800020c:	7b7b      	ldrb	r3, [r7, #13]
 800020e:	73bb      	strb	r3, [r7, #14]
		_snum[1] = _snum[0];
 8000210:	7b3b      	ldrb	r3, [r7, #12]
 8000212:	737b      	strb	r3, [r7, #13]
		_snum[0] = ' ';
 8000214:	2320      	movs	r3, #32
 8000216:	733b      	strb	r3, [r7, #12]
 8000218:	e007      	b.n	800022a <updateDisplayVelocidade+0x66>

	}
	else if (disp->velocidade < 1000 ) {// 3 DIGITS
		_snum[3] = 0;
 800021a:	2300      	movs	r3, #0
 800021c:	73fb      	strb	r3, [r7, #15]
		_snum[2] = _snum[2];
 800021e:	7bbb      	ldrb	r3, [r7, #14]
 8000220:	73bb      	strb	r3, [r7, #14]
		_snum[1] = _snum[1];
 8000222:	7b7b      	ldrb	r3, [r7, #13]
 8000224:	737b      	strb	r3, [r7, #13]
		_snum[0] = _snum[0];
 8000226:	7b3b      	ldrb	r3, [r7, #12]
 8000228:	733b      	strb	r3, [r7, #12]
	}
	else {
		SSD1306_GotoXY (30, 30);  // 4 DIGIS
	}

	SSD1306_Puts (_snum, &Font_16x26, 1);
 800022a:	f107 030c 	add.w	r3, r7, #12
 800022e:	2201      	movs	r2, #1
 8000230:	4904      	ldr	r1, [pc, #16]	; (8000244 <updateDisplayVelocidade+0x80>)
 8000232:	4618      	mov	r0, r3
 8000234:	f000 ffe0 	bl	80011f8 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8000238:	f000 fea4 	bl	8000f84 <SSD1306_UpdateScreen>

}
 800023c:	bf00      	nop
 800023e:	3710      	adds	r7, #16
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	2000000c 	.word	0x2000000c

08000248 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800024c:	2200      	movs	r2, #0
 800024e:	2110      	movs	r1, #16
 8000250:	4803      	ldr	r0, [pc, #12]	; (8000260 <SELECT+0x18>)
 8000252:	f001 fca3 	bl	8001b9c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000256:	2001      	movs	r0, #1
 8000258:	f001 fa14 	bl	8001684 <HAL_Delay>
}
 800025c:	bf00      	nop
 800025e:	bd80      	pop	{r7, pc}
 8000260:	40010800 	.word	0x40010800

08000264 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000268:	2201      	movs	r2, #1
 800026a:	2110      	movs	r1, #16
 800026c:	4803      	ldr	r0, [pc, #12]	; (800027c <DESELECT+0x18>)
 800026e:	f001 fc95 	bl	8001b9c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000272:	2001      	movs	r0, #1
 8000274:	f001 fa06 	bl	8001684 <HAL_Delay>
}
 8000278:	bf00      	nop
 800027a:	bd80      	pop	{r7, pc}
 800027c:	40010800 	.word	0x40010800

08000280 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800028a:	bf00      	nop
 800028c:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <SPI_TxByte+0x30>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	689b      	ldr	r3, [r3, #8]
 8000292:	f003 0302 	and.w	r3, r3, #2
 8000296:	2b02      	cmp	r3, #2
 8000298:	d1f8      	bne.n	800028c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800029a:	1df9      	adds	r1, r7, #7
 800029c:	2364      	movs	r3, #100	; 0x64
 800029e:	2201      	movs	r2, #1
 80002a0:	4803      	ldr	r0, [pc, #12]	; (80002b0 <SPI_TxByte+0x30>)
 80002a2:	f002 fedd 	bl	8003060 <HAL_SPI_Transmit>
}
 80002a6:	bf00      	nop
 80002a8:	3708      	adds	r7, #8
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	200000ac 	.word	0x200000ac

080002b4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
 80002bc:	460b      	mov	r3, r1
 80002be:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80002c0:	bf00      	nop
 80002c2:	4b08      	ldr	r3, [pc, #32]	; (80002e4 <SPI_TxBuffer+0x30>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	689b      	ldr	r3, [r3, #8]
 80002c8:	f003 0302 	and.w	r3, r3, #2
 80002cc:	2b02      	cmp	r3, #2
 80002ce:	d1f8      	bne.n	80002c2 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80002d0:	887a      	ldrh	r2, [r7, #2]
 80002d2:	2364      	movs	r3, #100	; 0x64
 80002d4:	6879      	ldr	r1, [r7, #4]
 80002d6:	4803      	ldr	r0, [pc, #12]	; (80002e4 <SPI_TxBuffer+0x30>)
 80002d8:	f002 fec2 	bl	8003060 <HAL_SPI_Transmit>
}
 80002dc:	bf00      	nop
 80002de:	3708      	adds	r7, #8
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	200000ac 	.word	0x200000ac

080002e8 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80002ee:	23ff      	movs	r3, #255	; 0xff
 80002f0:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80002f2:	bf00      	nop
 80002f4:	4b09      	ldr	r3, [pc, #36]	; (800031c <SPI_RxByte+0x34>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	f003 0302 	and.w	r3, r3, #2
 80002fe:	2b02      	cmp	r3, #2
 8000300:	d1f8      	bne.n	80002f4 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000302:	1dba      	adds	r2, r7, #6
 8000304:	1df9      	adds	r1, r7, #7
 8000306:	2364      	movs	r3, #100	; 0x64
 8000308:	9300      	str	r3, [sp, #0]
 800030a:	2301      	movs	r3, #1
 800030c:	4803      	ldr	r0, [pc, #12]	; (800031c <SPI_RxByte+0x34>)
 800030e:	f002 ffeb 	bl	80032e8 <HAL_SPI_TransmitReceive>

	return data;
 8000312:	79bb      	ldrb	r3, [r7, #6]
}
 8000314:	4618      	mov	r0, r3
 8000316:	3708      	adds	r7, #8
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	200000ac 	.word	0x200000ac

08000320 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000328:	f7ff ffde 	bl	80002e8 <SPI_RxByte>
 800032c:	4603      	mov	r3, r0
 800032e:	461a      	mov	r2, r3
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	701a      	strb	r2, [r3, #0]
}
 8000334:	bf00      	nop
 8000336:	3708      	adds	r7, #8
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}

0800033c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000342:	4b0a      	ldr	r3, [pc, #40]	; (800036c <SD_ReadyWait+0x30>)
 8000344:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000348:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800034a:	f7ff ffcd 	bl	80002e8 <SPI_RxByte>
 800034e:	4603      	mov	r3, r0
 8000350:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	2bff      	cmp	r3, #255	; 0xff
 8000356:	d003      	beq.n	8000360 <SD_ReadyWait+0x24>
 8000358:	4b04      	ldr	r3, [pc, #16]	; (800036c <SD_ReadyWait+0x30>)
 800035a:	881b      	ldrh	r3, [r3, #0]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d1f4      	bne.n	800034a <SD_ReadyWait+0xe>

	return res;
 8000360:	79fb      	ldrb	r3, [r7, #7]
}
 8000362:	4618      	mov	r0, r3
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	20000054 	.word	0x20000054

08000370 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b084      	sub	sp, #16
 8000374:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000376:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800037a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800037c:	f7ff ff72 	bl	8000264 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000380:	2300      	movs	r3, #0
 8000382:	60bb      	str	r3, [r7, #8]
 8000384:	e005      	b.n	8000392 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000386:	20ff      	movs	r0, #255	; 0xff
 8000388:	f7ff ff7a 	bl	8000280 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	3301      	adds	r3, #1
 8000390:	60bb      	str	r3, [r7, #8]
 8000392:	68bb      	ldr	r3, [r7, #8]
 8000394:	2b09      	cmp	r3, #9
 8000396:	ddf6      	ble.n	8000386 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000398:	f7ff ff56 	bl	8000248 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800039c:	2340      	movs	r3, #64	; 0x40
 800039e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80003a0:	2300      	movs	r3, #0
 80003a2:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80003a4:	2300      	movs	r3, #0
 80003a6:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80003a8:	2300      	movs	r3, #0
 80003aa:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80003ac:	2300      	movs	r3, #0
 80003ae:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80003b0:	2395      	movs	r3, #149	; 0x95
 80003b2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80003b4:	463b      	mov	r3, r7
 80003b6:	2106      	movs	r1, #6
 80003b8:	4618      	mov	r0, r3
 80003ba:	f7ff ff7b 	bl	80002b4 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80003be:	e002      	b.n	80003c6 <SD_PowerOn+0x56>
	{
		cnt--;
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	3b01      	subs	r3, #1
 80003c4:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80003c6:	f7ff ff8f 	bl	80002e8 <SPI_RxByte>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b01      	cmp	r3, #1
 80003ce:	d002      	beq.n	80003d6 <SD_PowerOn+0x66>
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d1f4      	bne.n	80003c0 <SD_PowerOn+0x50>
	}

	DESELECT();
 80003d6:	f7ff ff45 	bl	8000264 <DESELECT>
	SPI_TxByte(0XFF);
 80003da:	20ff      	movs	r0, #255	; 0xff
 80003dc:	f7ff ff50 	bl	8000280 <SPI_TxByte>

	PowerFlag = 1;
 80003e0:	4b03      	ldr	r3, [pc, #12]	; (80003f0 <SD_PowerOn+0x80>)
 80003e2:	2201      	movs	r2, #1
 80003e4:	701a      	strb	r2, [r3, #0]
}
 80003e6:	bf00      	nop
 80003e8:	3710      	adds	r7, #16
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	20000057 	.word	0x20000057

080003f4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80003f8:	4b03      	ldr	r3, [pc, #12]	; (8000408 <SD_PowerOff+0x14>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	701a      	strb	r2, [r3, #0]
}
 80003fe:	bf00      	nop
 8000400:	46bd      	mov	sp, r7
 8000402:	bc80      	pop	{r7}
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	20000057 	.word	0x20000057

0800040c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000410:	4b02      	ldr	r3, [pc, #8]	; (800041c <SD_CheckPower+0x10>)
 8000412:	781b      	ldrb	r3, [r3, #0]
}
 8000414:	4618      	mov	r0, r3
 8000416:	46bd      	mov	sp, r7
 8000418:	bc80      	pop	{r7}
 800041a:	4770      	bx	lr
 800041c:	20000057 	.word	0x20000057

08000420 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800042a:	4b13      	ldr	r3, [pc, #76]	; (8000478 <SD_RxDataBlock+0x58>)
 800042c:	22c8      	movs	r2, #200	; 0xc8
 800042e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000430:	f7ff ff5a 	bl	80002e8 <SPI_RxByte>
 8000434:	4603      	mov	r3, r0
 8000436:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000438:	7bfb      	ldrb	r3, [r7, #15]
 800043a:	2bff      	cmp	r3, #255	; 0xff
 800043c:	d103      	bne.n	8000446 <SD_RxDataBlock+0x26>
 800043e:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <SD_RxDataBlock+0x58>)
 8000440:	881b      	ldrh	r3, [r3, #0]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d1f4      	bne.n	8000430 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000446:	7bfb      	ldrb	r3, [r7, #15]
 8000448:	2bfe      	cmp	r3, #254	; 0xfe
 800044a:	d001      	beq.n	8000450 <SD_RxDataBlock+0x30>
 800044c:	2300      	movs	r3, #0
 800044e:	e00f      	b.n	8000470 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	1c5a      	adds	r2, r3, #1
 8000454:	607a      	str	r2, [r7, #4]
 8000456:	4618      	mov	r0, r3
 8000458:	f7ff ff62 	bl	8000320 <SPI_RxBytePtr>
	} while(len--);
 800045c:	683b      	ldr	r3, [r7, #0]
 800045e:	1e5a      	subs	r2, r3, #1
 8000460:	603a      	str	r2, [r7, #0]
 8000462:	2b00      	cmp	r3, #0
 8000464:	d1f4      	bne.n	8000450 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000466:	f7ff ff3f 	bl	80002e8 <SPI_RxByte>
	SPI_RxByte();
 800046a:	f7ff ff3d 	bl	80002e8 <SPI_RxByte>

	return TRUE;
 800046e:	2301      	movs	r3, #1
}
 8000470:	4618      	mov	r0, r3
 8000472:	3710      	adds	r7, #16
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	20000052 	.word	0x20000052

0800047c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	460b      	mov	r3, r1
 8000486:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000488:	2300      	movs	r3, #0
 800048a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800048c:	f7ff ff56 	bl	800033c <SD_ReadyWait>
 8000490:	4603      	mov	r3, r0
 8000492:	2bff      	cmp	r3, #255	; 0xff
 8000494:	d001      	beq.n	800049a <SD_TxDataBlock+0x1e>
 8000496:	2300      	movs	r3, #0
 8000498:	e02f      	b.n	80004fa <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800049a:	78fb      	ldrb	r3, [r7, #3]
 800049c:	4618      	mov	r0, r3
 800049e:	f7ff feef 	bl	8000280 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80004a2:	78fb      	ldrb	r3, [r7, #3]
 80004a4:	2bfd      	cmp	r3, #253	; 0xfd
 80004a6:	d020      	beq.n	80004ea <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80004a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ac:	6878      	ldr	r0, [r7, #4]
 80004ae:	f7ff ff01 	bl	80002b4 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80004b2:	f7ff ff19 	bl	80002e8 <SPI_RxByte>
		SPI_RxByte();
 80004b6:	f7ff ff17 	bl	80002e8 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80004ba:	e00b      	b.n	80004d4 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80004bc:	f7ff ff14 	bl	80002e8 <SPI_RxByte>
 80004c0:	4603      	mov	r3, r0
 80004c2:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80004c4:	7bfb      	ldrb	r3, [r7, #15]
 80004c6:	f003 031f 	and.w	r3, r3, #31
 80004ca:	2b05      	cmp	r3, #5
 80004cc:	d006      	beq.n	80004dc <SD_TxDataBlock+0x60>
			i++;
 80004ce:	7bbb      	ldrb	r3, [r7, #14]
 80004d0:	3301      	adds	r3, #1
 80004d2:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80004d4:	7bbb      	ldrb	r3, [r7, #14]
 80004d6:	2b40      	cmp	r3, #64	; 0x40
 80004d8:	d9f0      	bls.n	80004bc <SD_TxDataBlock+0x40>
 80004da:	e000      	b.n	80004de <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80004dc:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80004de:	bf00      	nop
 80004e0:	f7ff ff02 	bl	80002e8 <SPI_RxByte>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d0fa      	beq.n	80004e0 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80004ea:	7bfb      	ldrb	r3, [r7, #15]
 80004ec:	f003 031f 	and.w	r3, r3, #31
 80004f0:	2b05      	cmp	r3, #5
 80004f2:	d101      	bne.n	80004f8 <SD_TxDataBlock+0x7c>
 80004f4:	2301      	movs	r3, #1
 80004f6:	e000      	b.n	80004fa <SD_TxDataBlock+0x7e>

	return FALSE;
 80004f8:	2300      	movs	r3, #0
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	3710      	adds	r7, #16
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}

08000502 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000502:	b580      	push	{r7, lr}
 8000504:	b084      	sub	sp, #16
 8000506:	af00      	add	r7, sp, #0
 8000508:	4603      	mov	r3, r0
 800050a:	6039      	str	r1, [r7, #0]
 800050c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800050e:	f7ff ff15 	bl	800033c <SD_ReadyWait>
 8000512:	4603      	mov	r3, r0
 8000514:	2bff      	cmp	r3, #255	; 0xff
 8000516:	d001      	beq.n	800051c <SD_SendCmd+0x1a>
 8000518:	23ff      	movs	r3, #255	; 0xff
 800051a:	e042      	b.n	80005a2 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	4618      	mov	r0, r3
 8000520:	f7ff feae 	bl	8000280 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	0e1b      	lsrs	r3, r3, #24
 8000528:	b2db      	uxtb	r3, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f7ff fea8 	bl	8000280 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	0c1b      	lsrs	r3, r3, #16
 8000534:	b2db      	uxtb	r3, r3
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff fea2 	bl	8000280 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	0a1b      	lsrs	r3, r3, #8
 8000540:	b2db      	uxtb	r3, r3
 8000542:	4618      	mov	r0, r3
 8000544:	f7ff fe9c 	bl	8000280 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	b2db      	uxtb	r3, r3
 800054c:	4618      	mov	r0, r3
 800054e:	f7ff fe97 	bl	8000280 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	2b40      	cmp	r3, #64	; 0x40
 8000556:	d102      	bne.n	800055e <SD_SendCmd+0x5c>
 8000558:	2395      	movs	r3, #149	; 0x95
 800055a:	73fb      	strb	r3, [r7, #15]
 800055c:	e007      	b.n	800056e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	2b48      	cmp	r3, #72	; 0x48
 8000562:	d102      	bne.n	800056a <SD_SendCmd+0x68>
 8000564:	2387      	movs	r3, #135	; 0x87
 8000566:	73fb      	strb	r3, [r7, #15]
 8000568:	e001      	b.n	800056e <SD_SendCmd+0x6c>
	else crc = 1;
 800056a:	2301      	movs	r3, #1
 800056c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800056e:	7bfb      	ldrb	r3, [r7, #15]
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff fe85 	bl	8000280 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	2b4c      	cmp	r3, #76	; 0x4c
 800057a:	d101      	bne.n	8000580 <SD_SendCmd+0x7e>
 800057c:	f7ff feb4 	bl	80002e8 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000580:	230a      	movs	r3, #10
 8000582:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000584:	f7ff feb0 	bl	80002e8 <SPI_RxByte>
 8000588:	4603      	mov	r3, r0
 800058a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800058c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000590:	2b00      	cmp	r3, #0
 8000592:	da05      	bge.n	80005a0 <SD_SendCmd+0x9e>
 8000594:	7bbb      	ldrb	r3, [r7, #14]
 8000596:	3b01      	subs	r3, #1
 8000598:	73bb      	strb	r3, [r7, #14]
 800059a:	7bbb      	ldrb	r3, [r7, #14]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d1f1      	bne.n	8000584 <SD_SendCmd+0x82>

	return res;
 80005a0:	7b7b      	ldrb	r3, [r7, #13]
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80005ac:	b590      	push	{r4, r7, lr}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SD_disk_initialize+0x14>
 80005bc:	2301      	movs	r3, #1
 80005be:	e0d1      	b.n	8000764 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80005c0:	4b6a      	ldr	r3, [pc, #424]	; (800076c <SD_disk_initialize+0x1c0>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	f003 0302 	and.w	r3, r3, #2
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d003      	beq.n	80005d6 <SD_disk_initialize+0x2a>
 80005ce:	4b67      	ldr	r3, [pc, #412]	; (800076c <SD_disk_initialize+0x1c0>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	e0c6      	b.n	8000764 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80005d6:	f7ff fecb 	bl	8000370 <SD_PowerOn>

	/* slave select */
	SELECT();
 80005da:	f7ff fe35 	bl	8000248 <SELECT>

	/* check disk type */
	type = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80005e2:	2100      	movs	r1, #0
 80005e4:	2040      	movs	r0, #64	; 0x40
 80005e6:	f7ff ff8c 	bl	8000502 <SD_SendCmd>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	f040 80a1 	bne.w	8000734 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80005f2:	4b5f      	ldr	r3, [pc, #380]	; (8000770 <SD_disk_initialize+0x1c4>)
 80005f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005f8:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80005fa:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80005fe:	2048      	movs	r0, #72	; 0x48
 8000600:	f7ff ff7f 	bl	8000502 <SD_SendCmd>
 8000604:	4603      	mov	r3, r0
 8000606:	2b01      	cmp	r3, #1
 8000608:	d155      	bne.n	80006b6 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800060a:	2300      	movs	r3, #0
 800060c:	73fb      	strb	r3, [r7, #15]
 800060e:	e00c      	b.n	800062a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000610:	7bfc      	ldrb	r4, [r7, #15]
 8000612:	f7ff fe69 	bl	80002e8 <SPI_RxByte>
 8000616:	4603      	mov	r3, r0
 8000618:	461a      	mov	r2, r3
 800061a:	f104 0310 	add.w	r3, r4, #16
 800061e:	443b      	add	r3, r7
 8000620:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	3301      	adds	r3, #1
 8000628:	73fb      	strb	r3, [r7, #15]
 800062a:	7bfb      	ldrb	r3, [r7, #15]
 800062c:	2b03      	cmp	r3, #3
 800062e:	d9ef      	bls.n	8000610 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000630:	7abb      	ldrb	r3, [r7, #10]
 8000632:	2b01      	cmp	r3, #1
 8000634:	d17e      	bne.n	8000734 <SD_disk_initialize+0x188>
 8000636:	7afb      	ldrb	r3, [r7, #11]
 8000638:	2baa      	cmp	r3, #170	; 0xaa
 800063a:	d17b      	bne.n	8000734 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800063c:	2100      	movs	r1, #0
 800063e:	2077      	movs	r0, #119	; 0x77
 8000640:	f7ff ff5f 	bl	8000502 <SD_SendCmd>
 8000644:	4603      	mov	r3, r0
 8000646:	2b01      	cmp	r3, #1
 8000648:	d807      	bhi.n	800065a <SD_disk_initialize+0xae>
 800064a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800064e:	2069      	movs	r0, #105	; 0x69
 8000650:	f7ff ff57 	bl	8000502 <SD_SendCmd>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d004      	beq.n	8000664 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800065a:	4b45      	ldr	r3, [pc, #276]	; (8000770 <SD_disk_initialize+0x1c4>)
 800065c:	881b      	ldrh	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d1ec      	bne.n	800063c <SD_disk_initialize+0x90>
 8000662:	e000      	b.n	8000666 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000664:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000666:	4b42      	ldr	r3, [pc, #264]	; (8000770 <SD_disk_initialize+0x1c4>)
 8000668:	881b      	ldrh	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d062      	beq.n	8000734 <SD_disk_initialize+0x188>
 800066e:	2100      	movs	r1, #0
 8000670:	207a      	movs	r0, #122	; 0x7a
 8000672:	f7ff ff46 	bl	8000502 <SD_SendCmd>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d15b      	bne.n	8000734 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800067c:	2300      	movs	r3, #0
 800067e:	73fb      	strb	r3, [r7, #15]
 8000680:	e00c      	b.n	800069c <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000682:	7bfc      	ldrb	r4, [r7, #15]
 8000684:	f7ff fe30 	bl	80002e8 <SPI_RxByte>
 8000688:	4603      	mov	r3, r0
 800068a:	461a      	mov	r2, r3
 800068c:	f104 0310 	add.w	r3, r4, #16
 8000690:	443b      	add	r3, r7
 8000692:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	3301      	adds	r3, #1
 800069a:	73fb      	strb	r3, [r7, #15]
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	2b03      	cmp	r3, #3
 80006a0:	d9ef      	bls.n	8000682 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80006a2:	7a3b      	ldrb	r3, [r7, #8]
 80006a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SD_disk_initialize+0x104>
 80006ac:	230c      	movs	r3, #12
 80006ae:	e000      	b.n	80006b2 <SD_disk_initialize+0x106>
 80006b0:	2304      	movs	r3, #4
 80006b2:	73bb      	strb	r3, [r7, #14]
 80006b4:	e03e      	b.n	8000734 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80006b6:	2100      	movs	r1, #0
 80006b8:	2077      	movs	r0, #119	; 0x77
 80006ba:	f7ff ff22 	bl	8000502 <SD_SendCmd>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d808      	bhi.n	80006d6 <SD_disk_initialize+0x12a>
 80006c4:	2100      	movs	r1, #0
 80006c6:	2069      	movs	r0, #105	; 0x69
 80006c8:	f7ff ff1b 	bl	8000502 <SD_SendCmd>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d801      	bhi.n	80006d6 <SD_disk_initialize+0x12a>
 80006d2:	2302      	movs	r3, #2
 80006d4:	e000      	b.n	80006d8 <SD_disk_initialize+0x12c>
 80006d6:	2301      	movs	r3, #1
 80006d8:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80006da:	7bbb      	ldrb	r3, [r7, #14]
 80006dc:	2b02      	cmp	r3, #2
 80006de:	d10e      	bne.n	80006fe <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80006e0:	2100      	movs	r1, #0
 80006e2:	2077      	movs	r0, #119	; 0x77
 80006e4:	f7ff ff0d 	bl	8000502 <SD_SendCmd>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d80e      	bhi.n	800070c <SD_disk_initialize+0x160>
 80006ee:	2100      	movs	r1, #0
 80006f0:	2069      	movs	r0, #105	; 0x69
 80006f2:	f7ff ff06 	bl	8000502 <SD_SendCmd>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d107      	bne.n	800070c <SD_disk_initialize+0x160>
 80006fc:	e00c      	b.n	8000718 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80006fe:	2100      	movs	r1, #0
 8000700:	2041      	movs	r0, #65	; 0x41
 8000702:	f7ff fefe 	bl	8000502 <SD_SendCmd>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d004      	beq.n	8000716 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 800070c:	4b18      	ldr	r3, [pc, #96]	; (8000770 <SD_disk_initialize+0x1c4>)
 800070e:	881b      	ldrh	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d1e2      	bne.n	80006da <SD_disk_initialize+0x12e>
 8000714:	e000      	b.n	8000718 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000716:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000718:	4b15      	ldr	r3, [pc, #84]	; (8000770 <SD_disk_initialize+0x1c4>)
 800071a:	881b      	ldrh	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d007      	beq.n	8000730 <SD_disk_initialize+0x184>
 8000720:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000724:	2050      	movs	r0, #80	; 0x50
 8000726:	f7ff feec 	bl	8000502 <SD_SendCmd>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SD_disk_initialize+0x188>
 8000730:	2300      	movs	r3, #0
 8000732:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000734:	4a0f      	ldr	r2, [pc, #60]	; (8000774 <SD_disk_initialize+0x1c8>)
 8000736:	7bbb      	ldrb	r3, [r7, #14]
 8000738:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800073a:	f7ff fd93 	bl	8000264 <DESELECT>
	SPI_RxByte();
 800073e:	f7ff fdd3 	bl	80002e8 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000742:	7bbb      	ldrb	r3, [r7, #14]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d008      	beq.n	800075a <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000748:	4b08      	ldr	r3, [pc, #32]	; (800076c <SD_disk_initialize+0x1c0>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	f023 0301 	bic.w	r3, r3, #1
 8000752:	b2da      	uxtb	r2, r3
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <SD_disk_initialize+0x1c0>)
 8000756:	701a      	strb	r2, [r3, #0]
 8000758:	e001      	b.n	800075e <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800075a:	f7ff fe4b 	bl	80003f4 <SD_PowerOff>
	}

	return Stat;
 800075e:	4b03      	ldr	r3, [pc, #12]	; (800076c <SD_disk_initialize+0x1c0>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	b2db      	uxtb	r3, r3
}
 8000764:	4618      	mov	r0, r3
 8000766:	3714      	adds	r7, #20
 8000768:	46bd      	mov	sp, r7
 800076a:	bd90      	pop	{r4, r7, pc}
 800076c:	20000000 	.word	0x20000000
 8000770:	20000052 	.word	0x20000052
 8000774:	20000056 	.word	0x20000056

08000778 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SD_disk_status+0x14>
 8000788:	2301      	movs	r3, #1
 800078a:	e002      	b.n	8000792 <SD_disk_status+0x1a>
	return Stat;
 800078c:	4b03      	ldr	r3, [pc, #12]	; (800079c <SD_disk_status+0x24>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	b2db      	uxtb	r3, r3
}
 8000792:	4618      	mov	r0, r3
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr
 800079c:	20000000 	.word	0x20000000

080007a0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60b9      	str	r1, [r7, #8]
 80007a8:	607a      	str	r2, [r7, #4]
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	4603      	mov	r3, r0
 80007ae:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d102      	bne.n	80007bc <SD_disk_read+0x1c>
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d101      	bne.n	80007c0 <SD_disk_read+0x20>
 80007bc:	2304      	movs	r3, #4
 80007be:	e051      	b.n	8000864 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80007c0:	4b2a      	ldr	r3, [pc, #168]	; (800086c <SD_disk_read+0xcc>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SD_disk_read+0x32>
 80007ce:	2303      	movs	r3, #3
 80007d0:	e048      	b.n	8000864 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80007d2:	4b27      	ldr	r3, [pc, #156]	; (8000870 <SD_disk_read+0xd0>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d102      	bne.n	80007e4 <SD_disk_read+0x44>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	025b      	lsls	r3, r3, #9
 80007e2:	607b      	str	r3, [r7, #4]

	SELECT();
 80007e4:	f7ff fd30 	bl	8000248 <SELECT>

	if (count == 1)
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d111      	bne.n	8000812 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80007ee:	6879      	ldr	r1, [r7, #4]
 80007f0:	2051      	movs	r0, #81	; 0x51
 80007f2:	f7ff fe86 	bl	8000502 <SD_SendCmd>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d129      	bne.n	8000850 <SD_disk_read+0xb0>
 80007fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000800:	68b8      	ldr	r0, [r7, #8]
 8000802:	f7ff fe0d 	bl	8000420 <SD_RxDataBlock>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d021      	beq.n	8000850 <SD_disk_read+0xb0>
 800080c:	2300      	movs	r3, #0
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	e01e      	b.n	8000850 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000812:	6879      	ldr	r1, [r7, #4]
 8000814:	2052      	movs	r0, #82	; 0x52
 8000816:	f7ff fe74 	bl	8000502 <SD_SendCmd>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d117      	bne.n	8000850 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000820:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000824:	68b8      	ldr	r0, [r7, #8]
 8000826:	f7ff fdfb 	bl	8000420 <SD_RxDataBlock>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d00a      	beq.n	8000846 <SD_disk_read+0xa6>
				buff += 512;
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000836:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	3b01      	subs	r3, #1
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d1ed      	bne.n	8000820 <SD_disk_read+0x80>
 8000844:	e000      	b.n	8000848 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000846:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000848:	2100      	movs	r1, #0
 800084a:	204c      	movs	r0, #76	; 0x4c
 800084c:	f7ff fe59 	bl	8000502 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000850:	f7ff fd08 	bl	8000264 <DESELECT>
	SPI_RxByte();
 8000854:	f7ff fd48 	bl	80002e8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	bf14      	ite	ne
 800085e:	2301      	movne	r3, #1
 8000860:	2300      	moveq	r3, #0
 8000862:	b2db      	uxtb	r3, r3
}
 8000864:	4618      	mov	r0, r3
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000000 	.word	0x20000000
 8000870:	20000056 	.word	0x20000056

08000874 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	60b9      	str	r1, [r7, #8]
 800087c:	607a      	str	r2, [r7, #4]
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	4603      	mov	r3, r0
 8000882:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000884:	7bfb      	ldrb	r3, [r7, #15]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d102      	bne.n	8000890 <SD_disk_write+0x1c>
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d101      	bne.n	8000894 <SD_disk_write+0x20>
 8000890:	2304      	movs	r3, #4
 8000892:	e06b      	b.n	800096c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000894:	4b37      	ldr	r3, [pc, #220]	; (8000974 <SD_disk_write+0x100>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	b2db      	uxtb	r3, r3
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <SD_disk_write+0x32>
 80008a2:	2303      	movs	r3, #3
 80008a4:	e062      	b.n	800096c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80008a6:	4b33      	ldr	r3, [pc, #204]	; (8000974 <SD_disk_write+0x100>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	f003 0304 	and.w	r3, r3, #4
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SD_disk_write+0x44>
 80008b4:	2302      	movs	r3, #2
 80008b6:	e059      	b.n	800096c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80008b8:	4b2f      	ldr	r3, [pc, #188]	; (8000978 <SD_disk_write+0x104>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	f003 0304 	and.w	r3, r3, #4
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d102      	bne.n	80008ca <SD_disk_write+0x56>
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	025b      	lsls	r3, r3, #9
 80008c8:	607b      	str	r3, [r7, #4]

	SELECT();
 80008ca:	f7ff fcbd 	bl	8000248 <SELECT>

	if (count == 1)
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d110      	bne.n	80008f6 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80008d4:	6879      	ldr	r1, [r7, #4]
 80008d6:	2058      	movs	r0, #88	; 0x58
 80008d8:	f7ff fe13 	bl	8000502 <SD_SendCmd>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d13a      	bne.n	8000958 <SD_disk_write+0xe4>
 80008e2:	21fe      	movs	r1, #254	; 0xfe
 80008e4:	68b8      	ldr	r0, [r7, #8]
 80008e6:	f7ff fdc9 	bl	800047c <SD_TxDataBlock>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d033      	beq.n	8000958 <SD_disk_write+0xe4>
			count = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	e030      	b.n	8000958 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80008f6:	4b20      	ldr	r3, [pc, #128]	; (8000978 <SD_disk_write+0x104>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d007      	beq.n	8000912 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000902:	2100      	movs	r1, #0
 8000904:	2077      	movs	r0, #119	; 0x77
 8000906:	f7ff fdfc 	bl	8000502 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800090a:	6839      	ldr	r1, [r7, #0]
 800090c:	2057      	movs	r0, #87	; 0x57
 800090e:	f7ff fdf8 	bl	8000502 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000912:	6879      	ldr	r1, [r7, #4]
 8000914:	2059      	movs	r0, #89	; 0x59
 8000916:	f7ff fdf4 	bl	8000502 <SD_SendCmd>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d11b      	bne.n	8000958 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000920:	21fc      	movs	r1, #252	; 0xfc
 8000922:	68b8      	ldr	r0, [r7, #8]
 8000924:	f7ff fdaa 	bl	800047c <SD_TxDataBlock>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d00a      	beq.n	8000944 <SD_disk_write+0xd0>
				buff += 512;
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000934:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	3b01      	subs	r3, #1
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d1ee      	bne.n	8000920 <SD_disk_write+0xac>
 8000942:	e000      	b.n	8000946 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000944:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000946:	21fd      	movs	r1, #253	; 0xfd
 8000948:	2000      	movs	r0, #0
 800094a:	f7ff fd97 	bl	800047c <SD_TxDataBlock>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d101      	bne.n	8000958 <SD_disk_write+0xe4>
			{
				count = 1;
 8000954:	2301      	movs	r3, #1
 8000956:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000958:	f7ff fc84 	bl	8000264 <DESELECT>
	SPI_RxByte();
 800095c:	f7ff fcc4 	bl	80002e8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	bf14      	ite	ne
 8000966:	2301      	movne	r3, #1
 8000968:	2300      	moveq	r3, #0
 800096a:	b2db      	uxtb	r3, r3
}
 800096c:	4618      	mov	r0, r3
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000000 	.word	0x20000000
 8000978:	20000056 	.word	0x20000056

0800097c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800097c:	b590      	push	{r4, r7, lr}
 800097e:	b08b      	sub	sp, #44	; 0x2c
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	603a      	str	r2, [r7, #0]
 8000986:	71fb      	strb	r3, [r7, #7]
 8000988:	460b      	mov	r3, r1
 800098a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <SD_disk_ioctl+0x1e>
 8000996:	2304      	movs	r3, #4
 8000998:	e115      	b.n	8000bc6 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80009a0:	79bb      	ldrb	r3, [r7, #6]
 80009a2:	2b05      	cmp	r3, #5
 80009a4:	d124      	bne.n	80009f0 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80009a6:	6a3b      	ldr	r3, [r7, #32]
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b02      	cmp	r3, #2
 80009ac:	d012      	beq.n	80009d4 <SD_disk_ioctl+0x58>
 80009ae:	2b02      	cmp	r3, #2
 80009b0:	dc1a      	bgt.n	80009e8 <SD_disk_ioctl+0x6c>
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d002      	beq.n	80009bc <SD_disk_ioctl+0x40>
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d006      	beq.n	80009c8 <SD_disk_ioctl+0x4c>
 80009ba:	e015      	b.n	80009e8 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80009bc:	f7ff fd1a 	bl	80003f4 <SD_PowerOff>
			res = RES_OK;
 80009c0:	2300      	movs	r3, #0
 80009c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80009c6:	e0fc      	b.n	8000bc2 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80009c8:	f7ff fcd2 	bl	8000370 <SD_PowerOn>
			res = RES_OK;
 80009cc:	2300      	movs	r3, #0
 80009ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80009d2:	e0f6      	b.n	8000bc2 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80009d4:	6a3b      	ldr	r3, [r7, #32]
 80009d6:	1c5c      	adds	r4, r3, #1
 80009d8:	f7ff fd18 	bl	800040c <SD_CheckPower>
 80009dc:	4603      	mov	r3, r0
 80009de:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80009e0:	2300      	movs	r3, #0
 80009e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80009e6:	e0ec      	b.n	8000bc2 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80009e8:	2304      	movs	r3, #4
 80009ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80009ee:	e0e8      	b.n	8000bc2 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80009f0:	4b77      	ldr	r3, [pc, #476]	; (8000bd0 <SD_disk_ioctl+0x254>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <SD_disk_ioctl+0x86>
 80009fe:	2303      	movs	r3, #3
 8000a00:	e0e1      	b.n	8000bc6 <SD_disk_ioctl+0x24a>

		SELECT();
 8000a02:	f7ff fc21 	bl	8000248 <SELECT>

		switch (ctrl)
 8000a06:	79bb      	ldrb	r3, [r7, #6]
 8000a08:	2b0d      	cmp	r3, #13
 8000a0a:	f200 80cb 	bhi.w	8000ba4 <SD_disk_ioctl+0x228>
 8000a0e:	a201      	add	r2, pc, #4	; (adr r2, 8000a14 <SD_disk_ioctl+0x98>)
 8000a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a14:	08000b0f 	.word	0x08000b0f
 8000a18:	08000a4d 	.word	0x08000a4d
 8000a1c:	08000aff 	.word	0x08000aff
 8000a20:	08000ba5 	.word	0x08000ba5
 8000a24:	08000ba5 	.word	0x08000ba5
 8000a28:	08000ba5 	.word	0x08000ba5
 8000a2c:	08000ba5 	.word	0x08000ba5
 8000a30:	08000ba5 	.word	0x08000ba5
 8000a34:	08000ba5 	.word	0x08000ba5
 8000a38:	08000ba5 	.word	0x08000ba5
 8000a3c:	08000ba5 	.word	0x08000ba5
 8000a40:	08000b21 	.word	0x08000b21
 8000a44:	08000b45 	.word	0x08000b45
 8000a48:	08000b69 	.word	0x08000b69
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	2049      	movs	r0, #73	; 0x49
 8000a50:	f7ff fd57 	bl	8000502 <SD_SendCmd>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	f040 80a8 	bne.w	8000bac <SD_disk_ioctl+0x230>
 8000a5c:	f107 030c 	add.w	r3, r7, #12
 8000a60:	2110      	movs	r1, #16
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff fcdc 	bl	8000420 <SD_RxDataBlock>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f000 809e 	beq.w	8000bac <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000a70:	7b3b      	ldrb	r3, [r7, #12]
 8000a72:	099b      	lsrs	r3, r3, #6
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d10e      	bne.n	8000a98 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000a7a:	7d7b      	ldrb	r3, [r7, #21]
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	7d3b      	ldrb	r3, [r7, #20]
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	021b      	lsls	r3, r3, #8
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	4413      	add	r3, r2
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000a8e:	8bfb      	ldrh	r3, [r7, #30]
 8000a90:	029a      	lsls	r2, r3, #10
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	e02e      	b.n	8000af6 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000a98:	7c7b      	ldrb	r3, [r7, #17]
 8000a9a:	f003 030f 	and.w	r3, r3, #15
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	7dbb      	ldrb	r3, [r7, #22]
 8000aa2:	09db      	lsrs	r3, r3, #7
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	4413      	add	r3, r2
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	7d7b      	ldrb	r3, [r7, #21]
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	f003 0306 	and.w	r3, r3, #6
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	4413      	add	r3, r2
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	3302      	adds	r3, #2
 8000abc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000ac0:	7d3b      	ldrb	r3, [r7, #20]
 8000ac2:	099b      	lsrs	r3, r3, #6
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	7cfb      	ldrb	r3, [r7, #19]
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	4413      	add	r3, r2
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	7cbb      	ldrb	r3, [r7, #18]
 8000ad6:	029b      	lsls	r3, r3, #10
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	4413      	add	r3, r2
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000ae8:	8bfa      	ldrh	r2, [r7, #30]
 8000aea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000aee:	3b09      	subs	r3, #9
 8000af0:	409a      	lsls	r2, r3
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000af6:	2300      	movs	r3, #0
 8000af8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000afc:	e056      	b.n	8000bac <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b04:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000b06:	2300      	movs	r3, #0
 8000b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000b0c:	e055      	b.n	8000bba <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000b0e:	f7ff fc15 	bl	800033c <SD_ReadyWait>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2bff      	cmp	r3, #255	; 0xff
 8000b16:	d14b      	bne.n	8000bb0 <SD_disk_ioctl+0x234>
 8000b18:	2300      	movs	r3, #0
 8000b1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000b1e:	e047      	b.n	8000bb0 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000b20:	2100      	movs	r1, #0
 8000b22:	2049      	movs	r0, #73	; 0x49
 8000b24:	f7ff fced 	bl	8000502 <SD_SendCmd>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d142      	bne.n	8000bb4 <SD_disk_ioctl+0x238>
 8000b2e:	2110      	movs	r1, #16
 8000b30:	6a38      	ldr	r0, [r7, #32]
 8000b32:	f7ff fc75 	bl	8000420 <SD_RxDataBlock>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d03b      	beq.n	8000bb4 <SD_disk_ioctl+0x238>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000b42:	e037      	b.n	8000bb4 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000b44:	2100      	movs	r1, #0
 8000b46:	204a      	movs	r0, #74	; 0x4a
 8000b48:	f7ff fcdb 	bl	8000502 <SD_SendCmd>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d132      	bne.n	8000bb8 <SD_disk_ioctl+0x23c>
 8000b52:	2110      	movs	r1, #16
 8000b54:	6a38      	ldr	r0, [r7, #32]
 8000b56:	f7ff fc63 	bl	8000420 <SD_RxDataBlock>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d02b      	beq.n	8000bb8 <SD_disk_ioctl+0x23c>
 8000b60:	2300      	movs	r3, #0
 8000b62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000b66:	e027      	b.n	8000bb8 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000b68:	2100      	movs	r1, #0
 8000b6a:	207a      	movs	r0, #122	; 0x7a
 8000b6c:	f7ff fcc9 	bl	8000502 <SD_SendCmd>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d116      	bne.n	8000ba4 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000b76:	2300      	movs	r3, #0
 8000b78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000b7c:	e00b      	b.n	8000b96 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000b7e:	6a3c      	ldr	r4, [r7, #32]
 8000b80:	1c63      	adds	r3, r4, #1
 8000b82:	623b      	str	r3, [r7, #32]
 8000b84:	f7ff fbb0 	bl	80002e8 <SPI_RxByte>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000b8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b90:	3301      	adds	r3, #1
 8000b92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000b96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b9a:	2b03      	cmp	r3, #3
 8000b9c:	d9ef      	bls.n	8000b7e <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000baa:	e006      	b.n	8000bba <SD_disk_ioctl+0x23e>
			break;
 8000bac:	bf00      	nop
 8000bae:	e004      	b.n	8000bba <SD_disk_ioctl+0x23e>
			break;
 8000bb0:	bf00      	nop
 8000bb2:	e002      	b.n	8000bba <SD_disk_ioctl+0x23e>
			break;
 8000bb4:	bf00      	nop
 8000bb6:	e000      	b.n	8000bba <SD_disk_ioctl+0x23e>
			break;
 8000bb8:	bf00      	nop
		}

		DESELECT();
 8000bba:	f7ff fb53 	bl	8000264 <DESELECT>
		SPI_RxByte();
 8000bbe:	f7ff fb93 	bl	80002e8 <SPI_RxByte>
	}

	return res;
 8000bc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	372c      	adds	r7, #44	; 0x2c
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd90      	pop	{r4, r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000000 	.word	0x20000000

08000bd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd8:	f000 fcf2 	bl	80015c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bdc:	f000 f82a 	bl	8000c34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be0:	f000 f8c8 	bl	8000d74 <MX_GPIO_Init>
  MX_FATFS_Init();
 8000be4:	f002 fde4 	bl	80037b0 <MX_FATFS_Init>
  MX_SPI1_Init();
 8000be8:	f000 f88e 	bl	8000d08 <MX_SPI1_Init>
  MX_I2C1_Init();
 8000bec:	f000 f85e 	bl	8000cac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1500);
 8000bf0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000bf4:	f000 fd46 	bl	8001684 <HAL_Delay>
  Display.configurado = VELOCIDADE;
 8000bf8:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <main+0x5c>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	701a      	strb	r2, [r3, #0]
  initDisplay(&Display);
 8000bfe:	480c      	ldr	r0, [pc, #48]	; (8000c30 <main+0x5c>)
 8000c00:	f7ff faa4 	bl	800014c <initDisplay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
    /* USER CODE END WHILE */
	  for (Display.velocidade = 0; Display.velocidade <= 120 ; Display.velocidade++ ){
 8000c04:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <main+0x5c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	705a      	strb	r2, [r3, #1]
 8000c0a:	e00b      	b.n	8000c24 <main+0x50>

		  updateDisplay(&Display);
 8000c0c:	4808      	ldr	r0, [pc, #32]	; (8000c30 <main+0x5c>)
 8000c0e:	f7ff fac9 	bl	80001a4 <updateDisplay>
		  HAL_Delay (200);
 8000c12:	20c8      	movs	r0, #200	; 0xc8
 8000c14:	f000 fd36 	bl	8001684 <HAL_Delay>
	  for (Display.velocidade = 0; Display.velocidade <= 120 ; Display.velocidade++ ){
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <main+0x5c>)
 8000c1a:	785b      	ldrb	r3, [r3, #1]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	4b03      	ldr	r3, [pc, #12]	; (8000c30 <main+0x5c>)
 8000c22:	705a      	strb	r2, [r3, #1]
 8000c24:	4b02      	ldr	r3, [pc, #8]	; (8000c30 <main+0x5c>)
 8000c26:	785b      	ldrb	r3, [r3, #1]
 8000c28:	2b78      	cmp	r3, #120	; 0x78
 8000c2a:	d9ef      	bls.n	8000c0c <main+0x38>
 8000c2c:	e7ea      	b.n	8000c04 <main+0x30>
 8000c2e:	bf00      	nop
 8000c30:	20000050 	.word	0x20000050

08000c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b090      	sub	sp, #64	; 0x40
 8000c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3a:	f107 0318 	add.w	r3, r7, #24
 8000c3e:	2228      	movs	r2, #40	; 0x28
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f002 fed2 	bl	80039ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c56:	2302      	movs	r3, #2
 8000c58:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c5e:	2310      	movs	r3, #16
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c66:	f107 0318 	add.w	r3, r7, #24
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f001 fd78 	bl	8002760 <HAL_RCC_OscConfig>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c76:	f000 f8bb 	bl	8000df0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c7a:	230f      	movs	r3, #15
 8000c7c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f001 ffe6 	bl	8002c64 <HAL_RCC_ClockConfig>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c9e:	f000 f8a7 	bl	8000df0 <Error_Handler>
  }
}
 8000ca2:	bf00      	nop
 8000ca4:	3740      	adds	r7, #64	; 0x40
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <MX_I2C1_Init+0x50>)
 8000cb2:	4a13      	ldr	r2, [pc, #76]	; (8000d00 <MX_I2C1_Init+0x54>)
 8000cb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <MX_I2C1_Init+0x50>)
 8000cb8:	4a12      	ldr	r2, [pc, #72]	; (8000d04 <MX_I2C1_Init+0x58>)
 8000cba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <MX_I2C1_Init+0x50>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <MX_I2C1_Init+0x50>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <MX_I2C1_Init+0x50>)
 8000cca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <MX_I2C1_Init+0x50>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <MX_I2C1_Init+0x50>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cdc:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <MX_I2C1_Init+0x50>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <MX_I2C1_Init+0x50>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ce8:	4804      	ldr	r0, [pc, #16]	; (8000cfc <MX_I2C1_Init+0x50>)
 8000cea:	f000 ff6f 	bl	8001bcc <HAL_I2C_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cf4:	f000 f87c 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000058 	.word	0x20000058
 8000d00:	40005400 	.word	0x40005400
 8000d04:	00061a80 	.word	0x00061a80

08000d08 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d0c:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d0e:	4a18      	ldr	r2, [pc, #96]	; (8000d70 <MX_SPI1_Init+0x68>)
 8000d10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d12:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d1a:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d38:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d40:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d4c:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d54:	220a      	movs	r2, #10
 8000d56:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d58:	4804      	ldr	r0, [pc, #16]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d5a:	f002 f8fd 	bl	8002f58 <HAL_SPI_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d64:	f000 f844 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	200000ac 	.word	0x200000ac
 8000d70:	40013000 	.word	0x40013000

08000d74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7a:	f107 0308 	add.w	r3, r7, #8
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d88:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <MX_GPIO_Init+0x74>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	4a16      	ldr	r2, [pc, #88]	; (8000de8 <MX_GPIO_Init+0x74>)
 8000d8e:	f043 0304 	orr.w	r3, r3, #4
 8000d92:	6193      	str	r3, [r2, #24]
 8000d94:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <MX_GPIO_Init+0x74>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	f003 0304 	and.w	r3, r3, #4
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <MX_GPIO_Init+0x74>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a10      	ldr	r2, [pc, #64]	; (8000de8 <MX_GPIO_Init+0x74>)
 8000da6:	f043 0308 	orr.w	r3, r3, #8
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <MX_GPIO_Init+0x74>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0308 	and.w	r3, r3, #8
 8000db4:	603b      	str	r3, [r7, #0]
 8000db6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000db8:	2201      	movs	r2, #1
 8000dba:	2110      	movs	r1, #16
 8000dbc:	480b      	ldr	r0, [pc, #44]	; (8000dec <MX_GPIO_Init+0x78>)
 8000dbe:	f000 feed 	bl	8001b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000dc2:	2310      	movs	r3, #16
 8000dc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd2:	f107 0308 	add.w	r3, r7, #8
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4804      	ldr	r0, [pc, #16]	; (8000dec <MX_GPIO_Init+0x78>)
 8000dda:	f000 fd5b 	bl	8001894 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dde:	bf00      	nop
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40010800 	.word	0x40010800

08000df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df4:	b672      	cpsid	i
}
 8000df6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <Error_Handler+0x8>
	...

08000dfc <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000e02:	f000 fa1f 	bl	8001244 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000e06:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	2178      	movs	r1, #120	; 0x78
 8000e0e:	485b      	ldr	r0, [pc, #364]	; (8000f7c <SSD1306_Init+0x180>)
 8000e10:	f001 f91e 	bl	8002050 <HAL_I2C_IsDeviceReady>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e0a9      	b.n	8000f72 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000e1e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000e22:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e24:	e002      	b.n	8000e2c <SSD1306_Init+0x30>
		p--;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d1f9      	bne.n	8000e26 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000e32:	22ae      	movs	r2, #174	; 0xae
 8000e34:	2100      	movs	r1, #0
 8000e36:	2078      	movs	r0, #120	; 0x78
 8000e38:	f000 fa7e 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000e3c:	2220      	movs	r2, #32
 8000e3e:	2100      	movs	r1, #0
 8000e40:	2078      	movs	r0, #120	; 0x78
 8000e42:	f000 fa79 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000e46:	2210      	movs	r2, #16
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2078      	movs	r0, #120	; 0x78
 8000e4c:	f000 fa74 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000e50:	22b0      	movs	r2, #176	; 0xb0
 8000e52:	2100      	movs	r1, #0
 8000e54:	2078      	movs	r0, #120	; 0x78
 8000e56:	f000 fa6f 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000e5a:	22c8      	movs	r2, #200	; 0xc8
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	2078      	movs	r0, #120	; 0x78
 8000e60:	f000 fa6a 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000e64:	2200      	movs	r2, #0
 8000e66:	2100      	movs	r1, #0
 8000e68:	2078      	movs	r0, #120	; 0x78
 8000e6a:	f000 fa65 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000e6e:	2210      	movs	r2, #16
 8000e70:	2100      	movs	r1, #0
 8000e72:	2078      	movs	r0, #120	; 0x78
 8000e74:	f000 fa60 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000e78:	2240      	movs	r2, #64	; 0x40
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	2078      	movs	r0, #120	; 0x78
 8000e7e:	f000 fa5b 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000e82:	2281      	movs	r2, #129	; 0x81
 8000e84:	2100      	movs	r1, #0
 8000e86:	2078      	movs	r0, #120	; 0x78
 8000e88:	f000 fa56 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000e8c:	22ff      	movs	r2, #255	; 0xff
 8000e8e:	2100      	movs	r1, #0
 8000e90:	2078      	movs	r0, #120	; 0x78
 8000e92:	f000 fa51 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000e96:	22a1      	movs	r2, #161	; 0xa1
 8000e98:	2100      	movs	r1, #0
 8000e9a:	2078      	movs	r0, #120	; 0x78
 8000e9c:	f000 fa4c 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000ea0:	22a6      	movs	r2, #166	; 0xa6
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	2078      	movs	r0, #120	; 0x78
 8000ea6:	f000 fa47 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000eaa:	22a8      	movs	r2, #168	; 0xa8
 8000eac:	2100      	movs	r1, #0
 8000eae:	2078      	movs	r0, #120	; 0x78
 8000eb0:	f000 fa42 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000eb4:	223f      	movs	r2, #63	; 0x3f
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	2078      	movs	r0, #120	; 0x78
 8000eba:	f000 fa3d 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000ebe:	22a4      	movs	r2, #164	; 0xa4
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	2078      	movs	r0, #120	; 0x78
 8000ec4:	f000 fa38 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000ec8:	22d3      	movs	r2, #211	; 0xd3
 8000eca:	2100      	movs	r1, #0
 8000ecc:	2078      	movs	r0, #120	; 0x78
 8000ece:	f000 fa33 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2078      	movs	r0, #120	; 0x78
 8000ed8:	f000 fa2e 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000edc:	22d5      	movs	r2, #213	; 0xd5
 8000ede:	2100      	movs	r1, #0
 8000ee0:	2078      	movs	r0, #120	; 0x78
 8000ee2:	f000 fa29 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000ee6:	22f0      	movs	r2, #240	; 0xf0
 8000ee8:	2100      	movs	r1, #0
 8000eea:	2078      	movs	r0, #120	; 0x78
 8000eec:	f000 fa24 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000ef0:	22d9      	movs	r2, #217	; 0xd9
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	2078      	movs	r0, #120	; 0x78
 8000ef6:	f000 fa1f 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000efa:	2222      	movs	r2, #34	; 0x22
 8000efc:	2100      	movs	r1, #0
 8000efe:	2078      	movs	r0, #120	; 0x78
 8000f00:	f000 fa1a 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000f04:	22da      	movs	r2, #218	; 0xda
 8000f06:	2100      	movs	r1, #0
 8000f08:	2078      	movs	r0, #120	; 0x78
 8000f0a:	f000 fa15 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000f0e:	2212      	movs	r2, #18
 8000f10:	2100      	movs	r1, #0
 8000f12:	2078      	movs	r0, #120	; 0x78
 8000f14:	f000 fa10 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000f18:	22db      	movs	r2, #219	; 0xdb
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	2078      	movs	r0, #120	; 0x78
 8000f1e:	f000 fa0b 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000f22:	2220      	movs	r2, #32
 8000f24:	2100      	movs	r1, #0
 8000f26:	2078      	movs	r0, #120	; 0x78
 8000f28:	f000 fa06 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000f2c:	228d      	movs	r2, #141	; 0x8d
 8000f2e:	2100      	movs	r1, #0
 8000f30:	2078      	movs	r0, #120	; 0x78
 8000f32:	f000 fa01 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000f36:	2214      	movs	r2, #20
 8000f38:	2100      	movs	r1, #0
 8000f3a:	2078      	movs	r0, #120	; 0x78
 8000f3c:	f000 f9fc 	bl	8001338 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000f40:	22af      	movs	r2, #175	; 0xaf
 8000f42:	2100      	movs	r1, #0
 8000f44:	2078      	movs	r0, #120	; 0x78
 8000f46:	f000 f9f7 	bl	8001338 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000f4a:	222e      	movs	r2, #46	; 0x2e
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	2078      	movs	r0, #120	; 0x78
 8000f50:	f000 f9f2 	bl	8001338 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000f54:	2000      	movs	r0, #0
 8000f56:	f000 f843 	bl	8000fe0 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000f5a:	f000 f813 	bl	8000f84 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <SSD1306_Init+0x184>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <SSD1306_Init+0x184>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000f6a:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <SSD1306_Init+0x184>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000f70:	2301      	movs	r3, #1
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000058 	.word	0x20000058
 8000f80:	20000504 	.word	0x20000504

08000f84 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	e01d      	b.n	8000fcc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	3b50      	subs	r3, #80	; 0x50
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	461a      	mov	r2, r3
 8000f98:	2100      	movs	r1, #0
 8000f9a:	2078      	movs	r0, #120	; 0x78
 8000f9c:	f000 f9cc 	bl	8001338 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	2078      	movs	r0, #120	; 0x78
 8000fa6:	f000 f9c7 	bl	8001338 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000faa:	2210      	movs	r2, #16
 8000fac:	2100      	movs	r1, #0
 8000fae:	2078      	movs	r0, #120	; 0x78
 8000fb0:	f000 f9c2 	bl	8001338 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	01db      	lsls	r3, r3, #7
 8000fb8:	4a08      	ldr	r2, [pc, #32]	; (8000fdc <SSD1306_UpdateScreen+0x58>)
 8000fba:	441a      	add	r2, r3
 8000fbc:	2380      	movs	r3, #128	; 0x80
 8000fbe:	2140      	movs	r1, #64	; 0x40
 8000fc0:	2078      	movs	r0, #120	; 0x78
 8000fc2:	f000 f953 	bl	800126c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	71fb      	strb	r3, [r7, #7]
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	2b07      	cmp	r3, #7
 8000fd0:	d9de      	bls.n	8000f90 <SSD1306_UpdateScreen+0xc>
	}
}
 8000fd2:	bf00      	nop
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000104 	.word	0x20000104

08000fe0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d101      	bne.n	8000ff4 <SSD1306_Fill+0x14>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	e000      	b.n	8000ff6 <SSD1306_Fill+0x16>
 8000ff4:	23ff      	movs	r3, #255	; 0xff
 8000ff6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4803      	ldr	r0, [pc, #12]	; (800100c <SSD1306_Fill+0x2c>)
 8000ffe:	f002 fcf5 	bl	80039ec <memset>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000104 	.word	0x20000104

08001010 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	80fb      	strh	r3, [r7, #6]
 800101a:	460b      	mov	r3, r1
 800101c:	80bb      	strh	r3, [r7, #4]
 800101e:	4613      	mov	r3, r2
 8001020:	70fb      	strb	r3, [r7, #3]
	if (
 8001022:	88fb      	ldrh	r3, [r7, #6]
 8001024:	2b7f      	cmp	r3, #127	; 0x7f
 8001026:	d848      	bhi.n	80010ba <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001028:	88bb      	ldrh	r3, [r7, #4]
 800102a:	2b3f      	cmp	r3, #63	; 0x3f
 800102c:	d845      	bhi.n	80010ba <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800102e:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <SSD1306_DrawPixel+0xb4>)
 8001030:	791b      	ldrb	r3, [r3, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d006      	beq.n	8001044 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001036:	78fb      	ldrb	r3, [r7, #3]
 8001038:	2b00      	cmp	r3, #0
 800103a:	bf0c      	ite	eq
 800103c:	2301      	moveq	r3, #1
 800103e:	2300      	movne	r3, #0
 8001040:	b2db      	uxtb	r3, r3
 8001042:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001044:	78fb      	ldrb	r3, [r7, #3]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d11a      	bne.n	8001080 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800104a:	88fa      	ldrh	r2, [r7, #6]
 800104c:	88bb      	ldrh	r3, [r7, #4]
 800104e:	08db      	lsrs	r3, r3, #3
 8001050:	b298      	uxth	r0, r3
 8001052:	4603      	mov	r3, r0
 8001054:	01db      	lsls	r3, r3, #7
 8001056:	4413      	add	r3, r2
 8001058:	4a1b      	ldr	r2, [pc, #108]	; (80010c8 <SSD1306_DrawPixel+0xb8>)
 800105a:	5cd3      	ldrb	r3, [r2, r3]
 800105c:	b25a      	sxtb	r2, r3
 800105e:	88bb      	ldrh	r3, [r7, #4]
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	2101      	movs	r1, #1
 8001066:	fa01 f303 	lsl.w	r3, r1, r3
 800106a:	b25b      	sxtb	r3, r3
 800106c:	4313      	orrs	r3, r2
 800106e:	b259      	sxtb	r1, r3
 8001070:	88fa      	ldrh	r2, [r7, #6]
 8001072:	4603      	mov	r3, r0
 8001074:	01db      	lsls	r3, r3, #7
 8001076:	4413      	add	r3, r2
 8001078:	b2c9      	uxtb	r1, r1
 800107a:	4a13      	ldr	r2, [pc, #76]	; (80010c8 <SSD1306_DrawPixel+0xb8>)
 800107c:	54d1      	strb	r1, [r2, r3]
 800107e:	e01d      	b.n	80010bc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001080:	88fa      	ldrh	r2, [r7, #6]
 8001082:	88bb      	ldrh	r3, [r7, #4]
 8001084:	08db      	lsrs	r3, r3, #3
 8001086:	b298      	uxth	r0, r3
 8001088:	4603      	mov	r3, r0
 800108a:	01db      	lsls	r3, r3, #7
 800108c:	4413      	add	r3, r2
 800108e:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <SSD1306_DrawPixel+0xb8>)
 8001090:	5cd3      	ldrb	r3, [r2, r3]
 8001092:	b25a      	sxtb	r2, r3
 8001094:	88bb      	ldrh	r3, [r7, #4]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	2101      	movs	r1, #1
 800109c:	fa01 f303 	lsl.w	r3, r1, r3
 80010a0:	b25b      	sxtb	r3, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	b25b      	sxtb	r3, r3
 80010a6:	4013      	ands	r3, r2
 80010a8:	b259      	sxtb	r1, r3
 80010aa:	88fa      	ldrh	r2, [r7, #6]
 80010ac:	4603      	mov	r3, r0
 80010ae:	01db      	lsls	r3, r3, #7
 80010b0:	4413      	add	r3, r2
 80010b2:	b2c9      	uxtb	r1, r1
 80010b4:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <SSD1306_DrawPixel+0xb8>)
 80010b6:	54d1      	strb	r1, [r2, r3]
 80010b8:	e000      	b.n	80010bc <SSD1306_DrawPixel+0xac>
		return;
 80010ba:	bf00      	nop
	}
}
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr
 80010c4:	20000504 	.word	0x20000504
 80010c8:	20000104 	.word	0x20000104

080010cc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	460a      	mov	r2, r1
 80010d6:	80fb      	strh	r3, [r7, #6]
 80010d8:	4613      	mov	r3, r2
 80010da:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80010dc:	4a05      	ldr	r2, [pc, #20]	; (80010f4 <SSD1306_GotoXY+0x28>)
 80010de:	88fb      	ldrh	r3, [r7, #6]
 80010e0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80010e2:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <SSD1306_GotoXY+0x28>)
 80010e4:	88bb      	ldrh	r3, [r7, #4]
 80010e6:	8053      	strh	r3, [r2, #2]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	20000504 	.word	0x20000504

080010f8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	6039      	str	r1, [r7, #0]
 8001102:	71fb      	strb	r3, [r7, #7]
 8001104:	4613      	mov	r3, r2
 8001106:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001108:	4b3a      	ldr	r3, [pc, #232]	; (80011f4 <SSD1306_Putc+0xfc>)
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	461a      	mov	r2, r3
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	4413      	add	r3, r2
	if (
 8001114:	2b7f      	cmp	r3, #127	; 0x7f
 8001116:	dc07      	bgt.n	8001128 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001118:	4b36      	ldr	r3, [pc, #216]	; (80011f4 <SSD1306_Putc+0xfc>)
 800111a:	885b      	ldrh	r3, [r3, #2]
 800111c:	461a      	mov	r2, r3
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	785b      	ldrb	r3, [r3, #1]
 8001122:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001124:	2b3f      	cmp	r3, #63	; 0x3f
 8001126:	dd01      	ble.n	800112c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001128:	2300      	movs	r3, #0
 800112a:	e05e      	b.n	80011ea <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	e04b      	b.n	80011ca <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685a      	ldr	r2, [r3, #4]
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	3b20      	subs	r3, #32
 800113a:	6839      	ldr	r1, [r7, #0]
 800113c:	7849      	ldrb	r1, [r1, #1]
 800113e:	fb01 f303 	mul.w	r3, r1, r3
 8001142:	4619      	mov	r1, r3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	440b      	add	r3, r1
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	4413      	add	r3, r2
 800114c:	881b      	ldrh	r3, [r3, #0]
 800114e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	e030      	b.n	80011b8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d010      	beq.n	8001188 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001166:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <SSD1306_Putc+0xfc>)
 8001168:	881a      	ldrh	r2, [r3, #0]
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	b29b      	uxth	r3, r3
 800116e:	4413      	add	r3, r2
 8001170:	b298      	uxth	r0, r3
 8001172:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <SSD1306_Putc+0xfc>)
 8001174:	885a      	ldrh	r2, [r3, #2]
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	b29b      	uxth	r3, r3
 800117a:	4413      	add	r3, r2
 800117c:	b29b      	uxth	r3, r3
 800117e:	79ba      	ldrb	r2, [r7, #6]
 8001180:	4619      	mov	r1, r3
 8001182:	f7ff ff45 	bl	8001010 <SSD1306_DrawPixel>
 8001186:	e014      	b.n	80011b2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001188:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <SSD1306_Putc+0xfc>)
 800118a:	881a      	ldrh	r2, [r3, #0]
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	b29b      	uxth	r3, r3
 8001190:	4413      	add	r3, r2
 8001192:	b298      	uxth	r0, r3
 8001194:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <SSD1306_Putc+0xfc>)
 8001196:	885a      	ldrh	r2, [r3, #2]
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	b29b      	uxth	r3, r3
 800119c:	4413      	add	r3, r2
 800119e:	b299      	uxth	r1, r3
 80011a0:	79bb      	ldrb	r3, [r7, #6]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	bf0c      	ite	eq
 80011a6:	2301      	moveq	r3, #1
 80011a8:	2300      	movne	r3, #0
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	461a      	mov	r2, r3
 80011ae:	f7ff ff2f 	bl	8001010 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	3301      	adds	r3, #1
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d3c8      	bcc.n	8001156 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	3301      	adds	r3, #1
 80011c8:	617b      	str	r3, [r7, #20]
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	785b      	ldrb	r3, [r3, #1]
 80011ce:	461a      	mov	r2, r3
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d3ad      	bcc.n	8001132 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80011d6:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <SSD1306_Putc+0xfc>)
 80011d8:	881a      	ldrh	r2, [r3, #0]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	4413      	add	r3, r2
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <SSD1306_Putc+0xfc>)
 80011e6:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80011e8:	79fb      	ldrb	r3, [r7, #7]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000504 	.word	0x20000504

080011f8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	4613      	mov	r3, r2
 8001204:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001206:	e012      	b.n	800122e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	79fa      	ldrb	r2, [r7, #7]
 800120e:	68b9      	ldr	r1, [r7, #8]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff71 	bl	80010f8 <SSD1306_Putc>
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	429a      	cmp	r2, r3
 8001220:	d002      	beq.n	8001228 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	e008      	b.n	800123a <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	3301      	adds	r3, #1
 800122c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1e8      	bne.n	8001208 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	781b      	ldrb	r3, [r3, #0]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800124a:	4b07      	ldr	r3, [pc, #28]	; (8001268 <ssd1306_I2C_Init+0x24>)
 800124c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800124e:	e002      	b.n	8001256 <ssd1306_I2C_Init+0x12>
		p--;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1f9      	bne.n	8001250 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	0003d090 	.word	0x0003d090

0800126c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b0c7      	sub	sp, #284	; 0x11c
 8001270:	af02      	add	r7, sp, #8
 8001272:	4604      	mov	r4, r0
 8001274:	4608      	mov	r0, r1
 8001276:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800127a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800127e:	600a      	str	r2, [r1, #0]
 8001280:	4619      	mov	r1, r3
 8001282:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001286:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800128a:	4622      	mov	r2, r4
 800128c:	701a      	strb	r2, [r3, #0]
 800128e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001292:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001296:	4602      	mov	r2, r0
 8001298:	701a      	strb	r2, [r3, #0]
 800129a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800129e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80012a2:	460a      	mov	r2, r1
 80012a4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80012a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80012aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80012ae:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80012b2:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80012b6:	7812      	ldrb	r2, [r2, #0]
 80012b8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80012ba:	2300      	movs	r3, #0
 80012bc:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80012c0:	e015      	b.n	80012ee <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80012c2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80012c6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80012ca:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80012ce:	6812      	ldr	r2, [r2, #0]
 80012d0:	441a      	add	r2, r3
 80012d2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80012d6:	3301      	adds	r3, #1
 80012d8:	7811      	ldrb	r1, [r2, #0]
 80012da:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80012de:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80012e2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80012e4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80012e8:	3301      	adds	r3, #1
 80012ea:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80012ee:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80012f8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80012fc:	8812      	ldrh	r2, [r2, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d8df      	bhi.n	80012c2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001302:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001306:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	b299      	uxth	r1, r3
 800130e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001312:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	3301      	adds	r3, #1
 800131a:	b29b      	uxth	r3, r3
 800131c:	f107 020c 	add.w	r2, r7, #12
 8001320:	200a      	movs	r0, #10
 8001322:	9000      	str	r0, [sp, #0]
 8001324:	4803      	ldr	r0, [pc, #12]	; (8001334 <ssd1306_I2C_WriteMulti+0xc8>)
 8001326:	f000 fd95 	bl	8001e54 <HAL_I2C_Master_Transmit>
}
 800132a:	bf00      	nop
 800132c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001330:	46bd      	mov	sp, r7
 8001332:	bd90      	pop	{r4, r7, pc}
 8001334:	20000058 	.word	0x20000058

08001338 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af02      	add	r7, sp, #8
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
 8001342:	460b      	mov	r3, r1
 8001344:	71bb      	strb	r3, [r7, #6]
 8001346:	4613      	mov	r3, r2
 8001348:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800134a:	79bb      	ldrb	r3, [r7, #6]
 800134c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800134e:	797b      	ldrb	r3, [r7, #5]
 8001350:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	b299      	uxth	r1, r3
 8001356:	f107 020c 	add.w	r2, r7, #12
 800135a:	230a      	movs	r3, #10
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	2302      	movs	r3, #2
 8001360:	4803      	ldr	r0, [pc, #12]	; (8001370 <ssd1306_I2C_Write+0x38>)
 8001362:	f000 fd77 	bl	8001e54 <HAL_I2C_Master_Transmit>
}
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000058 	.word	0x20000058

08001374 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <HAL_MspInit+0x5c>)
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	4a14      	ldr	r2, [pc, #80]	; (80013d0 <HAL_MspInit+0x5c>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6193      	str	r3, [r2, #24]
 8001386:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_MspInit+0x5c>)
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001392:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <HAL_MspInit+0x5c>)
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	4a0e      	ldr	r2, [pc, #56]	; (80013d0 <HAL_MspInit+0x5c>)
 8001398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800139c:	61d3      	str	r3, [r2, #28]
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <HAL_MspInit+0x5c>)
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013aa:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <HAL_MspInit+0x60>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <HAL_MspInit+0x60>)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c6:	bf00      	nop
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40010000 	.word	0x40010000

080013d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 0310 	add.w	r3, r7, #16
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a15      	ldr	r2, [pc, #84]	; (8001448 <HAL_I2C_MspInit+0x70>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d123      	bne.n	8001440 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f8:	4b14      	ldr	r3, [pc, #80]	; (800144c <HAL_I2C_MspInit+0x74>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	4a13      	ldr	r2, [pc, #76]	; (800144c <HAL_I2C_MspInit+0x74>)
 80013fe:	f043 0308 	orr.w	r3, r3, #8
 8001402:	6193      	str	r3, [r2, #24]
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <HAL_I2C_MspInit+0x74>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	f003 0308 	and.w	r3, r3, #8
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001410:	23c0      	movs	r3, #192	; 0xc0
 8001412:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001414:	2312      	movs	r3, #18
 8001416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001418:	2303      	movs	r3, #3
 800141a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141c:	f107 0310 	add.w	r3, r7, #16
 8001420:	4619      	mov	r1, r3
 8001422:	480b      	ldr	r0, [pc, #44]	; (8001450 <HAL_I2C_MspInit+0x78>)
 8001424:	f000 fa36 	bl	8001894 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001428:	4b08      	ldr	r3, [pc, #32]	; (800144c <HAL_I2C_MspInit+0x74>)
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	4a07      	ldr	r2, [pc, #28]	; (800144c <HAL_I2C_MspInit+0x74>)
 800142e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001432:	61d3      	str	r3, [r2, #28]
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <HAL_I2C_MspInit+0x74>)
 8001436:	69db      	ldr	r3, [r3, #28]
 8001438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001440:	bf00      	nop
 8001442:	3720      	adds	r7, #32
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40005400 	.word	0x40005400
 800144c:	40021000 	.word	0x40021000
 8001450:	40010c00 	.word	0x40010c00

08001454 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 0310 	add.w	r3, r7, #16
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a1b      	ldr	r2, [pc, #108]	; (80014dc <HAL_SPI_MspInit+0x88>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d12f      	bne.n	80014d4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001474:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <HAL_SPI_MspInit+0x8c>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	4a19      	ldr	r2, [pc, #100]	; (80014e0 <HAL_SPI_MspInit+0x8c>)
 800147a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800147e:	6193      	str	r3, [r2, #24]
 8001480:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <HAL_SPI_MspInit+0x8c>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148c:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <HAL_SPI_MspInit+0x8c>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	4a13      	ldr	r2, [pc, #76]	; (80014e0 <HAL_SPI_MspInit+0x8c>)
 8001492:	f043 0304 	orr.w	r3, r3, #4
 8001496:	6193      	str	r3, [r2, #24]
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <HAL_SPI_MspInit+0x8c>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80014a4:	23a0      	movs	r3, #160	; 0xa0
 80014a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ac:	2303      	movs	r3, #3
 80014ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b0:	f107 0310 	add.w	r3, r7, #16
 80014b4:	4619      	mov	r1, r3
 80014b6:	480b      	ldr	r0, [pc, #44]	; (80014e4 <HAL_SPI_MspInit+0x90>)
 80014b8:	f000 f9ec 	bl	8001894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014bc:	2340      	movs	r3, #64	; 0x40
 80014be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c8:	f107 0310 	add.w	r3, r7, #16
 80014cc:	4619      	mov	r1, r3
 80014ce:	4805      	ldr	r0, [pc, #20]	; (80014e4 <HAL_SPI_MspInit+0x90>)
 80014d0:	f000 f9e0 	bl	8001894 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014d4:	bf00      	nop
 80014d6:	3720      	adds	r7, #32
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40013000 	.word	0x40013000
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40010800 	.word	0x40010800

080014e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014ec:	e7fe      	b.n	80014ec <NMI_Handler+0x4>

080014ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f2:	e7fe      	b.n	80014f2 <HardFault_Handler+0x4>

080014f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <MemManage_Handler+0x4>

080014fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014fe:	e7fe      	b.n	80014fe <BusFault_Handler+0x4>

08001500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <UsageFault_Handler+0x4>

08001506 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr

08001512 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr

0800151e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr
	...

0800152c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <SysTick_Handler+0x34>)
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d005      	beq.n	8001544 <SysTick_Handler+0x18>
		Timer1--;
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <SysTick_Handler+0x34>)
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	3b01      	subs	r3, #1
 800153e:	b29a      	uxth	r2, r3
 8001540:	4b07      	ldr	r3, [pc, #28]	; (8001560 <SysTick_Handler+0x34>)
 8001542:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8001544:	4b07      	ldr	r3, [pc, #28]	; (8001564 <SysTick_Handler+0x38>)
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <SysTick_Handler+0x2c>
		Timer2--;
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <SysTick_Handler+0x38>)
 800154e:	881b      	ldrh	r3, [r3, #0]
 8001550:	3b01      	subs	r3, #1
 8001552:	b29a      	uxth	r2, r3
 8001554:	4b03      	ldr	r3, [pc, #12]	; (8001564 <SysTick_Handler+0x38>)
 8001556:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001558:	f000 f878 	bl	800164c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000052 	.word	0x20000052
 8001564:	20000054 	.word	0x20000054

08001568 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr

08001574 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001574:	f7ff fff8 	bl	8001568 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001578:	480b      	ldr	r0, [pc, #44]	; (80015a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800157a:	490c      	ldr	r1, [pc, #48]	; (80015ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800157c:	4a0c      	ldr	r2, [pc, #48]	; (80015b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800157e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001580:	e002      	b.n	8001588 <LoopCopyDataInit>

08001582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001586:	3304      	adds	r3, #4

08001588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800158a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800158c:	d3f9      	bcc.n	8001582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158e:	4a09      	ldr	r2, [pc, #36]	; (80015b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001590:	4c09      	ldr	r4, [pc, #36]	; (80015b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001594:	e001      	b.n	800159a <LoopFillZerobss>

08001596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001598:	3204      	adds	r2, #4

0800159a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800159a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800159c:	d3fb      	bcc.n	8001596 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800159e:	f002 fa2d 	bl	80039fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015a2:	f7ff fb17 	bl	8000bd4 <main>
  bx lr
 80015a6:	4770      	bx	lr
  ldr r0, =_sdata
 80015a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015ac:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 80015b0:	08005b70 	.word	0x08005b70
  ldr r2, =_sbss
 80015b4:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 80015b8:	20000524 	.word	0x20000524

080015bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015bc:	e7fe      	b.n	80015bc <ADC1_2_IRQHandler>
	...

080015c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <HAL_Init+0x28>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a07      	ldr	r2, [pc, #28]	; (80015e8 <HAL_Init+0x28>)
 80015ca:	f043 0310 	orr.w	r3, r3, #16
 80015ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d0:	2003      	movs	r0, #3
 80015d2:	f000 f92b 	bl	800182c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015d6:	200f      	movs	r0, #15
 80015d8:	f000 f808 	bl	80015ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015dc:	f7ff feca 	bl	8001374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40022000 	.word	0x40022000

080015ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_InitTick+0x54>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <HAL_InitTick+0x58>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	4619      	mov	r1, r3
 80015fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001602:	fbb3 f3f1 	udiv	r3, r3, r1
 8001606:	fbb2 f3f3 	udiv	r3, r2, r3
 800160a:	4618      	mov	r0, r3
 800160c:	f000 f935 	bl	800187a <HAL_SYSTICK_Config>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e00e      	b.n	8001638 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b0f      	cmp	r3, #15
 800161e:	d80a      	bhi.n	8001636 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001620:	2200      	movs	r2, #0
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	f04f 30ff 	mov.w	r0, #4294967295
 8001628:	f000 f90b 	bl	8001842 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800162c:	4a06      	ldr	r2, [pc, #24]	; (8001648 <HAL_InitTick+0x5c>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001632:	2300      	movs	r3, #0
 8001634:	e000      	b.n	8001638 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
}
 8001638:	4618      	mov	r0, r3
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000014 	.word	0x20000014
 8001644:	2000001c 	.word	0x2000001c
 8001648:	20000018 	.word	0x20000018

0800164c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001650:	4b05      	ldr	r3, [pc, #20]	; (8001668 <HAL_IncTick+0x1c>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	4b05      	ldr	r3, [pc, #20]	; (800166c <HAL_IncTick+0x20>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4413      	add	r3, r2
 800165c:	4a03      	ldr	r2, [pc, #12]	; (800166c <HAL_IncTick+0x20>)
 800165e:	6013      	str	r3, [r2, #0]
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	2000001c 	.word	0x2000001c
 800166c:	2000050c 	.word	0x2000050c

08001670 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return uwTick;
 8001674:	4b02      	ldr	r3, [pc, #8]	; (8001680 <HAL_GetTick+0x10>)
 8001676:	681b      	ldr	r3, [r3, #0]
}
 8001678:	4618      	mov	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr
 8001680:	2000050c 	.word	0x2000050c

08001684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800168c:	f7ff fff0 	bl	8001670 <HAL_GetTick>
 8001690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800169c:	d005      	beq.n	80016aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800169e:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <HAL_Delay+0x44>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4413      	add	r3, r2
 80016a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016aa:	bf00      	nop
 80016ac:	f7ff ffe0 	bl	8001670 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d8f7      	bhi.n	80016ac <HAL_Delay+0x28>
  {
  }
}
 80016bc:	bf00      	nop
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	2000001c 	.word	0x2000001c

080016cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <__NVIC_SetPriorityGrouping+0x44>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e8:	4013      	ands	r3, r2
 80016ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016fe:	4a04      	ldr	r2, [pc, #16]	; (8001710 <__NVIC_SetPriorityGrouping+0x44>)
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	60d3      	str	r3, [r2, #12]
}
 8001704:	bf00      	nop
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001718:	4b04      	ldr	r3, [pc, #16]	; (800172c <__NVIC_GetPriorityGrouping+0x18>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	0a1b      	lsrs	r3, r3, #8
 800171e:	f003 0307 	and.w	r3, r3, #7
}
 8001722:	4618      	mov	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	6039      	str	r1, [r7, #0]
 800173a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800173c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001740:	2b00      	cmp	r3, #0
 8001742:	db0a      	blt.n	800175a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	b2da      	uxtb	r2, r3
 8001748:	490c      	ldr	r1, [pc, #48]	; (800177c <__NVIC_SetPriority+0x4c>)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	0112      	lsls	r2, r2, #4
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	440b      	add	r3, r1
 8001754:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001758:	e00a      	b.n	8001770 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	b2da      	uxtb	r2, r3
 800175e:	4908      	ldr	r1, [pc, #32]	; (8001780 <__NVIC_SetPriority+0x50>)
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	f003 030f 	and.w	r3, r3, #15
 8001766:	3b04      	subs	r3, #4
 8001768:	0112      	lsls	r2, r2, #4
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	440b      	add	r3, r1
 800176e:	761a      	strb	r2, [r3, #24]
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000e100 	.word	0xe000e100
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001784:	b480      	push	{r7}
 8001786:	b089      	sub	sp, #36	; 0x24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f1c3 0307 	rsb	r3, r3, #7
 800179e:	2b04      	cmp	r3, #4
 80017a0:	bf28      	it	cs
 80017a2:	2304      	movcs	r3, #4
 80017a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3304      	adds	r3, #4
 80017aa:	2b06      	cmp	r3, #6
 80017ac:	d902      	bls.n	80017b4 <NVIC_EncodePriority+0x30>
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3b03      	subs	r3, #3
 80017b2:	e000      	b.n	80017b6 <NVIC_EncodePriority+0x32>
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b8:	f04f 32ff 	mov.w	r2, #4294967295
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	43da      	mvns	r2, r3
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	401a      	ands	r2, r3
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017cc:	f04f 31ff 	mov.w	r1, #4294967295
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	fa01 f303 	lsl.w	r3, r1, r3
 80017d6:	43d9      	mvns	r1, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017dc:	4313      	orrs	r3, r2
         );
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3724      	adds	r7, #36	; 0x24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr

080017e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017f8:	d301      	bcc.n	80017fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017fa:	2301      	movs	r3, #1
 80017fc:	e00f      	b.n	800181e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017fe:	4a0a      	ldr	r2, [pc, #40]	; (8001828 <SysTick_Config+0x40>)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3b01      	subs	r3, #1
 8001804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001806:	210f      	movs	r1, #15
 8001808:	f04f 30ff 	mov.w	r0, #4294967295
 800180c:	f7ff ff90 	bl	8001730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001810:	4b05      	ldr	r3, [pc, #20]	; (8001828 <SysTick_Config+0x40>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001816:	4b04      	ldr	r3, [pc, #16]	; (8001828 <SysTick_Config+0x40>)
 8001818:	2207      	movs	r2, #7
 800181a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	e000e010 	.word	0xe000e010

0800182c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff ff49 	bl	80016cc <__NVIC_SetPriorityGrouping>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001842:	b580      	push	{r7, lr}
 8001844:	b086      	sub	sp, #24
 8001846:	af00      	add	r7, sp, #0
 8001848:	4603      	mov	r3, r0
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
 800184e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001854:	f7ff ff5e 	bl	8001714 <__NVIC_GetPriorityGrouping>
 8001858:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	68b9      	ldr	r1, [r7, #8]
 800185e:	6978      	ldr	r0, [r7, #20]
 8001860:	f7ff ff90 	bl	8001784 <NVIC_EncodePriority>
 8001864:	4602      	mov	r2, r0
 8001866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186a:	4611      	mov	r1, r2
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff5f 	bl	8001730 <__NVIC_SetPriority>
}
 8001872:	bf00      	nop
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff ffb0 	bl	80017e8 <SysTick_Config>
 8001888:	4603      	mov	r3, r0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001894:	b480      	push	{r7}
 8001896:	b08b      	sub	sp, #44	; 0x2c
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800189e:	2300      	movs	r3, #0
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018a2:	2300      	movs	r3, #0
 80018a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018a6:	e169      	b.n	8001b7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018a8:	2201      	movs	r2, #1
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	f040 8158 	bne.w	8001b76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	4a9a      	ldr	r2, [pc, #616]	; (8001b34 <HAL_GPIO_Init+0x2a0>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d05e      	beq.n	800198e <HAL_GPIO_Init+0xfa>
 80018d0:	4a98      	ldr	r2, [pc, #608]	; (8001b34 <HAL_GPIO_Init+0x2a0>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d875      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 80018d6:	4a98      	ldr	r2, [pc, #608]	; (8001b38 <HAL_GPIO_Init+0x2a4>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d058      	beq.n	800198e <HAL_GPIO_Init+0xfa>
 80018dc:	4a96      	ldr	r2, [pc, #600]	; (8001b38 <HAL_GPIO_Init+0x2a4>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d86f      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 80018e2:	4a96      	ldr	r2, [pc, #600]	; (8001b3c <HAL_GPIO_Init+0x2a8>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d052      	beq.n	800198e <HAL_GPIO_Init+0xfa>
 80018e8:	4a94      	ldr	r2, [pc, #592]	; (8001b3c <HAL_GPIO_Init+0x2a8>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d869      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 80018ee:	4a94      	ldr	r2, [pc, #592]	; (8001b40 <HAL_GPIO_Init+0x2ac>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d04c      	beq.n	800198e <HAL_GPIO_Init+0xfa>
 80018f4:	4a92      	ldr	r2, [pc, #584]	; (8001b40 <HAL_GPIO_Init+0x2ac>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d863      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 80018fa:	4a92      	ldr	r2, [pc, #584]	; (8001b44 <HAL_GPIO_Init+0x2b0>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d046      	beq.n	800198e <HAL_GPIO_Init+0xfa>
 8001900:	4a90      	ldr	r2, [pc, #576]	; (8001b44 <HAL_GPIO_Init+0x2b0>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d85d      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 8001906:	2b12      	cmp	r3, #18
 8001908:	d82a      	bhi.n	8001960 <HAL_GPIO_Init+0xcc>
 800190a:	2b12      	cmp	r3, #18
 800190c:	d859      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 800190e:	a201      	add	r2, pc, #4	; (adr r2, 8001914 <HAL_GPIO_Init+0x80>)
 8001910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001914:	0800198f 	.word	0x0800198f
 8001918:	08001969 	.word	0x08001969
 800191c:	0800197b 	.word	0x0800197b
 8001920:	080019bd 	.word	0x080019bd
 8001924:	080019c3 	.word	0x080019c3
 8001928:	080019c3 	.word	0x080019c3
 800192c:	080019c3 	.word	0x080019c3
 8001930:	080019c3 	.word	0x080019c3
 8001934:	080019c3 	.word	0x080019c3
 8001938:	080019c3 	.word	0x080019c3
 800193c:	080019c3 	.word	0x080019c3
 8001940:	080019c3 	.word	0x080019c3
 8001944:	080019c3 	.word	0x080019c3
 8001948:	080019c3 	.word	0x080019c3
 800194c:	080019c3 	.word	0x080019c3
 8001950:	080019c3 	.word	0x080019c3
 8001954:	080019c3 	.word	0x080019c3
 8001958:	08001971 	.word	0x08001971
 800195c:	08001985 	.word	0x08001985
 8001960:	4a79      	ldr	r2, [pc, #484]	; (8001b48 <HAL_GPIO_Init+0x2b4>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d013      	beq.n	800198e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001966:	e02c      	b.n	80019c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	623b      	str	r3, [r7, #32]
          break;
 800196e:	e029      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	3304      	adds	r3, #4
 8001976:	623b      	str	r3, [r7, #32]
          break;
 8001978:	e024      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	3308      	adds	r3, #8
 8001980:	623b      	str	r3, [r7, #32]
          break;
 8001982:	e01f      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	330c      	adds	r3, #12
 800198a:	623b      	str	r3, [r7, #32]
          break;
 800198c:	e01a      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d102      	bne.n	800199c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001996:	2304      	movs	r3, #4
 8001998:	623b      	str	r3, [r7, #32]
          break;
 800199a:	e013      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d105      	bne.n	80019b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019a4:	2308      	movs	r3, #8
 80019a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	611a      	str	r2, [r3, #16]
          break;
 80019ae:	e009      	b.n	80019c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019b0:	2308      	movs	r3, #8
 80019b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69fa      	ldr	r2, [r7, #28]
 80019b8:	615a      	str	r2, [r3, #20]
          break;
 80019ba:	e003      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019bc:	2300      	movs	r3, #0
 80019be:	623b      	str	r3, [r7, #32]
          break;
 80019c0:	e000      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          break;
 80019c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	2bff      	cmp	r3, #255	; 0xff
 80019c8:	d801      	bhi.n	80019ce <HAL_GPIO_Init+0x13a>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	e001      	b.n	80019d2 <HAL_GPIO_Init+0x13e>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3304      	adds	r3, #4
 80019d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	2bff      	cmp	r3, #255	; 0xff
 80019d8:	d802      	bhi.n	80019e0 <HAL_GPIO_Init+0x14c>
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	e002      	b.n	80019e6 <HAL_GPIO_Init+0x152>
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	3b08      	subs	r3, #8
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	210f      	movs	r1, #15
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	fa01 f303 	lsl.w	r3, r1, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	401a      	ands	r2, r3
 80019f8:	6a39      	ldr	r1, [r7, #32]
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001a00:	431a      	orrs	r2, r3
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 80b1 	beq.w	8001b76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a14:	4b4d      	ldr	r3, [pc, #308]	; (8001b4c <HAL_GPIO_Init+0x2b8>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	4a4c      	ldr	r2, [pc, #304]	; (8001b4c <HAL_GPIO_Init+0x2b8>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	6193      	str	r3, [r2, #24]
 8001a20:	4b4a      	ldr	r3, [pc, #296]	; (8001b4c <HAL_GPIO_Init+0x2b8>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a2c:	4a48      	ldr	r2, [pc, #288]	; (8001b50 <HAL_GPIO_Init+0x2bc>)
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	089b      	lsrs	r3, r3, #2
 8001a32:	3302      	adds	r3, #2
 8001a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	220f      	movs	r2, #15
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a40      	ldr	r2, [pc, #256]	; (8001b54 <HAL_GPIO_Init+0x2c0>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d013      	beq.n	8001a80 <HAL_GPIO_Init+0x1ec>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a3f      	ldr	r2, [pc, #252]	; (8001b58 <HAL_GPIO_Init+0x2c4>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d00d      	beq.n	8001a7c <HAL_GPIO_Init+0x1e8>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a3e      	ldr	r2, [pc, #248]	; (8001b5c <HAL_GPIO_Init+0x2c8>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d007      	beq.n	8001a78 <HAL_GPIO_Init+0x1e4>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a3d      	ldr	r2, [pc, #244]	; (8001b60 <HAL_GPIO_Init+0x2cc>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d101      	bne.n	8001a74 <HAL_GPIO_Init+0x1e0>
 8001a70:	2303      	movs	r3, #3
 8001a72:	e006      	b.n	8001a82 <HAL_GPIO_Init+0x1ee>
 8001a74:	2304      	movs	r3, #4
 8001a76:	e004      	b.n	8001a82 <HAL_GPIO_Init+0x1ee>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e002      	b.n	8001a82 <HAL_GPIO_Init+0x1ee>
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e000      	b.n	8001a82 <HAL_GPIO_Init+0x1ee>
 8001a80:	2300      	movs	r3, #0
 8001a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a84:	f002 0203 	and.w	r2, r2, #3
 8001a88:	0092      	lsls	r2, r2, #2
 8001a8a:	4093      	lsls	r3, r2
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a92:	492f      	ldr	r1, [pc, #188]	; (8001b50 <HAL_GPIO_Init+0x2bc>)
 8001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a96:	089b      	lsrs	r3, r3, #2
 8001a98:	3302      	adds	r3, #2
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d006      	beq.n	8001aba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001aac:	4b2d      	ldr	r3, [pc, #180]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	492c      	ldr	r1, [pc, #176]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	608b      	str	r3, [r1, #8]
 8001ab8:	e006      	b.n	8001ac8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001aba:	4b2a      	ldr	r3, [pc, #168]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001abc:	689a      	ldr	r2, [r3, #8]
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	4928      	ldr	r1, [pc, #160]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d006      	beq.n	8001ae2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ad4:	4b23      	ldr	r3, [pc, #140]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001ad6:	68da      	ldr	r2, [r3, #12]
 8001ad8:	4922      	ldr	r1, [pc, #136]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	60cb      	str	r3, [r1, #12]
 8001ae0:	e006      	b.n	8001af0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ae2:	4b20      	ldr	r3, [pc, #128]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	491e      	ldr	r1, [pc, #120]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d006      	beq.n	8001b0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001afc:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	4918      	ldr	r1, [pc, #96]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	604b      	str	r3, [r1, #4]
 8001b08:	e006      	b.n	8001b18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b0a:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	4914      	ldr	r1, [pc, #80]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d021      	beq.n	8001b68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b24:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	490e      	ldr	r1, [pc, #56]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	600b      	str	r3, [r1, #0]
 8001b30:	e021      	b.n	8001b76 <HAL_GPIO_Init+0x2e2>
 8001b32:	bf00      	nop
 8001b34:	10320000 	.word	0x10320000
 8001b38:	10310000 	.word	0x10310000
 8001b3c:	10220000 	.word	0x10220000
 8001b40:	10210000 	.word	0x10210000
 8001b44:	10120000 	.word	0x10120000
 8001b48:	10110000 	.word	0x10110000
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40010000 	.word	0x40010000
 8001b54:	40010800 	.word	0x40010800
 8001b58:	40010c00 	.word	0x40010c00
 8001b5c:	40011000 	.word	0x40011000
 8001b60:	40011400 	.word	0x40011400
 8001b64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b68:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	4909      	ldr	r1, [pc, #36]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001b72:	4013      	ands	r3, r2
 8001b74:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	3301      	adds	r3, #1
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	fa22 f303 	lsr.w	r3, r2, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f47f ae8e 	bne.w	80018a8 <HAL_GPIO_Init+0x14>
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	bf00      	nop
 8001b90:	372c      	adds	r7, #44	; 0x2c
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	40010400 	.word	0x40010400

08001b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	807b      	strh	r3, [r7, #2]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bac:	787b      	ldrb	r3, [r7, #1]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bb2:	887a      	ldrh	r2, [r7, #2]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bb8:	e003      	b.n	8001bc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bba:	887b      	ldrh	r3, [r7, #2]
 8001bbc:	041a      	lsls	r2, r3, #16
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	611a      	str	r2, [r3, #16]
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr

08001bcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e12b      	b.n	8001e36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d106      	bne.n	8001bf8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff fbf0 	bl	80013d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2224      	movs	r2, #36	; 0x24
 8001bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 0201 	bic.w	r2, r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c30:	f001 f960 	bl	8002ef4 <HAL_RCC_GetPCLK1Freq>
 8001c34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	4a81      	ldr	r2, [pc, #516]	; (8001e40 <HAL_I2C_Init+0x274>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d807      	bhi.n	8001c50 <HAL_I2C_Init+0x84>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4a80      	ldr	r2, [pc, #512]	; (8001e44 <HAL_I2C_Init+0x278>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	bf94      	ite	ls
 8001c48:	2301      	movls	r3, #1
 8001c4a:	2300      	movhi	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	e006      	b.n	8001c5e <HAL_I2C_Init+0x92>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4a7d      	ldr	r2, [pc, #500]	; (8001e48 <HAL_I2C_Init+0x27c>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	bf94      	ite	ls
 8001c58:	2301      	movls	r3, #1
 8001c5a:	2300      	movhi	r3, #0
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e0e7      	b.n	8001e36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	4a78      	ldr	r2, [pc, #480]	; (8001e4c <HAL_I2C_Init+0x280>)
 8001c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6e:	0c9b      	lsrs	r3, r3, #18
 8001c70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68ba      	ldr	r2, [r7, #8]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	4a6a      	ldr	r2, [pc, #424]	; (8001e40 <HAL_I2C_Init+0x274>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d802      	bhi.n	8001ca0 <HAL_I2C_Init+0xd4>
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	e009      	b.n	8001cb4 <HAL_I2C_Init+0xe8>
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ca6:	fb02 f303 	mul.w	r3, r2, r3
 8001caa:	4a69      	ldr	r2, [pc, #420]	; (8001e50 <HAL_I2C_Init+0x284>)
 8001cac:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb0:	099b      	lsrs	r3, r3, #6
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	430b      	orrs	r3, r1
 8001cba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001cc6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	495c      	ldr	r1, [pc, #368]	; (8001e40 <HAL_I2C_Init+0x274>)
 8001cd0:	428b      	cmp	r3, r1
 8001cd2:	d819      	bhi.n	8001d08 <HAL_I2C_Init+0x13c>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	1e59      	subs	r1, r3, #1
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ce2:	1c59      	adds	r1, r3, #1
 8001ce4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ce8:	400b      	ands	r3, r1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00a      	beq.n	8001d04 <HAL_I2C_Init+0x138>
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	1e59      	subs	r1, r3, #1
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d02:	e051      	b.n	8001da8 <HAL_I2C_Init+0x1dc>
 8001d04:	2304      	movs	r3, #4
 8001d06:	e04f      	b.n	8001da8 <HAL_I2C_Init+0x1dc>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d111      	bne.n	8001d34 <HAL_I2C_Init+0x168>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	1e58      	subs	r0, r3, #1
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6859      	ldr	r1, [r3, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	440b      	add	r3, r1
 8001d1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d22:	3301      	adds	r3, #1
 8001d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	bf0c      	ite	eq
 8001d2c:	2301      	moveq	r3, #1
 8001d2e:	2300      	movne	r3, #0
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	e012      	b.n	8001d5a <HAL_I2C_Init+0x18e>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	1e58      	subs	r0, r3, #1
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6859      	ldr	r1, [r3, #4]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	440b      	add	r3, r1
 8001d42:	0099      	lsls	r1, r3, #2
 8001d44:	440b      	add	r3, r1
 8001d46:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	bf0c      	ite	eq
 8001d54:	2301      	moveq	r3, #1
 8001d56:	2300      	movne	r3, #0
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <HAL_I2C_Init+0x196>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e022      	b.n	8001da8 <HAL_I2C_Init+0x1dc>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10e      	bne.n	8001d88 <HAL_I2C_Init+0x1bc>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	1e58      	subs	r0, r3, #1
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6859      	ldr	r1, [r3, #4]
 8001d72:	460b      	mov	r3, r1
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	440b      	add	r3, r1
 8001d78:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d86:	e00f      	b.n	8001da8 <HAL_I2C_Init+0x1dc>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	1e58      	subs	r0, r3, #1
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6859      	ldr	r1, [r3, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	440b      	add	r3, r1
 8001d96:	0099      	lsls	r1, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d9e:	3301      	adds	r3, #1
 8001da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	6809      	ldr	r1, [r1, #0]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69da      	ldr	r2, [r3, #28]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001dd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6911      	ldr	r1, [r2, #16]
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	68d2      	ldr	r2, [r2, #12]
 8001de2:	4311      	orrs	r1, r2
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6812      	ldr	r2, [r2, #0]
 8001de8:	430b      	orrs	r3, r1
 8001dea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	695a      	ldr	r2, [r3, #20]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 0201 	orr.w	r2, r2, #1
 8001e16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2220      	movs	r2, #32
 8001e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	000186a0 	.word	0x000186a0
 8001e44:	001e847f 	.word	0x001e847f
 8001e48:	003d08ff 	.word	0x003d08ff
 8001e4c:	431bde83 	.word	0x431bde83
 8001e50:	10624dd3 	.word	0x10624dd3

08001e54 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b088      	sub	sp, #32
 8001e58:	af02      	add	r7, sp, #8
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	607a      	str	r2, [r7, #4]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	460b      	mov	r3, r1
 8001e62:	817b      	strh	r3, [r7, #10]
 8001e64:	4613      	mov	r3, r2
 8001e66:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e68:	f7ff fc02 	bl	8001670 <HAL_GetTick>
 8001e6c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b20      	cmp	r3, #32
 8001e78:	f040 80e0 	bne.w	800203c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	2319      	movs	r3, #25
 8001e82:	2201      	movs	r2, #1
 8001e84:	4970      	ldr	r1, [pc, #448]	; (8002048 <HAL_I2C_Master_Transmit+0x1f4>)
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f000 fa92 	bl	80023b0 <I2C_WaitOnFlagUntilTimeout>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e92:	2302      	movs	r3, #2
 8001e94:	e0d3      	b.n	800203e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d101      	bne.n	8001ea4 <HAL_I2C_Master_Transmit+0x50>
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	e0cc      	b.n	800203e <HAL_I2C_Master_Transmit+0x1ea>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d007      	beq.n	8001eca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f042 0201 	orr.w	r2, r2, #1
 8001ec8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ed8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2221      	movs	r2, #33	; 0x21
 8001ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2210      	movs	r2, #16
 8001ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	893a      	ldrh	r2, [r7, #8]
 8001efa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4a50      	ldr	r2, [pc, #320]	; (800204c <HAL_I2C_Master_Transmit+0x1f8>)
 8001f0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f0c:	8979      	ldrh	r1, [r7, #10]
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	6a3a      	ldr	r2, [r7, #32]
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f000 f9ca 	bl	80022ac <I2C_MasterRequestWrite>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e08d      	b.n	800203e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f38:	e066      	b.n	8002008 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	6a39      	ldr	r1, [r7, #32]
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f000 fb50 	bl	80025e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00d      	beq.n	8001f66 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d107      	bne.n	8001f62 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e06b      	b.n	800203e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6a:	781a      	ldrb	r2, [r3, #0]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f76:	1c5a      	adds	r2, r3, #1
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	3b01      	subs	r3, #1
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	2b04      	cmp	r3, #4
 8001fa2:	d11b      	bne.n	8001fdc <HAL_I2C_Master_Transmit+0x188>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d017      	beq.n	8001fdc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	781a      	ldrb	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbc:	1c5a      	adds	r2, r3, #1
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	6a39      	ldr	r1, [r7, #32]
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f000 fb47 	bl	8002674 <I2C_WaitOnBTFFlagUntilTimeout>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00d      	beq.n	8002008 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d107      	bne.n	8002004 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002002:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e01a      	b.n	800203e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800200c:	2b00      	cmp	r3, #0
 800200e:	d194      	bne.n	8001f3a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800201e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2220      	movs	r2, #32
 8002024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002038:	2300      	movs	r3, #0
 800203a:	e000      	b.n	800203e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800203c:	2302      	movs	r3, #2
  }
}
 800203e:	4618      	mov	r0, r3
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	00100002 	.word	0x00100002
 800204c:	ffff0000 	.word	0xffff0000

08002050 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b08a      	sub	sp, #40	; 0x28
 8002054:	af02      	add	r7, sp, #8
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	607a      	str	r2, [r7, #4]
 800205a:	603b      	str	r3, [r7, #0]
 800205c:	460b      	mov	r3, r1
 800205e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002060:	f7ff fb06 	bl	8001670 <HAL_GetTick>
 8002064:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002066:	2300      	movs	r3, #0
 8002068:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b20      	cmp	r3, #32
 8002074:	f040 8111 	bne.w	800229a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	2319      	movs	r3, #25
 800207e:	2201      	movs	r2, #1
 8002080:	4988      	ldr	r1, [pc, #544]	; (80022a4 <HAL_I2C_IsDeviceReady+0x254>)
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f000 f994 	bl	80023b0 <I2C_WaitOnFlagUntilTimeout>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800208e:	2302      	movs	r3, #2
 8002090:	e104      	b.n	800229c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002098:	2b01      	cmp	r3, #1
 800209a:	d101      	bne.n	80020a0 <HAL_I2C_IsDeviceReady+0x50>
 800209c:	2302      	movs	r3, #2
 800209e:	e0fd      	b.n	800229c <HAL_I2C_IsDeviceReady+0x24c>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d007      	beq.n	80020c6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f042 0201 	orr.w	r2, r2, #1
 80020c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2224      	movs	r2, #36	; 0x24
 80020da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4a70      	ldr	r2, [pc, #448]	; (80022a8 <HAL_I2C_IsDeviceReady+0x258>)
 80020e8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020f8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	2200      	movs	r2, #0
 8002102:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f000 f952 	bl	80023b0 <I2C_WaitOnFlagUntilTimeout>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00d      	beq.n	800212e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002120:	d103      	bne.n	800212a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002128:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e0b6      	b.n	800229c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800212e:	897b      	ldrh	r3, [r7, #10]
 8002130:	b2db      	uxtb	r3, r3
 8002132:	461a      	mov	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800213c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800213e:	f7ff fa97 	bl	8001670 <HAL_GetTick>
 8002142:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b02      	cmp	r3, #2
 8002150:	bf0c      	ite	eq
 8002152:	2301      	moveq	r3, #1
 8002154:	2300      	movne	r3, #0
 8002156:	b2db      	uxtb	r3, r3
 8002158:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002168:	bf0c      	ite	eq
 800216a:	2301      	moveq	r3, #1
 800216c:	2300      	movne	r3, #0
 800216e:	b2db      	uxtb	r3, r3
 8002170:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002172:	e025      	b.n	80021c0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002174:	f7ff fa7c 	bl	8001670 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d302      	bcc.n	800218a <HAL_I2C_IsDeviceReady+0x13a>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d103      	bne.n	8002192 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	22a0      	movs	r2, #160	; 0xa0
 800218e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b02      	cmp	r3, #2
 800219e:	bf0c      	ite	eq
 80021a0:	2301      	moveq	r3, #1
 80021a2:	2300      	movne	r3, #0
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021b6:	bf0c      	ite	eq
 80021b8:	2301      	moveq	r3, #1
 80021ba:	2300      	movne	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2ba0      	cmp	r3, #160	; 0xa0
 80021ca:	d005      	beq.n	80021d8 <HAL_I2C_IsDeviceReady+0x188>
 80021cc:	7dfb      	ldrb	r3, [r7, #23]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d102      	bne.n	80021d8 <HAL_I2C_IsDeviceReady+0x188>
 80021d2:	7dbb      	ldrb	r3, [r7, #22]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0cd      	beq.n	8002174 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2220      	movs	r2, #32
 80021dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d129      	bne.n	8002242 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021fc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	2319      	movs	r3, #25
 800221a:	2201      	movs	r2, #1
 800221c:	4921      	ldr	r1, [pc, #132]	; (80022a4 <HAL_I2C_IsDeviceReady+0x254>)
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f000 f8c6 	bl	80023b0 <I2C_WaitOnFlagUntilTimeout>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e036      	b.n	800229c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2220      	movs	r2, #32
 8002232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800223e:	2300      	movs	r3, #0
 8002240:	e02c      	b.n	800229c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002250:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800225a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	2319      	movs	r3, #25
 8002262:	2201      	movs	r2, #1
 8002264:	490f      	ldr	r1, [pc, #60]	; (80022a4 <HAL_I2C_IsDeviceReady+0x254>)
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 f8a2 	bl	80023b0 <I2C_WaitOnFlagUntilTimeout>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e012      	b.n	800229c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	3301      	adds	r3, #1
 800227a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	429a      	cmp	r2, r3
 8002282:	f4ff af32 	bcc.w	80020ea <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2220      	movs	r2, #32
 800228a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800229a:	2302      	movs	r3, #2
  }
}
 800229c:	4618      	mov	r0, r3
 800229e:	3720      	adds	r7, #32
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	00100002 	.word	0x00100002
 80022a8:	ffff0000 	.word	0xffff0000

080022ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b088      	sub	sp, #32
 80022b0:	af02      	add	r7, sp, #8
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	607a      	str	r2, [r7, #4]
 80022b6:	603b      	str	r3, [r7, #0]
 80022b8:	460b      	mov	r3, r1
 80022ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d006      	beq.n	80022d6 <I2C_MasterRequestWrite+0x2a>
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d003      	beq.n	80022d6 <I2C_MasterRequestWrite+0x2a>
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022d4:	d108      	bne.n	80022e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	e00b      	b.n	8002300 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ec:	2b12      	cmp	r3, #18
 80022ee:	d107      	bne.n	8002300 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f000 f84f 	bl	80023b0 <I2C_WaitOnFlagUntilTimeout>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00d      	beq.n	8002334 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002326:	d103      	bne.n	8002330 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800232e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e035      	b.n	80023a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800233c:	d108      	bne.n	8002350 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800233e:	897b      	ldrh	r3, [r7, #10]
 8002340:	b2db      	uxtb	r3, r3
 8002342:	461a      	mov	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800234c:	611a      	str	r2, [r3, #16]
 800234e:	e01b      	b.n	8002388 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002350:	897b      	ldrh	r3, [r7, #10]
 8002352:	11db      	asrs	r3, r3, #7
 8002354:	b2db      	uxtb	r3, r3
 8002356:	f003 0306 	and.w	r3, r3, #6
 800235a:	b2db      	uxtb	r3, r3
 800235c:	f063 030f 	orn	r3, r3, #15
 8002360:	b2da      	uxtb	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	490e      	ldr	r1, [pc, #56]	; (80023a8 <I2C_MasterRequestWrite+0xfc>)
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 f898 	bl	80024a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e010      	b.n	80023a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800237e:	897b      	ldrh	r3, [r7, #10]
 8002380:	b2da      	uxtb	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	4907      	ldr	r1, [pc, #28]	; (80023ac <I2C_MasterRequestWrite+0x100>)
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f000 f888 	bl	80024a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	00010008 	.word	0x00010008
 80023ac:	00010002 	.word	0x00010002

080023b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	603b      	str	r3, [r7, #0]
 80023bc:	4613      	mov	r3, r2
 80023be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023c0:	e048      	b.n	8002454 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c8:	d044      	beq.n	8002454 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ca:	f7ff f951 	bl	8001670 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d302      	bcc.n	80023e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d139      	bne.n	8002454 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	0c1b      	lsrs	r3, r3, #16
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d10d      	bne.n	8002406 <I2C_WaitOnFlagUntilTimeout+0x56>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	43da      	mvns	r2, r3
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	4013      	ands	r3, r2
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	bf0c      	ite	eq
 80023fc:	2301      	moveq	r3, #1
 80023fe:	2300      	movne	r3, #0
 8002400:	b2db      	uxtb	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	e00c      	b.n	8002420 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	43da      	mvns	r2, r3
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	4013      	ands	r3, r2
 8002412:	b29b      	uxth	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	bf0c      	ite	eq
 8002418:	2301      	moveq	r3, #1
 800241a:	2300      	movne	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	461a      	mov	r2, r3
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	429a      	cmp	r2, r3
 8002424:	d116      	bne.n	8002454 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2220      	movs	r2, #32
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	f043 0220 	orr.w	r2, r3, #32
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e023      	b.n	800249c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	0c1b      	lsrs	r3, r3, #16
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b01      	cmp	r3, #1
 800245c:	d10d      	bne.n	800247a <I2C_WaitOnFlagUntilTimeout+0xca>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	43da      	mvns	r2, r3
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	4013      	ands	r3, r2
 800246a:	b29b      	uxth	r3, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	bf0c      	ite	eq
 8002470:	2301      	moveq	r3, #1
 8002472:	2300      	movne	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	461a      	mov	r2, r3
 8002478:	e00c      	b.n	8002494 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	43da      	mvns	r2, r3
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	4013      	ands	r3, r2
 8002486:	b29b      	uxth	r3, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	bf0c      	ite	eq
 800248c:	2301      	moveq	r3, #1
 800248e:	2300      	movne	r3, #0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	461a      	mov	r2, r3
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	429a      	cmp	r2, r3
 8002498:	d093      	beq.n	80023c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024b2:	e071      	b.n	8002598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c2:	d123      	bne.n	800250c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2220      	movs	r2, #32
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f8:	f043 0204 	orr.w	r2, r3, #4
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e067      	b.n	80025dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002512:	d041      	beq.n	8002598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002514:	f7ff f8ac 	bl	8001670 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	429a      	cmp	r2, r3
 8002522:	d302      	bcc.n	800252a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d136      	bne.n	8002598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	0c1b      	lsrs	r3, r3, #16
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b01      	cmp	r3, #1
 8002532:	d10c      	bne.n	800254e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	43da      	mvns	r2, r3
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	4013      	ands	r3, r2
 8002540:	b29b      	uxth	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	bf14      	ite	ne
 8002546:	2301      	movne	r3, #1
 8002548:	2300      	moveq	r3, #0
 800254a:	b2db      	uxtb	r3, r3
 800254c:	e00b      	b.n	8002566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	43da      	mvns	r2, r3
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	4013      	ands	r3, r2
 800255a:	b29b      	uxth	r3, r3
 800255c:	2b00      	cmp	r3, #0
 800255e:	bf14      	ite	ne
 8002560:	2301      	movne	r3, #1
 8002562:	2300      	moveq	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d016      	beq.n	8002598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2220      	movs	r2, #32
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	f043 0220 	orr.w	r2, r3, #32
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e021      	b.n	80025dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	0c1b      	lsrs	r3, r3, #16
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d10c      	bne.n	80025bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	43da      	mvns	r2, r3
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	4013      	ands	r3, r2
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	bf14      	ite	ne
 80025b4:	2301      	movne	r3, #1
 80025b6:	2300      	moveq	r3, #0
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	e00b      	b.n	80025d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	43da      	mvns	r2, r3
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	4013      	ands	r3, r2
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	bf14      	ite	ne
 80025ce:	2301      	movne	r3, #1
 80025d0:	2300      	moveq	r3, #0
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f47f af6d 	bne.w	80024b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025f0:	e034      	b.n	800265c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f000 f886 	bl	8002704 <I2C_IsAcknowledgeFailed>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e034      	b.n	800266c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002608:	d028      	beq.n	800265c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800260a:	f7ff f831 	bl	8001670 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	429a      	cmp	r2, r3
 8002618:	d302      	bcc.n	8002620 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d11d      	bne.n	800265c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800262a:	2b80      	cmp	r3, #128	; 0x80
 800262c:	d016      	beq.n	800265c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2220      	movs	r2, #32
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	f043 0220 	orr.w	r2, r3, #32
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e007      	b.n	800266c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002666:	2b80      	cmp	r3, #128	; 0x80
 8002668:	d1c3      	bne.n	80025f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002680:	e034      	b.n	80026ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 f83e 	bl	8002704 <I2C_IsAcknowledgeFailed>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e034      	b.n	80026fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002698:	d028      	beq.n	80026ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800269a:	f7fe ffe9 	bl	8001670 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d302      	bcc.n	80026b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d11d      	bne.n	80026ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	f003 0304 	and.w	r3, r3, #4
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d016      	beq.n	80026ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2220      	movs	r2, #32
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	f043 0220 	orr.w	r2, r3, #32
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e007      	b.n	80026fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	f003 0304 	and.w	r3, r3, #4
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d1c3      	bne.n	8002682 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800271a:	d11b      	bne.n	8002754 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002724:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2220      	movs	r2, #32
 8002730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	f043 0204 	orr.w	r2, r3, #4
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e000      	b.n	8002756 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr

08002760 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e272      	b.n	8002c58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 8087 	beq.w	800288e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002780:	4b92      	ldr	r3, [pc, #584]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 030c 	and.w	r3, r3, #12
 8002788:	2b04      	cmp	r3, #4
 800278a:	d00c      	beq.n	80027a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800278c:	4b8f      	ldr	r3, [pc, #572]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 030c 	and.w	r3, r3, #12
 8002794:	2b08      	cmp	r3, #8
 8002796:	d112      	bne.n	80027be <HAL_RCC_OscConfig+0x5e>
 8002798:	4b8c      	ldr	r3, [pc, #560]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027a4:	d10b      	bne.n	80027be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a6:	4b89      	ldr	r3, [pc, #548]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d06c      	beq.n	800288c <HAL_RCC_OscConfig+0x12c>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d168      	bne.n	800288c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e24c      	b.n	8002c58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c6:	d106      	bne.n	80027d6 <HAL_RCC_OscConfig+0x76>
 80027c8:	4b80      	ldr	r3, [pc, #512]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a7f      	ldr	r2, [pc, #508]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 80027ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d2:	6013      	str	r3, [r2, #0]
 80027d4:	e02e      	b.n	8002834 <HAL_RCC_OscConfig+0xd4>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10c      	bne.n	80027f8 <HAL_RCC_OscConfig+0x98>
 80027de:	4b7b      	ldr	r3, [pc, #492]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a7a      	ldr	r2, [pc, #488]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 80027e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e8:	6013      	str	r3, [r2, #0]
 80027ea:	4b78      	ldr	r3, [pc, #480]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a77      	ldr	r2, [pc, #476]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 80027f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	e01d      	b.n	8002834 <HAL_RCC_OscConfig+0xd4>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002800:	d10c      	bne.n	800281c <HAL_RCC_OscConfig+0xbc>
 8002802:	4b72      	ldr	r3, [pc, #456]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a71      	ldr	r2, [pc, #452]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 8002808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	4b6f      	ldr	r3, [pc, #444]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a6e      	ldr	r2, [pc, #440]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 8002814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	e00b      	b.n	8002834 <HAL_RCC_OscConfig+0xd4>
 800281c:	4b6b      	ldr	r3, [pc, #428]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a6a      	ldr	r2, [pc, #424]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 8002822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002826:	6013      	str	r3, [r2, #0]
 8002828:	4b68      	ldr	r3, [pc, #416]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a67      	ldr	r2, [pc, #412]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 800282e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002832:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d013      	beq.n	8002864 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283c:	f7fe ff18 	bl	8001670 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002844:	f7fe ff14 	bl	8001670 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b64      	cmp	r3, #100	; 0x64
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e200      	b.n	8002c58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002856:	4b5d      	ldr	r3, [pc, #372]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0f0      	beq.n	8002844 <HAL_RCC_OscConfig+0xe4>
 8002862:	e014      	b.n	800288e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002864:	f7fe ff04 	bl	8001670 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800286c:	f7fe ff00 	bl	8001670 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b64      	cmp	r3, #100	; 0x64
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e1ec      	b.n	8002c58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800287e:	4b53      	ldr	r3, [pc, #332]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0x10c>
 800288a:	e000      	b.n	800288e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d063      	beq.n	8002962 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800289a:	4b4c      	ldr	r3, [pc, #304]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f003 030c 	and.w	r3, r3, #12
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00b      	beq.n	80028be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028a6:	4b49      	ldr	r3, [pc, #292]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f003 030c 	and.w	r3, r3, #12
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	d11c      	bne.n	80028ec <HAL_RCC_OscConfig+0x18c>
 80028b2:	4b46      	ldr	r3, [pc, #280]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d116      	bne.n	80028ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028be:	4b43      	ldr	r3, [pc, #268]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d005      	beq.n	80028d6 <HAL_RCC_OscConfig+0x176>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d001      	beq.n	80028d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e1c0      	b.n	8002c58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d6:	4b3d      	ldr	r3, [pc, #244]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	4939      	ldr	r1, [pc, #228]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ea:	e03a      	b.n	8002962 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d020      	beq.n	8002936 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028f4:	4b36      	ldr	r3, [pc, #216]	; (80029d0 <HAL_RCC_OscConfig+0x270>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fa:	f7fe feb9 	bl	8001670 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002902:	f7fe feb5 	bl	8001670 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e1a1      	b.n	8002c58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002914:	4b2d      	ldr	r3, [pc, #180]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0f0      	beq.n	8002902 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002920:	4b2a      	ldr	r3, [pc, #168]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	4927      	ldr	r1, [pc, #156]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 8002930:	4313      	orrs	r3, r2
 8002932:	600b      	str	r3, [r1, #0]
 8002934:	e015      	b.n	8002962 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002936:	4b26      	ldr	r3, [pc, #152]	; (80029d0 <HAL_RCC_OscConfig+0x270>)
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293c:	f7fe fe98 	bl	8001670 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002944:	f7fe fe94 	bl	8001670 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e180      	b.n	8002c58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002956:	4b1d      	ldr	r3, [pc, #116]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f0      	bne.n	8002944 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0308 	and.w	r3, r3, #8
 800296a:	2b00      	cmp	r3, #0
 800296c:	d03a      	beq.n	80029e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d019      	beq.n	80029aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002976:	4b17      	ldr	r3, [pc, #92]	; (80029d4 <HAL_RCC_OscConfig+0x274>)
 8002978:	2201      	movs	r2, #1
 800297a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800297c:	f7fe fe78 	bl	8001670 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002984:	f7fe fe74 	bl	8001670 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e160      	b.n	8002c58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002996:	4b0d      	ldr	r3, [pc, #52]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029a2:	2001      	movs	r0, #1
 80029a4:	f000 faba 	bl	8002f1c <RCC_Delay>
 80029a8:	e01c      	b.n	80029e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029aa:	4b0a      	ldr	r3, [pc, #40]	; (80029d4 <HAL_RCC_OscConfig+0x274>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b0:	f7fe fe5e 	bl	8001670 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b6:	e00f      	b.n	80029d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b8:	f7fe fe5a 	bl	8001670 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d908      	bls.n	80029d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e146      	b.n	8002c58 <HAL_RCC_OscConfig+0x4f8>
 80029ca:	bf00      	nop
 80029cc:	40021000 	.word	0x40021000
 80029d0:	42420000 	.word	0x42420000
 80029d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d8:	4b92      	ldr	r3, [pc, #584]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1e9      	bne.n	80029b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 80a6 	beq.w	8002b3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029f2:	2300      	movs	r3, #0
 80029f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029f6:	4b8b      	ldr	r3, [pc, #556]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10d      	bne.n	8002a1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a02:	4b88      	ldr	r3, [pc, #544]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	4a87      	ldr	r2, [pc, #540]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a0c:	61d3      	str	r3, [r2, #28]
 8002a0e:	4b85      	ldr	r3, [pc, #532]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a16:	60bb      	str	r3, [r7, #8]
 8002a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1e:	4b82      	ldr	r3, [pc, #520]	; (8002c28 <HAL_RCC_OscConfig+0x4c8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d118      	bne.n	8002a5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a2a:	4b7f      	ldr	r3, [pc, #508]	; (8002c28 <HAL_RCC_OscConfig+0x4c8>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a7e      	ldr	r2, [pc, #504]	; (8002c28 <HAL_RCC_OscConfig+0x4c8>)
 8002a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a36:	f7fe fe1b 	bl	8001670 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3c:	e008      	b.n	8002a50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a3e:	f7fe fe17 	bl	8001670 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b64      	cmp	r3, #100	; 0x64
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e103      	b.n	8002c58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a50:	4b75      	ldr	r3, [pc, #468]	; (8002c28 <HAL_RCC_OscConfig+0x4c8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0f0      	beq.n	8002a3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d106      	bne.n	8002a72 <HAL_RCC_OscConfig+0x312>
 8002a64:	4b6f      	ldr	r3, [pc, #444]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	4a6e      	ldr	r2, [pc, #440]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002a6a:	f043 0301 	orr.w	r3, r3, #1
 8002a6e:	6213      	str	r3, [r2, #32]
 8002a70:	e02d      	b.n	8002ace <HAL_RCC_OscConfig+0x36e>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10c      	bne.n	8002a94 <HAL_RCC_OscConfig+0x334>
 8002a7a:	4b6a      	ldr	r3, [pc, #424]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	4a69      	ldr	r2, [pc, #420]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002a80:	f023 0301 	bic.w	r3, r3, #1
 8002a84:	6213      	str	r3, [r2, #32]
 8002a86:	4b67      	ldr	r3, [pc, #412]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	4a66      	ldr	r2, [pc, #408]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002a8c:	f023 0304 	bic.w	r3, r3, #4
 8002a90:	6213      	str	r3, [r2, #32]
 8002a92:	e01c      	b.n	8002ace <HAL_RCC_OscConfig+0x36e>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	2b05      	cmp	r3, #5
 8002a9a:	d10c      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x356>
 8002a9c:	4b61      	ldr	r3, [pc, #388]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	4a60      	ldr	r2, [pc, #384]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002aa2:	f043 0304 	orr.w	r3, r3, #4
 8002aa6:	6213      	str	r3, [r2, #32]
 8002aa8:	4b5e      	ldr	r3, [pc, #376]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	4a5d      	ldr	r2, [pc, #372]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002aae:	f043 0301 	orr.w	r3, r3, #1
 8002ab2:	6213      	str	r3, [r2, #32]
 8002ab4:	e00b      	b.n	8002ace <HAL_RCC_OscConfig+0x36e>
 8002ab6:	4b5b      	ldr	r3, [pc, #364]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	4a5a      	ldr	r2, [pc, #360]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002abc:	f023 0301 	bic.w	r3, r3, #1
 8002ac0:	6213      	str	r3, [r2, #32]
 8002ac2:	4b58      	ldr	r3, [pc, #352]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	4a57      	ldr	r2, [pc, #348]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002ac8:	f023 0304 	bic.w	r3, r3, #4
 8002acc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d015      	beq.n	8002b02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ad6:	f7fe fdcb 	bl	8001670 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002adc:	e00a      	b.n	8002af4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ade:	f7fe fdc7 	bl	8001670 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e0b1      	b.n	8002c58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af4:	4b4b      	ldr	r3, [pc, #300]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d0ee      	beq.n	8002ade <HAL_RCC_OscConfig+0x37e>
 8002b00:	e014      	b.n	8002b2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b02:	f7fe fdb5 	bl	8001670 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b08:	e00a      	b.n	8002b20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b0a:	f7fe fdb1 	bl	8001670 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e09b      	b.n	8002c58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b20:	4b40      	ldr	r3, [pc, #256]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1ee      	bne.n	8002b0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b2c:	7dfb      	ldrb	r3, [r7, #23]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d105      	bne.n	8002b3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b32:	4b3c      	ldr	r3, [pc, #240]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	4a3b      	ldr	r2, [pc, #236]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002b38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f000 8087 	beq.w	8002c56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b48:	4b36      	ldr	r3, [pc, #216]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f003 030c 	and.w	r3, r3, #12
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d061      	beq.n	8002c18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d146      	bne.n	8002bea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b5c:	4b33      	ldr	r3, [pc, #204]	; (8002c2c <HAL_RCC_OscConfig+0x4cc>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b62:	f7fe fd85 	bl	8001670 <HAL_GetTick>
 8002b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6a:	f7fe fd81 	bl	8001670 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e06d      	b.n	8002c58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b7c:	4b29      	ldr	r3, [pc, #164]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1f0      	bne.n	8002b6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b90:	d108      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b92:	4b24      	ldr	r3, [pc, #144]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	4921      	ldr	r1, [pc, #132]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ba4:	4b1f      	ldr	r3, [pc, #124]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a19      	ldr	r1, [r3, #32]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	430b      	orrs	r3, r1
 8002bb6:	491b      	ldr	r1, [pc, #108]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bbc:	4b1b      	ldr	r3, [pc, #108]	; (8002c2c <HAL_RCC_OscConfig+0x4cc>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc2:	f7fe fd55 	bl	8001670 <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bc8:	e008      	b.n	8002bdc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bca:	f7fe fd51 	bl	8001670 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e03d      	b.n	8002c58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bdc:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0f0      	beq.n	8002bca <HAL_RCC_OscConfig+0x46a>
 8002be8:	e035      	b.n	8002c56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bea:	4b10      	ldr	r3, [pc, #64]	; (8002c2c <HAL_RCC_OscConfig+0x4cc>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf0:	f7fe fd3e 	bl	8001670 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf8:	f7fe fd3a 	bl	8001670 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e026      	b.n	8002c58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c0a:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x498>
 8002c16:	e01e      	b.n	8002c56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d107      	bne.n	8002c30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e019      	b.n	8002c58 <HAL_RCC_OscConfig+0x4f8>
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40007000 	.word	0x40007000
 8002c2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c30:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <HAL_RCC_OscConfig+0x500>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d106      	bne.n	8002c52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d001      	beq.n	8002c56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40021000 	.word	0x40021000

08002c64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e0d0      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c78:	4b6a      	ldr	r3, [pc, #424]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d910      	bls.n	8002ca8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c86:	4b67      	ldr	r3, [pc, #412]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f023 0207 	bic.w	r2, r3, #7
 8002c8e:	4965      	ldr	r1, [pc, #404]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c96:	4b63      	ldr	r3, [pc, #396]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d001      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e0b8      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d020      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d005      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cc0:	4b59      	ldr	r3, [pc, #356]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	4a58      	ldr	r2, [pc, #352]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0308 	and.w	r3, r3, #8
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cd8:	4b53      	ldr	r3, [pc, #332]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	4a52      	ldr	r2, [pc, #328]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cde:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ce2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ce4:	4b50      	ldr	r3, [pc, #320]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	494d      	ldr	r1, [pc, #308]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d040      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d107      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0a:	4b47      	ldr	r3, [pc, #284]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d115      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e07f      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d107      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d22:	4b41      	ldr	r3, [pc, #260]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d109      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e073      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d32:	4b3d      	ldr	r3, [pc, #244]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e06b      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d42:	4b39      	ldr	r3, [pc, #228]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f023 0203 	bic.w	r2, r3, #3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	4936      	ldr	r1, [pc, #216]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d54:	f7fe fc8c 	bl	8001670 <HAL_GetTick>
 8002d58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5a:	e00a      	b.n	8002d72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d5c:	f7fe fc88 	bl	8001670 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e053      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d72:	4b2d      	ldr	r3, [pc, #180]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f003 020c 	and.w	r2, r3, #12
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d1eb      	bne.n	8002d5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d84:	4b27      	ldr	r3, [pc, #156]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d210      	bcs.n	8002db4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d92:	4b24      	ldr	r3, [pc, #144]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f023 0207 	bic.w	r2, r3, #7
 8002d9a:	4922      	ldr	r1, [pc, #136]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da2:	4b20      	ldr	r3, [pc, #128]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d001      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e032      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d008      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dc0:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	4916      	ldr	r1, [pc, #88]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d009      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dde:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	490e      	ldr	r1, [pc, #56]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002df2:	f000 f821 	bl	8002e38 <HAL_RCC_GetSysClockFreq>
 8002df6:	4602      	mov	r2, r0
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	091b      	lsrs	r3, r3, #4
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	490a      	ldr	r1, [pc, #40]	; (8002e2c <HAL_RCC_ClockConfig+0x1c8>)
 8002e04:	5ccb      	ldrb	r3, [r1, r3]
 8002e06:	fa22 f303 	lsr.w	r3, r2, r3
 8002e0a:	4a09      	ldr	r2, [pc, #36]	; (8002e30 <HAL_RCC_ClockConfig+0x1cc>)
 8002e0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e0e:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <HAL_RCC_ClockConfig+0x1d0>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fe fbea 	bl	80015ec <HAL_InitTick>

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40022000 	.word	0x40022000
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	08005b18 	.word	0x08005b18
 8002e30:	20000014 	.word	0x20000014
 8002e34:	20000018 	.word	0x20000018

08002e38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	2300      	movs	r3, #0
 8002e44:	60bb      	str	r3, [r7, #8]
 8002e46:	2300      	movs	r3, #0
 8002e48:	617b      	str	r3, [r7, #20]
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e52:	4b1e      	ldr	r3, [pc, #120]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x94>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f003 030c 	and.w	r3, r3, #12
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d002      	beq.n	8002e68 <HAL_RCC_GetSysClockFreq+0x30>
 8002e62:	2b08      	cmp	r3, #8
 8002e64:	d003      	beq.n	8002e6e <HAL_RCC_GetSysClockFreq+0x36>
 8002e66:	e027      	b.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e68:	4b19      	ldr	r3, [pc, #100]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e6a:	613b      	str	r3, [r7, #16]
      break;
 8002e6c:	e027      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	0c9b      	lsrs	r3, r3, #18
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	4a17      	ldr	r2, [pc, #92]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e78:	5cd3      	ldrb	r3, [r2, r3]
 8002e7a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d010      	beq.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e86:	4b11      	ldr	r3, [pc, #68]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x94>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	0c5b      	lsrs	r3, r3, #17
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	4a11      	ldr	r2, [pc, #68]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e92:	5cd3      	ldrb	r3, [r2, r3]
 8002e94:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a0d      	ldr	r2, [pc, #52]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e9a:	fb03 f202 	mul.w	r2, r3, r2
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	e004      	b.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a0c      	ldr	r2, [pc, #48]	; (8002edc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002eac:	fb02 f303 	mul.w	r3, r2, r3
 8002eb0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	613b      	str	r3, [r7, #16]
      break;
 8002eb6:	e002      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002eb8:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002eba:	613b      	str	r3, [r7, #16]
      break;
 8002ebc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ebe:	693b      	ldr	r3, [r7, #16]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	371c      	adds	r7, #28
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bc80      	pop	{r7}
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	007a1200 	.word	0x007a1200
 8002ed4:	08005b30 	.word	0x08005b30
 8002ed8:	08005b40 	.word	0x08005b40
 8002edc:	003d0900 	.word	0x003d0900

08002ee0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ee4:	4b02      	ldr	r3, [pc, #8]	; (8002ef0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr
 8002ef0:	20000014 	.word	0x20000014

08002ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ef8:	f7ff fff2 	bl	8002ee0 <HAL_RCC_GetHCLKFreq>
 8002efc:	4602      	mov	r2, r0
 8002efe:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	0a1b      	lsrs	r3, r3, #8
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	4903      	ldr	r1, [pc, #12]	; (8002f18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f0a:	5ccb      	ldrb	r3, [r1, r3]
 8002f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40021000 	.word	0x40021000
 8002f18:	08005b28 	.word	0x08005b28

08002f1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f24:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <RCC_Delay+0x34>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a0a      	ldr	r2, [pc, #40]	; (8002f54 <RCC_Delay+0x38>)
 8002f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2e:	0a5b      	lsrs	r3, r3, #9
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	fb02 f303 	mul.w	r3, r2, r3
 8002f36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f38:	bf00      	nop
  }
  while (Delay --);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	1e5a      	subs	r2, r3, #1
 8002f3e:	60fa      	str	r2, [r7, #12]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1f9      	bne.n	8002f38 <RCC_Delay+0x1c>
}
 8002f44:	bf00      	nop
 8002f46:	bf00      	nop
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr
 8002f50:	20000014 	.word	0x20000014
 8002f54:	10624dd3 	.word	0x10624dd3

08002f58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e076      	b.n	8003058 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d108      	bne.n	8002f84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f7a:	d009      	beq.n	8002f90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	61da      	str	r2, [r3, #28]
 8002f82:	e005      	b.n	8002f90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d106      	bne.n	8002fb0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7fe fa52 	bl	8001454 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fc6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	431a      	orrs	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003000:	431a      	orrs	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003014:	ea42 0103 	orr.w	r1, r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	0c1a      	lsrs	r2, r3, #16
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f002 0204 	and.w	r2, r2, #4
 8003036:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	69da      	ldr	r2, [r3, #28]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003046:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b088      	sub	sp, #32
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	603b      	str	r3, [r7, #0]
 800306c:	4613      	mov	r3, r2
 800306e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003070:	f7fe fafe 	bl	8001670 <HAL_GetTick>
 8003074:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003076:	88fb      	ldrh	r3, [r7, #6]
 8003078:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b01      	cmp	r3, #1
 8003084:	d001      	beq.n	800308a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003086:	2302      	movs	r3, #2
 8003088:	e12a      	b.n	80032e0 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d002      	beq.n	8003096 <HAL_SPI_Transmit+0x36>
 8003090:	88fb      	ldrh	r3, [r7, #6]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e122      	b.n	80032e0 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d101      	bne.n	80030a8 <HAL_SPI_Transmit+0x48>
 80030a4:	2302      	movs	r3, #2
 80030a6:	e11b      	b.n	80032e0 <HAL_SPI_Transmit+0x280>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2203      	movs	r2, #3
 80030b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	88fa      	ldrh	r2, [r7, #6]
 80030c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	88fa      	ldrh	r2, [r7, #6]
 80030ce:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030f6:	d10f      	bne.n	8003118 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003106:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003116:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003122:	2b40      	cmp	r3, #64	; 0x40
 8003124:	d007      	beq.n	8003136 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003134:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800313e:	d152      	bne.n	80031e6 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d002      	beq.n	800314e <HAL_SPI_Transmit+0xee>
 8003148:	8b7b      	ldrh	r3, [r7, #26]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d145      	bne.n	80031da <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	881a      	ldrh	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	1c9a      	adds	r2, r3, #2
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003168:	b29b      	uxth	r3, r3
 800316a:	3b01      	subs	r3, #1
 800316c:	b29a      	uxth	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003172:	e032      	b.n	80031da <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b02      	cmp	r3, #2
 8003180:	d112      	bne.n	80031a8 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	881a      	ldrh	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	1c9a      	adds	r2, r3, #2
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800319c:	b29b      	uxth	r3, r3
 800319e:	3b01      	subs	r3, #1
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80031a6:	e018      	b.n	80031da <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031a8:	f7fe fa62 	bl	8001670 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d803      	bhi.n	80031c0 <HAL_SPI_Transmit+0x160>
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031be:	d102      	bne.n	80031c6 <HAL_SPI_Transmit+0x166>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d109      	bne.n	80031da <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e082      	b.n	80032e0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031de:	b29b      	uxth	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1c7      	bne.n	8003174 <HAL_SPI_Transmit+0x114>
 80031e4:	e053      	b.n	800328e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d002      	beq.n	80031f4 <HAL_SPI_Transmit+0x194>
 80031ee:	8b7b      	ldrh	r3, [r7, #26]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d147      	bne.n	8003284 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	330c      	adds	r3, #12
 80031fe:	7812      	ldrb	r2, [r2, #0]
 8003200:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	1c5a      	adds	r2, r3, #1
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003210:	b29b      	uxth	r3, r3
 8003212:	3b01      	subs	r3, #1
 8003214:	b29a      	uxth	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800321a:	e033      	b.n	8003284 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b02      	cmp	r3, #2
 8003228:	d113      	bne.n	8003252 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	330c      	adds	r3, #12
 8003234:	7812      	ldrb	r2, [r2, #0]
 8003236:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323c:	1c5a      	adds	r2, r3, #1
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003246:	b29b      	uxth	r3, r3
 8003248:	3b01      	subs	r3, #1
 800324a:	b29a      	uxth	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003250:	e018      	b.n	8003284 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003252:	f7fe fa0d 	bl	8001670 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d803      	bhi.n	800326a <HAL_SPI_Transmit+0x20a>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003268:	d102      	bne.n	8003270 <HAL_SPI_Transmit+0x210>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d109      	bne.n	8003284 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e02d      	b.n	80032e0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003288:	b29b      	uxth	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1c6      	bne.n	800321c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800328e:	69fa      	ldr	r2, [r7, #28]
 8003290:	6839      	ldr	r1, [r7, #0]
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 fa5a 	bl	800374c <SPI_EndRxTxTransaction>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2220      	movs	r2, #32
 80032a2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10a      	bne.n	80032c2 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032ac:	2300      	movs	r3, #0
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	617b      	str	r3, [r7, #20]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	617b      	str	r3, [r7, #20]
 80032c0:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80032de:	2300      	movs	r3, #0
  }
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3720      	adds	r7, #32
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b08a      	sub	sp, #40	; 0x28
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
 80032f4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80032f6:	2301      	movs	r3, #1
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032fa:	f7fe f9b9 	bl	8001670 <HAL_GetTick>
 80032fe:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003306:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800330e:	887b      	ldrh	r3, [r7, #2]
 8003310:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003312:	7ffb      	ldrb	r3, [r7, #31]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d00c      	beq.n	8003332 <HAL_SPI_TransmitReceive+0x4a>
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800331e:	d106      	bne.n	800332e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d102      	bne.n	800332e <HAL_SPI_TransmitReceive+0x46>
 8003328:	7ffb      	ldrb	r3, [r7, #31]
 800332a:	2b04      	cmp	r3, #4
 800332c:	d001      	beq.n	8003332 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800332e:	2302      	movs	r3, #2
 8003330:	e17f      	b.n	8003632 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d005      	beq.n	8003344 <HAL_SPI_TransmitReceive+0x5c>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <HAL_SPI_TransmitReceive+0x5c>
 800333e:	887b      	ldrh	r3, [r7, #2]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e174      	b.n	8003632 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <HAL_SPI_TransmitReceive+0x6e>
 8003352:	2302      	movs	r3, #2
 8003354:	e16d      	b.n	8003632 <HAL_SPI_TransmitReceive+0x34a>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b04      	cmp	r3, #4
 8003368:	d003      	beq.n	8003372 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2205      	movs	r2, #5
 800336e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	887a      	ldrh	r2, [r7, #2]
 8003382:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	887a      	ldrh	r2, [r7, #2]
 8003388:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	887a      	ldrh	r2, [r7, #2]
 8003394:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	887a      	ldrh	r2, [r7, #2]
 800339a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b2:	2b40      	cmp	r3, #64	; 0x40
 80033b4:	d007      	beq.n	80033c6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033ce:	d17e      	bne.n	80034ce <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d002      	beq.n	80033de <HAL_SPI_TransmitReceive+0xf6>
 80033d8:	8afb      	ldrh	r3, [r7, #22]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d16c      	bne.n	80034b8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	881a      	ldrh	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	1c9a      	adds	r2, r3, #2
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	3b01      	subs	r3, #1
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003402:	e059      	b.n	80034b8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b02      	cmp	r3, #2
 8003410:	d11b      	bne.n	800344a <HAL_SPI_TransmitReceive+0x162>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003416:	b29b      	uxth	r3, r3
 8003418:	2b00      	cmp	r3, #0
 800341a:	d016      	beq.n	800344a <HAL_SPI_TransmitReceive+0x162>
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	2b01      	cmp	r3, #1
 8003420:	d113      	bne.n	800344a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	881a      	ldrh	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	1c9a      	adds	r2, r3, #2
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800343c:	b29b      	uxth	r3, r3
 800343e:	3b01      	subs	r3, #1
 8003440:	b29a      	uxth	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003446:	2300      	movs	r3, #0
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b01      	cmp	r3, #1
 8003456:	d119      	bne.n	800348c <HAL_SPI_TransmitReceive+0x1a4>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800345c:	b29b      	uxth	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d014      	beq.n	800348c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346c:	b292      	uxth	r2, r2
 800346e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003474:	1c9a      	adds	r2, r3, #2
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800347e:	b29b      	uxth	r3, r3
 8003480:	3b01      	subs	r3, #1
 8003482:	b29a      	uxth	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003488:	2301      	movs	r3, #1
 800348a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800348c:	f7fe f8f0 	bl	8001670 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	6a3b      	ldr	r3, [r7, #32]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003498:	429a      	cmp	r2, r3
 800349a:	d80d      	bhi.n	80034b8 <HAL_SPI_TransmitReceive+0x1d0>
 800349c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a2:	d009      	beq.n	80034b8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e0bc      	b.n	8003632 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034bc:	b29b      	uxth	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1a0      	bne.n	8003404 <HAL_SPI_TransmitReceive+0x11c>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d19b      	bne.n	8003404 <HAL_SPI_TransmitReceive+0x11c>
 80034cc:	e082      	b.n	80035d4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d002      	beq.n	80034dc <HAL_SPI_TransmitReceive+0x1f4>
 80034d6:	8afb      	ldrh	r3, [r7, #22]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d171      	bne.n	80035c0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	330c      	adds	r3, #12
 80034e6:	7812      	ldrb	r2, [r2, #0]
 80034e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ee:	1c5a      	adds	r2, r3, #1
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	3b01      	subs	r3, #1
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003502:	e05d      	b.n	80035c0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b02      	cmp	r3, #2
 8003510:	d11c      	bne.n	800354c <HAL_SPI_TransmitReceive+0x264>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003516:	b29b      	uxth	r3, r3
 8003518:	2b00      	cmp	r3, #0
 800351a:	d017      	beq.n	800354c <HAL_SPI_TransmitReceive+0x264>
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	2b01      	cmp	r3, #1
 8003520:	d114      	bne.n	800354c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	330c      	adds	r3, #12
 800352c:	7812      	ldrb	r2, [r2, #0]
 800352e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	1c5a      	adds	r2, r3, #1
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800353e:	b29b      	uxth	r3, r3
 8003540:	3b01      	subs	r3, #1
 8003542:	b29a      	uxth	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b01      	cmp	r3, #1
 8003558:	d119      	bne.n	800358e <HAL_SPI_TransmitReceive+0x2a6>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800355e:	b29b      	uxth	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	d014      	beq.n	800358e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68da      	ldr	r2, [r3, #12]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003576:	1c5a      	adds	r2, r3, #1
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003580:	b29b      	uxth	r3, r3
 8003582:	3b01      	subs	r3, #1
 8003584:	b29a      	uxth	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800358a:	2301      	movs	r3, #1
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800358e:	f7fe f86f 	bl	8001670 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800359a:	429a      	cmp	r2, r3
 800359c:	d803      	bhi.n	80035a6 <HAL_SPI_TransmitReceive+0x2be>
 800359e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a4:	d102      	bne.n	80035ac <HAL_SPI_TransmitReceive+0x2c4>
 80035a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d109      	bne.n	80035c0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e038      	b.n	8003632 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d19c      	bne.n	8003504 <HAL_SPI_TransmitReceive+0x21c>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d197      	bne.n	8003504 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035d4:	6a3a      	ldr	r2, [r7, #32]
 80035d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 f8b7 	bl	800374c <SPI_EndRxTxTransaction>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d008      	beq.n	80035f6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2220      	movs	r2, #32
 80035e8:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e01d      	b.n	8003632 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10a      	bne.n	8003614 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035fe:	2300      	movs	r3, #0
 8003600:	613b      	str	r3, [r7, #16]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	613b      	str	r3, [r7, #16]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	613b      	str	r3, [r7, #16]
 8003612:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e000      	b.n	8003632 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003630:	2300      	movs	r3, #0
  }
}
 8003632:	4618      	mov	r0, r3
 8003634:	3728      	adds	r7, #40	; 0x28
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
	...

0800363c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b088      	sub	sp, #32
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	603b      	str	r3, [r7, #0]
 8003648:	4613      	mov	r3, r2
 800364a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800364c:	f7fe f810 	bl	8001670 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003654:	1a9b      	subs	r3, r3, r2
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	4413      	add	r3, r2
 800365a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800365c:	f7fe f808 	bl	8001670 <HAL_GetTick>
 8003660:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003662:	4b39      	ldr	r3, [pc, #228]	; (8003748 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	015b      	lsls	r3, r3, #5
 8003668:	0d1b      	lsrs	r3, r3, #20
 800366a:	69fa      	ldr	r2, [r7, #28]
 800366c:	fb02 f303 	mul.w	r3, r2, r3
 8003670:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003672:	e054      	b.n	800371e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367a:	d050      	beq.n	800371e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800367c:	f7fd fff8 	bl	8001670 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	69fa      	ldr	r2, [r7, #28]
 8003688:	429a      	cmp	r2, r3
 800368a:	d902      	bls.n	8003692 <SPI_WaitFlagStateUntilTimeout+0x56>
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d13d      	bne.n	800370e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80036a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036aa:	d111      	bne.n	80036d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036b4:	d004      	beq.n	80036c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036be:	d107      	bne.n	80036d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036d8:	d10f      	bne.n	80036fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e017      	b.n	800373e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	3b01      	subs	r3, #1
 800371c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	4013      	ands	r3, r2
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	429a      	cmp	r2, r3
 800372c:	bf0c      	ite	eq
 800372e:	2301      	moveq	r3, #1
 8003730:	2300      	movne	r3, #0
 8003732:	b2db      	uxtb	r3, r3
 8003734:	461a      	mov	r2, r3
 8003736:	79fb      	ldrb	r3, [r7, #7]
 8003738:	429a      	cmp	r2, r3
 800373a:	d19b      	bne.n	8003674 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3720      	adds	r7, #32
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	20000014 	.word	0x20000014

0800374c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af02      	add	r7, sp, #8
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2201      	movs	r2, #1
 8003760:	2102      	movs	r1, #2
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f7ff ff6a 	bl	800363c <SPI_WaitFlagStateUntilTimeout>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d007      	beq.n	800377e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003772:	f043 0220 	orr.w	r2, r3, #32
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e013      	b.n	80037a6 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2200      	movs	r2, #0
 8003786:	2180      	movs	r1, #128	; 0x80
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f7ff ff57 	bl	800363c <SPI_WaitFlagStateUntilTimeout>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d007      	beq.n	80037a4 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003798:	f043 0220 	orr.w	r2, r3, #32
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e000      	b.n	80037a6 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
	...

080037b0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80037b4:	4904      	ldr	r1, [pc, #16]	; (80037c8 <MX_FATFS_Init+0x18>)
 80037b6:	4805      	ldr	r0, [pc, #20]	; (80037cc <MX_FATFS_Init+0x1c>)
 80037b8:	f000 f8ac 	bl	8003914 <FATFS_LinkDriver>
 80037bc:	4603      	mov	r3, r0
 80037be:	461a      	mov	r2, r3
 80037c0:	4b03      	ldr	r3, [pc, #12]	; (80037d0 <MX_FATFS_Init+0x20>)
 80037c2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80037c4:	bf00      	nop
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	20000514 	.word	0x20000514
 80037cc:	20000020 	.word	0x20000020
 80037d0:	20000510 	.word	0x20000510

080037d4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	4603      	mov	r3, r0
 80037dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
    return SD_disk_initialize(pdrv);
 80037de:	79fb      	ldrb	r3, [r7, #7]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7fc fee3 	bl	80005ac <SD_disk_initialize>
 80037e6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3708      	adds	r7, #8
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	4603      	mov	r3, r0
 80037f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
    return SD_disk_status(pdrv);
 80037fa:	79fb      	ldrb	r3, [r7, #7]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7fc ffbb 	bl	8000778 <SD_disk_status>
 8003802:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	60b9      	str	r1, [r7, #8]
 8003814:	607a      	str	r2, [r7, #4]
 8003816:	603b      	str	r3, [r7, #0]
 8003818:	4603      	mov	r3, r0
 800381a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 800381c:	7bf8      	ldrb	r0, [r7, #15]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	68b9      	ldr	r1, [r7, #8]
 8003824:	f7fc ffbc 	bl	80007a0 <SD_disk_read>
 8003828:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b084      	sub	sp, #16
 8003836:	af00      	add	r7, sp, #0
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	603b      	str	r3, [r7, #0]
 800383e:	4603      	mov	r3, r0
 8003840:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 8003842:	7bf8      	ldrb	r0, [r7, #15]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	68b9      	ldr	r1, [r7, #8]
 800384a:	f7fd f813 	bl	8000874 <SD_disk_write>
 800384e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	4603      	mov	r3, r0
 8003860:	603a      	str	r2, [r7, #0]
 8003862:	71fb      	strb	r3, [r7, #7]
 8003864:	460b      	mov	r3, r1
 8003866:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 8003868:	79b9      	ldrb	r1, [r7, #6]
 800386a:	79fb      	ldrb	r3, [r7, #7]
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f7fd f884 	bl	800097c <SD_disk_ioctl>
 8003874:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003876:	4618      	mov	r0, r3
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
	...

08003880 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8003880:	b480      	push	{r7}
 8003882:	b087      	sub	sp, #28
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	4613      	mov	r3, r2
 800388c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800388e:	2301      	movs	r3, #1
 8003890:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8003892:	2300      	movs	r3, #0
 8003894:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8003896:	4b1e      	ldr	r3, [pc, #120]	; (8003910 <FATFS_LinkDriverEx+0x90>)
 8003898:	7a5b      	ldrb	r3, [r3, #9]
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b01      	cmp	r3, #1
 800389e:	d831      	bhi.n	8003904 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80038a0:	4b1b      	ldr	r3, [pc, #108]	; (8003910 <FATFS_LinkDriverEx+0x90>)
 80038a2:	7a5b      	ldrb	r3, [r3, #9]
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	461a      	mov	r2, r3
 80038a8:	4b19      	ldr	r3, [pc, #100]	; (8003910 <FATFS_LinkDriverEx+0x90>)
 80038aa:	2100      	movs	r1, #0
 80038ac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80038ae:	4b18      	ldr	r3, [pc, #96]	; (8003910 <FATFS_LinkDriverEx+0x90>)
 80038b0:	7a5b      	ldrb	r3, [r3, #9]
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	4a16      	ldr	r2, [pc, #88]	; (8003910 <FATFS_LinkDriverEx+0x90>)
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80038be:	4b14      	ldr	r3, [pc, #80]	; (8003910 <FATFS_LinkDriverEx+0x90>)
 80038c0:	7a5b      	ldrb	r3, [r3, #9]
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	461a      	mov	r2, r3
 80038c6:	4b12      	ldr	r3, [pc, #72]	; (8003910 <FATFS_LinkDriverEx+0x90>)
 80038c8:	4413      	add	r3, r2
 80038ca:	79fa      	ldrb	r2, [r7, #7]
 80038cc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80038ce:	4b10      	ldr	r3, [pc, #64]	; (8003910 <FATFS_LinkDriverEx+0x90>)
 80038d0:	7a5b      	ldrb	r3, [r3, #9]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	1c5a      	adds	r2, r3, #1
 80038d6:	b2d1      	uxtb	r1, r2
 80038d8:	4a0d      	ldr	r2, [pc, #52]	; (8003910 <FATFS_LinkDriverEx+0x90>)
 80038da:	7251      	strb	r1, [r2, #9]
 80038dc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80038de:	7dbb      	ldrb	r3, [r7, #22]
 80038e0:	3330      	adds	r3, #48	; 0x30
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	3301      	adds	r3, #1
 80038ec:	223a      	movs	r2, #58	; 0x3a
 80038ee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	3302      	adds	r3, #2
 80038f4:	222f      	movs	r2, #47	; 0x2f
 80038f6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	3303      	adds	r3, #3
 80038fc:	2200      	movs	r2, #0
 80038fe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8003900:	2300      	movs	r3, #0
 8003902:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8003904:	7dfb      	ldrb	r3, [r7, #23]
}
 8003906:	4618      	mov	r0, r3
 8003908:	371c      	adds	r7, #28
 800390a:	46bd      	mov	sp, r7
 800390c:	bc80      	pop	{r7}
 800390e:	4770      	bx	lr
 8003910:	20000518 	.word	0x20000518

08003914 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800391e:	2200      	movs	r2, #0
 8003920:	6839      	ldr	r1, [r7, #0]
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7ff ffac 	bl	8003880 <FATFS_LinkDriverEx>
 8003928:	4603      	mov	r3, r0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <__itoa>:
 8003932:	1e93      	subs	r3, r2, #2
 8003934:	2b22      	cmp	r3, #34	; 0x22
 8003936:	b510      	push	{r4, lr}
 8003938:	460c      	mov	r4, r1
 800393a:	d904      	bls.n	8003946 <__itoa+0x14>
 800393c:	2300      	movs	r3, #0
 800393e:	461c      	mov	r4, r3
 8003940:	700b      	strb	r3, [r1, #0]
 8003942:	4620      	mov	r0, r4
 8003944:	bd10      	pop	{r4, pc}
 8003946:	2a0a      	cmp	r2, #10
 8003948:	d109      	bne.n	800395e <__itoa+0x2c>
 800394a:	2800      	cmp	r0, #0
 800394c:	da07      	bge.n	800395e <__itoa+0x2c>
 800394e:	232d      	movs	r3, #45	; 0x2d
 8003950:	700b      	strb	r3, [r1, #0]
 8003952:	2101      	movs	r1, #1
 8003954:	4240      	negs	r0, r0
 8003956:	4421      	add	r1, r4
 8003958:	f000 f806 	bl	8003968 <__utoa>
 800395c:	e7f1      	b.n	8003942 <__itoa+0x10>
 800395e:	2100      	movs	r1, #0
 8003960:	e7f9      	b.n	8003956 <__itoa+0x24>

08003962 <itoa>:
 8003962:	f7ff bfe6 	b.w	8003932 <__itoa>
	...

08003968 <__utoa>:
 8003968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800396a:	b08b      	sub	sp, #44	; 0x2c
 800396c:	4605      	mov	r5, r0
 800396e:	460b      	mov	r3, r1
 8003970:	466e      	mov	r6, sp
 8003972:	4c1d      	ldr	r4, [pc, #116]	; (80039e8 <__utoa+0x80>)
 8003974:	f104 0c20 	add.w	ip, r4, #32
 8003978:	4637      	mov	r7, r6
 800397a:	6820      	ldr	r0, [r4, #0]
 800397c:	6861      	ldr	r1, [r4, #4]
 800397e:	3408      	adds	r4, #8
 8003980:	c703      	stmia	r7!, {r0, r1}
 8003982:	4564      	cmp	r4, ip
 8003984:	463e      	mov	r6, r7
 8003986:	d1f7      	bne.n	8003978 <__utoa+0x10>
 8003988:	7921      	ldrb	r1, [r4, #4]
 800398a:	6820      	ldr	r0, [r4, #0]
 800398c:	7139      	strb	r1, [r7, #4]
 800398e:	1e91      	subs	r1, r2, #2
 8003990:	2922      	cmp	r1, #34	; 0x22
 8003992:	6038      	str	r0, [r7, #0]
 8003994:	f04f 0100 	mov.w	r1, #0
 8003998:	d904      	bls.n	80039a4 <__utoa+0x3c>
 800399a:	7019      	strb	r1, [r3, #0]
 800399c:	460b      	mov	r3, r1
 800399e:	4618      	mov	r0, r3
 80039a0:	b00b      	add	sp, #44	; 0x2c
 80039a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039a4:	1e58      	subs	r0, r3, #1
 80039a6:	4684      	mov	ip, r0
 80039a8:	fbb5 f7f2 	udiv	r7, r5, r2
 80039ac:	fb02 5617 	mls	r6, r2, r7, r5
 80039b0:	3628      	adds	r6, #40	; 0x28
 80039b2:	446e      	add	r6, sp
 80039b4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80039b8:	460c      	mov	r4, r1
 80039ba:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80039be:	462e      	mov	r6, r5
 80039c0:	42b2      	cmp	r2, r6
 80039c2:	463d      	mov	r5, r7
 80039c4:	f101 0101 	add.w	r1, r1, #1
 80039c8:	d9ee      	bls.n	80039a8 <__utoa+0x40>
 80039ca:	2200      	movs	r2, #0
 80039cc:	545a      	strb	r2, [r3, r1]
 80039ce:	1919      	adds	r1, r3, r4
 80039d0:	1aa5      	subs	r5, r4, r2
 80039d2:	42aa      	cmp	r2, r5
 80039d4:	dae3      	bge.n	800399e <__utoa+0x36>
 80039d6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80039da:	780e      	ldrb	r6, [r1, #0]
 80039dc:	3201      	adds	r2, #1
 80039de:	7006      	strb	r6, [r0, #0]
 80039e0:	f801 5901 	strb.w	r5, [r1], #-1
 80039e4:	e7f4      	b.n	80039d0 <__utoa+0x68>
 80039e6:	bf00      	nop
 80039e8:	08005b42 	.word	0x08005b42

080039ec <memset>:
 80039ec:	4603      	mov	r3, r0
 80039ee:	4402      	add	r2, r0
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d100      	bne.n	80039f6 <memset+0xa>
 80039f4:	4770      	bx	lr
 80039f6:	f803 1b01 	strb.w	r1, [r3], #1
 80039fa:	e7f9      	b.n	80039f0 <memset+0x4>

080039fc <__libc_init_array>:
 80039fc:	b570      	push	{r4, r5, r6, lr}
 80039fe:	2600      	movs	r6, #0
 8003a00:	4d0c      	ldr	r5, [pc, #48]	; (8003a34 <__libc_init_array+0x38>)
 8003a02:	4c0d      	ldr	r4, [pc, #52]	; (8003a38 <__libc_init_array+0x3c>)
 8003a04:	1b64      	subs	r4, r4, r5
 8003a06:	10a4      	asrs	r4, r4, #2
 8003a08:	42a6      	cmp	r6, r4
 8003a0a:	d109      	bne.n	8003a20 <__libc_init_array+0x24>
 8003a0c:	f000 f81a 	bl	8003a44 <_init>
 8003a10:	2600      	movs	r6, #0
 8003a12:	4d0a      	ldr	r5, [pc, #40]	; (8003a3c <__libc_init_array+0x40>)
 8003a14:	4c0a      	ldr	r4, [pc, #40]	; (8003a40 <__libc_init_array+0x44>)
 8003a16:	1b64      	subs	r4, r4, r5
 8003a18:	10a4      	asrs	r4, r4, #2
 8003a1a:	42a6      	cmp	r6, r4
 8003a1c:	d105      	bne.n	8003a2a <__libc_init_array+0x2e>
 8003a1e:	bd70      	pop	{r4, r5, r6, pc}
 8003a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a24:	4798      	blx	r3
 8003a26:	3601      	adds	r6, #1
 8003a28:	e7ee      	b.n	8003a08 <__libc_init_array+0xc>
 8003a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a2e:	4798      	blx	r3
 8003a30:	3601      	adds	r6, #1
 8003a32:	e7f2      	b.n	8003a1a <__libc_init_array+0x1e>
 8003a34:	08005b68 	.word	0x08005b68
 8003a38:	08005b68 	.word	0x08005b68
 8003a3c:	08005b68 	.word	0x08005b68
 8003a40:	08005b6c 	.word	0x08005b6c

08003a44 <_init>:
 8003a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a46:	bf00      	nop
 8003a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a4a:	bc08      	pop	{r3}
 8003a4c:	469e      	mov	lr, r3
 8003a4e:	4770      	bx	lr

08003a50 <_fini>:
 8003a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a52:	bf00      	nop
 8003a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a56:	bc08      	pop	{r3}
 8003a58:	469e      	mov	lr, r3
 8003a5a:	4770      	bx	lr


GNSS_SD_CARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009530  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e2c  0800963c  0800963c  0001963c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c468  0800c468  00020580  2**0
                  CONTENTS
  4 .ARM          00000000  0800c468  0800c468  00020580  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c468  0800c468  00020580  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c468  0800c468  0001c468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c46c  0800c46c  0001c46c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000580  20000000  0800c470  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000027b8  20000580  0800c9f0  00020580  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002d38  0800c9f0  00022d38  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020580  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000205a9  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011afa  00000000  00000000  000205ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f20  00000000  00000000  000320e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001078  00000000  00000000  00035008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cd9  00000000  00000000  00036080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018ee6  00000000  00000000  00036d59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017278  00000000  00000000  0004fc3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087b80  00000000  00000000  00066eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000045cc  00000000  00000000  000eea38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000f3004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000580 	.word	0x20000580
 8000128:	00000000 	.word	0x00000000
 800012c:	08009624 	.word	0x08009624

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000584 	.word	0x20000584
 8000148:	08009624 	.word	0x08009624

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_frsub>:
 8000988:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800098c:	e002      	b.n	8000994 <__addsf3>
 800098e:	bf00      	nop

08000990 <__aeabi_fsub>:
 8000990:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000994 <__addsf3>:
 8000994:	0042      	lsls	r2, r0, #1
 8000996:	bf1f      	itttt	ne
 8000998:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800099c:	ea92 0f03 	teqne	r2, r3
 80009a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a8:	d06a      	beq.n	8000a80 <__addsf3+0xec>
 80009aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b2:	bfc1      	itttt	gt
 80009b4:	18d2      	addgt	r2, r2, r3
 80009b6:	4041      	eorgt	r1, r0
 80009b8:	4048      	eorgt	r0, r1
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	bfb8      	it	lt
 80009be:	425b      	neglt	r3, r3
 80009c0:	2b19      	cmp	r3, #25
 80009c2:	bf88      	it	hi
 80009c4:	4770      	bxhi	lr
 80009c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d2:	bf18      	it	ne
 80009d4:	4240      	negne	r0, r0
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e2:	bf18      	it	ne
 80009e4:	4249      	negne	r1, r1
 80009e6:	ea92 0f03 	teq	r2, r3
 80009ea:	d03f      	beq.n	8000a6c <__addsf3+0xd8>
 80009ec:	f1a2 0201 	sub.w	r2, r2, #1
 80009f0:	fa41 fc03 	asr.w	ip, r1, r3
 80009f4:	eb10 000c 	adds.w	r0, r0, ip
 80009f8:	f1c3 0320 	rsb	r3, r3, #32
 80009fc:	fa01 f103 	lsl.w	r1, r1, r3
 8000a00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a04:	d502      	bpl.n	8000a0c <__addsf3+0x78>
 8000a06:	4249      	negs	r1, r1
 8000a08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a10:	d313      	bcc.n	8000a3a <__addsf3+0xa6>
 8000a12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a16:	d306      	bcc.n	8000a26 <__addsf3+0x92>
 8000a18:	0840      	lsrs	r0, r0, #1
 8000a1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a1e:	f102 0201 	add.w	r2, r2, #1
 8000a22:	2afe      	cmp	r2, #254	; 0xfe
 8000a24:	d251      	bcs.n	8000aca <__addsf3+0x136>
 8000a26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a2e:	bf08      	it	eq
 8000a30:	f020 0001 	biceq.w	r0, r0, #1
 8000a34:	ea40 0003 	orr.w	r0, r0, r3
 8000a38:	4770      	bx	lr
 8000a3a:	0049      	lsls	r1, r1, #1
 8000a3c:	eb40 0000 	adc.w	r0, r0, r0
 8000a40:	3a01      	subs	r2, #1
 8000a42:	bf28      	it	cs
 8000a44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a48:	d2ed      	bcs.n	8000a26 <__addsf3+0x92>
 8000a4a:	fab0 fc80 	clz	ip, r0
 8000a4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a52:	ebb2 020c 	subs.w	r2, r2, ip
 8000a56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5a:	bfaa      	itet	ge
 8000a5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a60:	4252      	neglt	r2, r2
 8000a62:	4318      	orrge	r0, r3
 8000a64:	bfbc      	itt	lt
 8000a66:	40d0      	lsrlt	r0, r2
 8000a68:	4318      	orrlt	r0, r3
 8000a6a:	4770      	bx	lr
 8000a6c:	f092 0f00 	teq	r2, #0
 8000a70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a74:	bf06      	itte	eq
 8000a76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7a:	3201      	addeq	r2, #1
 8000a7c:	3b01      	subne	r3, #1
 8000a7e:	e7b5      	b.n	80009ec <__addsf3+0x58>
 8000a80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8e:	d021      	beq.n	8000ad4 <__addsf3+0x140>
 8000a90:	ea92 0f03 	teq	r2, r3
 8000a94:	d004      	beq.n	8000aa0 <__addsf3+0x10c>
 8000a96:	f092 0f00 	teq	r2, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	4608      	moveq	r0, r1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea90 0f01 	teq	r0, r1
 8000aa4:	bf1c      	itt	ne
 8000aa6:	2000      	movne	r0, #0
 8000aa8:	4770      	bxne	lr
 8000aaa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aae:	d104      	bne.n	8000aba <__addsf3+0x126>
 8000ab0:	0040      	lsls	r0, r0, #1
 8000ab2:	bf28      	it	cs
 8000ab4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ab8:	4770      	bx	lr
 8000aba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000abe:	bf3c      	itt	cc
 8000ac0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bxcc	lr
 8000ac6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ace:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad2:	4770      	bx	lr
 8000ad4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ad8:	bf16      	itet	ne
 8000ada:	4608      	movne	r0, r1
 8000adc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae0:	4601      	movne	r1, r0
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	bf06      	itte	eq
 8000ae6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aea:	ea90 0f01 	teqeq	r0, r1
 8000aee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_ui2f>:
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	e004      	b.n	8000b04 <__aeabi_i2f+0x8>
 8000afa:	bf00      	nop

08000afc <__aeabi_i2f>:
 8000afc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b00:	bf48      	it	mi
 8000b02:	4240      	negmi	r0, r0
 8000b04:	ea5f 0c00 	movs.w	ip, r0
 8000b08:	bf08      	it	eq
 8000b0a:	4770      	bxeq	lr
 8000b0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b10:	4601      	mov	r1, r0
 8000b12:	f04f 0000 	mov.w	r0, #0
 8000b16:	e01c      	b.n	8000b52 <__aeabi_l2f+0x2a>

08000b18 <__aeabi_ul2f>:
 8000b18:	ea50 0201 	orrs.w	r2, r0, r1
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e00a      	b.n	8000b3c <__aeabi_l2f+0x14>
 8000b26:	bf00      	nop

08000b28 <__aeabi_l2f>:
 8000b28:	ea50 0201 	orrs.w	r2, r0, r1
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__aeabi_l2f+0x14>
 8000b36:	4240      	negs	r0, r0
 8000b38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b3c:	ea5f 0c01 	movs.w	ip, r1
 8000b40:	bf02      	ittt	eq
 8000b42:	4684      	moveq	ip, r0
 8000b44:	4601      	moveq	r1, r0
 8000b46:	2000      	moveq	r0, #0
 8000b48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b4c:	bf08      	it	eq
 8000b4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b56:	fabc f28c 	clz	r2, ip
 8000b5a:	3a08      	subs	r2, #8
 8000b5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b60:	db10      	blt.n	8000b84 <__aeabi_l2f+0x5c>
 8000b62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b66:	4463      	add	r3, ip
 8000b68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b6c:	f1c2 0220 	rsb	r2, r2, #32
 8000b70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b74:	fa20 f202 	lsr.w	r2, r0, r2
 8000b78:	eb43 0002 	adc.w	r0, r3, r2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f102 0220 	add.w	r2, r2, #32
 8000b88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8c:	f1c2 0220 	rsb	r2, r2, #32
 8000b90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b94:	fa21 f202 	lsr.w	r2, r1, r2
 8000b98:	eb43 0002 	adc.w	r0, r3, r2
 8000b9c:	bf08      	it	eq
 8000b9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba2:	4770      	bx	lr

08000ba4 <__aeabi_f2uiz>:
 8000ba4:	0042      	lsls	r2, r0, #1
 8000ba6:	d20e      	bcs.n	8000bc6 <__aeabi_f2uiz+0x22>
 8000ba8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000bac:	d30b      	bcc.n	8000bc6 <__aeabi_f2uiz+0x22>
 8000bae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000bb2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000bb6:	d409      	bmi.n	8000bcc <__aeabi_f2uiz+0x28>
 8000bb8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000bbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc0:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr
 8000bcc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000bd0:	d101      	bne.n	8000bd6 <__aeabi_f2uiz+0x32>
 8000bd2:	0242      	lsls	r2, r0, #9
 8000bd4:	d102      	bne.n	8000bdc <__aeabi_f2uiz+0x38>
 8000bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8000bda:	4770      	bx	lr
 8000bdc:	f04f 0000 	mov.w	r0, #0
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <initDisplay>:
				.minutoStr[0] = '0',	.minutoStr[1] = '0',
				.segundoStr[0] = '0',	.segundoStr[1] = '0'}};
UART_HandleTypeDef huart1;


void initDisplay(displayConfig *disp){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

	if(disp->configurado != NONE){
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d02b      	beq.n	8000c4c <initDisplay+0x68>
		SSD1306_Init();
 8000bf4:	f001 f952 	bl	8001e9c <SSD1306_Init>
		if(disp->configurado == VELOCIDADE){
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d112      	bne.n	8000c26 <initDisplay+0x42>
			SSD1306_GotoXY (0,0);
 8000c00:	2100      	movs	r1, #0
 8000c02:	2000      	movs	r0, #0
 8000c04:	f001 fab2 	bl	800216c <SSD1306_GotoXY>
			SSD1306_Puts ("Velocidade", &Font_11x18, 1);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	4912      	ldr	r1, [pc, #72]	; (8000c54 <initDisplay+0x70>)
 8000c0c:	4812      	ldr	r0, [pc, #72]	; (8000c58 <initDisplay+0x74>)
 8000c0e:	f001 fb43 	bl	8002298 <SSD1306_Puts>
			SSD1306_GotoXY (80, 36);
 8000c12:	2124      	movs	r1, #36	; 0x24
 8000c14:	2050      	movs	r0, #80	; 0x50
 8000c16:	f001 faa9 	bl	800216c <SSD1306_GotoXY>
			SSD1306_Puts ("km/h", &Font_11x18, 1);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	490d      	ldr	r1, [pc, #52]	; (8000c54 <initDisplay+0x70>)
 8000c1e:	480f      	ldr	r0, [pc, #60]	; (8000c5c <initDisplay+0x78>)
 8000c20:	f001 fb3a 	bl	8002298 <SSD1306_Puts>
 8000c24:	e010      	b.n	8000c48 <initDisplay+0x64>

		}else if(disp->configurado == INFO){
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d00c      	beq.n	8000c48 <initDisplay+0x64>

		}else if(disp->configurado == HORA){
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b03      	cmp	r3, #3
 8000c34:	d108      	bne.n	8000c48 <initDisplay+0x64>
			SSD1306_GotoXY (0,0);
 8000c36:	2100      	movs	r1, #0
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f001 fa97 	bl	800216c <SSD1306_GotoXY>
			SSD1306_Puts ("Hora", &Font_11x18, 1);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	4904      	ldr	r1, [pc, #16]	; (8000c54 <initDisplay+0x70>)
 8000c42:	4807      	ldr	r0, [pc, #28]	; (8000c60 <initDisplay+0x7c>)
 8000c44:	f001 fb28 	bl	8002298 <SSD1306_Puts>
		}
		SSD1306_UpdateScreen();
 8000c48:	f001 f9ec 	bl	8002024 <SSD1306_UpdateScreen>
	}
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000550 	.word	0x20000550
 8000c58:	0800963c 	.word	0x0800963c
 8000c5c:	08009648 	.word	0x08009648
 8000c60:	08009650 	.word	0x08009650

08000c64 <updateDisplay>:

void updateDisplay(displayConfig *disp, GNSS *gn){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
	if(disp->configurado == VELOCIDADE){
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d104      	bne.n	8000c80 <updateDisplay+0x1c>
		updateDisplayVelocidade(disp, gn);
 8000c76:	6839      	ldr	r1, [r7, #0]
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f000 f883 	bl	8000d84 <updateDisplayVelocidade>
	}else if(disp->configurado == INFO){

	}else if(disp->configurado == HORA){
		updateDisplayHora(disp, gn);
	}
}
 8000c7e:	e00b      	b.n	8000c98 <updateDisplay+0x34>
	}else if(disp->configurado == INFO){
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d007      	beq.n	8000c98 <updateDisplay+0x34>
	}else if(disp->configurado == HORA){
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b03      	cmp	r3, #3
 8000c8e:	d103      	bne.n	8000c98 <updateDisplay+0x34>
		updateDisplayHora(disp, gn);
 8000c90:	6839      	ldr	r1, [r7, #0]
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f000 f824 	bl	8000ce0 <updateDisplayHora>
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <updateDisplayNumeroSatelites>:

void updateDisplayNumeroSatelites(displayConfig *disp, GNSS *gn){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
	SSD1306_GotoXY (113, 0);
 8000caa:	2100      	movs	r1, #0
 8000cac:	2071      	movs	r0, #113	; 0x71
 8000cae:	f001 fa5d 	bl	800216c <SSD1306_GotoXY>
	SSD1306_Putc(gn->numeroSatelitesStr[0], &Font_7x10, 1);
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	f893 3540 	ldrb.w	r3, [r3, #1344]	; 0x540
 8000cb8:	2201      	movs	r2, #1
 8000cba:	4908      	ldr	r1, [pc, #32]	; (8000cdc <updateDisplayNumeroSatelites+0x3c>)
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f001 fa6b 	bl	8002198 <SSD1306_Putc>
	SSD1306_Putc(gn->numeroSatelitesStr[1], &Font_7x10, 1);
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	f893 3541 	ldrb.w	r3, [r3, #1345]	; 0x541
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4904      	ldr	r1, [pc, #16]	; (8000cdc <updateDisplayNumeroSatelites+0x3c>)
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f001 fa63 	bl	8002198 <SSD1306_Putc>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000548 	.word	0x20000548

08000ce0 <updateDisplayHora>:

void updateDisplayHora(displayConfig *disp, GNSS *gn){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]

	updateDisplayNumeroSatelites(disp, gn);
 8000cea:	6839      	ldr	r1, [r7, #0]
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff ffd7 	bl	8000ca0 <updateDisplayNumeroSatelites>

	SSD1306_GotoXY (0, 30);
 8000cf2:	211e      	movs	r1, #30
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f001 fa39 	bl	800216c <SSD1306_GotoXY>
	SSD1306_Putc(gn->data.horaUTCStr[0], &Font_16x26, 1);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	f893 352c 	ldrb.w	r3, [r3, #1324]	; 0x52c
 8000d00:	2201      	movs	r2, #1
 8000d02:	491e      	ldr	r1, [pc, #120]	; (8000d7c <updateDisplayHora+0x9c>)
 8000d04:	4618      	mov	r0, r3
 8000d06:	f001 fa47 	bl	8002198 <SSD1306_Putc>
	SSD1306_Putc(gn->data.horaUTCStr[1], &Font_16x26, 1);
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	f893 352d 	ldrb.w	r3, [r3, #1325]	; 0x52d
 8000d10:	2201      	movs	r2, #1
 8000d12:	491a      	ldr	r1, [pc, #104]	; (8000d7c <updateDisplayHora+0x9c>)
 8000d14:	4618      	mov	r0, r3
 8000d16:	f001 fa3f 	bl	8002198 <SSD1306_Putc>
	SSD1306_Putc(':', &Font_11x18, 1);
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	4918      	ldr	r1, [pc, #96]	; (8000d80 <updateDisplayHora+0xa0>)
 8000d1e:	203a      	movs	r0, #58	; 0x3a
 8000d20:	f001 fa3a 	bl	8002198 <SSD1306_Putc>
	SSD1306_Putc(gn->data.minutoStr[0], &Font_16x26, 1);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	f893 3530 	ldrb.w	r3, [r3, #1328]	; 0x530
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	4913      	ldr	r1, [pc, #76]	; (8000d7c <updateDisplayHora+0x9c>)
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f001 fa32 	bl	8002198 <SSD1306_Putc>
	SSD1306_Putc(gn->data.minutoStr[1], &Font_16x26, 1);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	f893 3531 	ldrb.w	r3, [r3, #1329]	; 0x531
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	490f      	ldr	r1, [pc, #60]	; (8000d7c <updateDisplayHora+0x9c>)
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f001 fa2a 	bl	8002198 <SSD1306_Putc>
	SSD1306_Putc(':', &Font_11x18, 1);
 8000d44:	2201      	movs	r2, #1
 8000d46:	490e      	ldr	r1, [pc, #56]	; (8000d80 <updateDisplayHora+0xa0>)
 8000d48:	203a      	movs	r0, #58	; 0x3a
 8000d4a:	f001 fa25 	bl	8002198 <SSD1306_Putc>
	SSD1306_Putc(gn->data.segundoStr[0], &Font_16x26, 1);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	f893 3532 	ldrb.w	r3, [r3, #1330]	; 0x532
 8000d54:	2201      	movs	r2, #1
 8000d56:	4909      	ldr	r1, [pc, #36]	; (8000d7c <updateDisplayHora+0x9c>)
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f001 fa1d 	bl	8002198 <SSD1306_Putc>
	SSD1306_Putc(gn->data.segundoStr[1], &Font_16x26, 1);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	f893 3533 	ldrb.w	r3, [r3, #1331]	; 0x533
 8000d64:	2201      	movs	r2, #1
 8000d66:	4905      	ldr	r1, [pc, #20]	; (8000d7c <updateDisplayHora+0x9c>)
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f001 fa15 	bl	8002198 <SSD1306_Putc>
	SSD1306_UpdateScreen();
 8000d6e:	f001 f959 	bl	8002024 <SSD1306_UpdateScreen>
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000558 	.word	0x20000558
 8000d80:	20000550 	.word	0x20000550

08000d84 <updateDisplayVelocidade>:




void updateDisplayVelocidade(displayConfig *disp, GNSS *gn){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
	char _snum[4];

	updateDisplayNumeroSatelites(disp, gn);
 8000d8e:	6839      	ldr	r1, [r7, #0]
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f7ff ff85 	bl	8000ca0 <updateDisplayNumeroSatelites>
	itoa(gn->velocidade.velocidade8bits, _snum, 10);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	f893 351c 	ldrb.w	r3, [r3, #1308]	; 0x51c
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f107 030c 	add.w	r3, r7, #12
 8000da2:	220a      	movs	r2, #10
 8000da4:	4619      	mov	r1, r3
 8000da6:	f008 fbcd 	bl	8009544 <itoa>
	SSD1306_GotoXY (25, 30);
 8000daa:	211e      	movs	r1, #30
 8000dac:	2019      	movs	r0, #25
 8000dae:	f001 f9dd 	bl	800216c <SSD1306_GotoXY>
	if(gn->velocidade.velocidade8bits < 10) {// 1 DIGIT
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	f893 351c 	ldrb.w	r3, [r3, #1308]	; 0x51c
 8000db8:	2b09      	cmp	r3, #9
 8000dba:	d808      	bhi.n	8000dce <updateDisplayVelocidade+0x4a>

		_snum[3] = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	73fb      	strb	r3, [r7, #15]
		_snum[2] = _snum[0];
 8000dc0:	7b3b      	ldrb	r3, [r7, #12]
 8000dc2:	73bb      	strb	r3, [r7, #14]
		_snum[1] = ' ';
 8000dc4:	2320      	movs	r3, #32
 8000dc6:	737b      	strb	r3, [r7, #13]
		_snum[0] = ' ';
 8000dc8:	2320      	movs	r3, #32
 8000dca:	733b      	strb	r3, [r7, #12]
 8000dcc:	e015      	b.n	8000dfa <updateDisplayVelocidade+0x76>

	}
	else if (gn->velocidade.velocidade8bits < 100 ) {// 2 DIGITS
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	f893 351c 	ldrb.w	r3, [r3, #1308]	; 0x51c
 8000dd4:	2b63      	cmp	r3, #99	; 0x63
 8000dd6:	d808      	bhi.n	8000dea <updateDisplayVelocidade+0x66>
		_snum[3] = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	73fb      	strb	r3, [r7, #15]
		_snum[2] = _snum[1];
 8000ddc:	7b7b      	ldrb	r3, [r7, #13]
 8000dde:	73bb      	strb	r3, [r7, #14]
		_snum[1] = _snum[0];
 8000de0:	7b3b      	ldrb	r3, [r7, #12]
 8000de2:	737b      	strb	r3, [r7, #13]
		_snum[0] = ' ';
 8000de4:	2320      	movs	r3, #32
 8000de6:	733b      	strb	r3, [r7, #12]
 8000de8:	e007      	b.n	8000dfa <updateDisplayVelocidade+0x76>

	}
	else if (gn->velocidade.velocidade8bits < 1000 ) {// 3 DIGITS
		_snum[3] = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	73fb      	strb	r3, [r7, #15]
		_snum[2] = _snum[2];
 8000dee:	7bbb      	ldrb	r3, [r7, #14]
 8000df0:	73bb      	strb	r3, [r7, #14]
		_snum[1] = _snum[1];
 8000df2:	7b7b      	ldrb	r3, [r7, #13]
 8000df4:	737b      	strb	r3, [r7, #13]
		_snum[0] = _snum[0];
 8000df6:	7b3b      	ldrb	r3, [r7, #12]
 8000df8:	733b      	strb	r3, [r7, #12]
	}
	else {
		SSD1306_GotoXY (30, 30);  // 4 DIGIS
	}

	SSD1306_Puts (_snum, &Font_16x26, 1);
 8000dfa:	f107 030c 	add.w	r3, r7, #12
 8000dfe:	2201      	movs	r2, #1
 8000e00:	4904      	ldr	r1, [pc, #16]	; (8000e14 <updateDisplayVelocidade+0x90>)
 8000e02:	4618      	mov	r0, r3
 8000e04:	f001 fa48 	bl	8002298 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8000e08:	f001 f90c 	bl	8002024 <SSD1306_UpdateScreen>

}
 8000e0c:	bf00      	nop
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000558 	.word	0x20000558

08000e18 <converte4Bytes2float>:

float converte4Bytes2float(uint8_t *str){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]

	if(*(str+1) == '.'){//x.xx
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3301      	adds	r3, #1
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b2e      	cmp	r3, #46	; 0x2e
 8000e28:	d125      	bne.n	8000e76 <converte4Bytes2float+0x5e>
		return (((*(str+3)-'0')+10*((*(str+2)-'0'))+100*((*(str)-'0')))/100.0);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3303      	adds	r3, #3
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3302      	adds	r3, #2
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000e3e:	4613      	mov	r3, r2
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	4413      	add	r3, r2
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	18ca      	adds	r2, r1, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	3b30      	subs	r3, #48	; 0x30
 8000e4e:	2164      	movs	r1, #100	; 0x64
 8000e50:	fb01 f303 	mul.w	r3, r1, r3
 8000e54:	4413      	add	r3, r2
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff faca 	bl	80003f0 <__aeabi_i2d>
 8000e5c:	f04f 0200 	mov.w	r2, #0
 8000e60:	4b29      	ldr	r3, [pc, #164]	; (8000f08 <converte4Bytes2float+0xf0>)
 8000e62:	f7ff fc59 	bl	8000718 <__aeabi_ddiv>
 8000e66:	4602      	mov	r2, r0
 8000e68:	460b      	mov	r3, r1
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f7ff fd3b 	bl	80008e8 <__aeabi_d2f>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e044      	b.n	8000f00 <converte4Bytes2float+0xe8>
	}else if(*(str+2) == '.'){//xx.x
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3302      	adds	r3, #2
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b2e      	cmp	r3, #46	; 0x2e
 8000e7e:	d125      	bne.n	8000ecc <converte4Bytes2float+0xb4>
		return (((*(str+3)-'0')+10*((*(str+1)-'0'))+100*((*(str)-'0')))/10.0);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3303      	adds	r3, #3
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000e94:	4613      	mov	r3, r2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	4413      	add	r3, r2
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	18ca      	adds	r2, r1, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	3b30      	subs	r3, #48	; 0x30
 8000ea4:	2164      	movs	r1, #100	; 0x64
 8000ea6:	fb01 f303 	mul.w	r3, r1, r3
 8000eaa:	4413      	add	r3, r2
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fa9f 	bl	80003f0 <__aeabi_i2d>
 8000eb2:	f04f 0200 	mov.w	r2, #0
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <converte4Bytes2float+0xf4>)
 8000eb8:	f7ff fc2e 	bl	8000718 <__aeabi_ddiv>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f7ff fd10 	bl	80008e8 <__aeabi_d2f>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	e019      	b.n	8000f00 <converte4Bytes2float+0xe8>
	}else{//xxx.
		return (((*(str+2)-'0')+10*((*(str+1)-'0'))+100*((*(str)-'0'))));
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3302      	adds	r3, #2
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	4413      	add	r3, r2
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	18ca      	adds	r2, r1, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	3b30      	subs	r3, #48	; 0x30
 8000ef0:	2164      	movs	r1, #100	; 0x64
 8000ef2:	fb01 f303 	mul.w	r3, r1, r3
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fdff 	bl	8000afc <__aeabi_i2f>
 8000efe:	4603      	mov	r3, r0
	}
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40590000 	.word	0x40590000
 8000f0c:	40240000 	.word	0x40240000

08000f10 <GravaNMEASDCard>:

	return ((*str)-'0')*1000+(*(str+1)-'0')*100+(*(str+2)-'0')*10+(*(str+3)-'0');

}

void GravaNMEASDCard(uint8_t *str){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	static FATFS fs;
	static FIL fil;
	uint8_t aux = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	73fb      	strb	r3, [r7, #15]

	uint8_t *paux = str;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	60bb      	str	r3, [r7, #8]

	while(*str != '\n'){
 8000f20:	e008      	b.n	8000f34 <GravaNMEASDCard+0x24>
		str++;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	3301      	adds	r3, #1
 8000f26:	607b      	str	r3, [r7, #4]
		aux++;
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	73fb      	strb	r3, [r7, #15]
		if(aux >= 100)return;
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	2b63      	cmp	r3, #99	; 0x63
 8000f32:	d823      	bhi.n	8000f7c <GravaNMEASDCard+0x6c>
	while(*str != '\n'){
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b0a      	cmp	r3, #10
 8000f3a:	d1f2      	bne.n	8000f22 <GravaNMEASDCard+0x12>
	}
	str++;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	607b      	str	r3, [r7, #4]
	*str = 0;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]


	f_mount(&fs, "", 0);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	490e      	ldr	r1, [pc, #56]	; (8000f84 <GravaNMEASDCard+0x74>)
 8000f4c:	480e      	ldr	r0, [pc, #56]	; (8000f88 <GravaNMEASDCard+0x78>)
 8000f4e:	f007 f823 	bl	8007f98 <f_mount>
	f_open(&fil, "teste1.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8000f52:	2213      	movs	r2, #19
 8000f54:	490d      	ldr	r1, [pc, #52]	; (8000f8c <GravaNMEASDCard+0x7c>)
 8000f56:	480e      	ldr	r0, [pc, #56]	; (8000f90 <GravaNMEASDCard+0x80>)
 8000f58:	f007 f868 	bl	800802c <f_open>
	f_lseek(&fil, f_size(&fil));
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <GravaNMEASDCard+0x80>)
 8000f5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	4619      	mov	r1, r3
 8000f66:	480a      	ldr	r0, [pc, #40]	; (8000f90 <GravaNMEASDCard+0x80>)
 8000f68:	f007 feaa 	bl	8008cc0 <f_lseek>
	f_puts(paux, &fil);
 8000f6c:	4908      	ldr	r1, [pc, #32]	; (8000f90 <GravaNMEASDCard+0x80>)
 8000f6e:	68b8      	ldr	r0, [r7, #8]
 8000f70:	f008 f9d4 	bl	800931c <f_puts>
	f_close(&fil);
 8000f74:	4806      	ldr	r0, [pc, #24]	; (8000f90 <GravaNMEASDCard+0x80>)
 8000f76:	f007 fe78 	bl	8008c6a <f_close>
 8000f7a:	e000      	b.n	8000f7e <GravaNMEASDCard+0x6e>
		if(aux >= 100)return;
 8000f7c:	bf00      	nop




}
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	08009658 	.word	0x08009658
 8000f88:	200005e8 	.word	0x200005e8
 8000f8c:	0800965c 	.word	0x0800965c
 8000f90:	20001618 	.word	0x20001618

08000f94 <decodeNMEA>:

void decodeNMEA(uint8_t *str, GNSS *gn){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
	uint8_t *p;
	uint8_t contVirgulas = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	72fb      	strb	r3, [r7, #11]
//GNRMC
//GNVTG OK -> velocidade
//GNGLL
//GPGSA
//BDGSV
	if(str[0] == '$'){
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b24      	cmp	r3, #36	; 0x24
 8000fa8:	f040 810b 	bne.w	80011c2 <decodeNMEA+0x22e>
		GravaNMEASDCard(str);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ffaf 	bl	8000f10 <GravaNMEASDCard>
		if(str[1] == 'G'){//G
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b47      	cmp	r3, #71	; 0x47
 8000fba:	f040 8102 	bne.w	80011c2 <decodeNMEA+0x22e>
			if(str[2] == 'N'){//GN
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b4e      	cmp	r3, #78	; 0x4e
 8000fc6:	f040 80fc 	bne.w	80011c2 <decodeNMEA+0x22e>
				if(str[3] == 'V'){//GNV
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3303      	adds	r3, #3
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b56      	cmp	r3, #86	; 0x56
 8000fd2:	d154      	bne.n	800107e <decodeNMEA+0xea>
					if(str[4] == 'T'){//GNVT
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3304      	adds	r3, #4
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b54      	cmp	r3, #84	; 0x54
 8000fdc:	f040 80f1 	bne.w	80011c2 <decodeNMEA+0x22e>
						if(str[5] == 'G'){//GNVTG
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3305      	adds	r3, #5
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b47      	cmp	r3, #71	; 0x47
 8000fe8:	f040 80eb 	bne.w	80011c2 <decodeNMEA+0x22e>
							if(str[6] == ','){//GNVTG
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3306      	adds	r3, #6
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b2c      	cmp	r3, #44	; 0x2c
 8000ff4:	f040 80e5 	bne.w	80011c2 <decodeNMEA+0x22e>
								p = &str[7];
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3307      	adds	r3, #7
 8000ffc:	60fb      	str	r3, [r7, #12]
								while(contVirgulas < 6){// velocidade
 8000ffe:	e009      	b.n	8001014 <decodeNMEA+0x80>
									if(*p == ','){
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b2c      	cmp	r3, #44	; 0x2c
 8001006:	d102      	bne.n	800100e <decodeNMEA+0x7a>
										contVirgulas++;
 8001008:	7afb      	ldrb	r3, [r7, #11]
 800100a:	3301      	adds	r3, #1
 800100c:	72fb      	strb	r3, [r7, #11]
									}
									p++;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	3301      	adds	r3, #1
 8001012:	60fb      	str	r3, [r7, #12]
								while(contVirgulas < 6){// velocidade
 8001014:	7afb      	ldrb	r3, [r7, #11]
 8001016:	2b05      	cmp	r3, #5
 8001018:	d9f2      	bls.n	8001000 <decodeNMEA+0x6c>
								}
								gn->velocidade.velocidadeSTR[0] = *p++;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	1c5a      	adds	r2, r3, #1
 800101e:	60fa      	str	r2, [r7, #12]
 8001020:	781a      	ldrb	r2, [r3, #0]
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	f883 251d 	strb.w	r2, [r3, #1309]	; 0x51d
								gn->velocidade.velocidadeSTR[1] = *p++;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	1c5a      	adds	r2, r3, #1
 800102c:	60fa      	str	r2, [r7, #12]
 800102e:	781a      	ldrb	r2, [r3, #0]
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	f883 251e 	strb.w	r2, [r3, #1310]	; 0x51e
								gn->velocidade.velocidadeSTR[2] = *p++;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	1c5a      	adds	r2, r3, #1
 800103a:	60fa      	str	r2, [r7, #12]
 800103c:	781a      	ldrb	r2, [r3, #0]
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	f883 251f 	strb.w	r2, [r3, #1311]	; 0x51f
								gn->velocidade.velocidadeSTR[3] = *p++;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	1c5a      	adds	r2, r3, #1
 8001048:	60fa      	str	r2, [r7, #12]
 800104a:	781a      	ldrb	r2, [r3, #0]
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	f883 2520 	strb.w	r2, [r3, #1312]	; 0x520
								gn->velocidade.velocidadeFloat = converte4Bytes2float(gn->velocidade.velocidadeSTR);
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	f203 531d 	addw	r3, r3, #1309	; 0x51d
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fedd 	bl	8000e18 <converte4Bytes2float>
 800105e:	4602      	mov	r2, r0
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
								gn->velocidade.velocidade8bits = (uint8_t)gn->velocidade.velocidadeFloat;
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fd99 	bl	8000ba4 <__aeabi_f2uiz>
 8001072:	4603      	mov	r3, r0
 8001074:	b2da      	uxtb	r2, r3
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c
 800107c:	e0a1      	b.n	80011c2 <decodeNMEA+0x22e>


							}
						}
					}
				}else if(str[3] == 'Z'){//GNZ
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3303      	adds	r3, #3
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b5a      	cmp	r3, #90	; 0x5a
 8001086:	d13f      	bne.n	8001108 <decodeNMEA+0x174>
					if(str[4] == 'D'){//GNZD
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3304      	adds	r3, #4
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b44      	cmp	r3, #68	; 0x44
 8001090:	f040 8097 	bne.w	80011c2 <decodeNMEA+0x22e>
						if(str[5] == 'A'){//GNZDA
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3305      	adds	r3, #5
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b41      	cmp	r3, #65	; 0x41
 800109c:	f040 8091 	bne.w	80011c2 <decodeNMEA+0x22e>
							if(str[6] == ','){//GNZDA
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3306      	adds	r3, #6
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b2c      	cmp	r3, #44	; 0x2c
 80010a8:	f040 808b 	bne.w	80011c2 <decodeNMEA+0x22e>
								p = &str[7];
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3307      	adds	r3, #7
 80010b0:	60fb      	str	r3, [r7, #12]

								gn->data.horaUTCStr[0] = *p++;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	1c5a      	adds	r2, r3, #1
 80010b6:	60fa      	str	r2, [r7, #12]
 80010b8:	781a      	ldrb	r2, [r3, #0]
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	f883 252c 	strb.w	r2, [r3, #1324]	; 0x52c
								gn->data.horaUTCStr[1] = *p++;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	1c5a      	adds	r2, r3, #1
 80010c4:	60fa      	str	r2, [r7, #12]
 80010c6:	781a      	ldrb	r2, [r3, #0]
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	f883 252d 	strb.w	r2, [r3, #1325]	; 0x52d
								gn->data.minutoStr[0] = *p++;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	1c5a      	adds	r2, r3, #1
 80010d2:	60fa      	str	r2, [r7, #12]
 80010d4:	781a      	ldrb	r2, [r3, #0]
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	f883 2530 	strb.w	r2, [r3, #1328]	; 0x530
								gn->data.minutoStr[1] = *p++;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	1c5a      	adds	r2, r3, #1
 80010e0:	60fa      	str	r2, [r7, #12]
 80010e2:	781a      	ldrb	r2, [r3, #0]
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	f883 2531 	strb.w	r2, [r3, #1329]	; 0x531
								gn->data.segundoStr[0] = *p++;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	1c5a      	adds	r2, r3, #1
 80010ee:	60fa      	str	r2, [r7, #12]
 80010f0:	781a      	ldrb	r2, [r3, #0]
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	f883 2532 	strb.w	r2, [r3, #1330]	; 0x532
								gn->data.segundoStr[1] = *p++;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	1c5a      	adds	r2, r3, #1
 80010fc:	60fa      	str	r2, [r7, #12]
 80010fe:	781a      	ldrb	r2, [r3, #0]
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	f883 2533 	strb.w	r2, [r3, #1331]	; 0x533
 8001106:	e05c      	b.n	80011c2 <decodeNMEA+0x22e>
								gn->data.ano = converte4Bytes2uint16(p);
								*/
							}
						}
					}
				}else if(str[3] == 'G'){//GNG
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3303      	adds	r3, #3
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b47      	cmp	r3, #71	; 0x47
 8001110:	d157      	bne.n	80011c2 <decodeNMEA+0x22e>
					if(str[4] == 'G'){//GNGG
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3304      	adds	r3, #4
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b47      	cmp	r3, #71	; 0x47
 800111a:	d152      	bne.n	80011c2 <decodeNMEA+0x22e>
						if(str[5] == 'A'){//GNGGA
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3305      	adds	r3, #5
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b41      	cmp	r3, #65	; 0x41
 8001124:	d14d      	bne.n	80011c2 <decodeNMEA+0x22e>
							if(str[6] == ','){//GNGGA
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3306      	adds	r3, #6
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b2c      	cmp	r3, #44	; 0x2c
 800112e:	d148      	bne.n	80011c2 <decodeNMEA+0x22e>
								p = &str[7];
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3307      	adds	r3, #7
 8001134:	60fb      	str	r3, [r7, #12]
								gn->data.horaUTCStr[0] = *p++;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	1c5a      	adds	r2, r3, #1
 800113a:	60fa      	str	r2, [r7, #12]
 800113c:	781a      	ldrb	r2, [r3, #0]
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	f883 252c 	strb.w	r2, [r3, #1324]	; 0x52c
								gn->data.horaUTCStr[1] = *p++;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	1c5a      	adds	r2, r3, #1
 8001148:	60fa      	str	r2, [r7, #12]
 800114a:	781a      	ldrb	r2, [r3, #0]
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	f883 252d 	strb.w	r2, [r3, #1325]	; 0x52d
								gn->data.minutoStr[0] = *p++;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	1c5a      	adds	r2, r3, #1
 8001156:	60fa      	str	r2, [r7, #12]
 8001158:	781a      	ldrb	r2, [r3, #0]
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	f883 2530 	strb.w	r2, [r3, #1328]	; 0x530
								gn->data.minutoStr[1] = *p++;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	1c5a      	adds	r2, r3, #1
 8001164:	60fa      	str	r2, [r7, #12]
 8001166:	781a      	ldrb	r2, [r3, #0]
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	f883 2531 	strb.w	r2, [r3, #1329]	; 0x531
								gn->data.segundoStr[0] = *p++;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	60fa      	str	r2, [r7, #12]
 8001174:	781a      	ldrb	r2, [r3, #0]
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	f883 2532 	strb.w	r2, [r3, #1330]	; 0x532
								gn->data.segundoStr[1] = *p++;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	1c5a      	adds	r2, r3, #1
 8001180:	60fa      	str	r2, [r7, #12]
 8001182:	781a      	ldrb	r2, [r3, #0]
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	f883 2533 	strb.w	r2, [r3, #1331]	; 0x533

								while(contVirgulas < 6){// numero de satelites
 800118a:	e009      	b.n	80011a0 <decodeNMEA+0x20c>
									if(*p == ','){
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b2c      	cmp	r3, #44	; 0x2c
 8001192:	d102      	bne.n	800119a <decodeNMEA+0x206>
										contVirgulas++;
 8001194:	7afb      	ldrb	r3, [r7, #11]
 8001196:	3301      	adds	r3, #1
 8001198:	72fb      	strb	r3, [r7, #11]
									}
									p++;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	3301      	adds	r3, #1
 800119e:	60fb      	str	r3, [r7, #12]
								while(contVirgulas < 6){// numero de satelites
 80011a0:	7afb      	ldrb	r3, [r7, #11]
 80011a2:	2b05      	cmp	r3, #5
 80011a4:	d9f2      	bls.n	800118c <decodeNMEA+0x1f8>
								}
								gn->numeroSatelitesStr[0] = *p++;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	1c5a      	adds	r2, r3, #1
 80011aa:	60fa      	str	r2, [r7, #12]
 80011ac:	781a      	ldrb	r2, [r3, #0]
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	f883 2540 	strb.w	r2, [r3, #1344]	; 0x540
								gn->numeroSatelitesStr[1] = *p++;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	1c5a      	adds	r2, r3, #1
 80011b8:	60fa      	str	r2, [r7, #12]
 80011ba:	781a      	ldrb	r2, [r3, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	f883 2541 	strb.w	r2, [r3, #1345]	; 0x541
					}
				}
			}
		}
	}
	str[0] = 0;// ja foi lido
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]


}
 80011c8:	bf00      	nop
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]

	HAL_UART_Receive_IT(&huart1, gnss.temp, 1);
 80011d8:	2201      	movs	r2, #1
 80011da:	4921      	ldr	r1, [pc, #132]	; (8001260 <HAL_UART_RxCpltCallback+0x90>)
 80011dc:	4821      	ldr	r0, [pc, #132]	; (8001264 <HAL_UART_RxCpltCallback+0x94>)
 80011de:	f003 fcd4 	bl	8004b8a <HAL_UART_Receive_IT>
	gnss.RxDataSerial[gnss.indy][gnss.indx] = gnss.temp[0];
 80011e2:	4b21      	ldr	r3, [pc, #132]	; (8001268 <HAL_UART_RxCpltCallback+0x98>)
 80011e4:	f893 3517 	ldrb.w	r3, [r3, #1303]	; 0x517
 80011e8:	461c      	mov	r4, r3
 80011ea:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <HAL_UART_RxCpltCallback+0x98>)
 80011ec:	f893 3516 	ldrb.w	r3, [r3, #1302]	; 0x516
 80011f0:	4618      	mov	r0, r3
 80011f2:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <HAL_UART_RxCpltCallback+0x98>)
 80011f4:	f893 1514 	ldrb.w	r1, [r3, #1300]	; 0x514
 80011f8:	4a1b      	ldr	r2, [pc, #108]	; (8001268 <HAL_UART_RxCpltCallback+0x98>)
 80011fa:	2364      	movs	r3, #100	; 0x64
 80011fc:	fb04 f303 	mul.w	r3, r4, r3
 8001200:	4413      	add	r3, r2
 8001202:	4403      	add	r3, r0
 8001204:	460a      	mov	r2, r1
 8001206:	701a      	strb	r2, [r3, #0]
	gnss.indx++;
 8001208:	4b17      	ldr	r3, [pc, #92]	; (8001268 <HAL_UART_RxCpltCallback+0x98>)
 800120a:	f893 3516 	ldrb.w	r3, [r3, #1302]	; 0x516
 800120e:	3301      	adds	r3, #1
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <HAL_UART_RxCpltCallback+0x98>)
 8001214:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516

	if (gnss.indx >= 100 || gnss.temp[0] == '\n'){
 8001218:	4b13      	ldr	r3, [pc, #76]	; (8001268 <HAL_UART_RxCpltCallback+0x98>)
 800121a:	f893 3516 	ldrb.w	r3, [r3, #1302]	; 0x516
 800121e:	2b63      	cmp	r3, #99	; 0x63
 8001220:	d804      	bhi.n	800122c <HAL_UART_RxCpltCallback+0x5c>
 8001222:	4b11      	ldr	r3, [pc, #68]	; (8001268 <HAL_UART_RxCpltCallback+0x98>)
 8001224:	f893 3514 	ldrb.w	r3, [r3, #1300]	; 0x514
 8001228:	2b0a      	cmp	r3, #10
 800122a:	d114      	bne.n	8001256 <HAL_UART_RxCpltCallback+0x86>
		//decodeNMEA(&gnss.RxDataSerial[gnss.indy][0], &gnss);

		gnss.indx = 0;
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <HAL_UART_RxCpltCallback+0x98>)
 800122e:	2200      	movs	r2, #0
 8001230:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
		gnss.indy++;
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <HAL_UART_RxCpltCallback+0x98>)
 8001236:	f893 3517 	ldrb.w	r3, [r3, #1303]	; 0x517
 800123a:	3301      	adds	r3, #1
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <HAL_UART_RxCpltCallback+0x98>)
 8001240:	f883 2517 	strb.w	r2, [r3, #1303]	; 0x517
		if(gnss.indy >= 13)gnss.indy = 0;
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <HAL_UART_RxCpltCallback+0x98>)
 8001246:	f893 3517 	ldrb.w	r3, [r3, #1303]	; 0x517
 800124a:	2b0c      	cmp	r3, #12
 800124c:	d903      	bls.n	8001256 <HAL_UART_RxCpltCallback+0x86>
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_UART_RxCpltCallback+0x98>)
 8001250:	2200      	movs	r2, #0
 8001252:	f883 2517 	strb.w	r2, [r3, #1303]	; 0x517
	}

}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	bd90      	pop	{r4, r7, pc}
 800125e:	bf00      	nop
 8001260:	20000514 	.word	0x20000514
 8001264:	200005a0 	.word	0x200005a0
 8001268:	20000000 	.word	0x20000000

0800126c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001270:	2200      	movs	r2, #0
 8001272:	2110      	movs	r1, #16
 8001274:	4803      	ldr	r0, [pc, #12]	; (8001284 <SELECT+0x18>)
 8001276:	f001 fe1b 	bl	8002eb0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800127a:	2001      	movs	r0, #1
 800127c:	f001 fab0 	bl	80027e0 <HAL_Delay>
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40010800 	.word	0x40010800

08001288 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800128c:	2201      	movs	r2, #1
 800128e:	2110      	movs	r1, #16
 8001290:	4803      	ldr	r0, [pc, #12]	; (80012a0 <DESELECT+0x18>)
 8001292:	f001 fe0d 	bl	8002eb0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001296:	2001      	movs	r0, #1
 8001298:	f001 faa2 	bl	80027e0 <HAL_Delay>
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40010800 	.word	0x40010800

080012a4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80012ae:	bf00      	nop
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <SPI_TxByte+0x30>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d1f8      	bne.n	80012b0 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80012be:	1df9      	adds	r1, r7, #7
 80012c0:	2364      	movs	r3, #100	; 0x64
 80012c2:	2201      	movs	r2, #1
 80012c4:	4803      	ldr	r0, [pc, #12]	; (80012d4 <SPI_TxByte+0x30>)
 80012c6:	f003 f869 	bl	800439c <HAL_SPI_Transmit>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200026a0 	.word	0x200026a0

080012d8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80012e4:	bf00      	nop
 80012e6:	4b08      	ldr	r3, [pc, #32]	; (8001308 <SPI_TxBuffer+0x30>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d1f8      	bne.n	80012e6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80012f4:	887a      	ldrh	r2, [r7, #2]
 80012f6:	2364      	movs	r3, #100	; 0x64
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	4803      	ldr	r0, [pc, #12]	; (8001308 <SPI_TxBuffer+0x30>)
 80012fc:	f003 f84e 	bl	800439c <HAL_SPI_Transmit>
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	200026a0 	.word	0x200026a0

0800130c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8001312:	23ff      	movs	r3, #255	; 0xff
 8001314:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001316:	bf00      	nop
 8001318:	4b09      	ldr	r3, [pc, #36]	; (8001340 <SPI_RxByte+0x34>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b02      	cmp	r3, #2
 8001324:	d1f8      	bne.n	8001318 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001326:	1dba      	adds	r2, r7, #6
 8001328:	1df9      	adds	r1, r7, #7
 800132a:	2364      	movs	r3, #100	; 0x64
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	2301      	movs	r3, #1
 8001330:	4803      	ldr	r0, [pc, #12]	; (8001340 <SPI_RxByte+0x34>)
 8001332:	f003 f977 	bl	8004624 <HAL_SPI_TransmitReceive>

	return data;
 8001336:	79bb      	ldrb	r3, [r7, #6]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	200026a0 	.word	0x200026a0

08001344 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800134c:	f7ff ffde 	bl	800130c <SPI_RxByte>
 8001350:	4603      	mov	r3, r0
 8001352:	461a      	mov	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	701a      	strb	r2, [r3, #0]
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001366:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <SD_ReadyWait+0x30>)
 8001368:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800136c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800136e:	f7ff ffcd 	bl	800130c <SPI_RxByte>
 8001372:	4603      	mov	r3, r0
 8001374:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	2bff      	cmp	r3, #255	; 0xff
 800137a:	d003      	beq.n	8001384 <SD_ReadyWait+0x24>
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <SD_ReadyWait+0x30>)
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1f4      	bne.n	800136e <SD_ReadyWait+0xe>

	return res;
 8001384:	79fb      	ldrb	r3, [r7, #7]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20002646 	.word	0x20002646

08001394 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800139a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800139e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80013a0:	f7ff ff72 	bl	8001288 <DESELECT>
	for(int i = 0; i < 10; i++)
 80013a4:	2300      	movs	r3, #0
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	e005      	b.n	80013b6 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80013aa:	20ff      	movs	r0, #255	; 0xff
 80013ac:	f7ff ff7a 	bl	80012a4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	3301      	adds	r3, #1
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	2b09      	cmp	r3, #9
 80013ba:	ddf6      	ble.n	80013aa <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80013bc:	f7ff ff56 	bl	800126c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80013c0:	2340      	movs	r3, #64	; 0x40
 80013c2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80013d4:	2395      	movs	r3, #149	; 0x95
 80013d6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80013d8:	463b      	mov	r3, r7
 80013da:	2106      	movs	r1, #6
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff7b 	bl	80012d8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80013e2:	e002      	b.n	80013ea <SD_PowerOn+0x56>
	{
		cnt--;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80013ea:	f7ff ff8f 	bl	800130c <SPI_RxByte>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d002      	beq.n	80013fa <SD_PowerOn+0x66>
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f4      	bne.n	80013e4 <SD_PowerOn+0x50>
	}

	DESELECT();
 80013fa:	f7ff ff45 	bl	8001288 <DESELECT>
	SPI_TxByte(0XFF);
 80013fe:	20ff      	movs	r0, #255	; 0xff
 8001400:	f7ff ff50 	bl	80012a4 <SPI_TxByte>

	PowerFlag = 1;
 8001404:	4b03      	ldr	r3, [pc, #12]	; (8001414 <SD_PowerOn+0x80>)
 8001406:	2201      	movs	r2, #1
 8001408:	701a      	strb	r2, [r3, #0]
}
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20002649 	.word	0x20002649

08001418 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800141c:	4b03      	ldr	r3, [pc, #12]	; (800142c <SD_PowerOff+0x14>)
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	20002649 	.word	0x20002649

08001430 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001434:	4b02      	ldr	r3, [pc, #8]	; (8001440 <SD_CheckPower+0x10>)
 8001436:	781b      	ldrb	r3, [r3, #0]
}
 8001438:	4618      	mov	r0, r3
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr
 8001440:	20002649 	.word	0x20002649

08001444 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800144e:	4b13      	ldr	r3, [pc, #76]	; (800149c <SD_RxDataBlock+0x58>)
 8001450:	22c8      	movs	r2, #200	; 0xc8
 8001452:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001454:	f7ff ff5a 	bl	800130c <SPI_RxByte>
 8001458:	4603      	mov	r3, r0
 800145a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	2bff      	cmp	r3, #255	; 0xff
 8001460:	d103      	bne.n	800146a <SD_RxDataBlock+0x26>
 8001462:	4b0e      	ldr	r3, [pc, #56]	; (800149c <SD_RxDataBlock+0x58>)
 8001464:	881b      	ldrh	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f4      	bne.n	8001454 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	2bfe      	cmp	r3, #254	; 0xfe
 800146e:	d001      	beq.n	8001474 <SD_RxDataBlock+0x30>
 8001470:	2300      	movs	r3, #0
 8001472:	e00f      	b.n	8001494 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	1c5a      	adds	r2, r3, #1
 8001478:	607a      	str	r2, [r7, #4]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff ff62 	bl	8001344 <SPI_RxBytePtr>
	} while(len--);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	1e5a      	subs	r2, r3, #1
 8001484:	603a      	str	r2, [r7, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1f4      	bne.n	8001474 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800148a:	f7ff ff3f 	bl	800130c <SPI_RxByte>
	SPI_RxByte();
 800148e:	f7ff ff3d 	bl	800130c <SPI_RxByte>

	return TRUE;
 8001492:	2301      	movs	r3, #1
}
 8001494:	4618      	mov	r0, r3
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20002644 	.word	0x20002644

080014a0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80014b0:	f7ff ff56 	bl	8001360 <SD_ReadyWait>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2bff      	cmp	r3, #255	; 0xff
 80014b8:	d001      	beq.n	80014be <SD_TxDataBlock+0x1e>
 80014ba:	2300      	movs	r3, #0
 80014bc:	e02f      	b.n	800151e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80014be:	78fb      	ldrb	r3, [r7, #3]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff feef 	bl	80012a4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80014c6:	78fb      	ldrb	r3, [r7, #3]
 80014c8:	2bfd      	cmp	r3, #253	; 0xfd
 80014ca:	d020      	beq.n	800150e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80014cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff ff01 	bl	80012d8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80014d6:	f7ff ff19 	bl	800130c <SPI_RxByte>
		SPI_RxByte();
 80014da:	f7ff ff17 	bl	800130c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80014de:	e00b      	b.n	80014f8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80014e0:	f7ff ff14 	bl	800130c <SPI_RxByte>
 80014e4:	4603      	mov	r3, r0
 80014e6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	f003 031f 	and.w	r3, r3, #31
 80014ee:	2b05      	cmp	r3, #5
 80014f0:	d006      	beq.n	8001500 <SD_TxDataBlock+0x60>
			i++;
 80014f2:	7bbb      	ldrb	r3, [r7, #14]
 80014f4:	3301      	adds	r3, #1
 80014f6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80014f8:	7bbb      	ldrb	r3, [r7, #14]
 80014fa:	2b40      	cmp	r3, #64	; 0x40
 80014fc:	d9f0      	bls.n	80014e0 <SD_TxDataBlock+0x40>
 80014fe:	e000      	b.n	8001502 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001500:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001502:	bf00      	nop
 8001504:	f7ff ff02 	bl	800130c <SPI_RxByte>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0fa      	beq.n	8001504 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	f003 031f 	and.w	r3, r3, #31
 8001514:	2b05      	cmp	r3, #5
 8001516:	d101      	bne.n	800151c <SD_TxDataBlock+0x7c>
 8001518:	2301      	movs	r3, #1
 800151a:	e000      	b.n	800151e <SD_TxDataBlock+0x7e>

	return FALSE;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b084      	sub	sp, #16
 800152a:	af00      	add	r7, sp, #0
 800152c:	4603      	mov	r3, r0
 800152e:	6039      	str	r1, [r7, #0]
 8001530:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001532:	f7ff ff15 	bl	8001360 <SD_ReadyWait>
 8001536:	4603      	mov	r3, r0
 8001538:	2bff      	cmp	r3, #255	; 0xff
 800153a:	d001      	beq.n	8001540 <SD_SendCmd+0x1a>
 800153c:	23ff      	movs	r3, #255	; 0xff
 800153e:	e042      	b.n	80015c6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff feae 	bl	80012a4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	0e1b      	lsrs	r3, r3, #24
 800154c:	b2db      	uxtb	r3, r3
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fea8 	bl	80012a4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	0c1b      	lsrs	r3, r3, #16
 8001558:	b2db      	uxtb	r3, r3
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fea2 	bl	80012a4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	0a1b      	lsrs	r3, r3, #8
 8001564:	b2db      	uxtb	r3, r3
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fe9c 	bl	80012a4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	b2db      	uxtb	r3, r3
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fe97 	bl	80012a4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	2b40      	cmp	r3, #64	; 0x40
 800157a:	d102      	bne.n	8001582 <SD_SendCmd+0x5c>
 800157c:	2395      	movs	r3, #149	; 0x95
 800157e:	73fb      	strb	r3, [r7, #15]
 8001580:	e007      	b.n	8001592 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	2b48      	cmp	r3, #72	; 0x48
 8001586:	d102      	bne.n	800158e <SD_SendCmd+0x68>
 8001588:	2387      	movs	r3, #135	; 0x87
 800158a:	73fb      	strb	r3, [r7, #15]
 800158c:	e001      	b.n	8001592 <SD_SendCmd+0x6c>
	else crc = 1;
 800158e:	2301      	movs	r3, #1
 8001590:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fe85 	bl	80012a4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	2b4c      	cmp	r3, #76	; 0x4c
 800159e:	d101      	bne.n	80015a4 <SD_SendCmd+0x7e>
 80015a0:	f7ff feb4 	bl	800130c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80015a4:	230a      	movs	r3, #10
 80015a6:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80015a8:	f7ff feb0 	bl	800130c <SPI_RxByte>
 80015ac:	4603      	mov	r3, r0
 80015ae:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80015b0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	da05      	bge.n	80015c4 <SD_SendCmd+0x9e>
 80015b8:	7bbb      	ldrb	r3, [r7, #14]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	73bb      	strb	r3, [r7, #14]
 80015be:	7bbb      	ldrb	r3, [r7, #14]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1f1      	bne.n	80015a8 <SD_SendCmd+0x82>

	return res;
 80015c4:	7b7b      	ldrb	r3, [r7, #13]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80015d0:	b590      	push	{r4, r7, lr}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <SD_disk_initialize+0x14>
 80015e0:	2301      	movs	r3, #1
 80015e2:	e0d1      	b.n	8001788 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80015e4:	4b6a      	ldr	r3, [pc, #424]	; (8001790 <SD_disk_initialize+0x1c0>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <SD_disk_initialize+0x2a>
 80015f2:	4b67      	ldr	r3, [pc, #412]	; (8001790 <SD_disk_initialize+0x1c0>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	e0c6      	b.n	8001788 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80015fa:	f7ff fecb 	bl	8001394 <SD_PowerOn>

	/* slave select */
	SELECT();
 80015fe:	f7ff fe35 	bl	800126c <SELECT>

	/* check disk type */
	type = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001606:	2100      	movs	r1, #0
 8001608:	2040      	movs	r0, #64	; 0x40
 800160a:	f7ff ff8c 	bl	8001526 <SD_SendCmd>
 800160e:	4603      	mov	r3, r0
 8001610:	2b01      	cmp	r3, #1
 8001612:	f040 80a1 	bne.w	8001758 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001616:	4b5f      	ldr	r3, [pc, #380]	; (8001794 <SD_disk_initialize+0x1c4>)
 8001618:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800161c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800161e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001622:	2048      	movs	r0, #72	; 0x48
 8001624:	f7ff ff7f 	bl	8001526 <SD_SendCmd>
 8001628:	4603      	mov	r3, r0
 800162a:	2b01      	cmp	r3, #1
 800162c:	d155      	bne.n	80016da <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800162e:	2300      	movs	r3, #0
 8001630:	73fb      	strb	r3, [r7, #15]
 8001632:	e00c      	b.n	800164e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001634:	7bfc      	ldrb	r4, [r7, #15]
 8001636:	f7ff fe69 	bl	800130c <SPI_RxByte>
 800163a:	4603      	mov	r3, r0
 800163c:	461a      	mov	r2, r3
 800163e:	f104 0310 	add.w	r3, r4, #16
 8001642:	443b      	add	r3, r7
 8001644:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	3301      	adds	r3, #1
 800164c:	73fb      	strb	r3, [r7, #15]
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	2b03      	cmp	r3, #3
 8001652:	d9ef      	bls.n	8001634 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001654:	7abb      	ldrb	r3, [r7, #10]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d17e      	bne.n	8001758 <SD_disk_initialize+0x188>
 800165a:	7afb      	ldrb	r3, [r7, #11]
 800165c:	2baa      	cmp	r3, #170	; 0xaa
 800165e:	d17b      	bne.n	8001758 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001660:	2100      	movs	r1, #0
 8001662:	2077      	movs	r0, #119	; 0x77
 8001664:	f7ff ff5f 	bl	8001526 <SD_SendCmd>
 8001668:	4603      	mov	r3, r0
 800166a:	2b01      	cmp	r3, #1
 800166c:	d807      	bhi.n	800167e <SD_disk_initialize+0xae>
 800166e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001672:	2069      	movs	r0, #105	; 0x69
 8001674:	f7ff ff57 	bl	8001526 <SD_SendCmd>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d004      	beq.n	8001688 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800167e:	4b45      	ldr	r3, [pc, #276]	; (8001794 <SD_disk_initialize+0x1c4>)
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1ec      	bne.n	8001660 <SD_disk_initialize+0x90>
 8001686:	e000      	b.n	800168a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001688:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800168a:	4b42      	ldr	r3, [pc, #264]	; (8001794 <SD_disk_initialize+0x1c4>)
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d062      	beq.n	8001758 <SD_disk_initialize+0x188>
 8001692:	2100      	movs	r1, #0
 8001694:	207a      	movs	r0, #122	; 0x7a
 8001696:	f7ff ff46 	bl	8001526 <SD_SendCmd>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d15b      	bne.n	8001758 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80016a0:	2300      	movs	r3, #0
 80016a2:	73fb      	strb	r3, [r7, #15]
 80016a4:	e00c      	b.n	80016c0 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80016a6:	7bfc      	ldrb	r4, [r7, #15]
 80016a8:	f7ff fe30 	bl	800130c <SPI_RxByte>
 80016ac:	4603      	mov	r3, r0
 80016ae:	461a      	mov	r2, r3
 80016b0:	f104 0310 	add.w	r3, r4, #16
 80016b4:	443b      	add	r3, r7
 80016b6:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	3301      	adds	r3, #1
 80016be:	73fb      	strb	r3, [r7, #15]
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	2b03      	cmp	r3, #3
 80016c4:	d9ef      	bls.n	80016a6 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80016c6:	7a3b      	ldrb	r3, [r7, #8]
 80016c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <SD_disk_initialize+0x104>
 80016d0:	230c      	movs	r3, #12
 80016d2:	e000      	b.n	80016d6 <SD_disk_initialize+0x106>
 80016d4:	2304      	movs	r3, #4
 80016d6:	73bb      	strb	r3, [r7, #14]
 80016d8:	e03e      	b.n	8001758 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80016da:	2100      	movs	r1, #0
 80016dc:	2077      	movs	r0, #119	; 0x77
 80016de:	f7ff ff22 	bl	8001526 <SD_SendCmd>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d808      	bhi.n	80016fa <SD_disk_initialize+0x12a>
 80016e8:	2100      	movs	r1, #0
 80016ea:	2069      	movs	r0, #105	; 0x69
 80016ec:	f7ff ff1b 	bl	8001526 <SD_SendCmd>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d801      	bhi.n	80016fa <SD_disk_initialize+0x12a>
 80016f6:	2302      	movs	r3, #2
 80016f8:	e000      	b.n	80016fc <SD_disk_initialize+0x12c>
 80016fa:	2301      	movs	r3, #1
 80016fc:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80016fe:	7bbb      	ldrb	r3, [r7, #14]
 8001700:	2b02      	cmp	r3, #2
 8001702:	d10e      	bne.n	8001722 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001704:	2100      	movs	r1, #0
 8001706:	2077      	movs	r0, #119	; 0x77
 8001708:	f7ff ff0d 	bl	8001526 <SD_SendCmd>
 800170c:	4603      	mov	r3, r0
 800170e:	2b01      	cmp	r3, #1
 8001710:	d80e      	bhi.n	8001730 <SD_disk_initialize+0x160>
 8001712:	2100      	movs	r1, #0
 8001714:	2069      	movs	r0, #105	; 0x69
 8001716:	f7ff ff06 	bl	8001526 <SD_SendCmd>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d107      	bne.n	8001730 <SD_disk_initialize+0x160>
 8001720:	e00c      	b.n	800173c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001722:	2100      	movs	r1, #0
 8001724:	2041      	movs	r0, #65	; 0x41
 8001726:	f7ff fefe 	bl	8001526 <SD_SendCmd>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d004      	beq.n	800173a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001730:	4b18      	ldr	r3, [pc, #96]	; (8001794 <SD_disk_initialize+0x1c4>)
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1e2      	bne.n	80016fe <SD_disk_initialize+0x12e>
 8001738:	e000      	b.n	800173c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800173a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800173c:	4b15      	ldr	r3, [pc, #84]	; (8001794 <SD_disk_initialize+0x1c4>)
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d007      	beq.n	8001754 <SD_disk_initialize+0x184>
 8001744:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001748:	2050      	movs	r0, #80	; 0x50
 800174a:	f7ff feec 	bl	8001526 <SD_SendCmd>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <SD_disk_initialize+0x188>
 8001754:	2300      	movs	r3, #0
 8001756:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001758:	4a0f      	ldr	r2, [pc, #60]	; (8001798 <SD_disk_initialize+0x1c8>)
 800175a:	7bbb      	ldrb	r3, [r7, #14]
 800175c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800175e:	f7ff fd93 	bl	8001288 <DESELECT>
	SPI_RxByte();
 8001762:	f7ff fdd3 	bl	800130c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001766:	7bbb      	ldrb	r3, [r7, #14]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d008      	beq.n	800177e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 800176c:	4b08      	ldr	r3, [pc, #32]	; (8001790 <SD_disk_initialize+0x1c0>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	b2db      	uxtb	r3, r3
 8001772:	f023 0301 	bic.w	r3, r3, #1
 8001776:	b2da      	uxtb	r2, r3
 8001778:	4b05      	ldr	r3, [pc, #20]	; (8001790 <SD_disk_initialize+0x1c0>)
 800177a:	701a      	strb	r2, [r3, #0]
 800177c:	e001      	b.n	8001782 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800177e:	f7ff fe4b 	bl	8001418 <SD_PowerOff>
	}

	return Stat;
 8001782:	4b03      	ldr	r3, [pc, #12]	; (8001790 <SD_disk_initialize+0x1c0>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	b2db      	uxtb	r3, r3
}
 8001788:	4618      	mov	r0, r3
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	bd90      	pop	{r4, r7, pc}
 8001790:	20000544 	.word	0x20000544
 8001794:	20002644 	.word	0x20002644
 8001798:	20002648 	.word	0x20002648

0800179c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <SD_disk_status+0x14>
 80017ac:	2301      	movs	r3, #1
 80017ae:	e002      	b.n	80017b6 <SD_disk_status+0x1a>
	return Stat;
 80017b0:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <SD_disk_status+0x24>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	b2db      	uxtb	r3, r3
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr
 80017c0:	20000544 	.word	0x20000544

080017c4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	607a      	str	r2, [r7, #4]
 80017ce:	603b      	str	r3, [r7, #0]
 80017d0:	4603      	mov	r3, r0
 80017d2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d102      	bne.n	80017e0 <SD_disk_read+0x1c>
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <SD_disk_read+0x20>
 80017e0:	2304      	movs	r3, #4
 80017e2:	e051      	b.n	8001888 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80017e4:	4b2a      	ldr	r3, [pc, #168]	; (8001890 <SD_disk_read+0xcc>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <SD_disk_read+0x32>
 80017f2:	2303      	movs	r3, #3
 80017f4:	e048      	b.n	8001888 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80017f6:	4b27      	ldr	r3, [pc, #156]	; (8001894 <SD_disk_read+0xd0>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d102      	bne.n	8001808 <SD_disk_read+0x44>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	025b      	lsls	r3, r3, #9
 8001806:	607b      	str	r3, [r7, #4]

	SELECT();
 8001808:	f7ff fd30 	bl	800126c <SELECT>

	if (count == 1)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d111      	bne.n	8001836 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	2051      	movs	r0, #81	; 0x51
 8001816:	f7ff fe86 	bl	8001526 <SD_SendCmd>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d129      	bne.n	8001874 <SD_disk_read+0xb0>
 8001820:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001824:	68b8      	ldr	r0, [r7, #8]
 8001826:	f7ff fe0d 	bl	8001444 <SD_RxDataBlock>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d021      	beq.n	8001874 <SD_disk_read+0xb0>
 8001830:	2300      	movs	r3, #0
 8001832:	603b      	str	r3, [r7, #0]
 8001834:	e01e      	b.n	8001874 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	2052      	movs	r0, #82	; 0x52
 800183a:	f7ff fe74 	bl	8001526 <SD_SendCmd>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d117      	bne.n	8001874 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001844:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001848:	68b8      	ldr	r0, [r7, #8]
 800184a:	f7ff fdfb 	bl	8001444 <SD_RxDataBlock>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d00a      	beq.n	800186a <SD_disk_read+0xa6>
				buff += 512;
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800185a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	3b01      	subs	r3, #1
 8001860:	603b      	str	r3, [r7, #0]
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1ed      	bne.n	8001844 <SD_disk_read+0x80>
 8001868:	e000      	b.n	800186c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800186a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800186c:	2100      	movs	r1, #0
 800186e:	204c      	movs	r0, #76	; 0x4c
 8001870:	f7ff fe59 	bl	8001526 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001874:	f7ff fd08 	bl	8001288 <DESELECT>
	SPI_RxByte();
 8001878:	f7ff fd48 	bl	800130c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	bf14      	ite	ne
 8001882:	2301      	movne	r3, #1
 8001884:	2300      	moveq	r3, #0
 8001886:	b2db      	uxtb	r3, r3
}
 8001888:	4618      	mov	r0, r3
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000544 	.word	0x20000544
 8001894:	20002648 	.word	0x20002648

08001898 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	603b      	str	r3, [r7, #0]
 80018a4:	4603      	mov	r3, r0
 80018a6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d102      	bne.n	80018b4 <SD_disk_write+0x1c>
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <SD_disk_write+0x20>
 80018b4:	2304      	movs	r3, #4
 80018b6:	e06b      	b.n	8001990 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80018b8:	4b37      	ldr	r3, [pc, #220]	; (8001998 <SD_disk_write+0x100>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <SD_disk_write+0x32>
 80018c6:	2303      	movs	r3, #3
 80018c8:	e062      	b.n	8001990 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80018ca:	4b33      	ldr	r3, [pc, #204]	; (8001998 <SD_disk_write+0x100>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <SD_disk_write+0x44>
 80018d8:	2302      	movs	r3, #2
 80018da:	e059      	b.n	8001990 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80018dc:	4b2f      	ldr	r3, [pc, #188]	; (800199c <SD_disk_write+0x104>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d102      	bne.n	80018ee <SD_disk_write+0x56>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	025b      	lsls	r3, r3, #9
 80018ec:	607b      	str	r3, [r7, #4]

	SELECT();
 80018ee:	f7ff fcbd 	bl	800126c <SELECT>

	if (count == 1)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d110      	bne.n	800191a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	2058      	movs	r0, #88	; 0x58
 80018fc:	f7ff fe13 	bl	8001526 <SD_SendCmd>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d13a      	bne.n	800197c <SD_disk_write+0xe4>
 8001906:	21fe      	movs	r1, #254	; 0xfe
 8001908:	68b8      	ldr	r0, [r7, #8]
 800190a:	f7ff fdc9 	bl	80014a0 <SD_TxDataBlock>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d033      	beq.n	800197c <SD_disk_write+0xe4>
			count = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	e030      	b.n	800197c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800191a:	4b20      	ldr	r3, [pc, #128]	; (800199c <SD_disk_write+0x104>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d007      	beq.n	8001936 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001926:	2100      	movs	r1, #0
 8001928:	2077      	movs	r0, #119	; 0x77
 800192a:	f7ff fdfc 	bl	8001526 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800192e:	6839      	ldr	r1, [r7, #0]
 8001930:	2057      	movs	r0, #87	; 0x57
 8001932:	f7ff fdf8 	bl	8001526 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	2059      	movs	r0, #89	; 0x59
 800193a:	f7ff fdf4 	bl	8001526 <SD_SendCmd>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d11b      	bne.n	800197c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001944:	21fc      	movs	r1, #252	; 0xfc
 8001946:	68b8      	ldr	r0, [r7, #8]
 8001948:	f7ff fdaa 	bl	80014a0 <SD_TxDataBlock>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00a      	beq.n	8001968 <SD_disk_write+0xd0>
				buff += 512;
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001958:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	3b01      	subs	r3, #1
 800195e:	603b      	str	r3, [r7, #0]
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1ee      	bne.n	8001944 <SD_disk_write+0xac>
 8001966:	e000      	b.n	800196a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001968:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800196a:	21fd      	movs	r1, #253	; 0xfd
 800196c:	2000      	movs	r0, #0
 800196e:	f7ff fd97 	bl	80014a0 <SD_TxDataBlock>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d101      	bne.n	800197c <SD_disk_write+0xe4>
			{
				count = 1;
 8001978:	2301      	movs	r3, #1
 800197a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800197c:	f7ff fc84 	bl	8001288 <DESELECT>
	SPI_RxByte();
 8001980:	f7ff fcc4 	bl	800130c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	bf14      	ite	ne
 800198a:	2301      	movne	r3, #1
 800198c:	2300      	moveq	r3, #0
 800198e:	b2db      	uxtb	r3, r3
}
 8001990:	4618      	mov	r0, r3
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000544 	.word	0x20000544
 800199c:	20002648 	.word	0x20002648

080019a0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80019a0:	b590      	push	{r4, r7, lr}
 80019a2:	b08b      	sub	sp, #44	; 0x2c
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	603a      	str	r2, [r7, #0]
 80019aa:	71fb      	strb	r3, [r7, #7]
 80019ac:	460b      	mov	r3, r1
 80019ae:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <SD_disk_ioctl+0x1e>
 80019ba:	2304      	movs	r3, #4
 80019bc:	e115      	b.n	8001bea <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80019c4:	79bb      	ldrb	r3, [r7, #6]
 80019c6:	2b05      	cmp	r3, #5
 80019c8:	d124      	bne.n	8001a14 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80019ca:	6a3b      	ldr	r3, [r7, #32]
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d012      	beq.n	80019f8 <SD_disk_ioctl+0x58>
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	dc1a      	bgt.n	8001a0c <SD_disk_ioctl+0x6c>
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d002      	beq.n	80019e0 <SD_disk_ioctl+0x40>
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d006      	beq.n	80019ec <SD_disk_ioctl+0x4c>
 80019de:	e015      	b.n	8001a0c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80019e0:	f7ff fd1a 	bl	8001418 <SD_PowerOff>
			res = RES_OK;
 80019e4:	2300      	movs	r3, #0
 80019e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80019ea:	e0fc      	b.n	8001be6 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80019ec:	f7ff fcd2 	bl	8001394 <SD_PowerOn>
			res = RES_OK;
 80019f0:	2300      	movs	r3, #0
 80019f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80019f6:	e0f6      	b.n	8001be6 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80019f8:	6a3b      	ldr	r3, [r7, #32]
 80019fa:	1c5c      	adds	r4, r3, #1
 80019fc:	f7ff fd18 	bl	8001430 <SD_CheckPower>
 8001a00:	4603      	mov	r3, r0
 8001a02:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001a04:	2300      	movs	r3, #0
 8001a06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001a0a:	e0ec      	b.n	8001be6 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001a0c:	2304      	movs	r3, #4
 8001a0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001a12:	e0e8      	b.n	8001be6 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001a14:	4b77      	ldr	r3, [pc, #476]	; (8001bf4 <SD_disk_ioctl+0x254>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <SD_disk_ioctl+0x86>
 8001a22:	2303      	movs	r3, #3
 8001a24:	e0e1      	b.n	8001bea <SD_disk_ioctl+0x24a>

		SELECT();
 8001a26:	f7ff fc21 	bl	800126c <SELECT>

		switch (ctrl)
 8001a2a:	79bb      	ldrb	r3, [r7, #6]
 8001a2c:	2b0d      	cmp	r3, #13
 8001a2e:	f200 80cb 	bhi.w	8001bc8 <SD_disk_ioctl+0x228>
 8001a32:	a201      	add	r2, pc, #4	; (adr r2, 8001a38 <SD_disk_ioctl+0x98>)
 8001a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a38:	08001b33 	.word	0x08001b33
 8001a3c:	08001a71 	.word	0x08001a71
 8001a40:	08001b23 	.word	0x08001b23
 8001a44:	08001bc9 	.word	0x08001bc9
 8001a48:	08001bc9 	.word	0x08001bc9
 8001a4c:	08001bc9 	.word	0x08001bc9
 8001a50:	08001bc9 	.word	0x08001bc9
 8001a54:	08001bc9 	.word	0x08001bc9
 8001a58:	08001bc9 	.word	0x08001bc9
 8001a5c:	08001bc9 	.word	0x08001bc9
 8001a60:	08001bc9 	.word	0x08001bc9
 8001a64:	08001b45 	.word	0x08001b45
 8001a68:	08001b69 	.word	0x08001b69
 8001a6c:	08001b8d 	.word	0x08001b8d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001a70:	2100      	movs	r1, #0
 8001a72:	2049      	movs	r0, #73	; 0x49
 8001a74:	f7ff fd57 	bl	8001526 <SD_SendCmd>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f040 80a8 	bne.w	8001bd0 <SD_disk_ioctl+0x230>
 8001a80:	f107 030c 	add.w	r3, r7, #12
 8001a84:	2110      	movs	r1, #16
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fcdc 	bl	8001444 <SD_RxDataBlock>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 809e 	beq.w	8001bd0 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001a94:	7b3b      	ldrb	r3, [r7, #12]
 8001a96:	099b      	lsrs	r3, r3, #6
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d10e      	bne.n	8001abc <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001a9e:	7d7b      	ldrb	r3, [r7, #21]
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	7d3b      	ldrb	r3, [r7, #20]
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	021b      	lsls	r3, r3, #8
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	4413      	add	r3, r2
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	3301      	adds	r3, #1
 8001ab0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001ab2:	8bfb      	ldrh	r3, [r7, #30]
 8001ab4:	029a      	lsls	r2, r3, #10
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	e02e      	b.n	8001b1a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001abc:	7c7b      	ldrb	r3, [r7, #17]
 8001abe:	f003 030f 	and.w	r3, r3, #15
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	7dbb      	ldrb	r3, [r7, #22]
 8001ac6:	09db      	lsrs	r3, r3, #7
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	4413      	add	r3, r2
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	7d7b      	ldrb	r3, [r7, #21]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	f003 0306 	and.w	r3, r3, #6
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	4413      	add	r3, r2
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	3302      	adds	r3, #2
 8001ae0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001ae4:	7d3b      	ldrb	r3, [r7, #20]
 8001ae6:	099b      	lsrs	r3, r3, #6
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	7cfb      	ldrb	r3, [r7, #19]
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	4413      	add	r3, r2
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	7cbb      	ldrb	r3, [r7, #18]
 8001afa:	029b      	lsls	r3, r3, #10
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	4413      	add	r3, r2
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	3301      	adds	r3, #1
 8001b0a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001b0c:	8bfa      	ldrh	r2, [r7, #30]
 8001b0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b12:	3b09      	subs	r3, #9
 8001b14:	409a      	lsls	r2, r3
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001b20:	e056      	b.n	8001bd0 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b28:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001b30:	e055      	b.n	8001bde <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001b32:	f7ff fc15 	bl	8001360 <SD_ReadyWait>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2bff      	cmp	r3, #255	; 0xff
 8001b3a:	d14b      	bne.n	8001bd4 <SD_disk_ioctl+0x234>
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001b42:	e047      	b.n	8001bd4 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001b44:	2100      	movs	r1, #0
 8001b46:	2049      	movs	r0, #73	; 0x49
 8001b48:	f7ff fced 	bl	8001526 <SD_SendCmd>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d142      	bne.n	8001bd8 <SD_disk_ioctl+0x238>
 8001b52:	2110      	movs	r1, #16
 8001b54:	6a38      	ldr	r0, [r7, #32]
 8001b56:	f7ff fc75 	bl	8001444 <SD_RxDataBlock>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d03b      	beq.n	8001bd8 <SD_disk_ioctl+0x238>
 8001b60:	2300      	movs	r3, #0
 8001b62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001b66:	e037      	b.n	8001bd8 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001b68:	2100      	movs	r1, #0
 8001b6a:	204a      	movs	r0, #74	; 0x4a
 8001b6c:	f7ff fcdb 	bl	8001526 <SD_SendCmd>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d132      	bne.n	8001bdc <SD_disk_ioctl+0x23c>
 8001b76:	2110      	movs	r1, #16
 8001b78:	6a38      	ldr	r0, [r7, #32]
 8001b7a:	f7ff fc63 	bl	8001444 <SD_RxDataBlock>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d02b      	beq.n	8001bdc <SD_disk_ioctl+0x23c>
 8001b84:	2300      	movs	r3, #0
 8001b86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001b8a:	e027      	b.n	8001bdc <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	207a      	movs	r0, #122	; 0x7a
 8001b90:	f7ff fcc9 	bl	8001526 <SD_SendCmd>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d116      	bne.n	8001bc8 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001ba0:	e00b      	b.n	8001bba <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001ba2:	6a3c      	ldr	r4, [r7, #32]
 8001ba4:	1c63      	adds	r3, r4, #1
 8001ba6:	623b      	str	r3, [r7, #32]
 8001ba8:	f7ff fbb0 	bl	800130c <SPI_RxByte>
 8001bac:	4603      	mov	r3, r0
 8001bae:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001bb0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001bba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	d9ef      	bls.n	8001ba2 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001bc8:	2304      	movs	r3, #4
 8001bca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001bce:	e006      	b.n	8001bde <SD_disk_ioctl+0x23e>
			break;
 8001bd0:	bf00      	nop
 8001bd2:	e004      	b.n	8001bde <SD_disk_ioctl+0x23e>
			break;
 8001bd4:	bf00      	nop
 8001bd6:	e002      	b.n	8001bde <SD_disk_ioctl+0x23e>
			break;
 8001bd8:	bf00      	nop
 8001bda:	e000      	b.n	8001bde <SD_disk_ioctl+0x23e>
			break;
 8001bdc:	bf00      	nop
		}

		DESELECT();
 8001bde:	f7ff fb53 	bl	8001288 <DESELECT>
		SPI_RxByte();
 8001be2:	f7ff fb93 	bl	800130c <SPI_RxByte>
	}

	return res;
 8001be6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	372c      	adds	r7, #44	; 0x2c
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd90      	pop	{r4, r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000544 	.word	0x20000544

08001bf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bfc:	f000 fd8e 	bl	800271c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c00:	f000 f83e 	bl	8001c80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c04:	f000 f906 	bl	8001e14 <MX_GPIO_Init>
  MX_FATFS_Init();
 8001c08:	f003 fcf6 	bl	80055f8 <MX_FATFS_Init>
  MX_SPI1_Init();
 8001c0c:	f000 f8a2 	bl	8001d54 <MX_SPI1_Init>
  MX_I2C1_Init();
 8001c10:	f000 f872 	bl	8001cf8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001c14:	f000 f8d4 	bl	8001dc0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1500);
 8001c18:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001c1c:	f000 fde0 	bl	80027e0 <HAL_Delay>
  Display.configurado = VELOCIDADE;
 8001c20:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <main+0x78>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	701a      	strb	r2, [r3, #0]
  initDisplay(&Display);
 8001c26:	4812      	ldr	r0, [pc, #72]	; (8001c70 <main+0x78>)
 8001c28:	f7fe ffdc 	bl	8000be4 <initDisplay>
  HAL_UART_Receive_IT(&huart1, gnss.RxDataSerial, 1);
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	4911      	ldr	r1, [pc, #68]	; (8001c74 <main+0x7c>)
 8001c30:	4811      	ldr	r0, [pc, #68]	; (8001c78 <main+0x80>)
 8001c32:	f002 ffaa 	bl	8004b8a <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){

	  if(gnss.indy == 0){
 8001c36:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <main+0x7c>)
 8001c38:	f893 3517 	ldrb.w	r3, [r3, #1303]	; 0x517
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d104      	bne.n	8001c4a <main+0x52>
		  decodeNMEA(&gnss.RxDataSerial[13][0], &gnss);
 8001c40:	490c      	ldr	r1, [pc, #48]	; (8001c74 <main+0x7c>)
 8001c42:	480e      	ldr	r0, [pc, #56]	; (8001c7c <main+0x84>)
 8001c44:	f7ff f9a6 	bl	8000f94 <decodeNMEA>
 8001c48:	e00c      	b.n	8001c64 <main+0x6c>
		  //gnss.velocidade.velocidade8bits = 10;//debug

	  }else{
		  decodeNMEA(&gnss.RxDataSerial[gnss.indy-1][0], &gnss);
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <main+0x7c>)
 8001c4c:	f893 3517 	ldrb.w	r3, [r3, #1303]	; 0x517
 8001c50:	3b01      	subs	r3, #1
 8001c52:	2264      	movs	r2, #100	; 0x64
 8001c54:	fb02 f303 	mul.w	r3, r2, r3
 8001c58:	4a06      	ldr	r2, [pc, #24]	; (8001c74 <main+0x7c>)
 8001c5a:	4413      	add	r3, r2
 8001c5c:	4905      	ldr	r1, [pc, #20]	; (8001c74 <main+0x7c>)
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff f998 	bl	8000f94 <decodeNMEA>
		  //gnss.velocidade.velocidade8bits = gnss.indy-1;//debug

	  }

	  updateDisplay(&Display,&gnss);
 8001c64:	4903      	ldr	r1, [pc, #12]	; (8001c74 <main+0x7c>)
 8001c66:	4802      	ldr	r0, [pc, #8]	; (8001c70 <main+0x78>)
 8001c68:	f7fe fffc 	bl	8000c64 <updateDisplay>
	  if(gnss.indy == 0){
 8001c6c:	e7e3      	b.n	8001c36 <main+0x3e>
 8001c6e:	bf00      	nop
 8001c70:	2000059c 	.word	0x2000059c
 8001c74:	20000000 	.word	0x20000000
 8001c78:	200005a0 	.word	0x200005a0
 8001c7c:	20000514 	.word	0x20000514

08001c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b090      	sub	sp, #64	; 0x40
 8001c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c86:	f107 0318 	add.w	r3, r7, #24
 8001c8a:	2228      	movs	r2, #40	; 0x28
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f007 fc9c 	bl	80095cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	605a      	str	r2, [r3, #4]
 8001c9c:	609a      	str	r2, [r3, #8]
 8001c9e:	60da      	str	r2, [r3, #12]
 8001ca0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001caa:	2310      	movs	r3, #16
 8001cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cb2:	f107 0318 	add.w	r3, r7, #24
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f001 fedc 	bl	8003a74 <HAL_RCC_OscConfig>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001cc2:	f000 f8e5 	bl	8001e90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cc6:	230f      	movs	r3, #15
 8001cc8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f002 f94a 	bl	8003f78 <HAL_RCC_ClockConfig>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001cea:	f000 f8d1 	bl	8001e90 <Error_Handler>
  }
}
 8001cee:	bf00      	nop
 8001cf0:	3740      	adds	r7, #64	; 0x40
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cfc:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <MX_I2C1_Init+0x50>)
 8001cfe:	4a13      	ldr	r2, [pc, #76]	; (8001d4c <MX_I2C1_Init+0x54>)
 8001d00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001d02:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <MX_I2C1_Init+0x50>)
 8001d04:	4a12      	ldr	r2, [pc, #72]	; (8001d50 <MX_I2C1_Init+0x58>)
 8001d06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d08:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <MX_I2C1_Init+0x50>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d0e:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <MX_I2C1_Init+0x50>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <MX_I2C1_Init+0x50>)
 8001d16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d1c:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <MX_I2C1_Init+0x50>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d22:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <MX_I2C1_Init+0x50>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d28:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <MX_I2C1_Init+0x50>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d2e:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <MX_I2C1_Init+0x50>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d34:	4804      	ldr	r0, [pc, #16]	; (8001d48 <MX_I2C1_Init+0x50>)
 8001d36:	f001 f8d3 	bl	8002ee0 <HAL_I2C_Init>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d40:	f000 f8a6 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d44:	bf00      	nop
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	2000264c 	.word	0x2000264c
 8001d4c:	40005400 	.word	0x40005400
 8001d50:	00061a80 	.word	0x00061a80

08001d54 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d58:	4b17      	ldr	r3, [pc, #92]	; (8001db8 <MX_SPI1_Init+0x64>)
 8001d5a:	4a18      	ldr	r2, [pc, #96]	; (8001dbc <MX_SPI1_Init+0x68>)
 8001d5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d5e:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <MX_SPI1_Init+0x64>)
 8001d60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d66:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <MX_SPI1_Init+0x64>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d6c:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <MX_SPI1_Init+0x64>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d72:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <MX_SPI1_Init+0x64>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d78:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <MX_SPI1_Init+0x64>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <MX_SPI1_Init+0x64>)
 8001d80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d86:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <MX_SPI1_Init+0x64>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d8c:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <MX_SPI1_Init+0x64>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <MX_SPI1_Init+0x64>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d98:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <MX_SPI1_Init+0x64>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <MX_SPI1_Init+0x64>)
 8001da0:	220a      	movs	r2, #10
 8001da2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001da4:	4804      	ldr	r0, [pc, #16]	; (8001db8 <MX_SPI1_Init+0x64>)
 8001da6:	f002 fa75 	bl	8004294 <HAL_SPI_Init>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001db0:	f000 f86e 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	200026a0 	.word	0x200026a0
 8001dbc:	40013000 	.word	0x40013000

08001dc0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001dc4:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <MX_USART1_UART_Init+0x4c>)
 8001dc6:	4a12      	ldr	r2, [pc, #72]	; (8001e10 <MX_USART1_UART_Init+0x50>)
 8001dc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001dca:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <MX_USART1_UART_Init+0x4c>)
 8001dcc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001dd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <MX_USART1_UART_Init+0x4c>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <MX_USART1_UART_Init+0x4c>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dde:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <MX_USART1_UART_Init+0x4c>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001de4:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <MX_USART1_UART_Init+0x4c>)
 8001de6:	220c      	movs	r2, #12
 8001de8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dea:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <MX_USART1_UART_Init+0x4c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001df0:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <MX_USART1_UART_Init+0x4c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001df6:	4805      	ldr	r0, [pc, #20]	; (8001e0c <MX_USART1_UART_Init+0x4c>)
 8001df8:	f002 fe77 	bl	8004aea <HAL_UART_Init>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e02:	f000 f845 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200005a0 	.word	0x200005a0
 8001e10:	40013800 	.word	0x40013800

08001e14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1a:	f107 0308 	add.w	r3, r7, #8
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	605a      	str	r2, [r3, #4]
 8001e24:	609a      	str	r2, [r3, #8]
 8001e26:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e28:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <MX_GPIO_Init+0x74>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	4a16      	ldr	r2, [pc, #88]	; (8001e88 <MX_GPIO_Init+0x74>)
 8001e2e:	f043 0304 	orr.w	r3, r3, #4
 8001e32:	6193      	str	r3, [r2, #24]
 8001e34:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <MX_GPIO_Init+0x74>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e40:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <MX_GPIO_Init+0x74>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	4a10      	ldr	r2, [pc, #64]	; (8001e88 <MX_GPIO_Init+0x74>)
 8001e46:	f043 0308 	orr.w	r3, r3, #8
 8001e4a:	6193      	str	r3, [r2, #24]
 8001e4c:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <MX_GPIO_Init+0x74>)
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	603b      	str	r3, [r7, #0]
 8001e56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001e58:	2201      	movs	r2, #1
 8001e5a:	2110      	movs	r1, #16
 8001e5c:	480b      	ldr	r0, [pc, #44]	; (8001e8c <MX_GPIO_Init+0x78>)
 8001e5e:	f001 f827 	bl	8002eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e62:	2310      	movs	r3, #16
 8001e64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e66:	2301      	movs	r3, #1
 8001e68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e72:	f107 0308 	add.w	r3, r7, #8
 8001e76:	4619      	mov	r1, r3
 8001e78:	4804      	ldr	r0, [pc, #16]	; (8001e8c <MX_GPIO_Init+0x78>)
 8001e7a:	f000 fe95 	bl	8002ba8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e7e:	bf00      	nop
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	40010800 	.word	0x40010800

08001e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e94:	b672      	cpsid	i
}
 8001e96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e98:	e7fe      	b.n	8001e98 <Error_Handler+0x8>
	...

08001e9c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001ea2:	f000 fa1f 	bl	80022e4 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001ea6:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001eaa:	2201      	movs	r2, #1
 8001eac:	2178      	movs	r1, #120	; 0x78
 8001eae:	485b      	ldr	r0, [pc, #364]	; (800201c <SSD1306_Init+0x180>)
 8001eb0:	f001 fa58 	bl	8003364 <HAL_I2C_IsDeviceReady>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	e0a9      	b.n	8002012 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001ebe:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001ec2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001ec4:	e002      	b.n	8001ecc <SSD1306_Init+0x30>
		p--;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f9      	bne.n	8001ec6 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001ed2:	22ae      	movs	r2, #174	; 0xae
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	2078      	movs	r0, #120	; 0x78
 8001ed8:	f000 fa7e 	bl	80023d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001edc:	2220      	movs	r2, #32
 8001ede:	2100      	movs	r1, #0
 8001ee0:	2078      	movs	r0, #120	; 0x78
 8001ee2:	f000 fa79 	bl	80023d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001ee6:	2210      	movs	r2, #16
 8001ee8:	2100      	movs	r1, #0
 8001eea:	2078      	movs	r0, #120	; 0x78
 8001eec:	f000 fa74 	bl	80023d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001ef0:	22b0      	movs	r2, #176	; 0xb0
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	2078      	movs	r0, #120	; 0x78
 8001ef6:	f000 fa6f 	bl	80023d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001efa:	22c8      	movs	r2, #200	; 0xc8
 8001efc:	2100      	movs	r1, #0
 8001efe:	2078      	movs	r0, #120	; 0x78
 8001f00:	f000 fa6a 	bl	80023d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001f04:	2200      	movs	r2, #0
 8001f06:	2100      	movs	r1, #0
 8001f08:	2078      	movs	r0, #120	; 0x78
 8001f0a:	f000 fa65 	bl	80023d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001f0e:	2210      	movs	r2, #16
 8001f10:	2100      	movs	r1, #0
 8001f12:	2078      	movs	r0, #120	; 0x78
 8001f14:	f000 fa60 	bl	80023d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001f18:	2240      	movs	r2, #64	; 0x40
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	2078      	movs	r0, #120	; 0x78
 8001f1e:	f000 fa5b 	bl	80023d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001f22:	2281      	movs	r2, #129	; 0x81
 8001f24:	2100      	movs	r1, #0
 8001f26:	2078      	movs	r0, #120	; 0x78
 8001f28:	f000 fa56 	bl	80023d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001f2c:	22ff      	movs	r2, #255	; 0xff
 8001f2e:	2100      	movs	r1, #0
 8001f30:	2078      	movs	r0, #120	; 0x78
 8001f32:	f000 fa51 	bl	80023d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001f36:	22a1      	movs	r2, #161	; 0xa1
 8001f38:	2100      	movs	r1, #0
 8001f3a:	2078      	movs	r0, #120	; 0x78
 8001f3c:	f000 fa4c 	bl	80023d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001f40:	22a6      	movs	r2, #166	; 0xa6
 8001f42:	2100      	movs	r1, #0
 8001f44:	2078      	movs	r0, #120	; 0x78
 8001f46:	f000 fa47 	bl	80023d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001f4a:	22a8      	movs	r2, #168	; 0xa8
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	2078      	movs	r0, #120	; 0x78
 8001f50:	f000 fa42 	bl	80023d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001f54:	223f      	movs	r2, #63	; 0x3f
 8001f56:	2100      	movs	r1, #0
 8001f58:	2078      	movs	r0, #120	; 0x78
 8001f5a:	f000 fa3d 	bl	80023d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001f5e:	22a4      	movs	r2, #164	; 0xa4
 8001f60:	2100      	movs	r1, #0
 8001f62:	2078      	movs	r0, #120	; 0x78
 8001f64:	f000 fa38 	bl	80023d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001f68:	22d3      	movs	r2, #211	; 0xd3
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	2078      	movs	r0, #120	; 0x78
 8001f6e:	f000 fa33 	bl	80023d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001f72:	2200      	movs	r2, #0
 8001f74:	2100      	movs	r1, #0
 8001f76:	2078      	movs	r0, #120	; 0x78
 8001f78:	f000 fa2e 	bl	80023d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001f7c:	22d5      	movs	r2, #213	; 0xd5
 8001f7e:	2100      	movs	r1, #0
 8001f80:	2078      	movs	r0, #120	; 0x78
 8001f82:	f000 fa29 	bl	80023d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001f86:	22f0      	movs	r2, #240	; 0xf0
 8001f88:	2100      	movs	r1, #0
 8001f8a:	2078      	movs	r0, #120	; 0x78
 8001f8c:	f000 fa24 	bl	80023d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001f90:	22d9      	movs	r2, #217	; 0xd9
 8001f92:	2100      	movs	r1, #0
 8001f94:	2078      	movs	r0, #120	; 0x78
 8001f96:	f000 fa1f 	bl	80023d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001f9a:	2222      	movs	r2, #34	; 0x22
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	2078      	movs	r0, #120	; 0x78
 8001fa0:	f000 fa1a 	bl	80023d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001fa4:	22da      	movs	r2, #218	; 0xda
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	2078      	movs	r0, #120	; 0x78
 8001faa:	f000 fa15 	bl	80023d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001fae:	2212      	movs	r2, #18
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	2078      	movs	r0, #120	; 0x78
 8001fb4:	f000 fa10 	bl	80023d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001fb8:	22db      	movs	r2, #219	; 0xdb
 8001fba:	2100      	movs	r1, #0
 8001fbc:	2078      	movs	r0, #120	; 0x78
 8001fbe:	f000 fa0b 	bl	80023d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	2078      	movs	r0, #120	; 0x78
 8001fc8:	f000 fa06 	bl	80023d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001fcc:	228d      	movs	r2, #141	; 0x8d
 8001fce:	2100      	movs	r1, #0
 8001fd0:	2078      	movs	r0, #120	; 0x78
 8001fd2:	f000 fa01 	bl	80023d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001fd6:	2214      	movs	r2, #20
 8001fd8:	2100      	movs	r1, #0
 8001fda:	2078      	movs	r0, #120	; 0x78
 8001fdc:	f000 f9fc 	bl	80023d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001fe0:	22af      	movs	r2, #175	; 0xaf
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	2078      	movs	r0, #120	; 0x78
 8001fe6:	f000 f9f7 	bl	80023d8 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001fea:	222e      	movs	r2, #46	; 0x2e
 8001fec:	2100      	movs	r1, #0
 8001fee:	2078      	movs	r0, #120	; 0x78
 8001ff0:	f000 f9f2 	bl	80023d8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	f000 f843 	bl	8002080 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001ffa:	f000 f813 	bl	8002024 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001ffe:	4b08      	ldr	r3, [pc, #32]	; (8002020 <SSD1306_Init+0x184>)
 8002000:	2200      	movs	r2, #0
 8002002:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <SSD1306_Init+0x184>)
 8002006:	2200      	movs	r2, #0
 8002008:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800200a:	4b05      	ldr	r3, [pc, #20]	; (8002020 <SSD1306_Init+0x184>)
 800200c:	2201      	movs	r2, #1
 800200e:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8002010:	2301      	movs	r3, #1
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	2000264c 	.word	0x2000264c
 8002020:	20002af8 	.word	0x20002af8

08002024 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800202a:	2300      	movs	r3, #0
 800202c:	71fb      	strb	r3, [r7, #7]
 800202e:	e01d      	b.n	800206c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	3b50      	subs	r3, #80	; 0x50
 8002034:	b2db      	uxtb	r3, r3
 8002036:	461a      	mov	r2, r3
 8002038:	2100      	movs	r1, #0
 800203a:	2078      	movs	r0, #120	; 0x78
 800203c:	f000 f9cc 	bl	80023d8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002040:	2200      	movs	r2, #0
 8002042:	2100      	movs	r1, #0
 8002044:	2078      	movs	r0, #120	; 0x78
 8002046:	f000 f9c7 	bl	80023d8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800204a:	2210      	movs	r2, #16
 800204c:	2100      	movs	r1, #0
 800204e:	2078      	movs	r0, #120	; 0x78
 8002050:	f000 f9c2 	bl	80023d8 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002054:	79fb      	ldrb	r3, [r7, #7]
 8002056:	01db      	lsls	r3, r3, #7
 8002058:	4a08      	ldr	r2, [pc, #32]	; (800207c <SSD1306_UpdateScreen+0x58>)
 800205a:	441a      	add	r2, r3
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	2140      	movs	r1, #64	; 0x40
 8002060:	2078      	movs	r0, #120	; 0x78
 8002062:	f000 f953 	bl	800230c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	3301      	adds	r3, #1
 800206a:	71fb      	strb	r3, [r7, #7]
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	2b07      	cmp	r3, #7
 8002070:	d9de      	bls.n	8002030 <SSD1306_UpdateScreen+0xc>
	}
}
 8002072:	bf00      	nop
 8002074:	bf00      	nop
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	200026f8 	.word	0x200026f8

08002080 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800208a:	79fb      	ldrb	r3, [r7, #7]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <SSD1306_Fill+0x14>
 8002090:	2300      	movs	r3, #0
 8002092:	e000      	b.n	8002096 <SSD1306_Fill+0x16>
 8002094:	23ff      	movs	r3, #255	; 0xff
 8002096:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800209a:	4619      	mov	r1, r3
 800209c:	4803      	ldr	r0, [pc, #12]	; (80020ac <SSD1306_Fill+0x2c>)
 800209e:	f007 fa95 	bl	80095cc <memset>
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	200026f8 	.word	0x200026f8

080020b0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	80fb      	strh	r3, [r7, #6]
 80020ba:	460b      	mov	r3, r1
 80020bc:	80bb      	strh	r3, [r7, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	70fb      	strb	r3, [r7, #3]
	if (
 80020c2:	88fb      	ldrh	r3, [r7, #6]
 80020c4:	2b7f      	cmp	r3, #127	; 0x7f
 80020c6:	d848      	bhi.n	800215a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80020c8:	88bb      	ldrh	r3, [r7, #4]
 80020ca:	2b3f      	cmp	r3, #63	; 0x3f
 80020cc:	d845      	bhi.n	800215a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80020ce:	4b25      	ldr	r3, [pc, #148]	; (8002164 <SSD1306_DrawPixel+0xb4>)
 80020d0:	791b      	ldrb	r3, [r3, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d006      	beq.n	80020e4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80020d6:	78fb      	ldrb	r3, [r7, #3]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	bf0c      	ite	eq
 80020dc:	2301      	moveq	r3, #1
 80020de:	2300      	movne	r3, #0
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80020e4:	78fb      	ldrb	r3, [r7, #3]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d11a      	bne.n	8002120 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80020ea:	88fa      	ldrh	r2, [r7, #6]
 80020ec:	88bb      	ldrh	r3, [r7, #4]
 80020ee:	08db      	lsrs	r3, r3, #3
 80020f0:	b298      	uxth	r0, r3
 80020f2:	4603      	mov	r3, r0
 80020f4:	01db      	lsls	r3, r3, #7
 80020f6:	4413      	add	r3, r2
 80020f8:	4a1b      	ldr	r2, [pc, #108]	; (8002168 <SSD1306_DrawPixel+0xb8>)
 80020fa:	5cd3      	ldrb	r3, [r2, r3]
 80020fc:	b25a      	sxtb	r2, r3
 80020fe:	88bb      	ldrh	r3, [r7, #4]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	2101      	movs	r1, #1
 8002106:	fa01 f303 	lsl.w	r3, r1, r3
 800210a:	b25b      	sxtb	r3, r3
 800210c:	4313      	orrs	r3, r2
 800210e:	b259      	sxtb	r1, r3
 8002110:	88fa      	ldrh	r2, [r7, #6]
 8002112:	4603      	mov	r3, r0
 8002114:	01db      	lsls	r3, r3, #7
 8002116:	4413      	add	r3, r2
 8002118:	b2c9      	uxtb	r1, r1
 800211a:	4a13      	ldr	r2, [pc, #76]	; (8002168 <SSD1306_DrawPixel+0xb8>)
 800211c:	54d1      	strb	r1, [r2, r3]
 800211e:	e01d      	b.n	800215c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002120:	88fa      	ldrh	r2, [r7, #6]
 8002122:	88bb      	ldrh	r3, [r7, #4]
 8002124:	08db      	lsrs	r3, r3, #3
 8002126:	b298      	uxth	r0, r3
 8002128:	4603      	mov	r3, r0
 800212a:	01db      	lsls	r3, r3, #7
 800212c:	4413      	add	r3, r2
 800212e:	4a0e      	ldr	r2, [pc, #56]	; (8002168 <SSD1306_DrawPixel+0xb8>)
 8002130:	5cd3      	ldrb	r3, [r2, r3]
 8002132:	b25a      	sxtb	r2, r3
 8002134:	88bb      	ldrh	r3, [r7, #4]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	2101      	movs	r1, #1
 800213c:	fa01 f303 	lsl.w	r3, r1, r3
 8002140:	b25b      	sxtb	r3, r3
 8002142:	43db      	mvns	r3, r3
 8002144:	b25b      	sxtb	r3, r3
 8002146:	4013      	ands	r3, r2
 8002148:	b259      	sxtb	r1, r3
 800214a:	88fa      	ldrh	r2, [r7, #6]
 800214c:	4603      	mov	r3, r0
 800214e:	01db      	lsls	r3, r3, #7
 8002150:	4413      	add	r3, r2
 8002152:	b2c9      	uxtb	r1, r1
 8002154:	4a04      	ldr	r2, [pc, #16]	; (8002168 <SSD1306_DrawPixel+0xb8>)
 8002156:	54d1      	strb	r1, [r2, r3]
 8002158:	e000      	b.n	800215c <SSD1306_DrawPixel+0xac>
		return;
 800215a:	bf00      	nop
	}
}
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr
 8002164:	20002af8 	.word	0x20002af8
 8002168:	200026f8 	.word	0x200026f8

0800216c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	460a      	mov	r2, r1
 8002176:	80fb      	strh	r3, [r7, #6]
 8002178:	4613      	mov	r3, r2
 800217a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800217c:	4a05      	ldr	r2, [pc, #20]	; (8002194 <SSD1306_GotoXY+0x28>)
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002182:	4a04      	ldr	r2, [pc, #16]	; (8002194 <SSD1306_GotoXY+0x28>)
 8002184:	88bb      	ldrh	r3, [r7, #4]
 8002186:	8053      	strh	r3, [r2, #2]
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	20002af8 	.word	0x20002af8

08002198 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	6039      	str	r1, [r7, #0]
 80021a2:	71fb      	strb	r3, [r7, #7]
 80021a4:	4613      	mov	r3, r2
 80021a6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80021a8:	4b3a      	ldr	r3, [pc, #232]	; (8002294 <SSD1306_Putc+0xfc>)
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	461a      	mov	r2, r3
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	4413      	add	r3, r2
	if (
 80021b4:	2b7f      	cmp	r3, #127	; 0x7f
 80021b6:	dc07      	bgt.n	80021c8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80021b8:	4b36      	ldr	r3, [pc, #216]	; (8002294 <SSD1306_Putc+0xfc>)
 80021ba:	885b      	ldrh	r3, [r3, #2]
 80021bc:	461a      	mov	r2, r3
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	785b      	ldrb	r3, [r3, #1]
 80021c2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80021c4:	2b3f      	cmp	r3, #63	; 0x3f
 80021c6:	dd01      	ble.n	80021cc <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	e05e      	b.n	800228a <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	e04b      	b.n	800226a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	3b20      	subs	r3, #32
 80021da:	6839      	ldr	r1, [r7, #0]
 80021dc:	7849      	ldrb	r1, [r1, #1]
 80021de:	fb01 f303 	mul.w	r3, r1, r3
 80021e2:	4619      	mov	r1, r3
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	440b      	add	r3, r1
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	4413      	add	r3, r2
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80021f0:	2300      	movs	r3, #0
 80021f2:	613b      	str	r3, [r7, #16]
 80021f4:	e030      	b.n	8002258 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d010      	beq.n	8002228 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002206:	4b23      	ldr	r3, [pc, #140]	; (8002294 <SSD1306_Putc+0xfc>)
 8002208:	881a      	ldrh	r2, [r3, #0]
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	b29b      	uxth	r3, r3
 800220e:	4413      	add	r3, r2
 8002210:	b298      	uxth	r0, r3
 8002212:	4b20      	ldr	r3, [pc, #128]	; (8002294 <SSD1306_Putc+0xfc>)
 8002214:	885a      	ldrh	r2, [r3, #2]
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	b29b      	uxth	r3, r3
 800221a:	4413      	add	r3, r2
 800221c:	b29b      	uxth	r3, r3
 800221e:	79ba      	ldrb	r2, [r7, #6]
 8002220:	4619      	mov	r1, r3
 8002222:	f7ff ff45 	bl	80020b0 <SSD1306_DrawPixel>
 8002226:	e014      	b.n	8002252 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002228:	4b1a      	ldr	r3, [pc, #104]	; (8002294 <SSD1306_Putc+0xfc>)
 800222a:	881a      	ldrh	r2, [r3, #0]
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	b29b      	uxth	r3, r3
 8002230:	4413      	add	r3, r2
 8002232:	b298      	uxth	r0, r3
 8002234:	4b17      	ldr	r3, [pc, #92]	; (8002294 <SSD1306_Putc+0xfc>)
 8002236:	885a      	ldrh	r2, [r3, #2]
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	b29b      	uxth	r3, r3
 800223c:	4413      	add	r3, r2
 800223e:	b299      	uxth	r1, r3
 8002240:	79bb      	ldrb	r3, [r7, #6]
 8002242:	2b00      	cmp	r3, #0
 8002244:	bf0c      	ite	eq
 8002246:	2301      	moveq	r3, #1
 8002248:	2300      	movne	r3, #0
 800224a:	b2db      	uxtb	r3, r3
 800224c:	461a      	mov	r2, r3
 800224e:	f7ff ff2f 	bl	80020b0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	3301      	adds	r3, #1
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	461a      	mov	r2, r3
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	4293      	cmp	r3, r2
 8002262:	d3c8      	bcc.n	80021f6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	3301      	adds	r3, #1
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	785b      	ldrb	r3, [r3, #1]
 800226e:	461a      	mov	r2, r3
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	4293      	cmp	r3, r2
 8002274:	d3ad      	bcc.n	80021d2 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002276:	4b07      	ldr	r3, [pc, #28]	; (8002294 <SSD1306_Putc+0xfc>)
 8002278:	881a      	ldrh	r2, [r3, #0]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	b29b      	uxth	r3, r3
 8002280:	4413      	add	r3, r2
 8002282:	b29a      	uxth	r2, r3
 8002284:	4b03      	ldr	r3, [pc, #12]	; (8002294 <SSD1306_Putc+0xfc>)
 8002286:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8002288:	79fb      	ldrb	r3, [r7, #7]
}
 800228a:	4618      	mov	r0, r3
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20002af8 	.word	0x20002af8

08002298 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	4613      	mov	r3, r2
 80022a4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80022a6:	e012      	b.n	80022ce <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	79fa      	ldrb	r2, [r7, #7]
 80022ae:	68b9      	ldr	r1, [r7, #8]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff ff71 	bl	8002198 <SSD1306_Putc>
 80022b6:	4603      	mov	r3, r0
 80022b8:	461a      	mov	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d002      	beq.n	80022c8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	e008      	b.n	80022da <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	3301      	adds	r3, #1
 80022cc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1e8      	bne.n	80022a8 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	781b      	ldrb	r3, [r3, #0]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80022ea:	4b07      	ldr	r3, [pc, #28]	; (8002308 <ssd1306_I2C_Init+0x24>)
 80022ec:	607b      	str	r3, [r7, #4]
	while(p>0)
 80022ee:	e002      	b.n	80022f6 <ssd1306_I2C_Init+0x12>
		p--;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1f9      	bne.n	80022f0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80022fc:	bf00      	nop
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr
 8002308:	0003d090 	.word	0x0003d090

0800230c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800230c:	b590      	push	{r4, r7, lr}
 800230e:	b0c7      	sub	sp, #284	; 0x11c
 8002310:	af02      	add	r7, sp, #8
 8002312:	4604      	mov	r4, r0
 8002314:	4608      	mov	r0, r1
 8002316:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800231a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800231e:	600a      	str	r2, [r1, #0]
 8002320:	4619      	mov	r1, r3
 8002322:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002326:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800232a:	4622      	mov	r2, r4
 800232c:	701a      	strb	r2, [r3, #0]
 800232e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002332:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8002336:	4602      	mov	r2, r0
 8002338:	701a      	strb	r2, [r3, #0]
 800233a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800233e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002342:	460a      	mov	r2, r1
 8002344:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002346:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800234a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800234e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002352:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8002356:	7812      	ldrb	r2, [r2, #0]
 8002358:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800235a:	2300      	movs	r3, #0
 800235c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002360:	e015      	b.n	800238e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8002362:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002366:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800236a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	441a      	add	r2, r3
 8002372:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002376:	3301      	adds	r3, #1
 8002378:	7811      	ldrb	r1, [r2, #0]
 800237a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800237e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8002382:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002384:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002388:	3301      	adds	r3, #1
 800238a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800238e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002392:	b29b      	uxth	r3, r3
 8002394:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002398:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800239c:	8812      	ldrh	r2, [r2, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d8df      	bhi.n	8002362 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80023a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80023a6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	b299      	uxth	r1, r3
 80023ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80023b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80023b6:	881b      	ldrh	r3, [r3, #0]
 80023b8:	3301      	adds	r3, #1
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	f107 020c 	add.w	r2, r7, #12
 80023c0:	200a      	movs	r0, #10
 80023c2:	9000      	str	r0, [sp, #0]
 80023c4:	4803      	ldr	r0, [pc, #12]	; (80023d4 <ssd1306_I2C_WriteMulti+0xc8>)
 80023c6:	f000 fecf 	bl	8003168 <HAL_I2C_Master_Transmit>
}
 80023ca:	bf00      	nop
 80023cc:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd90      	pop	{r4, r7, pc}
 80023d4:	2000264c 	.word	0x2000264c

080023d8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af02      	add	r7, sp, #8
 80023de:	4603      	mov	r3, r0
 80023e0:	71fb      	strb	r3, [r7, #7]
 80023e2:	460b      	mov	r3, r1
 80023e4:	71bb      	strb	r3, [r7, #6]
 80023e6:	4613      	mov	r3, r2
 80023e8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80023ea:	79bb      	ldrb	r3, [r7, #6]
 80023ec:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80023ee:	797b      	ldrb	r3, [r7, #5]
 80023f0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	b299      	uxth	r1, r3
 80023f6:	f107 020c 	add.w	r2, r7, #12
 80023fa:	230a      	movs	r3, #10
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	2302      	movs	r3, #2
 8002400:	4803      	ldr	r0, [pc, #12]	; (8002410 <ssd1306_I2C_Write+0x38>)
 8002402:	f000 feb1 	bl	8003168 <HAL_I2C_Master_Transmit>
}
 8002406:	bf00      	nop
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	2000264c 	.word	0x2000264c

08002414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800241a:	4b15      	ldr	r3, [pc, #84]	; (8002470 <HAL_MspInit+0x5c>)
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	4a14      	ldr	r2, [pc, #80]	; (8002470 <HAL_MspInit+0x5c>)
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	6193      	str	r3, [r2, #24]
 8002426:	4b12      	ldr	r3, [pc, #72]	; (8002470 <HAL_MspInit+0x5c>)
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	60bb      	str	r3, [r7, #8]
 8002430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002432:	4b0f      	ldr	r3, [pc, #60]	; (8002470 <HAL_MspInit+0x5c>)
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	4a0e      	ldr	r2, [pc, #56]	; (8002470 <HAL_MspInit+0x5c>)
 8002438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800243c:	61d3      	str	r3, [r2, #28]
 800243e:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <HAL_MspInit+0x5c>)
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002446:	607b      	str	r3, [r7, #4]
 8002448:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800244a:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <HAL_MspInit+0x60>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	4a04      	ldr	r2, [pc, #16]	; (8002474 <HAL_MspInit+0x60>)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002466:	bf00      	nop
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr
 8002470:	40021000 	.word	0x40021000
 8002474:	40010000 	.word	0x40010000

08002478 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b088      	sub	sp, #32
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002480:	f107 0310 	add.w	r3, r7, #16
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a15      	ldr	r2, [pc, #84]	; (80024e8 <HAL_I2C_MspInit+0x70>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d123      	bne.n	80024e0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002498:	4b14      	ldr	r3, [pc, #80]	; (80024ec <HAL_I2C_MspInit+0x74>)
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	4a13      	ldr	r2, [pc, #76]	; (80024ec <HAL_I2C_MspInit+0x74>)
 800249e:	f043 0308 	orr.w	r3, r3, #8
 80024a2:	6193      	str	r3, [r2, #24]
 80024a4:	4b11      	ldr	r3, [pc, #68]	; (80024ec <HAL_I2C_MspInit+0x74>)
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	f003 0308 	and.w	r3, r3, #8
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024b0:	23c0      	movs	r3, #192	; 0xc0
 80024b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024b4:	2312      	movs	r3, #18
 80024b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024b8:	2303      	movs	r3, #3
 80024ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024bc:	f107 0310 	add.w	r3, r7, #16
 80024c0:	4619      	mov	r1, r3
 80024c2:	480b      	ldr	r0, [pc, #44]	; (80024f0 <HAL_I2C_MspInit+0x78>)
 80024c4:	f000 fb70 	bl	8002ba8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024c8:	4b08      	ldr	r3, [pc, #32]	; (80024ec <HAL_I2C_MspInit+0x74>)
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	4a07      	ldr	r2, [pc, #28]	; (80024ec <HAL_I2C_MspInit+0x74>)
 80024ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024d2:	61d3      	str	r3, [r2, #28]
 80024d4:	4b05      	ldr	r3, [pc, #20]	; (80024ec <HAL_I2C_MspInit+0x74>)
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80024e0:	bf00      	nop
 80024e2:	3720      	adds	r7, #32
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40005400 	.word	0x40005400
 80024ec:	40021000 	.word	0x40021000
 80024f0:	40010c00 	.word	0x40010c00

080024f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b088      	sub	sp, #32
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fc:	f107 0310 	add.w	r3, r7, #16
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a1b      	ldr	r2, [pc, #108]	; (800257c <HAL_SPI_MspInit+0x88>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d12f      	bne.n	8002574 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002514:	4b1a      	ldr	r3, [pc, #104]	; (8002580 <HAL_SPI_MspInit+0x8c>)
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	4a19      	ldr	r2, [pc, #100]	; (8002580 <HAL_SPI_MspInit+0x8c>)
 800251a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800251e:	6193      	str	r3, [r2, #24]
 8002520:	4b17      	ldr	r3, [pc, #92]	; (8002580 <HAL_SPI_MspInit+0x8c>)
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800252c:	4b14      	ldr	r3, [pc, #80]	; (8002580 <HAL_SPI_MspInit+0x8c>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	4a13      	ldr	r2, [pc, #76]	; (8002580 <HAL_SPI_MspInit+0x8c>)
 8002532:	f043 0304 	orr.w	r3, r3, #4
 8002536:	6193      	str	r3, [r2, #24]
 8002538:	4b11      	ldr	r3, [pc, #68]	; (8002580 <HAL_SPI_MspInit+0x8c>)
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002544:	23a0      	movs	r3, #160	; 0xa0
 8002546:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002548:	2302      	movs	r3, #2
 800254a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800254c:	2303      	movs	r3, #3
 800254e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002550:	f107 0310 	add.w	r3, r7, #16
 8002554:	4619      	mov	r1, r3
 8002556:	480b      	ldr	r0, [pc, #44]	; (8002584 <HAL_SPI_MspInit+0x90>)
 8002558:	f000 fb26 	bl	8002ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800255c:	2340      	movs	r3, #64	; 0x40
 800255e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002560:	2300      	movs	r3, #0
 8002562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002564:	2300      	movs	r3, #0
 8002566:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002568:	f107 0310 	add.w	r3, r7, #16
 800256c:	4619      	mov	r1, r3
 800256e:	4805      	ldr	r0, [pc, #20]	; (8002584 <HAL_SPI_MspInit+0x90>)
 8002570:	f000 fb1a 	bl	8002ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002574:	bf00      	nop
 8002576:	3720      	adds	r7, #32
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40013000 	.word	0x40013000
 8002580:	40021000 	.word	0x40021000
 8002584:	40010800 	.word	0x40010800

08002588 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002590:	f107 0310 	add.w	r3, r7, #16
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a20      	ldr	r2, [pc, #128]	; (8002624 <HAL_UART_MspInit+0x9c>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d139      	bne.n	800261c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025a8:	4b1f      	ldr	r3, [pc, #124]	; (8002628 <HAL_UART_MspInit+0xa0>)
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	4a1e      	ldr	r2, [pc, #120]	; (8002628 <HAL_UART_MspInit+0xa0>)
 80025ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b2:	6193      	str	r3, [r2, #24]
 80025b4:	4b1c      	ldr	r3, [pc, #112]	; (8002628 <HAL_UART_MspInit+0xa0>)
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c0:	4b19      	ldr	r3, [pc, #100]	; (8002628 <HAL_UART_MspInit+0xa0>)
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	4a18      	ldr	r2, [pc, #96]	; (8002628 <HAL_UART_MspInit+0xa0>)
 80025c6:	f043 0304 	orr.w	r3, r3, #4
 80025ca:	6193      	str	r3, [r2, #24]
 80025cc:	4b16      	ldr	r3, [pc, #88]	; (8002628 <HAL_UART_MspInit+0xa0>)
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	60bb      	str	r3, [r7, #8]
 80025d6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80025d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025de:	2302      	movs	r3, #2
 80025e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025e2:	2303      	movs	r3, #3
 80025e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e6:	f107 0310 	add.w	r3, r7, #16
 80025ea:	4619      	mov	r1, r3
 80025ec:	480f      	ldr	r0, [pc, #60]	; (800262c <HAL_UART_MspInit+0xa4>)
 80025ee:	f000 fadb 	bl	8002ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80025f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002600:	f107 0310 	add.w	r3, r7, #16
 8002604:	4619      	mov	r1, r3
 8002606:	4809      	ldr	r0, [pc, #36]	; (800262c <HAL_UART_MspInit+0xa4>)
 8002608:	f000 face 	bl	8002ba8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800260c:	2200      	movs	r2, #0
 800260e:	2100      	movs	r1, #0
 8002610:	2025      	movs	r0, #37	; 0x25
 8002612:	f000 f9e0 	bl	80029d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002616:	2025      	movs	r0, #37	; 0x25
 8002618:	f000 f9f9 	bl	8002a0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800261c:	bf00      	nop
 800261e:	3720      	adds	r7, #32
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40013800 	.word	0x40013800
 8002628:	40021000 	.word	0x40021000
 800262c:	40010800 	.word	0x40010800

08002630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002634:	e7fe      	b.n	8002634 <NMI_Handler+0x4>

08002636 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002636:	b480      	push	{r7}
 8002638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800263a:	e7fe      	b.n	800263a <HardFault_Handler+0x4>

0800263c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002640:	e7fe      	b.n	8002640 <MemManage_Handler+0x4>

08002642 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002642:	b480      	push	{r7}
 8002644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002646:	e7fe      	b.n	8002646 <BusFault_Handler+0x4>

08002648 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800264c:	e7fe      	b.n	800264c <UsageFault_Handler+0x4>

0800264e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800264e:	b480      	push	{r7}
 8002650:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002652:	bf00      	nop
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr

0800265a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800265a:	b480      	push	{r7}
 800265c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr

08002666 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002666:	b480      	push	{r7}
 8002668:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr
	...

08002674 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8002678:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <SysTick_Handler+0x34>)
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d005      	beq.n	800268c <SysTick_Handler+0x18>
		Timer1--;
 8002680:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <SysTick_Handler+0x34>)
 8002682:	881b      	ldrh	r3, [r3, #0]
 8002684:	3b01      	subs	r3, #1
 8002686:	b29a      	uxth	r2, r3
 8002688:	4b07      	ldr	r3, [pc, #28]	; (80026a8 <SysTick_Handler+0x34>)
 800268a:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 800268c:	4b07      	ldr	r3, [pc, #28]	; (80026ac <SysTick_Handler+0x38>)
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <SysTick_Handler+0x2c>
		Timer2--;
 8002694:	4b05      	ldr	r3, [pc, #20]	; (80026ac <SysTick_Handler+0x38>)
 8002696:	881b      	ldrh	r3, [r3, #0]
 8002698:	3b01      	subs	r3, #1
 800269a:	b29a      	uxth	r2, r3
 800269c:	4b03      	ldr	r3, [pc, #12]	; (80026ac <SysTick_Handler+0x38>)
 800269e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026a0:	f000 f882 	bl	80027a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026a4:	bf00      	nop
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20002644 	.word	0x20002644
 80026ac:	20002646 	.word	0x20002646

080026b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026b4:	4802      	ldr	r0, [pc, #8]	; (80026c0 <USART1_IRQHandler+0x10>)
 80026b6:	f002 fa8d 	bl	8004bd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	200005a0 	.word	0x200005a0

080026c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026c8:	bf00      	nop
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr

080026d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026d0:	f7ff fff8 	bl	80026c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026d4:	480b      	ldr	r0, [pc, #44]	; (8002704 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80026d6:	490c      	ldr	r1, [pc, #48]	; (8002708 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80026d8:	4a0c      	ldr	r2, [pc, #48]	; (800270c <LoopFillZerobss+0x16>)
  movs r3, #0
 80026da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026dc:	e002      	b.n	80026e4 <LoopCopyDataInit>

080026de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026e2:	3304      	adds	r3, #4

080026e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026e8:	d3f9      	bcc.n	80026de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ea:	4a09      	ldr	r2, [pc, #36]	; (8002710 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80026ec:	4c09      	ldr	r4, [pc, #36]	; (8002714 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026f0:	e001      	b.n	80026f6 <LoopFillZerobss>

080026f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026f4:	3204      	adds	r2, #4

080026f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026f8:	d3fb      	bcc.n	80026f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026fa:	f006 ff6f 	bl	80095dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026fe:	f7ff fa7b 	bl	8001bf8 <main>
  bx lr
 8002702:	4770      	bx	lr
  ldr r0, =_sdata
 8002704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002708:	20000580 	.word	0x20000580
  ldr r2, =_sidata
 800270c:	0800c470 	.word	0x0800c470
  ldr r2, =_sbss
 8002710:	20000580 	.word	0x20000580
  ldr r4, =_ebss
 8002714:	20002d38 	.word	0x20002d38

08002718 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002718:	e7fe      	b.n	8002718 <ADC1_2_IRQHandler>
	...

0800271c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002720:	4b08      	ldr	r3, [pc, #32]	; (8002744 <HAL_Init+0x28>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a07      	ldr	r2, [pc, #28]	; (8002744 <HAL_Init+0x28>)
 8002726:	f043 0310 	orr.w	r3, r3, #16
 800272a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800272c:	2003      	movs	r0, #3
 800272e:	f000 f947 	bl	80029c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002732:	200f      	movs	r0, #15
 8002734:	f000 f808 	bl	8002748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002738:	f7ff fe6c 	bl	8002414 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40022000 	.word	0x40022000

08002748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002750:	4b12      	ldr	r3, [pc, #72]	; (800279c <HAL_InitTick+0x54>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4b12      	ldr	r3, [pc, #72]	; (80027a0 <HAL_InitTick+0x58>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	4619      	mov	r1, r3
 800275a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800275e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002762:	fbb2 f3f3 	udiv	r3, r2, r3
 8002766:	4618      	mov	r0, r3
 8002768:	f000 f95f 	bl	8002a2a <HAL_SYSTICK_Config>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e00e      	b.n	8002794 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b0f      	cmp	r3, #15
 800277a:	d80a      	bhi.n	8002792 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800277c:	2200      	movs	r2, #0
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	f04f 30ff 	mov.w	r0, #4294967295
 8002784:	f000 f927 	bl	80029d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002788:	4a06      	ldr	r2, [pc, #24]	; (80027a4 <HAL_InitTick+0x5c>)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800278e:	2300      	movs	r3, #0
 8002790:	e000      	b.n	8002794 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
}
 8002794:	4618      	mov	r0, r3
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	20000560 	.word	0x20000560
 80027a0:	20000568 	.word	0x20000568
 80027a4:	20000564 	.word	0x20000564

080027a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027ac:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <HAL_IncTick+0x1c>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	461a      	mov	r2, r3
 80027b2:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <HAL_IncTick+0x20>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4413      	add	r3, r2
 80027b8:	4a03      	ldr	r2, [pc, #12]	; (80027c8 <HAL_IncTick+0x20>)
 80027ba:	6013      	str	r3, [r2, #0]
}
 80027bc:	bf00      	nop
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr
 80027c4:	20000568 	.word	0x20000568
 80027c8:	20002b00 	.word	0x20002b00

080027cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  return uwTick;
 80027d0:	4b02      	ldr	r3, [pc, #8]	; (80027dc <HAL_GetTick+0x10>)
 80027d2:	681b      	ldr	r3, [r3, #0]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr
 80027dc:	20002b00 	.word	0x20002b00

080027e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027e8:	f7ff fff0 	bl	80027cc <HAL_GetTick>
 80027ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f8:	d005      	beq.n	8002806 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027fa:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <HAL_Delay+0x44>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	461a      	mov	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	4413      	add	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002806:	bf00      	nop
 8002808:	f7ff ffe0 	bl	80027cc <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	429a      	cmp	r2, r3
 8002816:	d8f7      	bhi.n	8002808 <HAL_Delay+0x28>
  {
  }
}
 8002818:	bf00      	nop
 800281a:	bf00      	nop
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	20000568 	.word	0x20000568

08002828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002838:	4b0c      	ldr	r3, [pc, #48]	; (800286c <__NVIC_SetPriorityGrouping+0x44>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800283e:	68ba      	ldr	r2, [r7, #8]
 8002840:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002844:	4013      	ands	r3, r2
 8002846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002850:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800285a:	4a04      	ldr	r2, [pc, #16]	; (800286c <__NVIC_SetPriorityGrouping+0x44>)
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	60d3      	str	r3, [r2, #12]
}
 8002860:	bf00      	nop
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002874:	4b04      	ldr	r3, [pc, #16]	; (8002888 <__NVIC_GetPriorityGrouping+0x18>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	0a1b      	lsrs	r3, r3, #8
 800287a:	f003 0307 	and.w	r3, r3, #7
}
 800287e:	4618      	mov	r0, r3
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	e000ed00 	.word	0xe000ed00

0800288c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289a:	2b00      	cmp	r3, #0
 800289c:	db0b      	blt.n	80028b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800289e:	79fb      	ldrb	r3, [r7, #7]
 80028a0:	f003 021f 	and.w	r2, r3, #31
 80028a4:	4906      	ldr	r1, [pc, #24]	; (80028c0 <__NVIC_EnableIRQ+0x34>)
 80028a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028aa:	095b      	lsrs	r3, r3, #5
 80028ac:	2001      	movs	r0, #1
 80028ae:	fa00 f202 	lsl.w	r2, r0, r2
 80028b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr
 80028c0:	e000e100 	.word	0xe000e100

080028c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	6039      	str	r1, [r7, #0]
 80028ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	db0a      	blt.n	80028ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	490c      	ldr	r1, [pc, #48]	; (8002910 <__NVIC_SetPriority+0x4c>)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	0112      	lsls	r2, r2, #4
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	440b      	add	r3, r1
 80028e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028ec:	e00a      	b.n	8002904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	4908      	ldr	r1, [pc, #32]	; (8002914 <__NVIC_SetPriority+0x50>)
 80028f4:	79fb      	ldrb	r3, [r7, #7]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	3b04      	subs	r3, #4
 80028fc:	0112      	lsls	r2, r2, #4
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	440b      	add	r3, r1
 8002902:	761a      	strb	r2, [r3, #24]
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	e000e100 	.word	0xe000e100
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002918:	b480      	push	{r7}
 800291a:	b089      	sub	sp, #36	; 0x24
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f1c3 0307 	rsb	r3, r3, #7
 8002932:	2b04      	cmp	r3, #4
 8002934:	bf28      	it	cs
 8002936:	2304      	movcs	r3, #4
 8002938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	3304      	adds	r3, #4
 800293e:	2b06      	cmp	r3, #6
 8002940:	d902      	bls.n	8002948 <NVIC_EncodePriority+0x30>
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	3b03      	subs	r3, #3
 8002946:	e000      	b.n	800294a <NVIC_EncodePriority+0x32>
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800294c:	f04f 32ff 	mov.w	r2, #4294967295
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43da      	mvns	r2, r3
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	401a      	ands	r2, r3
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002960:	f04f 31ff 	mov.w	r1, #4294967295
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	fa01 f303 	lsl.w	r3, r1, r3
 800296a:	43d9      	mvns	r1, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002970:	4313      	orrs	r3, r2
         );
}
 8002972:	4618      	mov	r0, r3
 8002974:	3724      	adds	r7, #36	; 0x24
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr

0800297c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3b01      	subs	r3, #1
 8002988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800298c:	d301      	bcc.n	8002992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800298e:	2301      	movs	r3, #1
 8002990:	e00f      	b.n	80029b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002992:	4a0a      	ldr	r2, [pc, #40]	; (80029bc <SysTick_Config+0x40>)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3b01      	subs	r3, #1
 8002998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800299a:	210f      	movs	r1, #15
 800299c:	f04f 30ff 	mov.w	r0, #4294967295
 80029a0:	f7ff ff90 	bl	80028c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029a4:	4b05      	ldr	r3, [pc, #20]	; (80029bc <SysTick_Config+0x40>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029aa:	4b04      	ldr	r3, [pc, #16]	; (80029bc <SysTick_Config+0x40>)
 80029ac:	2207      	movs	r2, #7
 80029ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	e000e010 	.word	0xe000e010

080029c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7ff ff2d 	bl	8002828 <__NVIC_SetPriorityGrouping>
}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b086      	sub	sp, #24
 80029da:	af00      	add	r7, sp, #0
 80029dc:	4603      	mov	r3, r0
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
 80029e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029e8:	f7ff ff42 	bl	8002870 <__NVIC_GetPriorityGrouping>
 80029ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	68b9      	ldr	r1, [r7, #8]
 80029f2:	6978      	ldr	r0, [r7, #20]
 80029f4:	f7ff ff90 	bl	8002918 <NVIC_EncodePriority>
 80029f8:	4602      	mov	r2, r0
 80029fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029fe:	4611      	mov	r1, r2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff ff5f 	bl	80028c4 <__NVIC_SetPriority>
}
 8002a06:	bf00      	nop
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	4603      	mov	r3, r0
 8002a16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff ff35 	bl	800288c <__NVIC_EnableIRQ>
}
 8002a22:	bf00      	nop
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b082      	sub	sp, #8
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7ff ffa2 	bl	800297c <SysTick_Config>
 8002a38:	4603      	mov	r3, r0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b085      	sub	sp, #20
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d008      	beq.n	8002a6c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2204      	movs	r2, #4
 8002a5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e020      	b.n	8002aae <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 020e 	bic.w	r2, r2, #14
 8002a7a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0201 	bic.w	r2, r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a94:	2101      	movs	r1, #1
 8002a96:	fa01 f202 	lsl.w	r2, r1, r2
 8002a9a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d005      	beq.n	8002adc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2204      	movs	r2, #4
 8002ad4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	73fb      	strb	r3, [r7, #15]
 8002ada:	e051      	b.n	8002b80 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 020e 	bic.w	r2, r2, #14
 8002aea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0201 	bic.w	r2, r2, #1
 8002afa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a22      	ldr	r2, [pc, #136]	; (8002b8c <HAL_DMA_Abort_IT+0xd4>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d029      	beq.n	8002b5a <HAL_DMA_Abort_IT+0xa2>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a21      	ldr	r2, [pc, #132]	; (8002b90 <HAL_DMA_Abort_IT+0xd8>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d022      	beq.n	8002b56 <HAL_DMA_Abort_IT+0x9e>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a1f      	ldr	r2, [pc, #124]	; (8002b94 <HAL_DMA_Abort_IT+0xdc>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d01a      	beq.n	8002b50 <HAL_DMA_Abort_IT+0x98>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a1e      	ldr	r2, [pc, #120]	; (8002b98 <HAL_DMA_Abort_IT+0xe0>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d012      	beq.n	8002b4a <HAL_DMA_Abort_IT+0x92>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a1c      	ldr	r2, [pc, #112]	; (8002b9c <HAL_DMA_Abort_IT+0xe4>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d00a      	beq.n	8002b44 <HAL_DMA_Abort_IT+0x8c>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a1b      	ldr	r2, [pc, #108]	; (8002ba0 <HAL_DMA_Abort_IT+0xe8>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d102      	bne.n	8002b3e <HAL_DMA_Abort_IT+0x86>
 8002b38:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b3c:	e00e      	b.n	8002b5c <HAL_DMA_Abort_IT+0xa4>
 8002b3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b42:	e00b      	b.n	8002b5c <HAL_DMA_Abort_IT+0xa4>
 8002b44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b48:	e008      	b.n	8002b5c <HAL_DMA_Abort_IT+0xa4>
 8002b4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b4e:	e005      	b.n	8002b5c <HAL_DMA_Abort_IT+0xa4>
 8002b50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b54:	e002      	b.n	8002b5c <HAL_DMA_Abort_IT+0xa4>
 8002b56:	2310      	movs	r3, #16
 8002b58:	e000      	b.n	8002b5c <HAL_DMA_Abort_IT+0xa4>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	4a11      	ldr	r2, [pc, #68]	; (8002ba4 <HAL_DMA_Abort_IT+0xec>)
 8002b5e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	4798      	blx	r3
    } 
  }
  return status;
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40020008 	.word	0x40020008
 8002b90:	4002001c 	.word	0x4002001c
 8002b94:	40020030 	.word	0x40020030
 8002b98:	40020044 	.word	0x40020044
 8002b9c:	40020058 	.word	0x40020058
 8002ba0:	4002006c 	.word	0x4002006c
 8002ba4:	40020000 	.word	0x40020000

08002ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b08b      	sub	sp, #44	; 0x2c
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bba:	e169      	b.n	8002e90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	69fa      	ldr	r2, [r7, #28]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	f040 8158 	bne.w	8002e8a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	4a9a      	ldr	r2, [pc, #616]	; (8002e48 <HAL_GPIO_Init+0x2a0>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d05e      	beq.n	8002ca2 <HAL_GPIO_Init+0xfa>
 8002be4:	4a98      	ldr	r2, [pc, #608]	; (8002e48 <HAL_GPIO_Init+0x2a0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d875      	bhi.n	8002cd6 <HAL_GPIO_Init+0x12e>
 8002bea:	4a98      	ldr	r2, [pc, #608]	; (8002e4c <HAL_GPIO_Init+0x2a4>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d058      	beq.n	8002ca2 <HAL_GPIO_Init+0xfa>
 8002bf0:	4a96      	ldr	r2, [pc, #600]	; (8002e4c <HAL_GPIO_Init+0x2a4>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d86f      	bhi.n	8002cd6 <HAL_GPIO_Init+0x12e>
 8002bf6:	4a96      	ldr	r2, [pc, #600]	; (8002e50 <HAL_GPIO_Init+0x2a8>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d052      	beq.n	8002ca2 <HAL_GPIO_Init+0xfa>
 8002bfc:	4a94      	ldr	r2, [pc, #592]	; (8002e50 <HAL_GPIO_Init+0x2a8>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d869      	bhi.n	8002cd6 <HAL_GPIO_Init+0x12e>
 8002c02:	4a94      	ldr	r2, [pc, #592]	; (8002e54 <HAL_GPIO_Init+0x2ac>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d04c      	beq.n	8002ca2 <HAL_GPIO_Init+0xfa>
 8002c08:	4a92      	ldr	r2, [pc, #584]	; (8002e54 <HAL_GPIO_Init+0x2ac>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d863      	bhi.n	8002cd6 <HAL_GPIO_Init+0x12e>
 8002c0e:	4a92      	ldr	r2, [pc, #584]	; (8002e58 <HAL_GPIO_Init+0x2b0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d046      	beq.n	8002ca2 <HAL_GPIO_Init+0xfa>
 8002c14:	4a90      	ldr	r2, [pc, #576]	; (8002e58 <HAL_GPIO_Init+0x2b0>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d85d      	bhi.n	8002cd6 <HAL_GPIO_Init+0x12e>
 8002c1a:	2b12      	cmp	r3, #18
 8002c1c:	d82a      	bhi.n	8002c74 <HAL_GPIO_Init+0xcc>
 8002c1e:	2b12      	cmp	r3, #18
 8002c20:	d859      	bhi.n	8002cd6 <HAL_GPIO_Init+0x12e>
 8002c22:	a201      	add	r2, pc, #4	; (adr r2, 8002c28 <HAL_GPIO_Init+0x80>)
 8002c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c28:	08002ca3 	.word	0x08002ca3
 8002c2c:	08002c7d 	.word	0x08002c7d
 8002c30:	08002c8f 	.word	0x08002c8f
 8002c34:	08002cd1 	.word	0x08002cd1
 8002c38:	08002cd7 	.word	0x08002cd7
 8002c3c:	08002cd7 	.word	0x08002cd7
 8002c40:	08002cd7 	.word	0x08002cd7
 8002c44:	08002cd7 	.word	0x08002cd7
 8002c48:	08002cd7 	.word	0x08002cd7
 8002c4c:	08002cd7 	.word	0x08002cd7
 8002c50:	08002cd7 	.word	0x08002cd7
 8002c54:	08002cd7 	.word	0x08002cd7
 8002c58:	08002cd7 	.word	0x08002cd7
 8002c5c:	08002cd7 	.word	0x08002cd7
 8002c60:	08002cd7 	.word	0x08002cd7
 8002c64:	08002cd7 	.word	0x08002cd7
 8002c68:	08002cd7 	.word	0x08002cd7
 8002c6c:	08002c85 	.word	0x08002c85
 8002c70:	08002c99 	.word	0x08002c99
 8002c74:	4a79      	ldr	r2, [pc, #484]	; (8002e5c <HAL_GPIO_Init+0x2b4>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d013      	beq.n	8002ca2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c7a:	e02c      	b.n	8002cd6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	623b      	str	r3, [r7, #32]
          break;
 8002c82:	e029      	b.n	8002cd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	3304      	adds	r3, #4
 8002c8a:	623b      	str	r3, [r7, #32]
          break;
 8002c8c:	e024      	b.n	8002cd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	3308      	adds	r3, #8
 8002c94:	623b      	str	r3, [r7, #32]
          break;
 8002c96:	e01f      	b.n	8002cd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	330c      	adds	r3, #12
 8002c9e:	623b      	str	r3, [r7, #32]
          break;
 8002ca0:	e01a      	b.n	8002cd8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d102      	bne.n	8002cb0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002caa:	2304      	movs	r3, #4
 8002cac:	623b      	str	r3, [r7, #32]
          break;
 8002cae:	e013      	b.n	8002cd8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d105      	bne.n	8002cc4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cb8:	2308      	movs	r3, #8
 8002cba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	69fa      	ldr	r2, [r7, #28]
 8002cc0:	611a      	str	r2, [r3, #16]
          break;
 8002cc2:	e009      	b.n	8002cd8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cc4:	2308      	movs	r3, #8
 8002cc6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	69fa      	ldr	r2, [r7, #28]
 8002ccc:	615a      	str	r2, [r3, #20]
          break;
 8002cce:	e003      	b.n	8002cd8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	623b      	str	r3, [r7, #32]
          break;
 8002cd4:	e000      	b.n	8002cd8 <HAL_GPIO_Init+0x130>
          break;
 8002cd6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	2bff      	cmp	r3, #255	; 0xff
 8002cdc:	d801      	bhi.n	8002ce2 <HAL_GPIO_Init+0x13a>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	e001      	b.n	8002ce6 <HAL_GPIO_Init+0x13e>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	2bff      	cmp	r3, #255	; 0xff
 8002cec:	d802      	bhi.n	8002cf4 <HAL_GPIO_Init+0x14c>
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	e002      	b.n	8002cfa <HAL_GPIO_Init+0x152>
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	3b08      	subs	r3, #8
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	210f      	movs	r1, #15
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	fa01 f303 	lsl.w	r3, r1, r3
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	6a39      	ldr	r1, [r7, #32]
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	fa01 f303 	lsl.w	r3, r1, r3
 8002d14:	431a      	orrs	r2, r3
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 80b1 	beq.w	8002e8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d28:	4b4d      	ldr	r3, [pc, #308]	; (8002e60 <HAL_GPIO_Init+0x2b8>)
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	4a4c      	ldr	r2, [pc, #304]	; (8002e60 <HAL_GPIO_Init+0x2b8>)
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	6193      	str	r3, [r2, #24]
 8002d34:	4b4a      	ldr	r3, [pc, #296]	; (8002e60 <HAL_GPIO_Init+0x2b8>)
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	60bb      	str	r3, [r7, #8]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d40:	4a48      	ldr	r2, [pc, #288]	; (8002e64 <HAL_GPIO_Init+0x2bc>)
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	089b      	lsrs	r3, r3, #2
 8002d46:	3302      	adds	r3, #2
 8002d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	f003 0303 	and.w	r3, r3, #3
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	220f      	movs	r2, #15
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	4013      	ands	r3, r2
 8002d62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a40      	ldr	r2, [pc, #256]	; (8002e68 <HAL_GPIO_Init+0x2c0>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d013      	beq.n	8002d94 <HAL_GPIO_Init+0x1ec>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a3f      	ldr	r2, [pc, #252]	; (8002e6c <HAL_GPIO_Init+0x2c4>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d00d      	beq.n	8002d90 <HAL_GPIO_Init+0x1e8>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a3e      	ldr	r2, [pc, #248]	; (8002e70 <HAL_GPIO_Init+0x2c8>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d007      	beq.n	8002d8c <HAL_GPIO_Init+0x1e4>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a3d      	ldr	r2, [pc, #244]	; (8002e74 <HAL_GPIO_Init+0x2cc>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d101      	bne.n	8002d88 <HAL_GPIO_Init+0x1e0>
 8002d84:	2303      	movs	r3, #3
 8002d86:	e006      	b.n	8002d96 <HAL_GPIO_Init+0x1ee>
 8002d88:	2304      	movs	r3, #4
 8002d8a:	e004      	b.n	8002d96 <HAL_GPIO_Init+0x1ee>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e002      	b.n	8002d96 <HAL_GPIO_Init+0x1ee>
 8002d90:	2301      	movs	r3, #1
 8002d92:	e000      	b.n	8002d96 <HAL_GPIO_Init+0x1ee>
 8002d94:	2300      	movs	r3, #0
 8002d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d98:	f002 0203 	and.w	r2, r2, #3
 8002d9c:	0092      	lsls	r2, r2, #2
 8002d9e:	4093      	lsls	r3, r2
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002da6:	492f      	ldr	r1, [pc, #188]	; (8002e64 <HAL_GPIO_Init+0x2bc>)
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	089b      	lsrs	r3, r3, #2
 8002dac:	3302      	adds	r3, #2
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d006      	beq.n	8002dce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002dc0:	4b2d      	ldr	r3, [pc, #180]	; (8002e78 <HAL_GPIO_Init+0x2d0>)
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	492c      	ldr	r1, [pc, #176]	; (8002e78 <HAL_GPIO_Init+0x2d0>)
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	608b      	str	r3, [r1, #8]
 8002dcc:	e006      	b.n	8002ddc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002dce:	4b2a      	ldr	r3, [pc, #168]	; (8002e78 <HAL_GPIO_Init+0x2d0>)
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	4928      	ldr	r1, [pc, #160]	; (8002e78 <HAL_GPIO_Init+0x2d0>)
 8002dd8:	4013      	ands	r3, r2
 8002dda:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d006      	beq.n	8002df6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002de8:	4b23      	ldr	r3, [pc, #140]	; (8002e78 <HAL_GPIO_Init+0x2d0>)
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	4922      	ldr	r1, [pc, #136]	; (8002e78 <HAL_GPIO_Init+0x2d0>)
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	60cb      	str	r3, [r1, #12]
 8002df4:	e006      	b.n	8002e04 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002df6:	4b20      	ldr	r3, [pc, #128]	; (8002e78 <HAL_GPIO_Init+0x2d0>)
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	491e      	ldr	r1, [pc, #120]	; (8002e78 <HAL_GPIO_Init+0x2d0>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d006      	beq.n	8002e1e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e10:	4b19      	ldr	r3, [pc, #100]	; (8002e78 <HAL_GPIO_Init+0x2d0>)
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	4918      	ldr	r1, [pc, #96]	; (8002e78 <HAL_GPIO_Init+0x2d0>)
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	604b      	str	r3, [r1, #4]
 8002e1c:	e006      	b.n	8002e2c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e1e:	4b16      	ldr	r3, [pc, #88]	; (8002e78 <HAL_GPIO_Init+0x2d0>)
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	43db      	mvns	r3, r3
 8002e26:	4914      	ldr	r1, [pc, #80]	; (8002e78 <HAL_GPIO_Init+0x2d0>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d021      	beq.n	8002e7c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e38:	4b0f      	ldr	r3, [pc, #60]	; (8002e78 <HAL_GPIO_Init+0x2d0>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	490e      	ldr	r1, [pc, #56]	; (8002e78 <HAL_GPIO_Init+0x2d0>)
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	600b      	str	r3, [r1, #0]
 8002e44:	e021      	b.n	8002e8a <HAL_GPIO_Init+0x2e2>
 8002e46:	bf00      	nop
 8002e48:	10320000 	.word	0x10320000
 8002e4c:	10310000 	.word	0x10310000
 8002e50:	10220000 	.word	0x10220000
 8002e54:	10210000 	.word	0x10210000
 8002e58:	10120000 	.word	0x10120000
 8002e5c:	10110000 	.word	0x10110000
 8002e60:	40021000 	.word	0x40021000
 8002e64:	40010000 	.word	0x40010000
 8002e68:	40010800 	.word	0x40010800
 8002e6c:	40010c00 	.word	0x40010c00
 8002e70:	40011000 	.word	0x40011000
 8002e74:	40011400 	.word	0x40011400
 8002e78:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <HAL_GPIO_Init+0x304>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	43db      	mvns	r3, r3
 8002e84:	4909      	ldr	r1, [pc, #36]	; (8002eac <HAL_GPIO_Init+0x304>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	fa22 f303 	lsr.w	r3, r2, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f47f ae8e 	bne.w	8002bbc <HAL_GPIO_Init+0x14>
  }
}
 8002ea0:	bf00      	nop
 8002ea2:	bf00      	nop
 8002ea4:	372c      	adds	r7, #44	; 0x2c
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr
 8002eac:	40010400 	.word	0x40010400

08002eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	807b      	strh	r3, [r7, #2]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ec0:	787b      	ldrb	r3, [r7, #1]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ec6:	887a      	ldrh	r2, [r7, #2]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ecc:	e003      	b.n	8002ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ece:	887b      	ldrh	r3, [r7, #2]
 8002ed0:	041a      	lsls	r2, r3, #16
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	611a      	str	r2, [r3, #16]
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr

08002ee0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e12b      	b.n	800314a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d106      	bne.n	8002f0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7ff fab6 	bl	8002478 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2224      	movs	r2, #36	; 0x24
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0201 	bic.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f44:	f001 f960 	bl	8004208 <HAL_RCC_GetPCLK1Freq>
 8002f48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	4a81      	ldr	r2, [pc, #516]	; (8003154 <HAL_I2C_Init+0x274>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d807      	bhi.n	8002f64 <HAL_I2C_Init+0x84>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	4a80      	ldr	r2, [pc, #512]	; (8003158 <HAL_I2C_Init+0x278>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	bf94      	ite	ls
 8002f5c:	2301      	movls	r3, #1
 8002f5e:	2300      	movhi	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	e006      	b.n	8002f72 <HAL_I2C_Init+0x92>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4a7d      	ldr	r2, [pc, #500]	; (800315c <HAL_I2C_Init+0x27c>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	bf94      	ite	ls
 8002f6c:	2301      	movls	r3, #1
 8002f6e:	2300      	movhi	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e0e7      	b.n	800314a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	4a78      	ldr	r2, [pc, #480]	; (8003160 <HAL_I2C_Init+0x280>)
 8002f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f82:	0c9b      	lsrs	r3, r3, #18
 8002f84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68ba      	ldr	r2, [r7, #8]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	4a6a      	ldr	r2, [pc, #424]	; (8003154 <HAL_I2C_Init+0x274>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d802      	bhi.n	8002fb4 <HAL_I2C_Init+0xd4>
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	e009      	b.n	8002fc8 <HAL_I2C_Init+0xe8>
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fba:	fb02 f303 	mul.w	r3, r2, r3
 8002fbe:	4a69      	ldr	r2, [pc, #420]	; (8003164 <HAL_I2C_Init+0x284>)
 8002fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc4:	099b      	lsrs	r3, r3, #6
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	430b      	orrs	r3, r1
 8002fce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fda:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	495c      	ldr	r1, [pc, #368]	; (8003154 <HAL_I2C_Init+0x274>)
 8002fe4:	428b      	cmp	r3, r1
 8002fe6:	d819      	bhi.n	800301c <HAL_I2C_Init+0x13c>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	1e59      	subs	r1, r3, #1
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ff6:	1c59      	adds	r1, r3, #1
 8002ff8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ffc:	400b      	ands	r3, r1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00a      	beq.n	8003018 <HAL_I2C_Init+0x138>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	1e59      	subs	r1, r3, #1
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003010:	3301      	adds	r3, #1
 8003012:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003016:	e051      	b.n	80030bc <HAL_I2C_Init+0x1dc>
 8003018:	2304      	movs	r3, #4
 800301a:	e04f      	b.n	80030bc <HAL_I2C_Init+0x1dc>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d111      	bne.n	8003048 <HAL_I2C_Init+0x168>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	1e58      	subs	r0, r3, #1
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6859      	ldr	r1, [r3, #4]
 800302c:	460b      	mov	r3, r1
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	440b      	add	r3, r1
 8003032:	fbb0 f3f3 	udiv	r3, r0, r3
 8003036:	3301      	adds	r3, #1
 8003038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800303c:	2b00      	cmp	r3, #0
 800303e:	bf0c      	ite	eq
 8003040:	2301      	moveq	r3, #1
 8003042:	2300      	movne	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	e012      	b.n	800306e <HAL_I2C_Init+0x18e>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	1e58      	subs	r0, r3, #1
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6859      	ldr	r1, [r3, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	0099      	lsls	r1, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	fbb0 f3f3 	udiv	r3, r0, r3
 800305e:	3301      	adds	r3, #1
 8003060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003064:	2b00      	cmp	r3, #0
 8003066:	bf0c      	ite	eq
 8003068:	2301      	moveq	r3, #1
 800306a:	2300      	movne	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <HAL_I2C_Init+0x196>
 8003072:	2301      	movs	r3, #1
 8003074:	e022      	b.n	80030bc <HAL_I2C_Init+0x1dc>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10e      	bne.n	800309c <HAL_I2C_Init+0x1bc>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	1e58      	subs	r0, r3, #1
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6859      	ldr	r1, [r3, #4]
 8003086:	460b      	mov	r3, r1
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	440b      	add	r3, r1
 800308c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003090:	3301      	adds	r3, #1
 8003092:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800309a:	e00f      	b.n	80030bc <HAL_I2C_Init+0x1dc>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	1e58      	subs	r0, r3, #1
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6859      	ldr	r1, [r3, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	0099      	lsls	r1, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80030b2:	3301      	adds	r3, #1
 80030b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	6809      	ldr	r1, [r1, #0]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69da      	ldr	r2, [r3, #28]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6911      	ldr	r1, [r2, #16]
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	68d2      	ldr	r2, [r2, #12]
 80030f6:	4311      	orrs	r1, r2
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6812      	ldr	r2, [r2, #0]
 80030fc:	430b      	orrs	r3, r1
 80030fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	695a      	ldr	r2, [r3, #20]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0201 	orr.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2220      	movs	r2, #32
 8003136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	000186a0 	.word	0x000186a0
 8003158:	001e847f 	.word	0x001e847f
 800315c:	003d08ff 	.word	0x003d08ff
 8003160:	431bde83 	.word	0x431bde83
 8003164:	10624dd3 	.word	0x10624dd3

08003168 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af02      	add	r7, sp, #8
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	607a      	str	r2, [r7, #4]
 8003172:	461a      	mov	r2, r3
 8003174:	460b      	mov	r3, r1
 8003176:	817b      	strh	r3, [r7, #10]
 8003178:	4613      	mov	r3, r2
 800317a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800317c:	f7ff fb26 	bl	80027cc <HAL_GetTick>
 8003180:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b20      	cmp	r3, #32
 800318c:	f040 80e0 	bne.w	8003350 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	2319      	movs	r3, #25
 8003196:	2201      	movs	r2, #1
 8003198:	4970      	ldr	r1, [pc, #448]	; (800335c <HAL_I2C_Master_Transmit+0x1f4>)
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 fa92 	bl	80036c4 <I2C_WaitOnFlagUntilTimeout>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80031a6:	2302      	movs	r3, #2
 80031a8:	e0d3      	b.n	8003352 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <HAL_I2C_Master_Transmit+0x50>
 80031b4:	2302      	movs	r3, #2
 80031b6:	e0cc      	b.n	8003352 <HAL_I2C_Master_Transmit+0x1ea>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d007      	beq.n	80031de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f042 0201 	orr.w	r2, r2, #1
 80031dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2221      	movs	r2, #33	; 0x21
 80031f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2210      	movs	r2, #16
 80031fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	893a      	ldrh	r2, [r7, #8]
 800320e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003214:	b29a      	uxth	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4a50      	ldr	r2, [pc, #320]	; (8003360 <HAL_I2C_Master_Transmit+0x1f8>)
 800321e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003220:	8979      	ldrh	r1, [r7, #10]
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	6a3a      	ldr	r2, [r7, #32]
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 f9ca 	bl	80035c0 <I2C_MasterRequestWrite>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e08d      	b.n	8003352 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003236:	2300      	movs	r3, #0
 8003238:	613b      	str	r3, [r7, #16]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	613b      	str	r3, [r7, #16]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	613b      	str	r3, [r7, #16]
 800324a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800324c:	e066      	b.n	800331c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	6a39      	ldr	r1, [r7, #32]
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 fb50 	bl	80038f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00d      	beq.n	800327a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	2b04      	cmp	r3, #4
 8003264:	d107      	bne.n	8003276 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003274:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e06b      	b.n	8003352 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	781a      	ldrb	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	1c5a      	adds	r2, r3, #1
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003294:	b29b      	uxth	r3, r3
 8003296:	3b01      	subs	r3, #1
 8003298:	b29a      	uxth	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a2:	3b01      	subs	r3, #1
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	d11b      	bne.n	80032f0 <HAL_I2C_Master_Transmit+0x188>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d017      	beq.n	80032f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	781a      	ldrb	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032da:	b29b      	uxth	r3, r3
 80032dc:	3b01      	subs	r3, #1
 80032de:	b29a      	uxth	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e8:	3b01      	subs	r3, #1
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	6a39      	ldr	r1, [r7, #32]
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f000 fb47 	bl	8003988 <I2C_WaitOnBTFFlagUntilTimeout>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00d      	beq.n	800331c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	2b04      	cmp	r3, #4
 8003306:	d107      	bne.n	8003318 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003316:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e01a      	b.n	8003352 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003320:	2b00      	cmp	r3, #0
 8003322:	d194      	bne.n	800324e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003332:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2220      	movs	r2, #32
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800334c:	2300      	movs	r3, #0
 800334e:	e000      	b.n	8003352 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003350:	2302      	movs	r3, #2
  }
}
 8003352:	4618      	mov	r0, r3
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	00100002 	.word	0x00100002
 8003360:	ffff0000 	.word	0xffff0000

08003364 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b08a      	sub	sp, #40	; 0x28
 8003368:	af02      	add	r7, sp, #8
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	607a      	str	r2, [r7, #4]
 800336e:	603b      	str	r3, [r7, #0]
 8003370:	460b      	mov	r3, r1
 8003372:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003374:	f7ff fa2a 	bl	80027cc <HAL_GetTick>
 8003378:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800337a:	2300      	movs	r3, #0
 800337c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b20      	cmp	r3, #32
 8003388:	f040 8111 	bne.w	80035ae <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	2319      	movs	r3, #25
 8003392:	2201      	movs	r2, #1
 8003394:	4988      	ldr	r1, [pc, #544]	; (80035b8 <HAL_I2C_IsDeviceReady+0x254>)
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 f994 	bl	80036c4 <I2C_WaitOnFlagUntilTimeout>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80033a2:	2302      	movs	r3, #2
 80033a4:	e104      	b.n	80035b0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d101      	bne.n	80033b4 <HAL_I2C_IsDeviceReady+0x50>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e0fd      	b.n	80035b0 <HAL_I2C_IsDeviceReady+0x24c>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d007      	beq.n	80033da <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f042 0201 	orr.w	r2, r2, #1
 80033d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2224      	movs	r2, #36	; 0x24
 80033ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4a70      	ldr	r2, [pc, #448]	; (80035bc <HAL_I2C_IsDeviceReady+0x258>)
 80033fc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800340c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	2200      	movs	r2, #0
 8003416:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 f952 	bl	80036c4 <I2C_WaitOnFlagUntilTimeout>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00d      	beq.n	8003442 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003434:	d103      	bne.n	800343e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f44f 7200 	mov.w	r2, #512	; 0x200
 800343c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e0b6      	b.n	80035b0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003442:	897b      	ldrh	r3, [r7, #10]
 8003444:	b2db      	uxtb	r3, r3
 8003446:	461a      	mov	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003450:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003452:	f7ff f9bb 	bl	80027cc <HAL_GetTick>
 8003456:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b02      	cmp	r3, #2
 8003464:	bf0c      	ite	eq
 8003466:	2301      	moveq	r3, #1
 8003468:	2300      	movne	r3, #0
 800346a:	b2db      	uxtb	r3, r3
 800346c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800347c:	bf0c      	ite	eq
 800347e:	2301      	moveq	r3, #1
 8003480:	2300      	movne	r3, #0
 8003482:	b2db      	uxtb	r3, r3
 8003484:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003486:	e025      	b.n	80034d4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003488:	f7ff f9a0 	bl	80027cc <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	429a      	cmp	r2, r3
 8003496:	d302      	bcc.n	800349e <HAL_I2C_IsDeviceReady+0x13a>
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d103      	bne.n	80034a6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	22a0      	movs	r2, #160	; 0xa0
 80034a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	bf0c      	ite	eq
 80034b4:	2301      	moveq	r3, #1
 80034b6:	2300      	movne	r3, #0
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ca:	bf0c      	ite	eq
 80034cc:	2301      	moveq	r3, #1
 80034ce:	2300      	movne	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2ba0      	cmp	r3, #160	; 0xa0
 80034de:	d005      	beq.n	80034ec <HAL_I2C_IsDeviceReady+0x188>
 80034e0:	7dfb      	ldrb	r3, [r7, #23]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d102      	bne.n	80034ec <HAL_I2C_IsDeviceReady+0x188>
 80034e6:	7dbb      	ldrb	r3, [r7, #22]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0cd      	beq.n	8003488 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d129      	bne.n	8003556 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003510:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003512:	2300      	movs	r3, #0
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	613b      	str	r3, [r7, #16]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	613b      	str	r3, [r7, #16]
 8003526:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	2319      	movs	r3, #25
 800352e:	2201      	movs	r2, #1
 8003530:	4921      	ldr	r1, [pc, #132]	; (80035b8 <HAL_I2C_IsDeviceReady+0x254>)
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 f8c6 	bl	80036c4 <I2C_WaitOnFlagUntilTimeout>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e036      	b.n	80035b0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2220      	movs	r2, #32
 8003546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003552:	2300      	movs	r3, #0
 8003554:	e02c      	b.n	80035b0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003564:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800356e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	2319      	movs	r3, #25
 8003576:	2201      	movs	r2, #1
 8003578:	490f      	ldr	r1, [pc, #60]	; (80035b8 <HAL_I2C_IsDeviceReady+0x254>)
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f000 f8a2 	bl	80036c4 <I2C_WaitOnFlagUntilTimeout>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e012      	b.n	80035b0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	3301      	adds	r3, #1
 800358e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	429a      	cmp	r2, r3
 8003596:	f4ff af32 	bcc.w	80033fe <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2220      	movs	r2, #32
 800359e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e000      	b.n	80035b0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80035ae:	2302      	movs	r3, #2
  }
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3720      	adds	r7, #32
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	00100002 	.word	0x00100002
 80035bc:	ffff0000 	.word	0xffff0000

080035c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b088      	sub	sp, #32
 80035c4:	af02      	add	r7, sp, #8
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	607a      	str	r2, [r7, #4]
 80035ca:	603b      	str	r3, [r7, #0]
 80035cc:	460b      	mov	r3, r1
 80035ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d006      	beq.n	80035ea <I2C_MasterRequestWrite+0x2a>
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d003      	beq.n	80035ea <I2C_MasterRequestWrite+0x2a>
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035e8:	d108      	bne.n	80035fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	e00b      	b.n	8003614 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003600:	2b12      	cmp	r3, #18
 8003602:	d107      	bne.n	8003614 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003612:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 f84f 	bl	80036c4 <I2C_WaitOnFlagUntilTimeout>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00d      	beq.n	8003648 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800363a:	d103      	bne.n	8003644 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003642:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e035      	b.n	80036b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003650:	d108      	bne.n	8003664 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003652:	897b      	ldrh	r3, [r7, #10]
 8003654:	b2db      	uxtb	r3, r3
 8003656:	461a      	mov	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003660:	611a      	str	r2, [r3, #16]
 8003662:	e01b      	b.n	800369c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003664:	897b      	ldrh	r3, [r7, #10]
 8003666:	11db      	asrs	r3, r3, #7
 8003668:	b2db      	uxtb	r3, r3
 800366a:	f003 0306 	and.w	r3, r3, #6
 800366e:	b2db      	uxtb	r3, r3
 8003670:	f063 030f 	orn	r3, r3, #15
 8003674:	b2da      	uxtb	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	490e      	ldr	r1, [pc, #56]	; (80036bc <I2C_MasterRequestWrite+0xfc>)
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 f898 	bl	80037b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e010      	b.n	80036b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003692:	897b      	ldrh	r3, [r7, #10]
 8003694:	b2da      	uxtb	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	4907      	ldr	r1, [pc, #28]	; (80036c0 <I2C_MasterRequestWrite+0x100>)
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 f888 	bl	80037b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e000      	b.n	80036b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3718      	adds	r7, #24
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	00010008 	.word	0x00010008
 80036c0:	00010002 	.word	0x00010002

080036c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	603b      	str	r3, [r7, #0]
 80036d0:	4613      	mov	r3, r2
 80036d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036d4:	e048      	b.n	8003768 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036dc:	d044      	beq.n	8003768 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036de:	f7ff f875 	bl	80027cc <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d302      	bcc.n	80036f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d139      	bne.n	8003768 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	0c1b      	lsrs	r3, r3, #16
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d10d      	bne.n	800371a <I2C_WaitOnFlagUntilTimeout+0x56>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	43da      	mvns	r2, r3
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	4013      	ands	r3, r2
 800370a:	b29b      	uxth	r3, r3
 800370c:	2b00      	cmp	r3, #0
 800370e:	bf0c      	ite	eq
 8003710:	2301      	moveq	r3, #1
 8003712:	2300      	movne	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	461a      	mov	r2, r3
 8003718:	e00c      	b.n	8003734 <I2C_WaitOnFlagUntilTimeout+0x70>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	43da      	mvns	r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	4013      	ands	r3, r2
 8003726:	b29b      	uxth	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	bf0c      	ite	eq
 800372c:	2301      	moveq	r3, #1
 800372e:	2300      	movne	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	461a      	mov	r2, r3
 8003734:	79fb      	ldrb	r3, [r7, #7]
 8003736:	429a      	cmp	r2, r3
 8003738:	d116      	bne.n	8003768 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2220      	movs	r2, #32
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003754:	f043 0220 	orr.w	r2, r3, #32
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e023      	b.n	80037b0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	0c1b      	lsrs	r3, r3, #16
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b01      	cmp	r3, #1
 8003770:	d10d      	bne.n	800378e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	43da      	mvns	r2, r3
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	4013      	ands	r3, r2
 800377e:	b29b      	uxth	r3, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	bf0c      	ite	eq
 8003784:	2301      	moveq	r3, #1
 8003786:	2300      	movne	r3, #0
 8003788:	b2db      	uxtb	r3, r3
 800378a:	461a      	mov	r2, r3
 800378c:	e00c      	b.n	80037a8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	43da      	mvns	r2, r3
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	4013      	ands	r3, r2
 800379a:	b29b      	uxth	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	bf0c      	ite	eq
 80037a0:	2301      	moveq	r3, #1
 80037a2:	2300      	movne	r3, #0
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	461a      	mov	r2, r3
 80037a8:	79fb      	ldrb	r3, [r7, #7]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d093      	beq.n	80036d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
 80037c4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037c6:	e071      	b.n	80038ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037d6:	d123      	bne.n	8003820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037e6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2220      	movs	r2, #32
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380c:	f043 0204 	orr.w	r2, r3, #4
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e067      	b.n	80038f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003826:	d041      	beq.n	80038ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003828:	f7fe ffd0 	bl	80027cc <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	429a      	cmp	r2, r3
 8003836:	d302      	bcc.n	800383e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d136      	bne.n	80038ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	0c1b      	lsrs	r3, r3, #16
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b01      	cmp	r3, #1
 8003846:	d10c      	bne.n	8003862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	43da      	mvns	r2, r3
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	4013      	ands	r3, r2
 8003854:	b29b      	uxth	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	bf14      	ite	ne
 800385a:	2301      	movne	r3, #1
 800385c:	2300      	moveq	r3, #0
 800385e:	b2db      	uxtb	r3, r3
 8003860:	e00b      	b.n	800387a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	43da      	mvns	r2, r3
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	4013      	ands	r3, r2
 800386e:	b29b      	uxth	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	bf14      	ite	ne
 8003874:	2301      	movne	r3, #1
 8003876:	2300      	moveq	r3, #0
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d016      	beq.n	80038ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2220      	movs	r2, #32
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	f043 0220 	orr.w	r2, r3, #32
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e021      	b.n	80038f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	0c1b      	lsrs	r3, r3, #16
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d10c      	bne.n	80038d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	43da      	mvns	r2, r3
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	4013      	ands	r3, r2
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	bf14      	ite	ne
 80038c8:	2301      	movne	r3, #1
 80038ca:	2300      	moveq	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	e00b      	b.n	80038e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	43da      	mvns	r2, r3
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	4013      	ands	r3, r2
 80038dc:	b29b      	uxth	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	bf14      	ite	ne
 80038e2:	2301      	movne	r3, #1
 80038e4:	2300      	moveq	r3, #0
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f47f af6d 	bne.w	80037c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003904:	e034      	b.n	8003970 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 f886 	bl	8003a18 <I2C_IsAcknowledgeFailed>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e034      	b.n	8003980 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391c:	d028      	beq.n	8003970 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800391e:	f7fe ff55 	bl	80027cc <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	429a      	cmp	r2, r3
 800392c:	d302      	bcc.n	8003934 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d11d      	bne.n	8003970 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393e:	2b80      	cmp	r3, #128	; 0x80
 8003940:	d016      	beq.n	8003970 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2220      	movs	r2, #32
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	f043 0220 	orr.w	r2, r3, #32
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e007      	b.n	8003980 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397a:	2b80      	cmp	r3, #128	; 0x80
 800397c:	d1c3      	bne.n	8003906 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003994:	e034      	b.n	8003a00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 f83e 	bl	8003a18 <I2C_IsAcknowledgeFailed>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e034      	b.n	8003a10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ac:	d028      	beq.n	8003a00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ae:	f7fe ff0d 	bl	80027cc <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d302      	bcc.n	80039c4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d11d      	bne.n	8003a00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	f003 0304 	and.w	r3, r3, #4
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d016      	beq.n	8003a00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2220      	movs	r2, #32
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	f043 0220 	orr.w	r2, r3, #32
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e007      	b.n	8003a10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	f003 0304 	and.w	r3, r3, #4
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d1c3      	bne.n	8003996 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a2e:	d11b      	bne.n	8003a68 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a38:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a54:	f043 0204 	orr.w	r2, r3, #4
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e000      	b.n	8003a6a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr

08003a74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e272      	b.n	8003f6c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 8087 	beq.w	8003ba2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a94:	4b92      	ldr	r3, [pc, #584]	; (8003ce0 <HAL_RCC_OscConfig+0x26c>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f003 030c 	and.w	r3, r3, #12
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d00c      	beq.n	8003aba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003aa0:	4b8f      	ldr	r3, [pc, #572]	; (8003ce0 <HAL_RCC_OscConfig+0x26c>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f003 030c 	and.w	r3, r3, #12
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d112      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x5e>
 8003aac:	4b8c      	ldr	r3, [pc, #560]	; (8003ce0 <HAL_RCC_OscConfig+0x26c>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ab8:	d10b      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aba:	4b89      	ldr	r3, [pc, #548]	; (8003ce0 <HAL_RCC_OscConfig+0x26c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d06c      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x12c>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d168      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e24c      	b.n	8003f6c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ada:	d106      	bne.n	8003aea <HAL_RCC_OscConfig+0x76>
 8003adc:	4b80      	ldr	r3, [pc, #512]	; (8003ce0 <HAL_RCC_OscConfig+0x26c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a7f      	ldr	r2, [pc, #508]	; (8003ce0 <HAL_RCC_OscConfig+0x26c>)
 8003ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae6:	6013      	str	r3, [r2, #0]
 8003ae8:	e02e      	b.n	8003b48 <HAL_RCC_OscConfig+0xd4>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10c      	bne.n	8003b0c <HAL_RCC_OscConfig+0x98>
 8003af2:	4b7b      	ldr	r3, [pc, #492]	; (8003ce0 <HAL_RCC_OscConfig+0x26c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a7a      	ldr	r2, [pc, #488]	; (8003ce0 <HAL_RCC_OscConfig+0x26c>)
 8003af8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	4b78      	ldr	r3, [pc, #480]	; (8003ce0 <HAL_RCC_OscConfig+0x26c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a77      	ldr	r2, [pc, #476]	; (8003ce0 <HAL_RCC_OscConfig+0x26c>)
 8003b04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	e01d      	b.n	8003b48 <HAL_RCC_OscConfig+0xd4>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b14:	d10c      	bne.n	8003b30 <HAL_RCC_OscConfig+0xbc>
 8003b16:	4b72      	ldr	r3, [pc, #456]	; (8003ce0 <HAL_RCC_OscConfig+0x26c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a71      	ldr	r2, [pc, #452]	; (8003ce0 <HAL_RCC_OscConfig+0x26c>)
 8003b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	4b6f      	ldr	r3, [pc, #444]	; (8003ce0 <HAL_RCC_OscConfig+0x26c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a6e      	ldr	r2, [pc, #440]	; (8003ce0 <HAL_RCC_OscConfig+0x26c>)
 8003b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	e00b      	b.n	8003b48 <HAL_RCC_OscConfig+0xd4>
 8003b30:	4b6b      	ldr	r3, [pc, #428]	; (8003ce0 <HAL_RCC_OscConfig+0x26c>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a6a      	ldr	r2, [pc, #424]	; (8003ce0 <HAL_RCC_OscConfig+0x26c>)
 8003b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b3a:	6013      	str	r3, [r2, #0]
 8003b3c:	4b68      	ldr	r3, [pc, #416]	; (8003ce0 <HAL_RCC_OscConfig+0x26c>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a67      	ldr	r2, [pc, #412]	; (8003ce0 <HAL_RCC_OscConfig+0x26c>)
 8003b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d013      	beq.n	8003b78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b50:	f7fe fe3c 	bl	80027cc <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b58:	f7fe fe38 	bl	80027cc <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b64      	cmp	r3, #100	; 0x64
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e200      	b.n	8003f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b6a:	4b5d      	ldr	r3, [pc, #372]	; (8003ce0 <HAL_RCC_OscConfig+0x26c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0f0      	beq.n	8003b58 <HAL_RCC_OscConfig+0xe4>
 8003b76:	e014      	b.n	8003ba2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b78:	f7fe fe28 	bl	80027cc <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b80:	f7fe fe24 	bl	80027cc <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b64      	cmp	r3, #100	; 0x64
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e1ec      	b.n	8003f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b92:	4b53      	ldr	r3, [pc, #332]	; (8003ce0 <HAL_RCC_OscConfig+0x26c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f0      	bne.n	8003b80 <HAL_RCC_OscConfig+0x10c>
 8003b9e:	e000      	b.n	8003ba2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d063      	beq.n	8003c76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bae:	4b4c      	ldr	r3, [pc, #304]	; (8003ce0 <HAL_RCC_OscConfig+0x26c>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f003 030c 	and.w	r3, r3, #12
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00b      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003bba:	4b49      	ldr	r3, [pc, #292]	; (8003ce0 <HAL_RCC_OscConfig+0x26c>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f003 030c 	and.w	r3, r3, #12
 8003bc2:	2b08      	cmp	r3, #8
 8003bc4:	d11c      	bne.n	8003c00 <HAL_RCC_OscConfig+0x18c>
 8003bc6:	4b46      	ldr	r3, [pc, #280]	; (8003ce0 <HAL_RCC_OscConfig+0x26c>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d116      	bne.n	8003c00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bd2:	4b43      	ldr	r3, [pc, #268]	; (8003ce0 <HAL_RCC_OscConfig+0x26c>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d005      	beq.n	8003bea <HAL_RCC_OscConfig+0x176>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d001      	beq.n	8003bea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e1c0      	b.n	8003f6c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bea:	4b3d      	ldr	r3, [pc, #244]	; (8003ce0 <HAL_RCC_OscConfig+0x26c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	4939      	ldr	r1, [pc, #228]	; (8003ce0 <HAL_RCC_OscConfig+0x26c>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bfe:	e03a      	b.n	8003c76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d020      	beq.n	8003c4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c08:	4b36      	ldr	r3, [pc, #216]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0e:	f7fe fddd 	bl	80027cc <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c14:	e008      	b.n	8003c28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c16:	f7fe fdd9 	bl	80027cc <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e1a1      	b.n	8003f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c28:	4b2d      	ldr	r3, [pc, #180]	; (8003ce0 <HAL_RCC_OscConfig+0x26c>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0f0      	beq.n	8003c16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c34:	4b2a      	ldr	r3, [pc, #168]	; (8003ce0 <HAL_RCC_OscConfig+0x26c>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	4927      	ldr	r1, [pc, #156]	; (8003ce0 <HAL_RCC_OscConfig+0x26c>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	600b      	str	r3, [r1, #0]
 8003c48:	e015      	b.n	8003c76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c4a:	4b26      	ldr	r3, [pc, #152]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c50:	f7fe fdbc 	bl	80027cc <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c58:	f7fe fdb8 	bl	80027cc <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e180      	b.n	8003f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ce0 <HAL_RCC_OscConfig+0x26c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1f0      	bne.n	8003c58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d03a      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d019      	beq.n	8003cbe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c8a:	4b17      	ldr	r3, [pc, #92]	; (8003ce8 <HAL_RCC_OscConfig+0x274>)
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c90:	f7fe fd9c 	bl	80027cc <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c98:	f7fe fd98 	bl	80027cc <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e160      	b.n	8003f6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003caa:	4b0d      	ldr	r3, [pc, #52]	; (8003ce0 <HAL_RCC_OscConfig+0x26c>)
 8003cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0f0      	beq.n	8003c98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003cb6:	2001      	movs	r0, #1
 8003cb8:	f000 face 	bl	8004258 <RCC_Delay>
 8003cbc:	e01c      	b.n	8003cf8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cbe:	4b0a      	ldr	r3, [pc, #40]	; (8003ce8 <HAL_RCC_OscConfig+0x274>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cc4:	f7fe fd82 	bl	80027cc <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cca:	e00f      	b.n	8003cec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ccc:	f7fe fd7e 	bl	80027cc <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d908      	bls.n	8003cec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e146      	b.n	8003f6c <HAL_RCC_OscConfig+0x4f8>
 8003cde:	bf00      	nop
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	42420000 	.word	0x42420000
 8003ce8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cec:	4b92      	ldr	r3, [pc, #584]	; (8003f38 <HAL_RCC_OscConfig+0x4c4>)
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1e9      	bne.n	8003ccc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 80a6 	beq.w	8003e52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d06:	2300      	movs	r3, #0
 8003d08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d0a:	4b8b      	ldr	r3, [pc, #556]	; (8003f38 <HAL_RCC_OscConfig+0x4c4>)
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10d      	bne.n	8003d32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d16:	4b88      	ldr	r3, [pc, #544]	; (8003f38 <HAL_RCC_OscConfig+0x4c4>)
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	4a87      	ldr	r2, [pc, #540]	; (8003f38 <HAL_RCC_OscConfig+0x4c4>)
 8003d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d20:	61d3      	str	r3, [r2, #28]
 8003d22:	4b85      	ldr	r3, [pc, #532]	; (8003f38 <HAL_RCC_OscConfig+0x4c4>)
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2a:	60bb      	str	r3, [r7, #8]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d32:	4b82      	ldr	r3, [pc, #520]	; (8003f3c <HAL_RCC_OscConfig+0x4c8>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d118      	bne.n	8003d70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d3e:	4b7f      	ldr	r3, [pc, #508]	; (8003f3c <HAL_RCC_OscConfig+0x4c8>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a7e      	ldr	r2, [pc, #504]	; (8003f3c <HAL_RCC_OscConfig+0x4c8>)
 8003d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d4a:	f7fe fd3f 	bl	80027cc <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d50:	e008      	b.n	8003d64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d52:	f7fe fd3b 	bl	80027cc <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b64      	cmp	r3, #100	; 0x64
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e103      	b.n	8003f6c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d64:	4b75      	ldr	r3, [pc, #468]	; (8003f3c <HAL_RCC_OscConfig+0x4c8>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0f0      	beq.n	8003d52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d106      	bne.n	8003d86 <HAL_RCC_OscConfig+0x312>
 8003d78:	4b6f      	ldr	r3, [pc, #444]	; (8003f38 <HAL_RCC_OscConfig+0x4c4>)
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	4a6e      	ldr	r2, [pc, #440]	; (8003f38 <HAL_RCC_OscConfig+0x4c4>)
 8003d7e:	f043 0301 	orr.w	r3, r3, #1
 8003d82:	6213      	str	r3, [r2, #32]
 8003d84:	e02d      	b.n	8003de2 <HAL_RCC_OscConfig+0x36e>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10c      	bne.n	8003da8 <HAL_RCC_OscConfig+0x334>
 8003d8e:	4b6a      	ldr	r3, [pc, #424]	; (8003f38 <HAL_RCC_OscConfig+0x4c4>)
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	4a69      	ldr	r2, [pc, #420]	; (8003f38 <HAL_RCC_OscConfig+0x4c4>)
 8003d94:	f023 0301 	bic.w	r3, r3, #1
 8003d98:	6213      	str	r3, [r2, #32]
 8003d9a:	4b67      	ldr	r3, [pc, #412]	; (8003f38 <HAL_RCC_OscConfig+0x4c4>)
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	4a66      	ldr	r2, [pc, #408]	; (8003f38 <HAL_RCC_OscConfig+0x4c4>)
 8003da0:	f023 0304 	bic.w	r3, r3, #4
 8003da4:	6213      	str	r3, [r2, #32]
 8003da6:	e01c      	b.n	8003de2 <HAL_RCC_OscConfig+0x36e>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	2b05      	cmp	r3, #5
 8003dae:	d10c      	bne.n	8003dca <HAL_RCC_OscConfig+0x356>
 8003db0:	4b61      	ldr	r3, [pc, #388]	; (8003f38 <HAL_RCC_OscConfig+0x4c4>)
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	4a60      	ldr	r2, [pc, #384]	; (8003f38 <HAL_RCC_OscConfig+0x4c4>)
 8003db6:	f043 0304 	orr.w	r3, r3, #4
 8003dba:	6213      	str	r3, [r2, #32]
 8003dbc:	4b5e      	ldr	r3, [pc, #376]	; (8003f38 <HAL_RCC_OscConfig+0x4c4>)
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	4a5d      	ldr	r2, [pc, #372]	; (8003f38 <HAL_RCC_OscConfig+0x4c4>)
 8003dc2:	f043 0301 	orr.w	r3, r3, #1
 8003dc6:	6213      	str	r3, [r2, #32]
 8003dc8:	e00b      	b.n	8003de2 <HAL_RCC_OscConfig+0x36e>
 8003dca:	4b5b      	ldr	r3, [pc, #364]	; (8003f38 <HAL_RCC_OscConfig+0x4c4>)
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	4a5a      	ldr	r2, [pc, #360]	; (8003f38 <HAL_RCC_OscConfig+0x4c4>)
 8003dd0:	f023 0301 	bic.w	r3, r3, #1
 8003dd4:	6213      	str	r3, [r2, #32]
 8003dd6:	4b58      	ldr	r3, [pc, #352]	; (8003f38 <HAL_RCC_OscConfig+0x4c4>)
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	4a57      	ldr	r2, [pc, #348]	; (8003f38 <HAL_RCC_OscConfig+0x4c4>)
 8003ddc:	f023 0304 	bic.w	r3, r3, #4
 8003de0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d015      	beq.n	8003e16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dea:	f7fe fcef 	bl	80027cc <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003df0:	e00a      	b.n	8003e08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003df2:	f7fe fceb 	bl	80027cc <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d901      	bls.n	8003e08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e0b1      	b.n	8003f6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e08:	4b4b      	ldr	r3, [pc, #300]	; (8003f38 <HAL_RCC_OscConfig+0x4c4>)
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d0ee      	beq.n	8003df2 <HAL_RCC_OscConfig+0x37e>
 8003e14:	e014      	b.n	8003e40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e16:	f7fe fcd9 	bl	80027cc <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e1c:	e00a      	b.n	8003e34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e1e:	f7fe fcd5 	bl	80027cc <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e09b      	b.n	8003f6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e34:	4b40      	ldr	r3, [pc, #256]	; (8003f38 <HAL_RCC_OscConfig+0x4c4>)
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1ee      	bne.n	8003e1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e40:	7dfb      	ldrb	r3, [r7, #23]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d105      	bne.n	8003e52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e46:	4b3c      	ldr	r3, [pc, #240]	; (8003f38 <HAL_RCC_OscConfig+0x4c4>)
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	4a3b      	ldr	r2, [pc, #236]	; (8003f38 <HAL_RCC_OscConfig+0x4c4>)
 8003e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 8087 	beq.w	8003f6a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e5c:	4b36      	ldr	r3, [pc, #216]	; (8003f38 <HAL_RCC_OscConfig+0x4c4>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f003 030c 	and.w	r3, r3, #12
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d061      	beq.n	8003f2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	69db      	ldr	r3, [r3, #28]
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d146      	bne.n	8003efe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e70:	4b33      	ldr	r3, [pc, #204]	; (8003f40 <HAL_RCC_OscConfig+0x4cc>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e76:	f7fe fca9 	bl	80027cc <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e7c:	e008      	b.n	8003e90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e7e:	f7fe fca5 	bl	80027cc <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e06d      	b.n	8003f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e90:	4b29      	ldr	r3, [pc, #164]	; (8003f38 <HAL_RCC_OscConfig+0x4c4>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1f0      	bne.n	8003e7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea4:	d108      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ea6:	4b24      	ldr	r3, [pc, #144]	; (8003f38 <HAL_RCC_OscConfig+0x4c4>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	4921      	ldr	r1, [pc, #132]	; (8003f38 <HAL_RCC_OscConfig+0x4c4>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eb8:	4b1f      	ldr	r3, [pc, #124]	; (8003f38 <HAL_RCC_OscConfig+0x4c4>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a19      	ldr	r1, [r3, #32]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	430b      	orrs	r3, r1
 8003eca:	491b      	ldr	r1, [pc, #108]	; (8003f38 <HAL_RCC_OscConfig+0x4c4>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ed0:	4b1b      	ldr	r3, [pc, #108]	; (8003f40 <HAL_RCC_OscConfig+0x4cc>)
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed6:	f7fe fc79 	bl	80027cc <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003edc:	e008      	b.n	8003ef0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ede:	f7fe fc75 	bl	80027cc <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e03d      	b.n	8003f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ef0:	4b11      	ldr	r3, [pc, #68]	; (8003f38 <HAL_RCC_OscConfig+0x4c4>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0f0      	beq.n	8003ede <HAL_RCC_OscConfig+0x46a>
 8003efc:	e035      	b.n	8003f6a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003efe:	4b10      	ldr	r3, [pc, #64]	; (8003f40 <HAL_RCC_OscConfig+0x4cc>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f04:	f7fe fc62 	bl	80027cc <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f0c:	f7fe fc5e 	bl	80027cc <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e026      	b.n	8003f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f1e:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <HAL_RCC_OscConfig+0x4c4>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1f0      	bne.n	8003f0c <HAL_RCC_OscConfig+0x498>
 8003f2a:	e01e      	b.n	8003f6a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d107      	bne.n	8003f44 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e019      	b.n	8003f6c <HAL_RCC_OscConfig+0x4f8>
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	40007000 	.word	0x40007000
 8003f40:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f44:	4b0b      	ldr	r3, [pc, #44]	; (8003f74 <HAL_RCC_OscConfig+0x500>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d106      	bne.n	8003f66 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d001      	beq.n	8003f6a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e000      	b.n	8003f6c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3718      	adds	r7, #24
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40021000 	.word	0x40021000

08003f78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e0d0      	b.n	800412e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f8c:	4b6a      	ldr	r3, [pc, #424]	; (8004138 <HAL_RCC_ClockConfig+0x1c0>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d910      	bls.n	8003fbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f9a:	4b67      	ldr	r3, [pc, #412]	; (8004138 <HAL_RCC_ClockConfig+0x1c0>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f023 0207 	bic.w	r2, r3, #7
 8003fa2:	4965      	ldr	r1, [pc, #404]	; (8004138 <HAL_RCC_ClockConfig+0x1c0>)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003faa:	4b63      	ldr	r3, [pc, #396]	; (8004138 <HAL_RCC_ClockConfig+0x1c0>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0307 	and.w	r3, r3, #7
 8003fb2:	683a      	ldr	r2, [r7, #0]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d001      	beq.n	8003fbc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e0b8      	b.n	800412e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d020      	beq.n	800400a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d005      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fd4:	4b59      	ldr	r3, [pc, #356]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	4a58      	ldr	r2, [pc, #352]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8003fda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003fde:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0308 	and.w	r3, r3, #8
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d005      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fec:	4b53      	ldr	r3, [pc, #332]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	4a52      	ldr	r2, [pc, #328]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8003ff2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003ff6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ff8:	4b50      	ldr	r3, [pc, #320]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	494d      	ldr	r1, [pc, #308]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8004006:	4313      	orrs	r3, r2
 8004008:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d040      	beq.n	8004098 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d107      	bne.n	800402e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800401e:	4b47      	ldr	r3, [pc, #284]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d115      	bne.n	8004056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e07f      	b.n	800412e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2b02      	cmp	r3, #2
 8004034:	d107      	bne.n	8004046 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004036:	4b41      	ldr	r3, [pc, #260]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d109      	bne.n	8004056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e073      	b.n	800412e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004046:	4b3d      	ldr	r3, [pc, #244]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e06b      	b.n	800412e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004056:	4b39      	ldr	r3, [pc, #228]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f023 0203 	bic.w	r2, r3, #3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	4936      	ldr	r1, [pc, #216]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8004064:	4313      	orrs	r3, r2
 8004066:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004068:	f7fe fbb0 	bl	80027cc <HAL_GetTick>
 800406c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406e:	e00a      	b.n	8004086 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004070:	f7fe fbac 	bl	80027cc <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	f241 3288 	movw	r2, #5000	; 0x1388
 800407e:	4293      	cmp	r3, r2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e053      	b.n	800412e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004086:	4b2d      	ldr	r3, [pc, #180]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f003 020c 	and.w	r2, r3, #12
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	429a      	cmp	r2, r3
 8004096:	d1eb      	bne.n	8004070 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004098:	4b27      	ldr	r3, [pc, #156]	; (8004138 <HAL_RCC_ClockConfig+0x1c0>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d210      	bcs.n	80040c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a6:	4b24      	ldr	r3, [pc, #144]	; (8004138 <HAL_RCC_ClockConfig+0x1c0>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f023 0207 	bic.w	r2, r3, #7
 80040ae:	4922      	ldr	r1, [pc, #136]	; (8004138 <HAL_RCC_ClockConfig+0x1c0>)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b6:	4b20      	ldr	r3, [pc, #128]	; (8004138 <HAL_RCC_ClockConfig+0x1c0>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d001      	beq.n	80040c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e032      	b.n	800412e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d008      	beq.n	80040e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040d4:	4b19      	ldr	r3, [pc, #100]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	4916      	ldr	r1, [pc, #88]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0308 	and.w	r3, r3, #8
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d009      	beq.n	8004106 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040f2:	4b12      	ldr	r3, [pc, #72]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	490e      	ldr	r1, [pc, #56]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8004102:	4313      	orrs	r3, r2
 8004104:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004106:	f000 f821 	bl	800414c <HAL_RCC_GetSysClockFreq>
 800410a:	4602      	mov	r2, r0
 800410c:	4b0b      	ldr	r3, [pc, #44]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	091b      	lsrs	r3, r3, #4
 8004112:	f003 030f 	and.w	r3, r3, #15
 8004116:	490a      	ldr	r1, [pc, #40]	; (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 8004118:	5ccb      	ldrb	r3, [r1, r3]
 800411a:	fa22 f303 	lsr.w	r3, r2, r3
 800411e:	4a09      	ldr	r2, [pc, #36]	; (8004144 <HAL_RCC_ClockConfig+0x1cc>)
 8004120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004122:	4b09      	ldr	r3, [pc, #36]	; (8004148 <HAL_RCC_ClockConfig+0x1d0>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4618      	mov	r0, r3
 8004128:	f7fe fb0e 	bl	8002748 <HAL_InitTick>

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	40022000 	.word	0x40022000
 800413c:	40021000 	.word	0x40021000
 8004140:	0800bec4 	.word	0x0800bec4
 8004144:	20000560 	.word	0x20000560
 8004148:	20000564 	.word	0x20000564

0800414c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004152:	2300      	movs	r3, #0
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	2300      	movs	r3, #0
 8004158:	60bb      	str	r3, [r7, #8]
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	2300      	movs	r3, #0
 8004160:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004162:	2300      	movs	r3, #0
 8004164:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004166:	4b1e      	ldr	r3, [pc, #120]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f003 030c 	and.w	r3, r3, #12
 8004172:	2b04      	cmp	r3, #4
 8004174:	d002      	beq.n	800417c <HAL_RCC_GetSysClockFreq+0x30>
 8004176:	2b08      	cmp	r3, #8
 8004178:	d003      	beq.n	8004182 <HAL_RCC_GetSysClockFreq+0x36>
 800417a:	e027      	b.n	80041cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800417c:	4b19      	ldr	r3, [pc, #100]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800417e:	613b      	str	r3, [r7, #16]
      break;
 8004180:	e027      	b.n	80041d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	0c9b      	lsrs	r3, r3, #18
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	4a17      	ldr	r2, [pc, #92]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800418c:	5cd3      	ldrb	r3, [r2, r3]
 800418e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d010      	beq.n	80041bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800419a:	4b11      	ldr	r3, [pc, #68]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	0c5b      	lsrs	r3, r3, #17
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	4a11      	ldr	r2, [pc, #68]	; (80041ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80041a6:	5cd3      	ldrb	r3, [r2, r3]
 80041a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a0d      	ldr	r2, [pc, #52]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80041ae:	fb03 f202 	mul.w	r2, r3, r2
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b8:	617b      	str	r3, [r7, #20]
 80041ba:	e004      	b.n	80041c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a0c      	ldr	r2, [pc, #48]	; (80041f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80041c0:	fb02 f303 	mul.w	r3, r2, r3
 80041c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	613b      	str	r3, [r7, #16]
      break;
 80041ca:	e002      	b.n	80041d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041cc:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80041ce:	613b      	str	r3, [r7, #16]
      break;
 80041d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041d2:	693b      	ldr	r3, [r7, #16]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	371c      	adds	r7, #28
 80041d8:	46bd      	mov	sp, r7
 80041da:	bc80      	pop	{r7}
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	40021000 	.word	0x40021000
 80041e4:	007a1200 	.word	0x007a1200
 80041e8:	0800bedc 	.word	0x0800bedc
 80041ec:	0800beec 	.word	0x0800beec
 80041f0:	003d0900 	.word	0x003d0900

080041f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041f8:	4b02      	ldr	r3, [pc, #8]	; (8004204 <HAL_RCC_GetHCLKFreq+0x10>)
 80041fa:	681b      	ldr	r3, [r3, #0]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	46bd      	mov	sp, r7
 8004200:	bc80      	pop	{r7}
 8004202:	4770      	bx	lr
 8004204:	20000560 	.word	0x20000560

08004208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800420c:	f7ff fff2 	bl	80041f4 <HAL_RCC_GetHCLKFreq>
 8004210:	4602      	mov	r2, r0
 8004212:	4b05      	ldr	r3, [pc, #20]	; (8004228 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	0a1b      	lsrs	r3, r3, #8
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	4903      	ldr	r1, [pc, #12]	; (800422c <HAL_RCC_GetPCLK1Freq+0x24>)
 800421e:	5ccb      	ldrb	r3, [r1, r3]
 8004220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004224:	4618      	mov	r0, r3
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40021000 	.word	0x40021000
 800422c:	0800bed4 	.word	0x0800bed4

08004230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004234:	f7ff ffde 	bl	80041f4 <HAL_RCC_GetHCLKFreq>
 8004238:	4602      	mov	r2, r0
 800423a:	4b05      	ldr	r3, [pc, #20]	; (8004250 <HAL_RCC_GetPCLK2Freq+0x20>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	0adb      	lsrs	r3, r3, #11
 8004240:	f003 0307 	and.w	r3, r3, #7
 8004244:	4903      	ldr	r1, [pc, #12]	; (8004254 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004246:	5ccb      	ldrb	r3, [r1, r3]
 8004248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800424c:	4618      	mov	r0, r3
 800424e:	bd80      	pop	{r7, pc}
 8004250:	40021000 	.word	0x40021000
 8004254:	0800bed4 	.word	0x0800bed4

08004258 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004260:	4b0a      	ldr	r3, [pc, #40]	; (800428c <RCC_Delay+0x34>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a0a      	ldr	r2, [pc, #40]	; (8004290 <RCC_Delay+0x38>)
 8004266:	fba2 2303 	umull	r2, r3, r2, r3
 800426a:	0a5b      	lsrs	r3, r3, #9
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	fb02 f303 	mul.w	r3, r2, r3
 8004272:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004274:	bf00      	nop
  }
  while (Delay --);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	1e5a      	subs	r2, r3, #1
 800427a:	60fa      	str	r2, [r7, #12]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1f9      	bne.n	8004274 <RCC_Delay+0x1c>
}
 8004280:	bf00      	nop
 8004282:	bf00      	nop
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	bc80      	pop	{r7}
 800428a:	4770      	bx	lr
 800428c:	20000560 	.word	0x20000560
 8004290:	10624dd3 	.word	0x10624dd3

08004294 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e076      	b.n	8004394 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d108      	bne.n	80042c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042b6:	d009      	beq.n	80042cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	61da      	str	r2, [r3, #28]
 80042be:	e005      	b.n	80042cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d106      	bne.n	80042ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7fe f904 	bl	80024f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004302:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004314:	431a      	orrs	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	431a      	orrs	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800433c:	431a      	orrs	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004346:	431a      	orrs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004350:	ea42 0103 	orr.w	r1, r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004358:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	0c1a      	lsrs	r2, r3, #16
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f002 0204 	and.w	r2, r2, #4
 8004372:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	69da      	ldr	r2, [r3, #28]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004382:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3708      	adds	r7, #8
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b088      	sub	sp, #32
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	603b      	str	r3, [r7, #0]
 80043a8:	4613      	mov	r3, r2
 80043aa:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043ac:	f7fe fa0e 	bl	80027cc <HAL_GetTick>
 80043b0:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80043b2:	88fb      	ldrh	r3, [r7, #6]
 80043b4:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d001      	beq.n	80043c6 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80043c2:	2302      	movs	r3, #2
 80043c4:	e12a      	b.n	800461c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d002      	beq.n	80043d2 <HAL_SPI_Transmit+0x36>
 80043cc:	88fb      	ldrh	r3, [r7, #6]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e122      	b.n	800461c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d101      	bne.n	80043e4 <HAL_SPI_Transmit+0x48>
 80043e0:	2302      	movs	r3, #2
 80043e2:	e11b      	b.n	800461c <HAL_SPI_Transmit+0x280>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2203      	movs	r2, #3
 80043f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	88fa      	ldrh	r2, [r7, #6]
 8004404:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	88fa      	ldrh	r2, [r7, #6]
 800440a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004432:	d10f      	bne.n	8004454 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004442:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004452:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800445e:	2b40      	cmp	r3, #64	; 0x40
 8004460:	d007      	beq.n	8004472 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004470:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800447a:	d152      	bne.n	8004522 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d002      	beq.n	800448a <HAL_SPI_Transmit+0xee>
 8004484:	8b7b      	ldrh	r3, [r7, #26]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d145      	bne.n	8004516 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448e:	881a      	ldrh	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449a:	1c9a      	adds	r2, r3, #2
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	3b01      	subs	r3, #1
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80044ae:	e032      	b.n	8004516 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d112      	bne.n	80044e4 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c2:	881a      	ldrh	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ce:	1c9a      	adds	r2, r3, #2
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044d8:	b29b      	uxth	r3, r3
 80044da:	3b01      	subs	r3, #1
 80044dc:	b29a      	uxth	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80044e2:	e018      	b.n	8004516 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044e4:	f7fe f972 	bl	80027cc <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d803      	bhi.n	80044fc <HAL_SPI_Transmit+0x160>
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fa:	d102      	bne.n	8004502 <HAL_SPI_Transmit+0x166>
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d109      	bne.n	8004516 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e082      	b.n	800461c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800451a:	b29b      	uxth	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1c7      	bne.n	80044b0 <HAL_SPI_Transmit+0x114>
 8004520:	e053      	b.n	80045ca <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <HAL_SPI_Transmit+0x194>
 800452a:	8b7b      	ldrh	r3, [r7, #26]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d147      	bne.n	80045c0 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	330c      	adds	r3, #12
 800453a:	7812      	ldrb	r2, [r2, #0]
 800453c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004542:	1c5a      	adds	r2, r3, #1
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800454c:	b29b      	uxth	r3, r3
 800454e:	3b01      	subs	r3, #1
 8004550:	b29a      	uxth	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004556:	e033      	b.n	80045c0 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b02      	cmp	r3, #2
 8004564:	d113      	bne.n	800458e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	330c      	adds	r3, #12
 8004570:	7812      	ldrb	r2, [r2, #0]
 8004572:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004582:	b29b      	uxth	r3, r3
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	86da      	strh	r2, [r3, #54]	; 0x36
 800458c:	e018      	b.n	80045c0 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800458e:	f7fe f91d 	bl	80027cc <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	429a      	cmp	r2, r3
 800459c:	d803      	bhi.n	80045a6 <HAL_SPI_Transmit+0x20a>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a4:	d102      	bne.n	80045ac <HAL_SPI_Transmit+0x210>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d109      	bne.n	80045c0 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e02d      	b.n	800461c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1c6      	bne.n	8004558 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045ca:	69fa      	ldr	r2, [r7, #28]
 80045cc:	6839      	ldr	r1, [r7, #0]
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 fa5a 	bl	8004a88 <SPI_EndRxTxTransaction>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2220      	movs	r2, #32
 80045de:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10a      	bne.n	80045fe <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045e8:	2300      	movs	r3, #0
 80045ea:	617b      	str	r3, [r7, #20]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	617b      	str	r3, [r7, #20]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e000      	b.n	800461c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800461a:	2300      	movs	r3, #0
  }
}
 800461c:	4618      	mov	r0, r3
 800461e:	3720      	adds	r7, #32
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08a      	sub	sp, #40	; 0x28
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
 8004630:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004632:	2301      	movs	r3, #1
 8004634:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004636:	f7fe f8c9 	bl	80027cc <HAL_GetTick>
 800463a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004642:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800464a:	887b      	ldrh	r3, [r7, #2]
 800464c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800464e:	7ffb      	ldrb	r3, [r7, #31]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d00c      	beq.n	800466e <HAL_SPI_TransmitReceive+0x4a>
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800465a:	d106      	bne.n	800466a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d102      	bne.n	800466a <HAL_SPI_TransmitReceive+0x46>
 8004664:	7ffb      	ldrb	r3, [r7, #31]
 8004666:	2b04      	cmp	r3, #4
 8004668:	d001      	beq.n	800466e <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800466a:	2302      	movs	r3, #2
 800466c:	e17f      	b.n	800496e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d005      	beq.n	8004680 <HAL_SPI_TransmitReceive+0x5c>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d002      	beq.n	8004680 <HAL_SPI_TransmitReceive+0x5c>
 800467a:	887b      	ldrh	r3, [r7, #2]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e174      	b.n	800496e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800468a:	2b01      	cmp	r3, #1
 800468c:	d101      	bne.n	8004692 <HAL_SPI_TransmitReceive+0x6e>
 800468e:	2302      	movs	r3, #2
 8004690:	e16d      	b.n	800496e <HAL_SPI_TransmitReceive+0x34a>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b04      	cmp	r3, #4
 80046a4:	d003      	beq.n	80046ae <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2205      	movs	r2, #5
 80046aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	887a      	ldrh	r2, [r7, #2]
 80046be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	887a      	ldrh	r2, [r7, #2]
 80046c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	887a      	ldrh	r2, [r7, #2]
 80046d0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	887a      	ldrh	r2, [r7, #2]
 80046d6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ee:	2b40      	cmp	r3, #64	; 0x40
 80046f0:	d007      	beq.n	8004702 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004700:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800470a:	d17e      	bne.n	800480a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d002      	beq.n	800471a <HAL_SPI_TransmitReceive+0xf6>
 8004714:	8afb      	ldrh	r3, [r7, #22]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d16c      	bne.n	80047f4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471e:	881a      	ldrh	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472a:	1c9a      	adds	r2, r3, #2
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004734:	b29b      	uxth	r3, r3
 8004736:	3b01      	subs	r3, #1
 8004738:	b29a      	uxth	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800473e:	e059      	b.n	80047f4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b02      	cmp	r3, #2
 800474c:	d11b      	bne.n	8004786 <HAL_SPI_TransmitReceive+0x162>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004752:	b29b      	uxth	r3, r3
 8004754:	2b00      	cmp	r3, #0
 8004756:	d016      	beq.n	8004786 <HAL_SPI_TransmitReceive+0x162>
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	2b01      	cmp	r3, #1
 800475c:	d113      	bne.n	8004786 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004762:	881a      	ldrh	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476e:	1c9a      	adds	r2, r3, #2
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004778:	b29b      	uxth	r3, r3
 800477a:	3b01      	subs	r3, #1
 800477c:	b29a      	uxth	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004782:	2300      	movs	r3, #0
 8004784:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b01      	cmp	r3, #1
 8004792:	d119      	bne.n	80047c8 <HAL_SPI_TransmitReceive+0x1a4>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004798:	b29b      	uxth	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d014      	beq.n	80047c8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68da      	ldr	r2, [r3, #12]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a8:	b292      	uxth	r2, r2
 80047aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b0:	1c9a      	adds	r2, r3, #2
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3b01      	subs	r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047c4:	2301      	movs	r3, #1
 80047c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80047c8:	f7fe f800 	bl	80027cc <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	6a3b      	ldr	r3, [r7, #32]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d80d      	bhi.n	80047f4 <HAL_SPI_TransmitReceive+0x1d0>
 80047d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047de:	d009      	beq.n	80047f4 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e0bc      	b.n	800496e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1a0      	bne.n	8004740 <HAL_SPI_TransmitReceive+0x11c>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004802:	b29b      	uxth	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	d19b      	bne.n	8004740 <HAL_SPI_TransmitReceive+0x11c>
 8004808:	e082      	b.n	8004910 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d002      	beq.n	8004818 <HAL_SPI_TransmitReceive+0x1f4>
 8004812:	8afb      	ldrh	r3, [r7, #22]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d171      	bne.n	80048fc <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	330c      	adds	r3, #12
 8004822:	7812      	ldrb	r2, [r2, #0]
 8004824:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482a:	1c5a      	adds	r2, r3, #1
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004834:	b29b      	uxth	r3, r3
 8004836:	3b01      	subs	r3, #1
 8004838:	b29a      	uxth	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800483e:	e05d      	b.n	80048fc <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b02      	cmp	r3, #2
 800484c:	d11c      	bne.n	8004888 <HAL_SPI_TransmitReceive+0x264>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004852:	b29b      	uxth	r3, r3
 8004854:	2b00      	cmp	r3, #0
 8004856:	d017      	beq.n	8004888 <HAL_SPI_TransmitReceive+0x264>
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	2b01      	cmp	r3, #1
 800485c:	d114      	bne.n	8004888 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	330c      	adds	r3, #12
 8004868:	7812      	ldrb	r2, [r2, #0]
 800486a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800487a:	b29b      	uxth	r3, r3
 800487c:	3b01      	subs	r3, #1
 800487e:	b29a      	uxth	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b01      	cmp	r3, #1
 8004894:	d119      	bne.n	80048ca <HAL_SPI_TransmitReceive+0x2a6>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800489a:	b29b      	uxth	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d014      	beq.n	80048ca <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048aa:	b2d2      	uxtb	r2, r2
 80048ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b2:	1c5a      	adds	r2, r3, #1
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048bc:	b29b      	uxth	r3, r3
 80048be:	3b01      	subs	r3, #1
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048c6:	2301      	movs	r3, #1
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80048ca:	f7fd ff7f 	bl	80027cc <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d803      	bhi.n	80048e2 <HAL_SPI_TransmitReceive+0x2be>
 80048da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e0:	d102      	bne.n	80048e8 <HAL_SPI_TransmitReceive+0x2c4>
 80048e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d109      	bne.n	80048fc <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e038      	b.n	800496e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004900:	b29b      	uxth	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d19c      	bne.n	8004840 <HAL_SPI_TransmitReceive+0x21c>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800490a:	b29b      	uxth	r3, r3
 800490c:	2b00      	cmp	r3, #0
 800490e:	d197      	bne.n	8004840 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004910:	6a3a      	ldr	r2, [r7, #32]
 8004912:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f000 f8b7 	bl	8004a88 <SPI_EndRxTxTransaction>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d008      	beq.n	8004932 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2220      	movs	r2, #32
 8004924:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e01d      	b.n	800496e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10a      	bne.n	8004950 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800493a:	2300      	movs	r3, #0
 800493c:	613b      	str	r3, [r7, #16]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	613b      	str	r3, [r7, #16]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	613b      	str	r3, [r7, #16]
 800494e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e000      	b.n	800496e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800496c:	2300      	movs	r3, #0
  }
}
 800496e:	4618      	mov	r0, r3
 8004970:	3728      	adds	r7, #40	; 0x28
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
	...

08004978 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b088      	sub	sp, #32
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	603b      	str	r3, [r7, #0]
 8004984:	4613      	mov	r3, r2
 8004986:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004988:	f7fd ff20 	bl	80027cc <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004990:	1a9b      	subs	r3, r3, r2
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	4413      	add	r3, r2
 8004996:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004998:	f7fd ff18 	bl	80027cc <HAL_GetTick>
 800499c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800499e:	4b39      	ldr	r3, [pc, #228]	; (8004a84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	015b      	lsls	r3, r3, #5
 80049a4:	0d1b      	lsrs	r3, r3, #20
 80049a6:	69fa      	ldr	r2, [r7, #28]
 80049a8:	fb02 f303 	mul.w	r3, r2, r3
 80049ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049ae:	e054      	b.n	8004a5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b6:	d050      	beq.n	8004a5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049b8:	f7fd ff08 	bl	80027cc <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	69fa      	ldr	r2, [r7, #28]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d902      	bls.n	80049ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d13d      	bne.n	8004a4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049e6:	d111      	bne.n	8004a0c <SPI_WaitFlagStateUntilTimeout+0x94>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049f0:	d004      	beq.n	80049fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049fa:	d107      	bne.n	8004a0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a14:	d10f      	bne.n	8004a36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a24:	601a      	str	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e017      	b.n	8004a7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	3b01      	subs	r3, #1
 8004a58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	4013      	ands	r3, r2
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	bf0c      	ite	eq
 8004a6a:	2301      	moveq	r3, #1
 8004a6c:	2300      	movne	r3, #0
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	461a      	mov	r2, r3
 8004a72:	79fb      	ldrb	r3, [r7, #7]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d19b      	bne.n	80049b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3720      	adds	r7, #32
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	20000560 	.word	0x20000560

08004a88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af02      	add	r7, sp, #8
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	2102      	movs	r1, #2
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f7ff ff6a 	bl	8004978 <SPI_WaitFlagStateUntilTimeout>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d007      	beq.n	8004aba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aae:	f043 0220 	orr.w	r2, r3, #32
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e013      	b.n	8004ae2 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	2180      	movs	r1, #128	; 0x80
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f7ff ff57 	bl	8004978 <SPI_WaitFlagStateUntilTimeout>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d007      	beq.n	8004ae0 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad4:	f043 0220 	orr.w	r2, r3, #32
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e000      	b.n	8004ae2 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b082      	sub	sp, #8
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e042      	b.n	8004b82 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d106      	bne.n	8004b16 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f7fd fd39 	bl	8002588 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2224      	movs	r2, #36	; 0x24
 8004b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68da      	ldr	r2, [r3, #12]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b2c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fcd4 	bl	80054dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	691a      	ldr	r2, [r3, #16]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b42:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	695a      	ldr	r2, [r3, #20]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b52:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b62:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2220      	movs	r2, #32
 8004b76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b084      	sub	sp, #16
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	60f8      	str	r0, [r7, #12]
 8004b92:	60b9      	str	r1, [r7, #8]
 8004b94:	4613      	mov	r3, r2
 8004b96:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b20      	cmp	r3, #32
 8004ba2:	d112      	bne.n	8004bca <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d002      	beq.n	8004bb0 <HAL_UART_Receive_IT+0x26>
 8004baa:	88fb      	ldrh	r3, [r7, #6]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e00b      	b.n	8004bcc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004bba:	88fb      	ldrh	r3, [r7, #6]
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	68b9      	ldr	r1, [r7, #8]
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 fab6 	bl	8005132 <UART_Start_Receive_IT>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	e000      	b.n	8004bcc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004bca:	2302      	movs	r3, #2
  }
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b0ba      	sub	sp, #232	; 0xe8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c0a:	f003 030f 	and.w	r3, r3, #15
 8004c0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004c12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10f      	bne.n	8004c3a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c1e:	f003 0320 	and.w	r3, r3, #32
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d009      	beq.n	8004c3a <HAL_UART_IRQHandler+0x66>
 8004c26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c2a:	f003 0320 	and.w	r3, r3, #32
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 fb93 	bl	800535e <UART_Receive_IT>
      return;
 8004c38:	e25b      	b.n	80050f2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 80de 	beq.w	8004e00 <HAL_UART_IRQHandler+0x22c>
 8004c44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d106      	bne.n	8004c5e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c54:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 80d1 	beq.w	8004e00 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00b      	beq.n	8004c82 <HAL_UART_IRQHandler+0xae>
 8004c6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d005      	beq.n	8004c82 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7a:	f043 0201 	orr.w	r2, r3, #1
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c86:	f003 0304 	and.w	r3, r3, #4
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00b      	beq.n	8004ca6 <HAL_UART_IRQHandler+0xd2>
 8004c8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d005      	beq.n	8004ca6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9e:	f043 0202 	orr.w	r2, r3, #2
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00b      	beq.n	8004cca <HAL_UART_IRQHandler+0xf6>
 8004cb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d005      	beq.n	8004cca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc2:	f043 0204 	orr.w	r2, r3, #4
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cce:	f003 0308 	and.w	r3, r3, #8
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d011      	beq.n	8004cfa <HAL_UART_IRQHandler+0x126>
 8004cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cda:	f003 0320 	and.w	r3, r3, #32
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d105      	bne.n	8004cee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004ce2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d005      	beq.n	8004cfa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf2:	f043 0208 	orr.w	r2, r3, #8
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f000 81f2 	beq.w	80050e8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d08:	f003 0320 	and.w	r3, r3, #32
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d008      	beq.n	8004d22 <HAL_UART_IRQHandler+0x14e>
 8004d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d14:	f003 0320 	and.w	r3, r3, #32
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d002      	beq.n	8004d22 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 fb1e 	bl	800535e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	bf14      	ite	ne
 8004d30:	2301      	movne	r3, #1
 8004d32:	2300      	moveq	r3, #0
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3e:	f003 0308 	and.w	r3, r3, #8
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d103      	bne.n	8004d4e <HAL_UART_IRQHandler+0x17a>
 8004d46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d04f      	beq.n	8004dee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 fa28 	bl	80051a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d041      	beq.n	8004de6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	3314      	adds	r3, #20
 8004d68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d70:	e853 3f00 	ldrex	r3, [r3]
 8004d74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3314      	adds	r3, #20
 8004d8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d8e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d9e:	e841 2300 	strex	r3, r2, [r1]
 8004da2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004da6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1d9      	bne.n	8004d62 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d013      	beq.n	8004dde <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dba:	4a7e      	ldr	r2, [pc, #504]	; (8004fb4 <HAL_UART_IRQHandler+0x3e0>)
 8004dbc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7fd fe78 	bl	8002ab8 <HAL_DMA_Abort_IT>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d016      	beq.n	8004dfc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004dd8:	4610      	mov	r0, r2
 8004dda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ddc:	e00e      	b.n	8004dfc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f993 	bl	800510a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004de4:	e00a      	b.n	8004dfc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f98f 	bl	800510a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dec:	e006      	b.n	8004dfc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f98b 	bl	800510a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004dfa:	e175      	b.n	80050e8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dfc:	bf00      	nop
    return;
 8004dfe:	e173      	b.n	80050e8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	f040 814f 	bne.w	80050a8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e0e:	f003 0310 	and.w	r3, r3, #16
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f000 8148 	beq.w	80050a8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e1c:	f003 0310 	and.w	r3, r3, #16
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f000 8141 	beq.w	80050a8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e26:	2300      	movs	r3, #0
 8004e28:	60bb      	str	r3, [r7, #8]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	60bb      	str	r3, [r7, #8]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	60bb      	str	r3, [r7, #8]
 8004e3a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f000 80b6 	beq.w	8004fb8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f000 8145 	beq.w	80050ec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	f080 813e 	bcs.w	80050ec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e76:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	2b20      	cmp	r3, #32
 8004e80:	f000 8088 	beq.w	8004f94 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	330c      	adds	r3, #12
 8004e8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e92:	e853 3f00 	ldrex	r3, [r3]
 8004e96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ea2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	330c      	adds	r3, #12
 8004eac:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004eb0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004eb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ebc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ec0:	e841 2300 	strex	r3, r2, [r1]
 8004ec4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004ec8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1d9      	bne.n	8004e84 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	3314      	adds	r3, #20
 8004ed6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eda:	e853 3f00 	ldrex	r3, [r3]
 8004ede:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004ee0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ee2:	f023 0301 	bic.w	r3, r3, #1
 8004ee6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	3314      	adds	r3, #20
 8004ef0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ef4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004ef8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004efc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f00:	e841 2300 	strex	r3, r2, [r1]
 8004f04:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004f06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1e1      	bne.n	8004ed0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	3314      	adds	r3, #20
 8004f12:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f16:	e853 3f00 	ldrex	r3, [r3]
 8004f1a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004f1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	3314      	adds	r3, #20
 8004f2c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f30:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f32:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f34:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f36:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f38:	e841 2300 	strex	r3, r2, [r1]
 8004f3c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1e3      	bne.n	8004f0c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2220      	movs	r2, #32
 8004f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	330c      	adds	r3, #12
 8004f58:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f5c:	e853 3f00 	ldrex	r3, [r3]
 8004f60:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f64:	f023 0310 	bic.w	r3, r3, #16
 8004f68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	330c      	adds	r3, #12
 8004f72:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004f76:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f78:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f7e:	e841 2300 	strex	r3, r2, [r1]
 8004f82:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1e3      	bne.n	8004f52 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7fd fd57 	bl	8002a42 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	4619      	mov	r1, r3
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f8b6 	bl	800511c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fb0:	e09c      	b.n	80050ec <HAL_UART_IRQHandler+0x518>
 8004fb2:	bf00      	nop
 8004fb4:	08005269 	.word	0x08005269
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 808e 	beq.w	80050f0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004fd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f000 8089 	beq.w	80050f0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	330c      	adds	r3, #12
 8004fe4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe8:	e853 3f00 	ldrex	r3, [r3]
 8004fec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ff4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	330c      	adds	r3, #12
 8004ffe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005002:	647a      	str	r2, [r7, #68]	; 0x44
 8005004:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005006:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005008:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800500a:	e841 2300 	strex	r3, r2, [r1]
 800500e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1e3      	bne.n	8004fde <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	3314      	adds	r3, #20
 800501c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	e853 3f00 	ldrex	r3, [r3]
 8005024:	623b      	str	r3, [r7, #32]
   return(result);
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	f023 0301 	bic.w	r3, r3, #1
 800502c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	3314      	adds	r3, #20
 8005036:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800503a:	633a      	str	r2, [r7, #48]	; 0x30
 800503c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005042:	e841 2300 	strex	r3, r2, [r1]
 8005046:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1e3      	bne.n	8005016 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2220      	movs	r2, #32
 8005052:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	330c      	adds	r3, #12
 8005062:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	e853 3f00 	ldrex	r3, [r3]
 800506a:	60fb      	str	r3, [r7, #12]
   return(result);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f023 0310 	bic.w	r3, r3, #16
 8005072:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	330c      	adds	r3, #12
 800507c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005080:	61fa      	str	r2, [r7, #28]
 8005082:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005084:	69b9      	ldr	r1, [r7, #24]
 8005086:	69fa      	ldr	r2, [r7, #28]
 8005088:	e841 2300 	strex	r3, r2, [r1]
 800508c:	617b      	str	r3, [r7, #20]
   return(result);
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1e3      	bne.n	800505c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2202      	movs	r2, #2
 8005098:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800509a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800509e:	4619      	mov	r1, r3
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f83b 	bl	800511c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050a6:	e023      	b.n	80050f0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d009      	beq.n	80050c8 <HAL_UART_IRQHandler+0x4f4>
 80050b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d003      	beq.n	80050c8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 f8e5 	bl	8005290 <UART_Transmit_IT>
    return;
 80050c6:	e014      	b.n	80050f2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80050c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00e      	beq.n	80050f2 <HAL_UART_IRQHandler+0x51e>
 80050d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d008      	beq.n	80050f2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 f924 	bl	800532e <UART_EndTransmit_IT>
    return;
 80050e6:	e004      	b.n	80050f2 <HAL_UART_IRQHandler+0x51e>
    return;
 80050e8:	bf00      	nop
 80050ea:	e002      	b.n	80050f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80050ec:	bf00      	nop
 80050ee:	e000      	b.n	80050f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80050f0:	bf00      	nop
  }
}
 80050f2:	37e8      	adds	r7, #232	; 0xe8
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	bc80      	pop	{r7}
 8005108:	4770      	bx	lr

0800510a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800510a:	b480      	push	{r7}
 800510c:	b083      	sub	sp, #12
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005112:	bf00      	nop
 8005114:	370c      	adds	r7, #12
 8005116:	46bd      	mov	sp, r7
 8005118:	bc80      	pop	{r7}
 800511a:	4770      	bx	lr

0800511c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	460b      	mov	r3, r1
 8005126:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	bc80      	pop	{r7}
 8005130:	4770      	bx	lr

08005132 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005132:	b480      	push	{r7}
 8005134:	b085      	sub	sp, #20
 8005136:	af00      	add	r7, sp, #0
 8005138:	60f8      	str	r0, [r7, #12]
 800513a:	60b9      	str	r1, [r7, #8]
 800513c:	4613      	mov	r3, r2
 800513e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	88fa      	ldrh	r2, [r7, #6]
 800514a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	88fa      	ldrh	r2, [r7, #6]
 8005150:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2222      	movs	r2, #34	; 0x22
 800515c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d007      	beq.n	8005178 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005176:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	695a      	ldr	r2, [r3, #20]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f042 0201 	orr.w	r2, r2, #1
 8005186:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68da      	ldr	r2, [r3, #12]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0220 	orr.w	r2, r2, #32
 8005196:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	bc80      	pop	{r7}
 80051a2:	4770      	bx	lr

080051a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b095      	sub	sp, #84	; 0x54
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	330c      	adds	r3, #12
 80051b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051b6:	e853 3f00 	ldrex	r3, [r3]
 80051ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	330c      	adds	r3, #12
 80051ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051cc:	643a      	str	r2, [r7, #64]	; 0x40
 80051ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051d4:	e841 2300 	strex	r3, r2, [r1]
 80051d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1e5      	bne.n	80051ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	3314      	adds	r3, #20
 80051e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e8:	6a3b      	ldr	r3, [r7, #32]
 80051ea:	e853 3f00 	ldrex	r3, [r3]
 80051ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	f023 0301 	bic.w	r3, r3, #1
 80051f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	3314      	adds	r3, #20
 80051fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005200:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005202:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005204:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005206:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005208:	e841 2300 	strex	r3, r2, [r1]
 800520c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1e5      	bne.n	80051e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005218:	2b01      	cmp	r3, #1
 800521a:	d119      	bne.n	8005250 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	330c      	adds	r3, #12
 8005222:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	e853 3f00 	ldrex	r3, [r3]
 800522a:	60bb      	str	r3, [r7, #8]
   return(result);
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	f023 0310 	bic.w	r3, r3, #16
 8005232:	647b      	str	r3, [r7, #68]	; 0x44
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	330c      	adds	r3, #12
 800523a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800523c:	61ba      	str	r2, [r7, #24]
 800523e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005240:	6979      	ldr	r1, [r7, #20]
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	e841 2300 	strex	r3, r2, [r1]
 8005248:	613b      	str	r3, [r7, #16]
   return(result);
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1e5      	bne.n	800521c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2220      	movs	r2, #32
 8005254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800525e:	bf00      	nop
 8005260:	3754      	adds	r7, #84	; 0x54
 8005262:	46bd      	mov	sp, r7
 8005264:	bc80      	pop	{r7}
 8005266:	4770      	bx	lr

08005268 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f7ff ff41 	bl	800510a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005288:	bf00      	nop
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b21      	cmp	r3, #33	; 0x21
 80052a2:	d13e      	bne.n	8005322 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ac:	d114      	bne.n	80052d8 <UART_Transmit_IT+0x48>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d110      	bne.n	80052d8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	461a      	mov	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052ca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	1c9a      	adds	r2, r3, #2
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	621a      	str	r2, [r3, #32]
 80052d6:	e008      	b.n	80052ea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	1c59      	adds	r1, r3, #1
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	6211      	str	r1, [r2, #32]
 80052e2:	781a      	ldrb	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	3b01      	subs	r3, #1
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	4619      	mov	r1, r3
 80052f8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d10f      	bne.n	800531e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68da      	ldr	r2, [r3, #12]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800530c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68da      	ldr	r2, [r3, #12]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800531c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800531e:	2300      	movs	r3, #0
 8005320:	e000      	b.n	8005324 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005322:	2302      	movs	r3, #2
  }
}
 8005324:	4618      	mov	r0, r3
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	bc80      	pop	{r7}
 800532c:	4770      	bx	lr

0800532e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800532e:	b580      	push	{r7, lr}
 8005330:	b082      	sub	sp, #8
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68da      	ldr	r2, [r3, #12]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005344:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2220      	movs	r2, #32
 800534a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7ff fed2 	bl	80050f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b08c      	sub	sp, #48	; 0x30
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b22      	cmp	r3, #34	; 0x22
 8005370:	f040 80ae 	bne.w	80054d0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800537c:	d117      	bne.n	80053ae <UART_Receive_IT+0x50>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d113      	bne.n	80053ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005386:	2300      	movs	r3, #0
 8005388:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	b29b      	uxth	r3, r3
 8005398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800539c:	b29a      	uxth	r2, r3
 800539e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a6:	1c9a      	adds	r2, r3, #2
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	629a      	str	r2, [r3, #40]	; 0x28
 80053ac:	e026      	b.n	80053fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80053b4:	2300      	movs	r3, #0
 80053b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c0:	d007      	beq.n	80053d2 <UART_Receive_IT+0x74>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10a      	bne.n	80053e0 <UART_Receive_IT+0x82>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d106      	bne.n	80053e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	b2da      	uxtb	r2, r3
 80053da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053dc:	701a      	strb	r2, [r3, #0]
 80053de:	e008      	b.n	80053f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f6:	1c5a      	adds	r2, r3, #1
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005400:	b29b      	uxth	r3, r3
 8005402:	3b01      	subs	r3, #1
 8005404:	b29b      	uxth	r3, r3
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	4619      	mov	r1, r3
 800540a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800540c:	2b00      	cmp	r3, #0
 800540e:	d15d      	bne.n	80054cc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68da      	ldr	r2, [r3, #12]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 0220 	bic.w	r2, r2, #32
 800541e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68da      	ldr	r2, [r3, #12]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800542e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	695a      	ldr	r2, [r3, #20]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0201 	bic.w	r2, r2, #1
 800543e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2220      	movs	r2, #32
 8005444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005452:	2b01      	cmp	r3, #1
 8005454:	d135      	bne.n	80054c2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	330c      	adds	r3, #12
 8005462:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	e853 3f00 	ldrex	r3, [r3]
 800546a:	613b      	str	r3, [r7, #16]
   return(result);
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	f023 0310 	bic.w	r3, r3, #16
 8005472:	627b      	str	r3, [r7, #36]	; 0x24
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	330c      	adds	r3, #12
 800547a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800547c:	623a      	str	r2, [r7, #32]
 800547e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005480:	69f9      	ldr	r1, [r7, #28]
 8005482:	6a3a      	ldr	r2, [r7, #32]
 8005484:	e841 2300 	strex	r3, r2, [r1]
 8005488:	61bb      	str	r3, [r7, #24]
   return(result);
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1e5      	bne.n	800545c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0310 	and.w	r3, r3, #16
 800549a:	2b10      	cmp	r3, #16
 800549c:	d10a      	bne.n	80054b4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800549e:	2300      	movs	r3, #0
 80054a0:	60fb      	str	r3, [r7, #12]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	60fb      	str	r3, [r7, #12]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	60fb      	str	r3, [r7, #12]
 80054b2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80054b8:	4619      	mov	r1, r3
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7ff fe2e 	bl	800511c <HAL_UARTEx_RxEventCallback>
 80054c0:	e002      	b.n	80054c8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7fb fe84 	bl	80011d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80054c8:	2300      	movs	r3, #0
 80054ca:	e002      	b.n	80054d2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80054cc:	2300      	movs	r3, #0
 80054ce:	e000      	b.n	80054d2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80054d0:	2302      	movs	r3, #2
  }
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3730      	adds	r7, #48	; 0x30
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
	...

080054dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	689a      	ldr	r2, [r3, #8]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	431a      	orrs	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	4313      	orrs	r3, r2
 800550a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005516:	f023 030c 	bic.w	r3, r3, #12
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	6812      	ldr	r2, [r2, #0]
 800551e:	68b9      	ldr	r1, [r7, #8]
 8005520:	430b      	orrs	r3, r1
 8005522:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	699a      	ldr	r2, [r3, #24]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	430a      	orrs	r2, r1
 8005538:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a2c      	ldr	r2, [pc, #176]	; (80055f0 <UART_SetConfig+0x114>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d103      	bne.n	800554c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005544:	f7fe fe74 	bl	8004230 <HAL_RCC_GetPCLK2Freq>
 8005548:	60f8      	str	r0, [r7, #12]
 800554a:	e002      	b.n	8005552 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800554c:	f7fe fe5c 	bl	8004208 <HAL_RCC_GetPCLK1Freq>
 8005550:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	4613      	mov	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4413      	add	r3, r2
 800555a:	009a      	lsls	r2, r3, #2
 800555c:	441a      	add	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	fbb2 f3f3 	udiv	r3, r2, r3
 8005568:	4a22      	ldr	r2, [pc, #136]	; (80055f4 <UART_SetConfig+0x118>)
 800556a:	fba2 2303 	umull	r2, r3, r2, r3
 800556e:	095b      	lsrs	r3, r3, #5
 8005570:	0119      	lsls	r1, r3, #4
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	4613      	mov	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	009a      	lsls	r2, r3, #2
 800557c:	441a      	add	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	fbb2 f2f3 	udiv	r2, r2, r3
 8005588:	4b1a      	ldr	r3, [pc, #104]	; (80055f4 <UART_SetConfig+0x118>)
 800558a:	fba3 0302 	umull	r0, r3, r3, r2
 800558e:	095b      	lsrs	r3, r3, #5
 8005590:	2064      	movs	r0, #100	; 0x64
 8005592:	fb00 f303 	mul.w	r3, r0, r3
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	011b      	lsls	r3, r3, #4
 800559a:	3332      	adds	r3, #50	; 0x32
 800559c:	4a15      	ldr	r2, [pc, #84]	; (80055f4 <UART_SetConfig+0x118>)
 800559e:	fba2 2303 	umull	r2, r3, r2, r3
 80055a2:	095b      	lsrs	r3, r3, #5
 80055a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055a8:	4419      	add	r1, r3
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	4613      	mov	r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4413      	add	r3, r2
 80055b2:	009a      	lsls	r2, r3, #2
 80055b4:	441a      	add	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80055c0:	4b0c      	ldr	r3, [pc, #48]	; (80055f4 <UART_SetConfig+0x118>)
 80055c2:	fba3 0302 	umull	r0, r3, r3, r2
 80055c6:	095b      	lsrs	r3, r3, #5
 80055c8:	2064      	movs	r0, #100	; 0x64
 80055ca:	fb00 f303 	mul.w	r3, r0, r3
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	011b      	lsls	r3, r3, #4
 80055d2:	3332      	adds	r3, #50	; 0x32
 80055d4:	4a07      	ldr	r2, [pc, #28]	; (80055f4 <UART_SetConfig+0x118>)
 80055d6:	fba2 2303 	umull	r2, r3, r2, r3
 80055da:	095b      	lsrs	r3, r3, #5
 80055dc:	f003 020f 	and.w	r2, r3, #15
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	440a      	add	r2, r1
 80055e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80055e8:	bf00      	nop
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	40013800 	.word	0x40013800
 80055f4:	51eb851f 	.word	0x51eb851f

080055f8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80055fc:	4904      	ldr	r1, [pc, #16]	; (8005610 <MX_FATFS_Init+0x18>)
 80055fe:	4805      	ldr	r0, [pc, #20]	; (8005614 <MX_FATFS_Init+0x1c>)
 8005600:	f003 ff10 	bl	8009424 <FATFS_LinkDriver>
 8005604:	4603      	mov	r3, r0
 8005606:	461a      	mov	r2, r3
 8005608:	4b03      	ldr	r3, [pc, #12]	; (8005618 <MX_FATFS_Init+0x20>)
 800560a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800560c:	bf00      	nop
 800560e:	bd80      	pop	{r7, pc}
 8005610:	20002b08 	.word	0x20002b08
 8005614:	2000056c 	.word	0x2000056c
 8005618:	20002b04 	.word	0x20002b04

0800561c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800561c:	b480      	push	{r7}
 800561e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005620:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005622:	4618      	mov	r0, r3
 8005624:	46bd      	mov	sp, r7
 8005626:	bc80      	pop	{r7}
 8005628:	4770      	bx	lr

0800562a <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b082      	sub	sp, #8
 800562e:	af00      	add	r7, sp, #0
 8005630:	4603      	mov	r3, r0
 8005632:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
    return SD_disk_initialize(pdrv);
 8005634:	79fb      	ldrb	r3, [r7, #7]
 8005636:	4618      	mov	r0, r3
 8005638:	f7fb ffca 	bl	80015d0 <SD_disk_initialize>
 800563c:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800563e:	4618      	mov	r0, r3
 8005640:	3708      	adds	r7, #8
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b082      	sub	sp, #8
 800564a:	af00      	add	r7, sp, #0
 800564c:	4603      	mov	r3, r0
 800564e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
    return SD_disk_status(pdrv);
 8005650:	79fb      	ldrb	r3, [r7, #7]
 8005652:	4618      	mov	r0, r3
 8005654:	f7fc f8a2 	bl	800179c <SD_disk_status>
 8005658:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800565a:	4618      	mov	r0, r3
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b084      	sub	sp, #16
 8005666:	af00      	add	r7, sp, #0
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	603b      	str	r3, [r7, #0]
 800566e:	4603      	mov	r3, r0
 8005670:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 8005672:	7bf8      	ldrb	r0, [r7, #15]
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	68b9      	ldr	r1, [r7, #8]
 800567a:	f7fc f8a3 	bl	80017c4 <SD_disk_read>
 800567e:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005680:	4618      	mov	r0, r3
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	60b9      	str	r1, [r7, #8]
 8005690:	607a      	str	r2, [r7, #4]
 8005692:	603b      	str	r3, [r7, #0]
 8005694:	4603      	mov	r3, r0
 8005696:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 8005698:	7bf8      	ldrb	r0, [r7, #15]
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	68b9      	ldr	r1, [r7, #8]
 80056a0:	f7fc f8fa 	bl	8001898 <SD_disk_write>
 80056a4:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b082      	sub	sp, #8
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	4603      	mov	r3, r0
 80056b6:	603a      	str	r2, [r7, #0]
 80056b8:	71fb      	strb	r3, [r7, #7]
 80056ba:	460b      	mov	r3, r1
 80056bc:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 80056be:	79b9      	ldrb	r1, [r7, #6]
 80056c0:	79fb      	ldrb	r3, [r7, #7]
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7fc f96b 	bl	80019a0 <SD_disk_ioctl>
 80056ca:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3708      	adds	r7, #8
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	4603      	mov	r3, r0
 80056dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80056de:	79fb      	ldrb	r3, [r7, #7]
 80056e0:	4a08      	ldr	r2, [pc, #32]	; (8005704 <disk_status+0x30>)
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	4413      	add	r3, r2
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	79fa      	ldrb	r2, [r7, #7]
 80056ec:	4905      	ldr	r1, [pc, #20]	; (8005704 <disk_status+0x30>)
 80056ee:	440a      	add	r2, r1
 80056f0:	7a12      	ldrb	r2, [r2, #8]
 80056f2:	4610      	mov	r0, r2
 80056f4:	4798      	blx	r3
 80056f6:	4603      	mov	r3, r0
 80056f8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80056fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	20002d2c 	.word	0x20002d2c

08005708 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	4603      	mov	r3, r0
 8005710:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005712:	2300      	movs	r3, #0
 8005714:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8005716:	79fb      	ldrb	r3, [r7, #7]
 8005718:	4a0d      	ldr	r2, [pc, #52]	; (8005750 <disk_initialize+0x48>)
 800571a:	5cd3      	ldrb	r3, [r2, r3]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d111      	bne.n	8005744 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8005720:	79fb      	ldrb	r3, [r7, #7]
 8005722:	4a0b      	ldr	r2, [pc, #44]	; (8005750 <disk_initialize+0x48>)
 8005724:	2101      	movs	r1, #1
 8005726:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005728:	79fb      	ldrb	r3, [r7, #7]
 800572a:	4a09      	ldr	r2, [pc, #36]	; (8005750 <disk_initialize+0x48>)
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	4413      	add	r3, r2
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	79fa      	ldrb	r2, [r7, #7]
 8005736:	4906      	ldr	r1, [pc, #24]	; (8005750 <disk_initialize+0x48>)
 8005738:	440a      	add	r2, r1
 800573a:	7a12      	ldrb	r2, [r2, #8]
 800573c:	4610      	mov	r0, r2
 800573e:	4798      	blx	r3
 8005740:	4603      	mov	r3, r0
 8005742:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005744:	7bfb      	ldrb	r3, [r7, #15]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	20002d2c 	.word	0x20002d2c

08005754 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005754:	b590      	push	{r4, r7, lr}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
 800575a:	60b9      	str	r1, [r7, #8]
 800575c:	607a      	str	r2, [r7, #4]
 800575e:	603b      	str	r3, [r7, #0]
 8005760:	4603      	mov	r3, r0
 8005762:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005764:	7bfb      	ldrb	r3, [r7, #15]
 8005766:	4a0a      	ldr	r2, [pc, #40]	; (8005790 <disk_read+0x3c>)
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	4413      	add	r3, r2
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	689c      	ldr	r4, [r3, #8]
 8005770:	7bfb      	ldrb	r3, [r7, #15]
 8005772:	4a07      	ldr	r2, [pc, #28]	; (8005790 <disk_read+0x3c>)
 8005774:	4413      	add	r3, r2
 8005776:	7a18      	ldrb	r0, [r3, #8]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	68b9      	ldr	r1, [r7, #8]
 800577e:	47a0      	blx	r4
 8005780:	4603      	mov	r3, r0
 8005782:	75fb      	strb	r3, [r7, #23]
  return res;
 8005784:	7dfb      	ldrb	r3, [r7, #23]
}
 8005786:	4618      	mov	r0, r3
 8005788:	371c      	adds	r7, #28
 800578a:	46bd      	mov	sp, r7
 800578c:	bd90      	pop	{r4, r7, pc}
 800578e:	bf00      	nop
 8005790:	20002d2c 	.word	0x20002d2c

08005794 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005794:	b590      	push	{r4, r7, lr}
 8005796:	b087      	sub	sp, #28
 8005798:	af00      	add	r7, sp, #0
 800579a:	60b9      	str	r1, [r7, #8]
 800579c:	607a      	str	r2, [r7, #4]
 800579e:	603b      	str	r3, [r7, #0]
 80057a0:	4603      	mov	r3, r0
 80057a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80057a4:	7bfb      	ldrb	r3, [r7, #15]
 80057a6:	4a0a      	ldr	r2, [pc, #40]	; (80057d0 <disk_write+0x3c>)
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4413      	add	r3, r2
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	68dc      	ldr	r4, [r3, #12]
 80057b0:	7bfb      	ldrb	r3, [r7, #15]
 80057b2:	4a07      	ldr	r2, [pc, #28]	; (80057d0 <disk_write+0x3c>)
 80057b4:	4413      	add	r3, r2
 80057b6:	7a18      	ldrb	r0, [r3, #8]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	68b9      	ldr	r1, [r7, #8]
 80057be:	47a0      	blx	r4
 80057c0:	4603      	mov	r3, r0
 80057c2:	75fb      	strb	r3, [r7, #23]
  return res;
 80057c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	371c      	adds	r7, #28
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd90      	pop	{r4, r7, pc}
 80057ce:	bf00      	nop
 80057d0:	20002d2c 	.word	0x20002d2c

080057d4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	4603      	mov	r3, r0
 80057dc:	603a      	str	r2, [r7, #0]
 80057de:	71fb      	strb	r3, [r7, #7]
 80057e0:	460b      	mov	r3, r1
 80057e2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80057e4:	79fb      	ldrb	r3, [r7, #7]
 80057e6:	4a09      	ldr	r2, [pc, #36]	; (800580c <disk_ioctl+0x38>)
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4413      	add	r3, r2
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	79fa      	ldrb	r2, [r7, #7]
 80057f2:	4906      	ldr	r1, [pc, #24]	; (800580c <disk_ioctl+0x38>)
 80057f4:	440a      	add	r2, r1
 80057f6:	7a10      	ldrb	r0, [r2, #8]
 80057f8:	79b9      	ldrb	r1, [r7, #6]
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	4798      	blx	r3
 80057fe:	4603      	mov	r3, r0
 8005800:	73fb      	strb	r3, [r7, #15]
  return res;
 8005802:	7bfb      	ldrb	r3, [r7, #15]
}
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	20002d2c 	.word	0x20002d2c

08005810 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005810:	b480      	push	{r7}
 8005812:	b087      	sub	sp, #28
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8005824:	e007      	b.n	8005836 <mem_cpy+0x26>
		*d++ = *s++;
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	1c53      	adds	r3, r2, #1
 800582a:	613b      	str	r3, [r7, #16]
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	1c59      	adds	r1, r3, #1
 8005830:	6179      	str	r1, [r7, #20]
 8005832:	7812      	ldrb	r2, [r2, #0]
 8005834:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	1e5a      	subs	r2, r3, #1
 800583a:	607a      	str	r2, [r7, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1f2      	bne.n	8005826 <mem_cpy+0x16>
}
 8005840:	bf00      	nop
 8005842:	bf00      	nop
 8005844:	371c      	adds	r7, #28
 8005846:	46bd      	mov	sp, r7
 8005848:	bc80      	pop	{r7}
 800584a:	4770      	bx	lr

0800584c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800584c:	b480      	push	{r7}
 800584e:	b087      	sub	sp, #28
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800585c:	e005      	b.n	800586a <mem_set+0x1e>
		*d++ = (BYTE)val;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	617a      	str	r2, [r7, #20]
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	b2d2      	uxtb	r2, r2
 8005868:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	1e5a      	subs	r2, r3, #1
 800586e:	607a      	str	r2, [r7, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1f4      	bne.n	800585e <mem_set+0x12>
}
 8005874:	bf00      	nop
 8005876:	bf00      	nop
 8005878:	371c      	adds	r7, #28
 800587a:	46bd      	mov	sp, r7
 800587c:	bc80      	pop	{r7}
 800587e:	4770      	bx	lr

08005880 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8005880:	b480      	push	{r7}
 8005882:	b089      	sub	sp, #36	; 0x24
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	61fb      	str	r3, [r7, #28]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005894:	2300      	movs	r3, #0
 8005896:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8005898:	bf00      	nop
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	1e5a      	subs	r2, r3, #1
 800589e:	607a      	str	r2, [r7, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00d      	beq.n	80058c0 <mem_cmp+0x40>
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	1c5a      	adds	r2, r3, #1
 80058a8:	61fa      	str	r2, [r7, #28]
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	4619      	mov	r1, r3
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	1c5a      	adds	r2, r3, #1
 80058b2:	61ba      	str	r2, [r7, #24]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	1acb      	subs	r3, r1, r3
 80058b8:	617b      	str	r3, [r7, #20]
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0ec      	beq.n	800589a <mem_cmp+0x1a>
	return r;
 80058c0:	697b      	ldr	r3, [r7, #20]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3724      	adds	r7, #36	; 0x24
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bc80      	pop	{r7}
 80058ca:	4770      	bx	lr

080058cc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80058d6:	e002      	b.n	80058de <chk_chr+0x12>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	3301      	adds	r3, #1
 80058dc:	607b      	str	r3, [r7, #4]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d005      	beq.n	80058f2 <chk_chr+0x26>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	461a      	mov	r2, r3
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d1f2      	bne.n	80058d8 <chk_chr+0xc>
	return *str;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	781b      	ldrb	r3, [r3, #0]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bc80      	pop	{r7}
 80058fe:	4770      	bx	lr

08005900 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800590a:	2300      	movs	r3, #0
 800590c:	60bb      	str	r3, [r7, #8]
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	60fb      	str	r3, [r7, #12]
 8005912:	e03b      	b.n	800598c <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 8005914:	4931      	ldr	r1, [pc, #196]	; (80059dc <chk_lock+0xdc>)
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	4613      	mov	r3, r2
 800591a:	005b      	lsls	r3, r3, #1
 800591c:	4413      	add	r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	440b      	add	r3, r1
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d02c      	beq.n	8005982 <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005928:	492c      	ldr	r1, [pc, #176]	; (80059dc <chk_lock+0xdc>)
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	4613      	mov	r3, r2
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	4413      	add	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	440b      	add	r3, r1
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	429a      	cmp	r2, r3
 8005942:	d120      	bne.n	8005986 <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8005944:	4925      	ldr	r1, [pc, #148]	; (80059dc <chk_lock+0xdc>)
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	4613      	mov	r3, r2
 800594a:	005b      	lsls	r3, r3, #1
 800594c:	4413      	add	r3, r2
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	440b      	add	r3, r1
 8005952:	3304      	adds	r3, #4
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800595c:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800595e:	429a      	cmp	r2, r3
 8005960:	d111      	bne.n	8005986 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8005962:	491e      	ldr	r1, [pc, #120]	; (80059dc <chk_lock+0xdc>)
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4613      	mov	r3, r2
 8005968:	005b      	lsls	r3, r3, #1
 800596a:	4413      	add	r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	440b      	add	r3, r1
 8005970:	3308      	adds	r3, #8
 8005972:	881a      	ldrh	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800597a:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 800597c:	429a      	cmp	r2, r3
 800597e:	d102      	bne.n	8005986 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8005980:	e007      	b.n	8005992 <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 8005982:	2301      	movs	r3, #1
 8005984:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	3301      	adds	r3, #1
 800598a:	60fb      	str	r3, [r7, #12]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d9c0      	bls.n	8005914 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2b02      	cmp	r3, #2
 8005996:	d109      	bne.n	80059ac <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d102      	bne.n	80059a4 <chk_lock+0xa4>
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d101      	bne.n	80059a8 <chk_lock+0xa8>
 80059a4:	2300      	movs	r3, #0
 80059a6:	e013      	b.n	80059d0 <chk_lock+0xd0>
 80059a8:	2312      	movs	r3, #18
 80059aa:	e011      	b.n	80059d0 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10b      	bne.n	80059ca <chk_lock+0xca>
 80059b2:	490a      	ldr	r1, [pc, #40]	; (80059dc <chk_lock+0xdc>)
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	4613      	mov	r3, r2
 80059b8:	005b      	lsls	r3, r3, #1
 80059ba:	4413      	add	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	440b      	add	r3, r1
 80059c0:	330a      	adds	r3, #10
 80059c2:	881b      	ldrh	r3, [r3, #0]
 80059c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059c8:	d101      	bne.n	80059ce <chk_lock+0xce>
 80059ca:	2310      	movs	r3, #16
 80059cc:	e000      	b.n	80059d0 <chk_lock+0xd0>
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3714      	adds	r7, #20
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bc80      	pop	{r7}
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	20002b14 	.word	0x20002b14

080059e0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80059e6:	2300      	movs	r3, #0
 80059e8:	607b      	str	r3, [r7, #4]
 80059ea:	e002      	b.n	80059f2 <enq_lock+0x12>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	3301      	adds	r3, #1
 80059f0:	607b      	str	r3, [r7, #4]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d809      	bhi.n	8005a0c <enq_lock+0x2c>
 80059f8:	490a      	ldr	r1, [pc, #40]	; (8005a24 <enq_lock+0x44>)
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	4613      	mov	r3, r2
 80059fe:	005b      	lsls	r3, r3, #1
 8005a00:	4413      	add	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	440b      	add	r3, r1
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1ef      	bne.n	80059ec <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	bf14      	ite	ne
 8005a12:	2301      	movne	r3, #1
 8005a14:	2300      	moveq	r3, #0
 8005a16:	b2db      	uxtb	r3, r3
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bc80      	pop	{r7}
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	20002b14 	.word	0x20002b14

08005a28 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005a32:	2300      	movs	r3, #0
 8005a34:	60fb      	str	r3, [r7, #12]
 8005a36:	e02e      	b.n	8005a96 <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8005a38:	4958      	ldr	r1, [pc, #352]	; (8005b9c <inc_lock+0x174>)
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	005b      	lsls	r3, r3, #1
 8005a40:	4413      	add	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	440b      	add	r3, r1
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d11d      	bne.n	8005a90 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8005a54:	4951      	ldr	r1, [pc, #324]	; (8005b9c <inc_lock+0x174>)
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	005b      	lsls	r3, r3, #1
 8005a5c:	4413      	add	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	440b      	add	r3, r1
 8005a62:	3304      	adds	r3, #4
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a6c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d10e      	bne.n	8005a90 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8005a72:	494a      	ldr	r1, [pc, #296]	; (8005b9c <inc_lock+0x174>)
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4613      	mov	r3, r2
 8005a78:	005b      	lsls	r3, r3, #1
 8005a7a:	4413      	add	r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	440b      	add	r3, r1
 8005a80:	3308      	adds	r3, #8
 8005a82:	881a      	ldrh	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a8a:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d006      	beq.n	8005a9e <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	3301      	adds	r3, #1
 8005a94:	60fb      	str	r3, [r7, #12]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d9cd      	bls.n	8005a38 <inc_lock+0x10>
 8005a9c:	e000      	b.n	8005aa0 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8005a9e:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d148      	bne.n	8005b38 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	60fb      	str	r3, [r7, #12]
 8005aaa:	e002      	b.n	8005ab2 <inc_lock+0x8a>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	60fb      	str	r3, [r7, #12]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d809      	bhi.n	8005acc <inc_lock+0xa4>
 8005ab8:	4938      	ldr	r1, [pc, #224]	; (8005b9c <inc_lock+0x174>)
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	4613      	mov	r3, r2
 8005abe:	005b      	lsls	r3, r3, #1
 8005ac0:	4413      	add	r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	440b      	add	r3, r1
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1ef      	bne.n	8005aac <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d101      	bne.n	8005ad6 <inc_lock+0xae>
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	e05d      	b.n	8005b92 <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005adc:	6819      	ldr	r1, [r3, #0]
 8005ade:	482f      	ldr	r0, [pc, #188]	; (8005b9c <inc_lock+0x174>)
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	005b      	lsls	r3, r3, #1
 8005ae6:	4413      	add	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	4403      	add	r3, r0
 8005aec:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005af4:	6899      	ldr	r1, [r3, #8]
 8005af6:	4829      	ldr	r0, [pc, #164]	; (8005b9c <inc_lock+0x174>)
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	4613      	mov	r3, r2
 8005afc:	005b      	lsls	r3, r3, #1
 8005afe:	4413      	add	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4403      	add	r3, r0
 8005b04:	3304      	adds	r3, #4
 8005b06:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b0e:	88d8      	ldrh	r0, [r3, #6]
 8005b10:	4922      	ldr	r1, [pc, #136]	; (8005b9c <inc_lock+0x174>)
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	4613      	mov	r3, r2
 8005b16:	005b      	lsls	r3, r3, #1
 8005b18:	4413      	add	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	440b      	add	r3, r1
 8005b1e:	3308      	adds	r3, #8
 8005b20:	4602      	mov	r2, r0
 8005b22:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8005b24:	491d      	ldr	r1, [pc, #116]	; (8005b9c <inc_lock+0x174>)
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	4613      	mov	r3, r2
 8005b2a:	005b      	lsls	r3, r3, #1
 8005b2c:	4413      	add	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	440b      	add	r3, r1
 8005b32:	330a      	adds	r3, #10
 8005b34:	2200      	movs	r2, #0
 8005b36:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00c      	beq.n	8005b58 <inc_lock+0x130>
 8005b3e:	4917      	ldr	r1, [pc, #92]	; (8005b9c <inc_lock+0x174>)
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	4613      	mov	r3, r2
 8005b44:	005b      	lsls	r3, r3, #1
 8005b46:	4413      	add	r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	440b      	add	r3, r1
 8005b4c:	330a      	adds	r3, #10
 8005b4e:	881b      	ldrh	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <inc_lock+0x130>
 8005b54:	2300      	movs	r3, #0
 8005b56:	e01c      	b.n	8005b92 <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10b      	bne.n	8005b76 <inc_lock+0x14e>
 8005b5e:	490f      	ldr	r1, [pc, #60]	; (8005b9c <inc_lock+0x174>)
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	4613      	mov	r3, r2
 8005b64:	005b      	lsls	r3, r3, #1
 8005b66:	4413      	add	r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	440b      	add	r3, r1
 8005b6c:	330a      	adds	r3, #10
 8005b6e:	881b      	ldrh	r3, [r3, #0]
 8005b70:	3301      	adds	r3, #1
 8005b72:	b299      	uxth	r1, r3
 8005b74:	e001      	b.n	8005b7a <inc_lock+0x152>
 8005b76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b7a:	4808      	ldr	r0, [pc, #32]	; (8005b9c <inc_lock+0x174>)
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	4413      	add	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4403      	add	r3, r0
 8005b88:	330a      	adds	r3, #10
 8005b8a:	460a      	mov	r2, r1
 8005b8c:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	3301      	adds	r3, #1
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3714      	adds	r7, #20
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bc80      	pop	{r7}
 8005b9a:	4770      	bx	lr
 8005b9c:	20002b14 	.word	0x20002b14

08005ba0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	3b01      	subs	r3, #1
 8005bac:	607b      	str	r3, [r7, #4]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d82e      	bhi.n	8005c12 <dec_lock+0x72>
		n = Files[i].ctr;
 8005bb4:	491b      	ldr	r1, [pc, #108]	; (8005c24 <dec_lock+0x84>)
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	005b      	lsls	r3, r3, #1
 8005bbc:	4413      	add	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	440b      	add	r3, r1
 8005bc2:	330a      	adds	r3, #10
 8005bc4:	881b      	ldrh	r3, [r3, #0]
 8005bc6:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005bc8:	89fb      	ldrh	r3, [r7, #14]
 8005bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bce:	d101      	bne.n	8005bd4 <dec_lock+0x34>
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8005bd4:	89fb      	ldrh	r3, [r7, #14]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d002      	beq.n	8005be0 <dec_lock+0x40>
 8005bda:	89fb      	ldrh	r3, [r7, #14]
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005be0:	4910      	ldr	r1, [pc, #64]	; (8005c24 <dec_lock+0x84>)
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	4613      	mov	r3, r2
 8005be6:	005b      	lsls	r3, r3, #1
 8005be8:	4413      	add	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	440b      	add	r3, r1
 8005bee:	330a      	adds	r3, #10
 8005bf0:	89fa      	ldrh	r2, [r7, #14]
 8005bf2:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005bf4:	89fb      	ldrh	r3, [r7, #14]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d108      	bne.n	8005c0c <dec_lock+0x6c>
 8005bfa:	490a      	ldr	r1, [pc, #40]	; (8005c24 <dec_lock+0x84>)
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	005b      	lsls	r3, r3, #1
 8005c02:	4413      	add	r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	440b      	add	r3, r1
 8005c08:	2200      	movs	r2, #0
 8005c0a:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	737b      	strb	r3, [r7, #13]
 8005c10:	e001      	b.n	8005c16 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005c12:	2302      	movs	r3, #2
 8005c14:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005c16:	7b7b      	ldrb	r3, [r7, #13]
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bc80      	pop	{r7}
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	20002b14 	.word	0x20002b14

08005c28 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005c30:	2300      	movs	r3, #0
 8005c32:	60fb      	str	r3, [r7, #12]
 8005c34:	e016      	b.n	8005c64 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005c36:	4910      	ldr	r1, [pc, #64]	; (8005c78 <clear_lock+0x50>)
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	005b      	lsls	r3, r3, #1
 8005c3e:	4413      	add	r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	440b      	add	r3, r1
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d108      	bne.n	8005c5e <clear_lock+0x36>
 8005c4c:	490a      	ldr	r1, [pc, #40]	; (8005c78 <clear_lock+0x50>)
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	4613      	mov	r3, r2
 8005c52:	005b      	lsls	r3, r3, #1
 8005c54:	4413      	add	r3, r2
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	440b      	add	r3, r1
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	3301      	adds	r3, #1
 8005c62:	60fb      	str	r3, [r7, #12]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d9e5      	bls.n	8005c36 <clear_lock+0xe>
	}
}
 8005c6a:	bf00      	nop
 8005c6c:	bf00      	nop
 8005c6e:	3714      	adds	r7, #20
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bc80      	pop	{r7}
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	20002b14 	.word	0x20002b14

08005c7c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005c84:	2300      	movs	r3, #0
 8005c86:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c8e:	791b      	ldrb	r3, [r3, #4]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d040      	beq.n	8005d16 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ca4:	7858      	ldrb	r0, [r3, #1]
 8005ca6:	6879      	ldr	r1, [r7, #4]
 8005ca8:	2301      	movs	r3, #1
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	f7ff fd72 	bl	8005794 <disk_write>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d002      	beq.n	8005cbc <sync_window+0x40>
			res = FR_DISK_ERR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	73fb      	strb	r3, [r7, #15]
 8005cba:	e02c      	b.n	8005d16 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	1ad2      	subs	r2, r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d21b      	bcs.n	8005d16 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ce4:	78db      	ldrb	r3, [r3, #3]
 8005ce6:	613b      	str	r3, [r7, #16]
 8005ce8:	e012      	b.n	8005d10 <sync_window+0x94>
					wsect += fs->fsize;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cfe:	7858      	ldrb	r0, [r3, #1]
 8005d00:	6879      	ldr	r1, [r7, #4]
 8005d02:	2301      	movs	r3, #1
 8005d04:	697a      	ldr	r2, [r7, #20]
 8005d06:	f7ff fd45 	bl	8005794 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	613b      	str	r3, [r7, #16]
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d8e9      	bhi.n	8005cea <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8005d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3718      	adds	r7, #24
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d36:	683a      	ldr	r2, [r7, #0]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d01e      	beq.n	8005d7a <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f7ff ff9d 	bl	8005c7c <sync_window>
 8005d42:	4603      	mov	r3, r0
 8005d44:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005d46:	7bfb      	ldrb	r3, [r7, #15]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d116      	bne.n	8005d7a <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d52:	7858      	ldrb	r0, [r3, #1]
 8005d54:	6879      	ldr	r1, [r7, #4]
 8005d56:	2301      	movs	r3, #1
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	f7ff fcfb 	bl	8005754 <disk_read>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d004      	beq.n	8005d6e <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005d64:	f04f 33ff 	mov.w	r3, #4294967295
 8005d68:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d74:	461a      	mov	r2, r3
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 8005d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f7ff ff75 	bl	8005c7c <sync_window>
 8005d92:	4603      	mov	r3, r0
 8005d94:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005d96:	7bfb      	ldrb	r3, [r7, #15]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f040 80ad 	bne.w	8005ef8 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	2b03      	cmp	r3, #3
 8005da8:	f040 8098 	bne.w	8005edc <sync_fs+0x158>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005db2:	795b      	ldrb	r3, [r3, #5]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	f040 8091 	bne.w	8005edc <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dc2:	895b      	ldrh	r3, [r3, #10]
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	2100      	movs	r1, #0
 8005dc8:	f7ff fd40 	bl	800584c <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2255      	movs	r2, #85	; 0x55
 8005dd0:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	22aa      	movs	r2, #170	; 0xaa
 8005dd8:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2252      	movs	r2, #82	; 0x52
 8005de0:	701a      	strb	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2252      	movs	r2, #82	; 0x52
 8005de6:	705a      	strb	r2, [r3, #1]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2261      	movs	r2, #97	; 0x61
 8005dec:	709a      	strb	r2, [r3, #2]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2241      	movs	r2, #65	; 0x41
 8005df2:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2272      	movs	r2, #114	; 0x72
 8005df8:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2272      	movs	r2, #114	; 0x72
 8005e00:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2241      	movs	r2, #65	; 0x41
 8005e08:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2261      	movs	r2, #97	; 0x61
 8005e10:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	b2da      	uxtb	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	0a1b      	lsrs	r3, r3, #8
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	b2da      	uxtb	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	0c1b      	lsrs	r3, r3, #16
 8005e44:	b2da      	uxtb	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	0e1b      	lsrs	r3, r3, #24
 8005e56:	b2da      	uxtb	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	0a1b      	lsrs	r3, r3, #8
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	b2da      	uxtb	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	0c1b      	lsrs	r3, r3, #16
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	0e1b      	lsrs	r3, r3, #24
 8005ea0:	b2da      	uxtb	r2, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eae:	69db      	ldr	r3, [r3, #28]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005eb8:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ec0:	7858      	ldrb	r0, [r3, #1]
 8005ec2:	6879      	ldr	r1, [r7, #4]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ecc:	2301      	movs	r3, #1
 8005ece:	f7ff fc61 	bl	8005794 <disk_write>
			fs->fsi_flag = 0;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ed8:	2200      	movs	r2, #0
 8005eda:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ee2:	785b      	ldrb	r3, [r3, #1]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7ff fc73 	bl	80057d4 <disk_ioctl>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <sync_fs+0x174>
			res = FR_DISK_ERR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b083      	sub	sp, #12
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
 8005f0a:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	3b02      	subs	r3, #2
 8005f10:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	3b02      	subs	r3, #2
 8005f1c:	683a      	ldr	r2, [r7, #0]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d301      	bcc.n	8005f26 <clust2sect+0x24>
 8005f22:	2300      	movs	r3, #0
 8005f24:	e00c      	b.n	8005f40 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f2c:	789b      	ldrb	r3, [r3, #2]
 8005f2e:	461a      	mov	r2, r3
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	fb03 f202 	mul.w	r2, r3, r2
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3e:	4413      	add	r3, r2
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bc80      	pop	{r7}
 8005f48:	4770      	bx	lr

08005f4a <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b086      	sub	sp, #24
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
 8005f52:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d906      	bls.n	8005f68 <get_fat+0x1e>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d302      	bcc.n	8005f6e <get_fat+0x24>
		val = 1;	/* Internal error */
 8005f68:	2301      	movs	r3, #1
 8005f6a:	617b      	str	r3, [r7, #20]
 8005f6c:	e0e4      	b.n	8006138 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f72:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	2b03      	cmp	r3, #3
 8005f7e:	f000 8098 	beq.w	80060b2 <get_fat+0x168>
 8005f82:	2b03      	cmp	r3, #3
 8005f84:	f300 80ce 	bgt.w	8006124 <get_fat+0x1da>
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d002      	beq.n	8005f92 <get_fat+0x48>
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d05f      	beq.n	8006050 <get_fat+0x106>
 8005f90:	e0c8      	b.n	8006124 <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	60fb      	str	r3, [r7, #12]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	085b      	lsrs	r3, r3, #1
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fa6:	6a1a      	ldr	r2, [r3, #32]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fae:	895b      	ldrh	r3, [r3, #10]
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	fbb3 f3f1 	udiv	r3, r3, r1
 8005fb8:	4413      	add	r3, r2
 8005fba:	4619      	mov	r1, r3
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7ff feaf 	bl	8005d20 <move_window>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f040 80b0 	bne.w	800612a <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	1c5a      	adds	r2, r3, #1
 8005fce:	60fa      	str	r2, [r7, #12]
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005fd6:	8952      	ldrh	r2, [r2, #10]
 8005fd8:	fbb3 f1f2 	udiv	r1, r3, r2
 8005fdc:	fb01 f202 	mul.w	r2, r1, r2
 8005fe0:	1a9b      	subs	r3, r3, r2
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	5cd3      	ldrb	r3, [r2, r3]
 8005fe6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fee:	6a1a      	ldr	r2, [r3, #32]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ff6:	895b      	ldrh	r3, [r3, #10]
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	fbb3 f3f1 	udiv	r3, r3, r1
 8006000:	4413      	add	r3, r2
 8006002:	4619      	mov	r1, r3
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f7ff fe8b 	bl	8005d20 <move_window>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	f040 808e 	bne.w	800612e <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006018:	895b      	ldrh	r3, [r3, #10]
 800601a:	461a      	mov	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006022:	fb01 f202 	mul.w	r2, r1, r2
 8006026:	1a9b      	subs	r3, r3, r2
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	5cd3      	ldrb	r3, [r2, r3]
 800602c:	021b      	lsls	r3, r3, #8
 800602e:	461a      	mov	r2, r3
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	4313      	orrs	r3, r2
 8006034:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	f003 0301 	and.w	r3, r3, #1
 800603c:	2b00      	cmp	r3, #0
 800603e:	d002      	beq.n	8006046 <get_fat+0xfc>
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	091b      	lsrs	r3, r3, #4
 8006044:	e002      	b.n	800604c <get_fat+0x102>
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800604c:	617b      	str	r3, [r7, #20]
			break;
 800604e:	e073      	b.n	8006138 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006056:	6a1a      	ldr	r2, [r3, #32]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800605e:	895b      	ldrh	r3, [r3, #10]
 8006060:	085b      	lsrs	r3, r3, #1
 8006062:	b29b      	uxth	r3, r3
 8006064:	4619      	mov	r1, r3
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	fbb3 f3f1 	udiv	r3, r3, r1
 800606c:	4413      	add	r3, r2
 800606e:	4619      	mov	r1, r3
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f7ff fe55 	bl	8005d20 <move_window>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d15a      	bne.n	8006132 <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	005b      	lsls	r3, r3, #1
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006086:	8952      	ldrh	r2, [r2, #10]
 8006088:	fbb3 f1f2 	udiv	r1, r3, r2
 800608c:	fb01 f202 	mul.w	r2, r1, r2
 8006090:	1a9b      	subs	r3, r3, r2
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	4413      	add	r3, r2
 8006096:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	3301      	adds	r3, #1
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	021b      	lsls	r3, r3, #8
 80060a0:	b21a      	sxth	r2, r3
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	b21b      	sxth	r3, r3
 80060a8:	4313      	orrs	r3, r2
 80060aa:	b21b      	sxth	r3, r3
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	617b      	str	r3, [r7, #20]
			break;
 80060b0:	e042      	b.n	8006138 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060b8:	6a1a      	ldr	r2, [r3, #32]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060c0:	895b      	ldrh	r3, [r3, #10]
 80060c2:	089b      	lsrs	r3, r3, #2
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	4619      	mov	r1, r3
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80060ce:	4413      	add	r3, r2
 80060d0:	4619      	mov	r1, r3
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7ff fe24 	bl	8005d20 <move_window>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d12b      	bne.n	8006136 <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80060e8:	8952      	ldrh	r2, [r2, #10]
 80060ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80060ee:	fb01 f202 	mul.w	r2, r1, r2
 80060f2:	1a9b      	subs	r3, r3, r2
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	4413      	add	r3, r2
 80060f8:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	3303      	adds	r3, #3
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	061a      	lsls	r2, r3, #24
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	3302      	adds	r3, #2
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	041b      	lsls	r3, r3, #16
 800610a:	4313      	orrs	r3, r2
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	3201      	adds	r2, #1
 8006110:	7812      	ldrb	r2, [r2, #0]
 8006112:	0212      	lsls	r2, r2, #8
 8006114:	4313      	orrs	r3, r2
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	7812      	ldrb	r2, [r2, #0]
 800611a:	4313      	orrs	r3, r2
 800611c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006120:	617b      	str	r3, [r7, #20]
			break;
 8006122:	e009      	b.n	8006138 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 8006124:	2301      	movs	r3, #1
 8006126:	617b      	str	r3, [r7, #20]
 8006128:	e006      	b.n	8006138 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800612a:	bf00      	nop
 800612c:	e004      	b.n	8006138 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800612e:	bf00      	nop
 8006130:	e002      	b.n	8006138 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006132:	bf00      	nop
 8006134:	e000      	b.n	8006138 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006136:	bf00      	nop
		}
	}

	return val;
 8006138:	697b      	ldr	r3, [r7, #20]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3718      	adds	r7, #24
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b088      	sub	sp, #32
 8006146:	af00      	add	r7, sp, #0
 8006148:	60f8      	str	r0, [r7, #12]
 800614a:	60b9      	str	r1, [r7, #8]
 800614c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d906      	bls.n	8006162 <put_fat+0x20>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	429a      	cmp	r2, r3
 8006160:	d302      	bcc.n	8006168 <put_fat+0x26>
		res = FR_INT_ERR;
 8006162:	2302      	movs	r3, #2
 8006164:	77fb      	strb	r3, [r7, #31]
 8006166:	e13a      	b.n	80063de <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	2b03      	cmp	r3, #3
 8006172:	f000 80d0 	beq.w	8006316 <put_fat+0x1d4>
 8006176:	2b03      	cmp	r3, #3
 8006178:	f300 8127 	bgt.w	80063ca <put_fat+0x288>
 800617c:	2b01      	cmp	r3, #1
 800617e:	d003      	beq.n	8006188 <put_fat+0x46>
 8006180:	2b02      	cmp	r3, #2
 8006182:	f000 808f 	beq.w	80062a4 <put_fat+0x162>
 8006186:	e120      	b.n	80063ca <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	617b      	str	r3, [r7, #20]
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	085b      	lsrs	r3, r3, #1
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	4413      	add	r3, r2
 8006194:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800619c:	6a1a      	ldr	r2, [r3, #32]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061a4:	895b      	ldrh	r3, [r3, #10]
 80061a6:	4619      	mov	r1, r3
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80061ae:	4413      	add	r3, r2
 80061b0:	4619      	mov	r1, r3
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f7ff fdb4 	bl	8005d20 <move_window>
 80061b8:	4603      	mov	r3, r0
 80061ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80061bc:	7ffb      	ldrb	r3, [r7, #31]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f040 8106 	bne.w	80063d0 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	1c5a      	adds	r2, r3, #1
 80061c8:	617a      	str	r2, [r7, #20]
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80061d0:	8952      	ldrh	r2, [r2, #10]
 80061d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80061d6:	fb01 f202 	mul.w	r2, r1, r2
 80061da:	1a9b      	subs	r3, r3, r2
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	4413      	add	r3, r2
 80061e0:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00d      	beq.n	8006208 <put_fat+0xc6>
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	b25b      	sxtb	r3, r3
 80061f2:	f003 030f 	and.w	r3, r3, #15
 80061f6:	b25a      	sxtb	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	011b      	lsls	r3, r3, #4
 80061fe:	b25b      	sxtb	r3, r3
 8006200:	4313      	orrs	r3, r2
 8006202:	b25b      	sxtb	r3, r3
 8006204:	b2db      	uxtb	r3, r3
 8006206:	e001      	b.n	800620c <put_fat+0xca>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	b2db      	uxtb	r3, r3
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006216:	2201      	movs	r2, #1
 8006218:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006220:	6a1a      	ldr	r2, [r3, #32]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006228:	895b      	ldrh	r3, [r3, #10]
 800622a:	4619      	mov	r1, r3
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006232:	4413      	add	r3, r2
 8006234:	4619      	mov	r1, r3
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f7ff fd72 	bl	8005d20 <move_window>
 800623c:	4603      	mov	r3, r0
 800623e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006240:	7ffb      	ldrb	r3, [r7, #31]
 8006242:	2b00      	cmp	r3, #0
 8006244:	f040 80c6 	bne.w	80063d4 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800624e:	895b      	ldrh	r3, [r3, #10]
 8006250:	461a      	mov	r2, r3
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	fbb3 f1f2 	udiv	r1, r3, r2
 8006258:	fb01 f202 	mul.w	r2, r1, r2
 800625c:	1a9b      	subs	r3, r3, r2
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	4413      	add	r3, r2
 8006262:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	f003 0301 	and.w	r3, r3, #1
 800626a:	2b00      	cmp	r3, #0
 800626c:	d003      	beq.n	8006276 <put_fat+0x134>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	091b      	lsrs	r3, r3, #4
 8006272:	b2db      	uxtb	r3, r3
 8006274:	e00e      	b.n	8006294 <put_fat+0x152>
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	b25b      	sxtb	r3, r3
 800627c:	f023 030f 	bic.w	r3, r3, #15
 8006280:	b25a      	sxtb	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	0a1b      	lsrs	r3, r3, #8
 8006286:	b25b      	sxtb	r3, r3
 8006288:	f003 030f 	and.w	r3, r3, #15
 800628c:	b25b      	sxtb	r3, r3
 800628e:	4313      	orrs	r3, r2
 8006290:	b25b      	sxtb	r3, r3
 8006292:	b2db      	uxtb	r3, r3
 8006294:	69ba      	ldr	r2, [r7, #24]
 8006296:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800629e:	2201      	movs	r2, #1
 80062a0:	711a      	strb	r2, [r3, #4]
			break;
 80062a2:	e09c      	b.n	80063de <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062aa:	6a1a      	ldr	r2, [r3, #32]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062b2:	895b      	ldrh	r3, [r3, #10]
 80062b4:	085b      	lsrs	r3, r3, #1
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	4619      	mov	r1, r3
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80062c0:	4413      	add	r3, r2
 80062c2:	4619      	mov	r1, r3
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f7ff fd2b 	bl	8005d20 <move_window>
 80062ca:	4603      	mov	r3, r0
 80062cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80062ce:	7ffb      	ldrb	r3, [r7, #31]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f040 8081 	bne.w	80063d8 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	005b      	lsls	r3, r3, #1
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80062e0:	8952      	ldrh	r2, [r2, #10]
 80062e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80062e6:	fb01 f202 	mul.w	r2, r1, r2
 80062ea:	1a9b      	subs	r3, r3, r2
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	4413      	add	r3, r2
 80062f0:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	b2da      	uxtb	r2, r3
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	701a      	strb	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	0a1b      	lsrs	r3, r3, #8
 8006300:	b29a      	uxth	r2, r3
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	3301      	adds	r3, #1
 8006306:	b2d2      	uxtb	r2, r2
 8006308:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006310:	2201      	movs	r2, #1
 8006312:	711a      	strb	r2, [r3, #4]
			break;
 8006314:	e063      	b.n	80063de <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800631c:	6a1a      	ldr	r2, [r3, #32]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006324:	895b      	ldrh	r3, [r3, #10]
 8006326:	089b      	lsrs	r3, r3, #2
 8006328:	b29b      	uxth	r3, r3
 800632a:	4619      	mov	r1, r3
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006332:	4413      	add	r3, r2
 8006334:	4619      	mov	r1, r3
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f7ff fcf2 	bl	8005d20 <move_window>
 800633c:	4603      	mov	r3, r0
 800633e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006340:	7ffb      	ldrb	r3, [r7, #31]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d14a      	bne.n	80063dc <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006350:	8952      	ldrh	r2, [r2, #10]
 8006352:	fbb3 f1f2 	udiv	r1, r3, r2
 8006356:	fb01 f202 	mul.w	r2, r1, r2
 800635a:	1a9b      	subs	r3, r3, r2
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	4413      	add	r3, r2
 8006360:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	3303      	adds	r3, #3
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	061a      	lsls	r2, r3, #24
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	3302      	adds	r3, #2
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	041b      	lsls	r3, r3, #16
 8006372:	4313      	orrs	r3, r2
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	3201      	adds	r2, #1
 8006378:	7812      	ldrb	r2, [r2, #0]
 800637a:	0212      	lsls	r2, r2, #8
 800637c:	4313      	orrs	r3, r2
 800637e:	69ba      	ldr	r2, [r7, #24]
 8006380:	7812      	ldrb	r2, [r2, #0]
 8006382:	4313      	orrs	r3, r2
 8006384:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	4313      	orrs	r3, r2
 800638c:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	b2da      	uxtb	r2, r3
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	701a      	strb	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	b29b      	uxth	r3, r3
 800639a:	0a1b      	lsrs	r3, r3, #8
 800639c:	b29a      	uxth	r2, r3
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	3301      	adds	r3, #1
 80063a2:	b2d2      	uxtb	r2, r2
 80063a4:	701a      	strb	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	0c1a      	lsrs	r2, r3, #16
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	3302      	adds	r3, #2
 80063ae:	b2d2      	uxtb	r2, r2
 80063b0:	701a      	strb	r2, [r3, #0]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	0e1a      	lsrs	r2, r3, #24
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	3303      	adds	r3, #3
 80063ba:	b2d2      	uxtb	r2, r2
 80063bc:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063c4:	2201      	movs	r2, #1
 80063c6:	711a      	strb	r2, [r3, #4]
			break;
 80063c8:	e009      	b.n	80063de <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 80063ca:	2302      	movs	r3, #2
 80063cc:	77fb      	strb	r3, [r7, #31]
 80063ce:	e006      	b.n	80063de <put_fat+0x29c>
			if (res != FR_OK) break;
 80063d0:	bf00      	nop
 80063d2:	e004      	b.n	80063de <put_fat+0x29c>
			if (res != FR_OK) break;
 80063d4:	bf00      	nop
 80063d6:	e002      	b.n	80063de <put_fat+0x29c>
			if (res != FR_OK) break;
 80063d8:	bf00      	nop
 80063da:	e000      	b.n	80063de <put_fat+0x29c>
			if (res != FR_OK) break;
 80063dc:	bf00      	nop
		}
	}

	return res;
 80063de:	7ffb      	ldrb	r3, [r7, #31]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3720      	adds	r7, #32
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d906      	bls.n	8006406 <remove_chain+0x1e>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063fe:	695b      	ldr	r3, [r3, #20]
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	429a      	cmp	r2, r3
 8006404:	d302      	bcc.n	800640c <remove_chain+0x24>
		res = FR_INT_ERR;
 8006406:	2302      	movs	r3, #2
 8006408:	73fb      	strb	r3, [r7, #15]
 800640a:	e049      	b.n	80064a0 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 800640c:	2300      	movs	r3, #0
 800640e:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006410:	e03b      	b.n	800648a <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8006412:	6839      	ldr	r1, [r7, #0]
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f7ff fd98 	bl	8005f4a <get_fat>
 800641a:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d03b      	beq.n	800649a <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d102      	bne.n	800642e <remove_chain+0x46>
 8006428:	2302      	movs	r3, #2
 800642a:	73fb      	strb	r3, [r7, #15]
 800642c:	e038      	b.n	80064a0 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006434:	d102      	bne.n	800643c <remove_chain+0x54>
 8006436:	2301      	movs	r3, #1
 8006438:	73fb      	strb	r3, [r7, #15]
 800643a:	e031      	b.n	80064a0 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800643c:	2200      	movs	r2, #0
 800643e:	6839      	ldr	r1, [r7, #0]
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f7ff fe7e 	bl	8006142 <put_fat>
 8006446:	4603      	mov	r3, r0
 8006448:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800644a:	7bfb      	ldrb	r3, [r7, #15]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d126      	bne.n	800649e <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800645c:	d013      	beq.n	8006486 <remove_chain+0x9e>
				fs->free_clust++;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	3301      	adds	r3, #1
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800646e:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006476:	795b      	ldrb	r3, [r3, #5]
 8006478:	f043 0301 	orr.w	r3, r3, #1
 800647c:	b2da      	uxtb	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006484:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	429a      	cmp	r2, r3
 8006496:	d3bc      	bcc.n	8006412 <remove_chain+0x2a>
 8006498:	e002      	b.n	80064a0 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 800649a:	bf00      	nop
 800649c:	e000      	b.n	80064a0 <remove_chain+0xb8>
			if (res != FR_OK) break;
 800649e:	bf00      	nop
		}
	}

	return res;
 80064a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b086      	sub	sp, #24
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
 80064b2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d111      	bne.n	80064de <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d006      	beq.n	80064d8 <create_chain+0x2e>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d31d      	bcc.n	8006514 <create_chain+0x6a>
 80064d8:	2301      	movs	r3, #1
 80064da:	613b      	str	r3, [r7, #16]
 80064dc:	e01a      	b.n	8006514 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80064de:	6839      	ldr	r1, [r7, #0]
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f7ff fd32 	bl	8005f4a <get_fat>
 80064e6:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d801      	bhi.n	80064f2 <create_chain+0x48>
 80064ee:	2301      	movs	r3, #1
 80064f0:	e07f      	b.n	80065f2 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f8:	d101      	bne.n	80064fe <create_chain+0x54>
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	e079      	b.n	80065f2 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	429a      	cmp	r2, r3
 800650a:	d201      	bcs.n	8006510 <create_chain+0x66>
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	e070      	b.n	80065f2 <create_chain+0x148>
		scl = clst;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	3301      	adds	r3, #1
 800651c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	429a      	cmp	r2, r3
 800652a:	d307      	bcc.n	800653c <create_chain+0x92>
			ncl = 2;
 800652c:	2302      	movs	r3, #2
 800652e:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8006530:	697a      	ldr	r2, [r7, #20]
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	429a      	cmp	r2, r3
 8006536:	d901      	bls.n	800653c <create_chain+0x92>
 8006538:	2300      	movs	r3, #0
 800653a:	e05a      	b.n	80065f2 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800653c:	6979      	ldr	r1, [r7, #20]
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f7ff fd03 	bl	8005f4a <get_fat>
 8006544:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00e      	beq.n	800656a <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006552:	d002      	beq.n	800655a <create_chain+0xb0>
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d101      	bne.n	800655e <create_chain+0xb4>
			return cs;
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	e049      	b.n	80065f2 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	429a      	cmp	r2, r3
 8006564:	d1d8      	bne.n	8006518 <create_chain+0x6e>
 8006566:	2300      	movs	r3, #0
 8006568:	e043      	b.n	80065f2 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 800656a:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800656c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8006570:	6979      	ldr	r1, [r7, #20]
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7ff fde5 	bl	8006142 <put_fat>
 8006578:	4603      	mov	r3, r0
 800657a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800657c:	7bfb      	ldrb	r3, [r7, #15]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d109      	bne.n	8006596 <create_chain+0xec>
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d006      	beq.n	8006596 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	6839      	ldr	r1, [r7, #0]
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f7ff fdd8 	bl	8006142 <put_fat>
 8006592:	4603      	mov	r3, r0
 8006594:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8006596:	7bfb      	ldrb	r3, [r7, #15]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d121      	bne.n	80065e0 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065a2:	461a      	mov	r2, r3
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b4:	d01c      	beq.n	80065f0 <create_chain+0x146>
			fs->free_clust--;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	3b01      	subs	r3, #1
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80065c6:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065ce:	795b      	ldrb	r3, [r3, #5]
 80065d0:	f043 0301 	orr.w	r3, r3, #1
 80065d4:	b2da      	uxtb	r2, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065dc:	715a      	strb	r2, [r3, #5]
 80065de:	e007      	b.n	80065f0 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80065e0:	7bfb      	ldrb	r3, [r7, #15]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d102      	bne.n	80065ec <create_chain+0x142>
 80065e6:	f04f 33ff 	mov.w	r3, #4294967295
 80065ea:	e000      	b.n	80065ee <create_chain+0x144>
 80065ec:	2301      	movs	r3, #1
 80065ee:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80065f0:	697b      	ldr	r3, [r7, #20]
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3718      	adds	r7, #24
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b087      	sub	sp, #28
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
 8006602:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800660a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660c:	3304      	adds	r3, #4
 800660e:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800661c:	895b      	ldrh	r3, [r3, #10]
 800661e:	461a      	mov	r2, r3
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	fbb3 f3f2 	udiv	r3, r3, r2
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800662c:	6812      	ldr	r2, [r2, #0]
 800662e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006632:	7892      	ldrb	r2, [r2, #2]
 8006634:	fbb3 f3f2 	udiv	r3, r3, r2
 8006638:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	1d1a      	adds	r2, r3, #4
 800663e:	613a      	str	r2, [r7, #16]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d101      	bne.n	800664e <clmt_clust+0x54>
 800664a:	2300      	movs	r3, #0
 800664c:	e010      	b.n	8006670 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	429a      	cmp	r2, r3
 8006654:	d307      	bcc.n	8006666 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	617b      	str	r3, [r7, #20]
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	3304      	adds	r3, #4
 8006662:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006664:	e7e9      	b.n	800663a <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8006666:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	4413      	add	r3, r2
}
 8006670:	4618      	mov	r0, r3
 8006672:	371c      	adds	r7, #28
 8006674:	46bd      	mov	sp, r7
 8006676:	bc80      	pop	{r7}
 8006678:	4770      	bx	lr

0800667a <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b086      	sub	sp, #24
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
 8006682:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	b29a      	uxth	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800668e:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d009      	beq.n	80066b4 <dir_sdi+0x3a>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d301      	bcc.n	80066b8 <dir_sdi+0x3e>
		return FR_INT_ERR;
 80066b4:	2302      	movs	r3, #2
 80066b6:	e0aa      	b.n	800680e <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d110      	bne.n	80066e0 <dir_sdi+0x66>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	2b03      	cmp	r3, #3
 80066ce:	d107      	bne.n	80066e0 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066de:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d115      	bne.n	8006712 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066f2:	891b      	ldrh	r3, [r3, #8]
 80066f4:	461a      	mov	r2, r3
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d301      	bcc.n	8006700 <dir_sdi+0x86>
			return FR_INT_ERR;
 80066fc:	2302      	movs	r3, #2
 80066fe:	e086      	b.n	800680e <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800670c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670e:	613b      	str	r3, [r7, #16]
 8006710:	e043      	b.n	800679a <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800671e:	895b      	ldrh	r3, [r3, #10]
 8006720:	095b      	lsrs	r3, r3, #5
 8006722:	b29b      	uxth	r3, r3
 8006724:	461a      	mov	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006732:	789b      	ldrb	r3, [r3, #2]
 8006734:	fb02 f303 	mul.w	r3, r2, r3
 8006738:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800673a:	e021      	b.n	8006780 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6979      	ldr	r1, [r7, #20]
 8006746:	4618      	mov	r0, r3
 8006748:	f7ff fbff 	bl	8005f4a <get_fat>
 800674c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006754:	d101      	bne.n	800675a <dir_sdi+0xe0>
 8006756:	2301      	movs	r3, #1
 8006758:	e059      	b.n	800680e <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d909      	bls.n	8006774 <dir_sdi+0xfa>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	429a      	cmp	r2, r3
 8006772:	d301      	bcc.n	8006778 <dir_sdi+0xfe>
				return FR_INT_ERR;
 8006774:	2302      	movs	r3, #2
 8006776:	e04a      	b.n	800680e <dir_sdi+0x194>
			idx -= ic;
 8006778:	683a      	ldr	r2, [r7, #0]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8006780:	683a      	ldr	r2, [r7, #0]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	429a      	cmp	r2, r3
 8006786:	d2d9      	bcs.n	800673c <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	6979      	ldr	r1, [r7, #20]
 8006792:	4618      	mov	r0, r3
 8006794:	f7ff fbb5 	bl	8005f02 <clust2sect>
 8006798:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067a0:	461a      	mov	r2, r3
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d101      	bne.n	80067b0 <dir_sdi+0x136>
 80067ac:	2302      	movs	r3, #2
 80067ae:	e02e      	b.n	800680e <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067bc:	895b      	ldrh	r3, [r3, #10]
 80067be:	095b      	lsrs	r3, r3, #5
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	461a      	mov	r2, r3
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	4413      	add	r3, r2
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80067d4:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4618      	mov	r0, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067ec:	895b      	ldrh	r3, [r3, #10]
 80067ee:	095b      	lsrs	r3, r3, #5
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	461a      	mov	r2, r3
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80067fa:	fb01 f202 	mul.w	r2, r1, r2
 80067fe:	1a9b      	subs	r3, r3, r2
 8006800:	015b      	lsls	r3, r3, #5
 8006802:	4403      	add	r3, r0
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800680a:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3718      	adds	r7, #24
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006816:	b590      	push	{r4, r7, lr}
 8006818:	b087      	sub	sp, #28
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006826:	88db      	ldrh	r3, [r3, #6]
 8006828:	3301      	adds	r3, #1
 800682a:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	b29b      	uxth	r3, r3
 8006830:	2b00      	cmp	r3, #0
 8006832:	d005      	beq.n	8006840 <dir_next+0x2a>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d101      	bne.n	8006844 <dir_next+0x2e>
		return FR_NO_FILE;
 8006840:	2304      	movs	r3, #4
 8006842:	e12e      	b.n	8006aa2 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006850:	895b      	ldrh	r3, [r3, #10]
 8006852:	095b      	lsrs	r3, r3, #5
 8006854:	b29b      	uxth	r3, r3
 8006856:	461a      	mov	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	fbb3 f1f2 	udiv	r1, r3, r2
 800685e:	fb01 f202 	mul.w	r2, r1, r2
 8006862:	1a9b      	subs	r3, r3, r2
 8006864:	2b00      	cmp	r3, #0
 8006866:	f040 80fa 	bne.w	8006a5e <dir_next+0x248>
		dp->sect++;					/* Next sector */
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	3301      	adds	r3, #1
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800687a:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d10d      	bne.n	80068a4 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006894:	891b      	ldrh	r3, [r3, #8]
 8006896:	461a      	mov	r2, r3
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	4293      	cmp	r3, r2
 800689c:	f0c0 80df 	bcc.w	8006a5e <dir_next+0x248>
				return FR_NO_FILE;
 80068a0:	2304      	movs	r3, #4
 80068a2:	e0fe      	b.n	8006aa2 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068b0:	895b      	ldrh	r3, [r3, #10]
 80068b2:	095b      	lsrs	r3, r3, #5
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	461a      	mov	r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80068c4:	6812      	ldr	r2, [r2, #0]
 80068c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80068ca:	7892      	ldrb	r2, [r2, #2]
 80068cc:	3a01      	subs	r2, #1
 80068ce:	4013      	ands	r3, r2
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	f040 80c4 	bne.w	8006a5e <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	4619      	mov	r1, r3
 80068e8:	4610      	mov	r0, r2
 80068ea:	f7ff fb2e 	bl	8005f4a <get_fat>
 80068ee:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d801      	bhi.n	80068fa <dir_next+0xe4>
 80068f6:	2302      	movs	r3, #2
 80068f8:	e0d3      	b.n	8006aa2 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006900:	d101      	bne.n	8006906 <dir_next+0xf0>
 8006902:	2301      	movs	r3, #1
 8006904:	e0cd      	b.n	8006aa2 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006912:	695b      	ldr	r3, [r3, #20]
 8006914:	697a      	ldr	r2, [r7, #20]
 8006916:	429a      	cmp	r2, r3
 8006918:	f0c0 808e 	bcc.w	8006a38 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d101      	bne.n	8006926 <dir_next+0x110>
 8006922:	2304      	movs	r3, #4
 8006924:	e0bd      	b.n	8006aa2 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	4619      	mov	r1, r3
 8006938:	4610      	mov	r0, r2
 800693a:	f7ff fdb6 	bl	80064aa <create_chain>
 800693e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d101      	bne.n	800694a <dir_next+0x134>
 8006946:	2307      	movs	r3, #7
 8006948:	e0ab      	b.n	8006aa2 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d101      	bne.n	8006954 <dir_next+0x13e>
 8006950:	2302      	movs	r3, #2
 8006952:	e0a6      	b.n	8006aa2 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695a:	d101      	bne.n	8006960 <dir_next+0x14a>
 800695c:	2301      	movs	r3, #1
 800695e:	e0a0      	b.n	8006aa2 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4618      	mov	r0, r3
 800696a:	f7ff f987 	bl	8005c7c <sync_window>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d001      	beq.n	8006978 <dir_next+0x162>
 8006974:	2301      	movs	r3, #1
 8006976:	e094      	b.n	8006aa2 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4618      	mov	r0, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800698e:	895b      	ldrh	r3, [r3, #10]
 8006990:	461a      	mov	r2, r3
 8006992:	2100      	movs	r1, #0
 8006994:	f7fe ff5a 	bl	800584c <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069a6:	681c      	ldr	r4, [r3, #0]
 80069a8:	6979      	ldr	r1, [r7, #20]
 80069aa:	4610      	mov	r0, r2
 80069ac:	f7ff faa9 	bl	8005f02 <clust2sect>
 80069b0:	4603      	mov	r3, r0
 80069b2:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 80069b6:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80069b8:	2300      	movs	r3, #0
 80069ba:	613b      	str	r3, [r7, #16]
 80069bc:	e021      	b.n	8006a02 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069ca:	2201      	movs	r2, #1
 80069cc:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7ff f950 	bl	8005c7c <sync_window>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d001      	beq.n	80069e6 <dir_next+0x1d0>
 80069e2:	2301      	movs	r3, #1
 80069e4:	e05d      	b.n	8006aa2 <dir_next+0x28c>
						dp->fs->winsect++;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80069f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80069f4:	3201      	adds	r2, #1
 80069f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069fa:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	3301      	adds	r3, #1
 8006a00:	613b      	str	r3, [r7, #16]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a0e:	789b      	ldrb	r3, [r3, #2]
 8006a10:	461a      	mov	r2, r3
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d3d2      	bcc.n	80069be <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	1acb      	subs	r3, r1, r3
 8006a32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006a36:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a3e:	461a      	mov	r2, r3
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6979      	ldr	r1, [r7, #20]
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7ff fa57 	bl	8005f02 <clust2sect>
 8006a54:	4602      	mov	r2, r0
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a5c:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a68:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4618      	mov	r0, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a80:	895b      	ldrh	r3, [r3, #10]
 8006a82:	095b      	lsrs	r3, r3, #5
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	461a      	mov	r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a8e:	fb01 f202 	mul.w	r2, r1, r2
 8006a92:	1a9b      	subs	r3, r3, r2
 8006a94:	015b      	lsls	r3, r3, #5
 8006a96:	4403      	add	r3, r0
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006a9e:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	371c      	adds	r7, #28
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd90      	pop	{r4, r7, pc}

08006aaa <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b084      	sub	sp, #16
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
 8006ab2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7ff fddf 	bl	800667a <dir_sdi>
 8006abc:	4603      	mov	r3, r0
 8006abe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006ac0:	7bfb      	ldrb	r3, [r7, #15]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d135      	bne.n	8006b32 <dir_alloc+0x88>
		n = 0;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	4619      	mov	r1, r3
 8006adc:	4610      	mov	r0, r2
 8006ade:	f7ff f91f 	bl	8005d20 <move_window>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006ae6:	7bfb      	ldrb	r3, [r7, #15]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d121      	bne.n	8006b30 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006af2:	695b      	ldr	r3, [r3, #20]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	2be5      	cmp	r3, #229	; 0xe5
 8006af8:	d006      	beq.n	8006b08 <dir_alloc+0x5e>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b00:	695b      	ldr	r3, [r3, #20]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d107      	bne.n	8006b18 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	60bb      	str	r3, [r7, #8]
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d102      	bne.n	8006b1c <dir_alloc+0x72>
 8006b16:	e00c      	b.n	8006b32 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006b18:	2300      	movs	r3, #0
 8006b1a:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8006b1c:	2101      	movs	r1, #1
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f7ff fe79 	bl	8006816 <dir_next>
 8006b24:	4603      	mov	r3, r0
 8006b26:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8006b28:	7bfb      	ldrb	r3, [r7, #15]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d0cd      	beq.n	8006aca <dir_alloc+0x20>
 8006b2e:	e000      	b.n	8006b32 <dir_alloc+0x88>
			if (res != FR_OK) break;
 8006b30:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006b32:	7bfb      	ldrb	r3, [r7, #15]
 8006b34:	2b04      	cmp	r3, #4
 8006b36:	d101      	bne.n	8006b3c <dir_alloc+0x92>
 8006b38:	2307      	movs	r3, #7
 8006b3a:	73fb      	strb	r3, [r7, #15]
	return res;
 8006b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b085      	sub	sp, #20
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	331b      	adds	r3, #27
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	021b      	lsls	r3, r3, #8
 8006b58:	b21a      	sxth	r2, r3
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	331a      	adds	r3, #26
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	b21b      	sxth	r3, r3
 8006b62:	4313      	orrs	r3, r2
 8006b64:	b21b      	sxth	r3, r3
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	2b03      	cmp	r3, #3
 8006b74:	d10f      	bne.n	8006b96 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	3315      	adds	r3, #21
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	021b      	lsls	r3, r3, #8
 8006b7e:	b21a      	sxth	r2, r3
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	3314      	adds	r3, #20
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	b21b      	sxth	r3, r3
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	b21b      	sxth	r3, r3
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	041b      	lsls	r3, r3, #16
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	60fb      	str	r3, [r7, #12]

	return cl;
 8006b96:	68fb      	ldr	r3, [r7, #12]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3714      	adds	r7, #20
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bc80      	pop	{r7}
 8006ba0:	4770      	bx	lr

08006ba2 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b083      	sub	sp, #12
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
 8006baa:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	331a      	adds	r3, #26
 8006bb0:	683a      	ldr	r2, [r7, #0]
 8006bb2:	b2d2      	uxtb	r2, r2
 8006bb4:	701a      	strb	r2, [r3, #0]
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	0a1b      	lsrs	r3, r3, #8
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	331b      	adds	r3, #27
 8006bc2:	b2d2      	uxtb	r2, r2
 8006bc4:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	0c1a      	lsrs	r2, r3, #16
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	3314      	adds	r3, #20
 8006bce:	b2d2      	uxtb	r2, r2
 8006bd0:	701a      	strb	r2, [r3, #0]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	0c1b      	lsrs	r3, r3, #16
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	0a1b      	lsrs	r3, r3, #8
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	3315      	adds	r3, #21
 8006be0:	b2d2      	uxtb	r2, r2
 8006be2:	701a      	strb	r2, [r3, #0]
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bc80      	pop	{r7}
 8006bec:	4770      	bx	lr
	...

08006bf0 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c02:	1e5a      	subs	r2, r3, #1
 8006c04:	4613      	mov	r3, r2
 8006c06:	005b      	lsls	r3, r3, #1
 8006c08:	4413      	add	r3, r2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	4413      	add	r3, r2
 8006c0e:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8006c10:	2300      	movs	r3, #0
 8006c12:	613b      	str	r3, [r7, #16]
 8006c14:	2301      	movs	r3, #1
 8006c16:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8006c18:	4a2b      	ldr	r2, [pc, #172]	; (8006cc8 <cmp_lfn+0xd8>)
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	3301      	adds	r3, #1
 8006c22:	683a      	ldr	r2, [r7, #0]
 8006c24:	4413      	add	r3, r2
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	021b      	lsls	r3, r3, #8
 8006c2a:	b21a      	sxth	r2, r3
 8006c2c:	4926      	ldr	r1, [pc, #152]	; (8006cc8 <cmp_lfn+0xd8>)
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	440b      	add	r3, r1
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	4619      	mov	r1, r3
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	440b      	add	r3, r1
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	b21b      	sxth	r3, r3
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	b21b      	sxth	r3, r3
 8006c42:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8006c44:	89fb      	ldrh	r3, [r7, #14]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d019      	beq.n	8006c7e <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8006c4a:	89bb      	ldrh	r3, [r7, #12]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f002 fc33 	bl	80094b8 <ff_wtoupper>
 8006c52:	4603      	mov	r3, r0
 8006c54:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	2bfe      	cmp	r3, #254	; 0xfe
 8006c5a:	d80e      	bhi.n	8006c7a <cmp_lfn+0x8a>
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	1c5a      	adds	r2, r3, #1
 8006c60:	617a      	str	r2, [r7, #20]
 8006c62:	005b      	lsls	r3, r3, #1
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	4413      	add	r3, r2
 8006c68:	881b      	ldrh	r3, [r3, #0]
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f002 fc24 	bl	80094b8 <ff_wtoupper>
 8006c70:	4603      	mov	r3, r0
 8006c72:	461a      	mov	r2, r3
 8006c74:	89fb      	ldrh	r3, [r7, #14]
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d008      	beq.n	8006c8c <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	e01f      	b.n	8006cbe <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8006c7e:	89bb      	ldrh	r3, [r7, #12]
 8006c80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d001      	beq.n	8006c8c <cmp_lfn+0x9c>
 8006c88:	2300      	movs	r3, #0
 8006c8a:	e018      	b.n	8006cbe <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	613b      	str	r3, [r7, #16]
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	2b0c      	cmp	r3, #12
 8006c96:	d9bf      	bls.n	8006c18 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00b      	beq.n	8006cbc <cmp_lfn+0xcc>
 8006ca4:	89fb      	ldrh	r3, [r7, #14]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d008      	beq.n	8006cbc <cmp_lfn+0xcc>
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	005b      	lsls	r3, r3, #1
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	881b      	ldrh	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d001      	beq.n	8006cbc <cmp_lfn+0xcc>
		return 0;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	e000      	b.n	8006cbe <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8006cbc:	2301      	movs	r3, #1
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3718      	adds	r7, #24
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	0800bf70 	.word	0x0800bf70

08006ccc <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b089      	sub	sp, #36	; 0x24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	4611      	mov	r1, r2
 8006cd8:	461a      	mov	r2, r3
 8006cda:	460b      	mov	r3, r1
 8006cdc:	71fb      	strb	r3, [r7, #7]
 8006cde:	4613      	mov	r3, r2
 8006ce0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	330d      	adds	r3, #13
 8006ce6:	79ba      	ldrb	r2, [r7, #6]
 8006ce8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	330b      	adds	r3, #11
 8006cee:	220f      	movs	r2, #15
 8006cf0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	330c      	adds	r3, #12
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	331a      	adds	r3, #26
 8006cfe:	2200      	movs	r2, #0
 8006d00:	701a      	strb	r2, [r3, #0]
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	331b      	adds	r3, #27
 8006d06:	2200      	movs	r2, #0
 8006d08:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8006d0a:	79fb      	ldrb	r3, [r7, #7]
 8006d0c:	1e5a      	subs	r2, r3, #1
 8006d0e:	4613      	mov	r3, r2
 8006d10:	005b      	lsls	r3, r3, #1
 8006d12:	4413      	add	r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4413      	add	r3, r2
 8006d18:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	82fb      	strh	r3, [r7, #22]
 8006d1e:	2300      	movs	r3, #0
 8006d20:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8006d22:	8afb      	ldrh	r3, [r7, #22]
 8006d24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d007      	beq.n	8006d3c <fit_lfn+0x70>
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	1c5a      	adds	r2, r3, #1
 8006d30:	61fa      	str	r2, [r7, #28]
 8006d32:	005b      	lsls	r3, r3, #1
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	4413      	add	r3, r2
 8006d38:	881b      	ldrh	r3, [r3, #0]
 8006d3a:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8006d3c:	4a1c      	ldr	r2, [pc, #112]	; (8006db0 <fit_lfn+0xe4>)
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	4413      	add	r3, r2
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	461a      	mov	r2, r3
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	4413      	add	r3, r2
 8006d4a:	8afa      	ldrh	r2, [r7, #22]
 8006d4c:	b2d2      	uxtb	r2, r2
 8006d4e:	701a      	strb	r2, [r3, #0]
 8006d50:	8afb      	ldrh	r3, [r7, #22]
 8006d52:	0a1b      	lsrs	r3, r3, #8
 8006d54:	b299      	uxth	r1, r3
 8006d56:	4a16      	ldr	r2, [pc, #88]	; (8006db0 <fit_lfn+0xe4>)
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	68ba      	ldr	r2, [r7, #8]
 8006d62:	4413      	add	r3, r2
 8006d64:	b2ca      	uxtb	r2, r1
 8006d66:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8006d68:	8afb      	ldrh	r3, [r7, #22]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d102      	bne.n	8006d74 <fit_lfn+0xa8>
 8006d6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d72:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	3301      	adds	r3, #1
 8006d78:	61bb      	str	r3, [r7, #24]
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	2b0c      	cmp	r3, #12
 8006d7e:	d9d0      	bls.n	8006d22 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8006d80:	8afb      	ldrh	r3, [r7, #22]
 8006d82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d006      	beq.n	8006d98 <fit_lfn+0xcc>
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	005b      	lsls	r3, r3, #1
 8006d8e:	68fa      	ldr	r2, [r7, #12]
 8006d90:	4413      	add	r3, r2
 8006d92:	881b      	ldrh	r3, [r3, #0]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d103      	bne.n	8006da0 <fit_lfn+0xd4>
 8006d98:	79fb      	ldrb	r3, [r7, #7]
 8006d9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d9e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	79fa      	ldrb	r2, [r7, #7]
 8006da4:	701a      	strb	r2, [r3, #0]
}
 8006da6:	bf00      	nop
 8006da8:	3724      	adds	r7, #36	; 0x24
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bc80      	pop	{r7}
 8006dae:	4770      	bx	lr
 8006db0:	0800bf70 	.word	0x0800bf70

08006db4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b08c      	sub	sp, #48	; 0x30
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	607a      	str	r2, [r7, #4]
 8006dc0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006dc2:	220b      	movs	r2, #11
 8006dc4:	68b9      	ldr	r1, [r7, #8]
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f7fe fd22 	bl	8005810 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	2b05      	cmp	r3, #5
 8006dd0:	d92b      	bls.n	8006e2a <gen_numname+0x76>
		sr = seq;
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006dd6:	e022      	b.n	8006e1e <gen_numname+0x6a>
			wc = *lfn++;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	1c9a      	adds	r2, r3, #2
 8006ddc:	607a      	str	r2, [r7, #4]
 8006dde:	881b      	ldrh	r3, [r3, #0]
 8006de0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006de2:	2300      	movs	r3, #0
 8006de4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006de6:	e017      	b.n	8006e18 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	005a      	lsls	r2, r3, #1
 8006dec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	4413      	add	r3, r2
 8006df4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006df6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006df8:	085b      	lsrs	r3, r3, #1
 8006dfa:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d005      	beq.n	8006e12 <gen_numname+0x5e>
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006e0c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006e10:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e14:	3301      	adds	r3, #1
 8006e16:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1a:	2b0f      	cmp	r3, #15
 8006e1c:	d9e4      	bls.n	8006de8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	881b      	ldrh	r3, [r3, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1d8      	bne.n	8006dd8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006e2a:	2307      	movs	r3, #7
 8006e2c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	f003 030f 	and.w	r3, r3, #15
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	3330      	adds	r3, #48	; 0x30
 8006e3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006e3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e42:	2b39      	cmp	r3, #57	; 0x39
 8006e44:	d904      	bls.n	8006e50 <gen_numname+0x9c>
 8006e46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e4a:	3307      	adds	r3, #7
 8006e4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e52:	1e5a      	subs	r2, r3, #1
 8006e54:	62ba      	str	r2, [r7, #40]	; 0x28
 8006e56:	3330      	adds	r3, #48	; 0x30
 8006e58:	443b      	add	r3, r7
 8006e5a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006e5e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	091b      	lsrs	r3, r3, #4
 8006e66:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1df      	bne.n	8006e2e <gen_numname+0x7a>
	ns[i] = '~';
 8006e6e:	f107 0214 	add.w	r2, r7, #20
 8006e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e74:	4413      	add	r3, r2
 8006e76:	227e      	movs	r2, #126	; 0x7e
 8006e78:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e7e:	e002      	b.n	8006e86 <gen_numname+0xd2>
 8006e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e82:	3301      	adds	r3, #1
 8006e84:	627b      	str	r3, [r7, #36]	; 0x24
 8006e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d205      	bcs.n	8006e9a <gen_numname+0xe6>
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e92:	4413      	add	r3, r2
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	2b20      	cmp	r3, #32
 8006e98:	d1f2      	bne.n	8006e80 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9c:	2b07      	cmp	r3, #7
 8006e9e:	d807      	bhi.n	8006eb0 <gen_numname+0xfc>
 8006ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea2:	1c5a      	adds	r2, r3, #1
 8006ea4:	62ba      	str	r2, [r7, #40]	; 0x28
 8006ea6:	3330      	adds	r3, #48	; 0x30
 8006ea8:	443b      	add	r3, r7
 8006eaa:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006eae:	e000      	b.n	8006eb2 <gen_numname+0xfe>
 8006eb0:	2120      	movs	r1, #32
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb4:	1c5a      	adds	r2, r3, #1
 8006eb6:	627a      	str	r2, [r7, #36]	; 0x24
 8006eb8:	68fa      	ldr	r2, [r7, #12]
 8006eba:	4413      	add	r3, r2
 8006ebc:	460a      	mov	r2, r1
 8006ebe:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec2:	2b07      	cmp	r3, #7
 8006ec4:	d9e9      	bls.n	8006e9a <gen_numname+0xe6>
}
 8006ec6:	bf00      	nop
 8006ec8:	bf00      	nop
 8006eca:	3730      	adds	r7, #48	; 0x30
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006edc:	230b      	movs	r3, #11
 8006ede:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8006ee0:	7bfb      	ldrb	r3, [r7, #15]
 8006ee2:	b2da      	uxtb	r2, r3
 8006ee4:	0852      	lsrs	r2, r2, #1
 8006ee6:	01db      	lsls	r3, r3, #7
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	b2da      	uxtb	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	1c59      	adds	r1, r3, #1
 8006ef0:	6079      	str	r1, [r7, #4]
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	73fb      	strb	r3, [r7, #15]
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	3b01      	subs	r3, #1
 8006efc:	60bb      	str	r3, [r7, #8]
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1ed      	bne.n	8006ee0 <sum_sfn+0x10>
	return sum;
 8006f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3714      	adds	r7, #20
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bc80      	pop	{r7}
 8006f0e:	4770      	bx	lr

08006f10 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b086      	sub	sp, #24
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006f18:	2100      	movs	r1, #0
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7ff fbad 	bl	800667a <dir_sdi>
 8006f20:	4603      	mov	r3, r0
 8006f22:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006f24:	7dfb      	ldrb	r3, [r7, #23]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d001      	beq.n	8006f2e <dir_find+0x1e>
 8006f2a:	7dfb      	ldrb	r3, [r7, #23]
 8006f2c:	e0b8      	b.n	80070a0 <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006f2e:	23ff      	movs	r3, #255	; 0xff
 8006f30:	753b      	strb	r3, [r7, #20]
 8006f32:	7d3b      	ldrb	r3, [r7, #20]
 8006f34:	757b      	strb	r3, [r7, #21]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f40:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	4619      	mov	r1, r3
 8006f54:	4610      	mov	r0, r2
 8006f56:	f7fe fee3 	bl	8005d20 <move_window>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006f5e:	7dfb      	ldrb	r3, [r7, #23]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f040 8097 	bne.w	8007094 <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f6c:	695b      	ldr	r3, [r3, #20]
 8006f6e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006f76:	7dbb      	ldrb	r3, [r7, #22]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d102      	bne.n	8006f82 <dir_find+0x72>
 8006f7c:	2304      	movs	r3, #4
 8006f7e:	75fb      	strb	r3, [r7, #23]
 8006f80:	e08d      	b.n	800709e <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	330b      	adds	r3, #11
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f8c:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006f8e:	7dbb      	ldrb	r3, [r7, #22]
 8006f90:	2be5      	cmp	r3, #229	; 0xe5
 8006f92:	d007      	beq.n	8006fa4 <dir_find+0x94>
 8006f94:	7bfb      	ldrb	r3, [r7, #15]
 8006f96:	f003 0308 	and.w	r3, r3, #8
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00b      	beq.n	8006fb6 <dir_find+0xa6>
 8006f9e:	7bfb      	ldrb	r3, [r7, #15]
 8006fa0:	2b0f      	cmp	r3, #15
 8006fa2:	d008      	beq.n	8006fb6 <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006fa4:	23ff      	movs	r3, #255	; 0xff
 8006fa6:	757b      	strb	r3, [r7, #21]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006fb2:	849a      	strh	r2, [r3, #36]	; 0x24
 8006fb4:	e063      	b.n	800707e <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006fb6:	7bfb      	ldrb	r3, [r7, #15]
 8006fb8:	2b0f      	cmp	r3, #15
 8006fba:	d137      	bne.n	800702c <dir_find+0x11c>
				if (dp->lfn) {
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fc2:	6a1b      	ldr	r3, [r3, #32]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d05a      	beq.n	800707e <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006fc8:	7dbb      	ldrb	r3, [r7, #22]
 8006fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d010      	beq.n	8006ff4 <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	7b5b      	ldrb	r3, [r3, #13]
 8006fd6:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8006fd8:	7dbb      	ldrb	r3, [r7, #22]
 8006fda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fde:	75bb      	strb	r3, [r7, #22]
 8006fe0:	7dbb      	ldrb	r3, [r7, #22]
 8006fe2:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fea:	88da      	ldrh	r2, [r3, #6]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ff2:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8006ff4:	7dba      	ldrb	r2, [r7, #22]
 8006ff6:	7d7b      	ldrb	r3, [r7, #21]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d114      	bne.n	8007026 <dir_find+0x116>
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	330d      	adds	r3, #13
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	7d3a      	ldrb	r2, [r7, #20]
 8007004:	429a      	cmp	r2, r3
 8007006:	d10e      	bne.n	8007026 <dir_find+0x116>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800700e:	6a1b      	ldr	r3, [r3, #32]
 8007010:	6939      	ldr	r1, [r7, #16]
 8007012:	4618      	mov	r0, r3
 8007014:	f7ff fdec 	bl	8006bf0 <cmp_lfn>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d003      	beq.n	8007026 <dir_find+0x116>
 800701e:	7d7b      	ldrb	r3, [r7, #21]
 8007020:	3b01      	subs	r3, #1
 8007022:	b2db      	uxtb	r3, r3
 8007024:	e000      	b.n	8007028 <dir_find+0x118>
 8007026:	23ff      	movs	r3, #255	; 0xff
 8007028:	757b      	strb	r3, [r7, #21]
 800702a:	e028      	b.n	800707e <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800702c:	7d7b      	ldrb	r3, [r7, #21]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d107      	bne.n	8007042 <dir_find+0x132>
 8007032:	6938      	ldr	r0, [r7, #16]
 8007034:	f7ff ff4c 	bl	8006ed0 <sum_sfn>
 8007038:	4603      	mov	r3, r0
 800703a:	461a      	mov	r2, r3
 800703c:	7d3b      	ldrb	r3, [r7, #20]
 800703e:	4293      	cmp	r3, r2
 8007040:	d02a      	beq.n	8007098 <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007048:	699b      	ldr	r3, [r3, #24]
 800704a:	330b      	adds	r3, #11
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	f003 0301 	and.w	r3, r3, #1
 8007052:	2b00      	cmp	r3, #0
 8007054:	d10b      	bne.n	800706e <dir_find+0x15e>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	220b      	movs	r2, #11
 8007060:	4619      	mov	r1, r3
 8007062:	6938      	ldr	r0, [r7, #16]
 8007064:	f7fe fc0c 	bl	8005880 <mem_cmp>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d016      	beq.n	800709c <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800706e:	23ff      	movs	r3, #255	; 0xff
 8007070:	757b      	strb	r3, [r7, #21]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007078:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800707c:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800707e:	2100      	movs	r1, #0
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f7ff fbc8 	bl	8006816 <dir_next>
 8007086:	4603      	mov	r3, r0
 8007088:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800708a:	7dfb      	ldrb	r3, [r7, #23]
 800708c:	2b00      	cmp	r3, #0
 800708e:	f43f af58 	beq.w	8006f42 <dir_find+0x32>
 8007092:	e004      	b.n	800709e <dir_find+0x18e>
		if (res != FR_OK) break;
 8007094:	bf00      	nop
 8007096:	e002      	b.n	800709e <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8007098:	bf00      	nop
 800709a:	e000      	b.n	800709e <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800709c:	bf00      	nop

	return res;
 800709e:	7dfb      	ldrb	r3, [r7, #23]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3718      	adds	r7, #24
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b08c      	sub	sp, #48	; 0x30
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	623b      	str	r3, [r7, #32]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070c0:	6a1b      	ldr	r3, [r3, #32]
 80070c2:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 80070c4:	f107 030c 	add.w	r3, r7, #12
 80070c8:	220c      	movs	r2, #12
 80070ca:	6a39      	ldr	r1, [r7, #32]
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7fe fb9f 	bl	8005810 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80070d2:	7dfb      	ldrb	r3, [r7, #23]
 80070d4:	f003 0301 	and.w	r3, r3, #1
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d03b      	beq.n	8007154 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 80070dc:	6a3b      	ldr	r3, [r7, #32]
 80070de:	330b      	adds	r3, #11
 80070e0:	2200      	movs	r2, #0
 80070e2:	701a      	strb	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070ea:	461a      	mov	r2, r3
 80070ec:	2300      	movs	r3, #0
 80070ee:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 80070f0:	2301      	movs	r3, #1
 80070f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80070f4:	e013      	b.n	800711e <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 80070f6:	f107 010c 	add.w	r1, r7, #12
 80070fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fc:	69fa      	ldr	r2, [r7, #28]
 80070fe:	6a38      	ldr	r0, [r7, #32]
 8007100:	f7ff fe58 	bl	8006db4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f7ff ff03 	bl	8006f10 <dir_find>
 800710a:	4603      	mov	r3, r0
 800710c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8007110:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007114:	2b00      	cmp	r3, #0
 8007116:	d106      	bne.n	8007126 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8007118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711a:	3301      	adds	r3, #1
 800711c:	62bb      	str	r3, [r7, #40]	; 0x28
 800711e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007120:	2b63      	cmp	r3, #99	; 0x63
 8007122:	d9e8      	bls.n	80070f6 <dir_register+0x4e>
 8007124:	e000      	b.n	8007128 <dir_register+0x80>
			if (res != FR_OK) break;
 8007126:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712a:	2b64      	cmp	r3, #100	; 0x64
 800712c:	d101      	bne.n	8007132 <dir_register+0x8a>
 800712e:	2307      	movs	r3, #7
 8007130:	e0d8      	b.n	80072e4 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007132:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007136:	2b04      	cmp	r3, #4
 8007138:	d002      	beq.n	8007140 <dir_register+0x98>
 800713a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800713e:	e0d1      	b.n	80072e4 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8007140:	6a3b      	ldr	r3, [r7, #32]
 8007142:	330b      	adds	r3, #11
 8007144:	7dfa      	ldrb	r2, [r7, #23]
 8007146:	701a      	strb	r2, [r3, #0]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800714e:	461a      	mov	r2, r3
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8007154:	7dfb      	ldrb	r3, [r7, #23]
 8007156:	f003 0302 	and.w	r3, r3, #2
 800715a:	2b00      	cmp	r3, #0
 800715c:	d014      	beq.n	8007188 <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 800715e:	2300      	movs	r3, #0
 8007160:	62bb      	str	r3, [r7, #40]	; 0x28
 8007162:	e002      	b.n	800716a <dir_register+0xc2>
 8007164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007166:	3301      	adds	r3, #1
 8007168:	62bb      	str	r3, [r7, #40]	; 0x28
 800716a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716c:	005b      	lsls	r3, r3, #1
 800716e:	69fa      	ldr	r2, [r7, #28]
 8007170:	4413      	add	r3, r2
 8007172:	881b      	ldrh	r3, [r3, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d1f5      	bne.n	8007164 <dir_register+0xbc>
		nent = (n + 25) / 13;
 8007178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717a:	3319      	adds	r3, #25
 800717c:	4a5b      	ldr	r2, [pc, #364]	; (80072ec <dir_register+0x244>)
 800717e:	fba2 2303 	umull	r2, r3, r2, r3
 8007182:	089b      	lsrs	r3, r3, #2
 8007184:	627b      	str	r3, [r7, #36]	; 0x24
 8007186:	e001      	b.n	800718c <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8007188:	2301      	movs	r3, #1
 800718a:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800718c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7ff fc8b 	bl	8006aaa <dir_alloc>
 8007194:	4603      	mov	r3, r0
 8007196:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800719a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d15b      	bne.n	800725a <dir_register+0x1b2>
 80071a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a4:	3b01      	subs	r3, #1
 80071a6:	627b      	str	r3, [r7, #36]	; 0x24
 80071a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d055      	beq.n	800725a <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071b4:	88db      	ldrh	r3, [r3, #6]
 80071b6:	461a      	mov	r2, r3
 80071b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	4619      	mov	r1, r3
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f7ff fa5b 	bl	800667a <dir_sdi>
 80071c4:	4603      	mov	r3, r0
 80071c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80071ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d143      	bne.n	800725a <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	4618      	mov	r0, r3
 80071dc:	f7ff fe78 	bl	8006ed0 <sum_sfn>
 80071e0:	4603      	mov	r3, r0
 80071e2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	4619      	mov	r1, r3
 80071f6:	4610      	mov	r0, r2
 80071f8:	f7fe fd92 	bl	8005d20 <move_window>
 80071fc:	4603      	mov	r3, r0
 80071fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8007202:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007206:	2b00      	cmp	r3, #0
 8007208:	d126      	bne.n	8007258 <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007210:	6a18      	ldr	r0, [r3, #32]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007218:	6959      	ldr	r1, [r3, #20]
 800721a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721c:	b2da      	uxtb	r2, r3
 800721e:	7efb      	ldrb	r3, [r7, #27]
 8007220:	f7ff fd54 	bl	8006ccc <fit_lfn>
				dp->fs->wflag = 1;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007230:	2201      	movs	r2, #1
 8007232:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8007234:	2100      	movs	r1, #0
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f7ff faed 	bl	8006816 <dir_next>
 800723c:	4603      	mov	r3, r0
 800723e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8007242:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007246:	2b00      	cmp	r3, #0
 8007248:	d107      	bne.n	800725a <dir_register+0x1b2>
 800724a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724c:	3b01      	subs	r3, #1
 800724e:	627b      	str	r3, [r7, #36]	; 0x24
 8007250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1c6      	bne.n	80071e4 <dir_register+0x13c>
 8007256:	e000      	b.n	800725a <dir_register+0x1b2>
				if (res != FR_OK) break;
 8007258:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800725a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800725e:	2b00      	cmp	r3, #0
 8007260:	d13e      	bne.n	80072e0 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	4619      	mov	r1, r3
 8007274:	4610      	mov	r0, r2
 8007276:	f7fe fd53 	bl	8005d20 <move_window>
 800727a:	4603      	mov	r3, r0
 800727c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007280:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007284:	2b00      	cmp	r3, #0
 8007286:	d12b      	bne.n	80072e0 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800728e:	695b      	ldr	r3, [r3, #20]
 8007290:	2220      	movs	r2, #32
 8007292:	2100      	movs	r1, #0
 8007294:	4618      	mov	r0, r3
 8007296:	f7fe fad9 	bl	800584c <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072a0:	6958      	ldr	r0, [r3, #20]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072a8:	699b      	ldr	r3, [r3, #24]
 80072aa:	220b      	movs	r2, #11
 80072ac:	4619      	mov	r1, r3
 80072ae:	f7fe faaf 	bl	8005810 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	330b      	adds	r3, #11
 80072bc:	781a      	ldrb	r2, [r3, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072c4:	695b      	ldr	r3, [r3, #20]
 80072c6:	330c      	adds	r3, #12
 80072c8:	f002 0218 	and.w	r2, r2, #24
 80072cc:	b2d2      	uxtb	r2, r2
 80072ce:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072dc:	2201      	movs	r2, #1
 80072de:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 80072e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3730      	adds	r7, #48	; 0x30
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	4ec4ec4f 	.word	0x4ec4ec4f

080072f0 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b08a      	sub	sp, #40	; 0x28
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	613b      	str	r3, [r7, #16]
 8007300:	e002      	b.n	8007308 <create_name+0x18>
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	3301      	adds	r3, #1
 8007306:	613b      	str	r3, [r7, #16]
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	2b2f      	cmp	r3, #47	; 0x2f
 800730e:	d0f8      	beq.n	8007302 <create_name+0x12>
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	2b5c      	cmp	r3, #92	; 0x5c
 8007316:	d0f4      	beq.n	8007302 <create_name+0x12>
	lfn = dp->lfn;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800731e:	6a1b      	ldr	r3, [r3, #32]
 8007320:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8007322:	2300      	movs	r3, #0
 8007324:	617b      	str	r3, [r7, #20]
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	1c5a      	adds	r2, r3, #1
 800732e:	61ba      	str	r2, [r7, #24]
 8007330:	693a      	ldr	r2, [r7, #16]
 8007332:	4413      	add	r3, r2
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8007338:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800733a:	2b1f      	cmp	r3, #31
 800733c:	d92f      	bls.n	800739e <create_name+0xae>
 800733e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007340:	2b2f      	cmp	r3, #47	; 0x2f
 8007342:	d02c      	beq.n	800739e <create_name+0xae>
 8007344:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007346:	2b5c      	cmp	r3, #92	; 0x5c
 8007348:	d029      	beq.n	800739e <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	2bfe      	cmp	r3, #254	; 0xfe
 800734e:	d901      	bls.n	8007354 <create_name+0x64>
			return FR_INVALID_NAME;
 8007350:	2306      	movs	r3, #6
 8007352:	e186      	b.n	8007662 <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007354:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007356:	b2db      	uxtb	r3, r3
 8007358:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800735a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800735c:	2101      	movs	r1, #1
 800735e:	4618      	mov	r0, r3
 8007360:	f002 f870 	bl	8009444 <ff_convert>
 8007364:	4603      	mov	r3, r0
 8007366:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007368:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800736a:	2b00      	cmp	r3, #0
 800736c:	d101      	bne.n	8007372 <create_name+0x82>
 800736e:	2306      	movs	r3, #6
 8007370:	e177      	b.n	8007662 <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8007372:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007374:	2b7f      	cmp	r3, #127	; 0x7f
 8007376:	d809      	bhi.n	800738c <create_name+0x9c>
 8007378:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800737a:	4619      	mov	r1, r3
 800737c:	488e      	ldr	r0, [pc, #568]	; (80075b8 <create_name+0x2c8>)
 800737e:	f7fe faa5 	bl	80058cc <chk_chr>
 8007382:	4603      	mov	r3, r0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d001      	beq.n	800738c <create_name+0x9c>
			return FR_INVALID_NAME;
 8007388:	2306      	movs	r3, #6
 800738a:	e16a      	b.n	8007662 <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	1c5a      	adds	r2, r3, #1
 8007390:	617a      	str	r2, [r7, #20]
 8007392:	005b      	lsls	r3, r3, #1
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	4413      	add	r3, r2
 8007398:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800739a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800739c:	e7c5      	b.n	800732a <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800739e:	693a      	ldr	r2, [r7, #16]
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	441a      	add	r2, r3
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80073a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073aa:	2b1f      	cmp	r3, #31
 80073ac:	d801      	bhi.n	80073b2 <create_name+0xc2>
 80073ae:	2304      	movs	r3, #4
 80073b0:	e000      	b.n	80073b4 <create_name+0xc4>
 80073b2:	2300      	movs	r3, #0
 80073b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 80073b8:	e011      	b.n	80073de <create_name+0xee>
		w = lfn[di - 1];
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80073c0:	3b01      	subs	r3, #1
 80073c2:	005b      	lsls	r3, r3, #1
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	4413      	add	r3, r2
 80073c8:	881b      	ldrh	r3, [r3, #0]
 80073ca:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80073cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073ce:	2b20      	cmp	r3, #32
 80073d0:	d002      	beq.n	80073d8 <create_name+0xe8>
 80073d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073d4:	2b2e      	cmp	r3, #46	; 0x2e
 80073d6:	d106      	bne.n	80073e6 <create_name+0xf6>
		di--;
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	3b01      	subs	r3, #1
 80073dc:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1ea      	bne.n	80073ba <create_name+0xca>
 80073e4:	e000      	b.n	80073e8 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 80073e6:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d101      	bne.n	80073f2 <create_name+0x102>
 80073ee:	2306      	movs	r3, #6
 80073f0:	e137      	b.n	8007662 <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	005b      	lsls	r3, r3, #1
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	4413      	add	r3, r2
 80073fa:	2200      	movs	r2, #0
 80073fc:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	220b      	movs	r2, #11
 8007408:	2120      	movs	r1, #32
 800740a:	4618      	mov	r0, r3
 800740c:	f7fe fa1e 	bl	800584c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007410:	2300      	movs	r3, #0
 8007412:	61bb      	str	r3, [r7, #24]
 8007414:	e002      	b.n	800741c <create_name+0x12c>
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	3301      	adds	r3, #1
 800741a:	61bb      	str	r3, [r7, #24]
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	005b      	lsls	r3, r3, #1
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	4413      	add	r3, r2
 8007424:	881b      	ldrh	r3, [r3, #0]
 8007426:	2b20      	cmp	r3, #32
 8007428:	d0f5      	beq.n	8007416 <create_name+0x126>
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	005b      	lsls	r3, r3, #1
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	4413      	add	r3, r2
 8007432:	881b      	ldrh	r3, [r3, #0]
 8007434:	2b2e      	cmp	r3, #46	; 0x2e
 8007436:	d0ee      	beq.n	8007416 <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d009      	beq.n	8007452 <create_name+0x162>
 800743e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007442:	f043 0303 	orr.w	r3, r3, #3
 8007446:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800744a:	e002      	b.n	8007452 <create_name+0x162>
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	3b01      	subs	r3, #1
 8007450:	617b      	str	r3, [r7, #20]
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d009      	beq.n	800746c <create_name+0x17c>
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800745e:	3b01      	subs	r3, #1
 8007460:	005b      	lsls	r3, r3, #1
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	4413      	add	r3, r2
 8007466:	881b      	ldrh	r3, [r3, #0]
 8007468:	2b2e      	cmp	r3, #46	; 0x2e
 800746a:	d1ef      	bne.n	800744c <create_name+0x15c>

	b = i = 0; ni = 8;
 800746c:	2300      	movs	r3, #0
 800746e:	623b      	str	r3, [r7, #32]
 8007470:	2300      	movs	r3, #0
 8007472:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007476:	2308      	movs	r3, #8
 8007478:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	1c5a      	adds	r2, r3, #1
 800747e:	61ba      	str	r2, [r7, #24]
 8007480:	005b      	lsls	r3, r3, #1
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	4413      	add	r3, r2
 8007486:	881b      	ldrh	r3, [r3, #0]
 8007488:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800748a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800748c:	2b00      	cmp	r3, #0
 800748e:	f000 8091 	beq.w	80075b4 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007492:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007494:	2b20      	cmp	r3, #32
 8007496:	d006      	beq.n	80074a6 <create_name+0x1b6>
 8007498:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800749a:	2b2e      	cmp	r3, #46	; 0x2e
 800749c:	d10a      	bne.n	80074b4 <create_name+0x1c4>
 800749e:	69ba      	ldr	r2, [r7, #24]
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d006      	beq.n	80074b4 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 80074a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074aa:	f043 0303 	orr.w	r3, r3, #3
 80074ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80074b2:	e07e      	b.n	80075b2 <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80074b4:	6a3a      	ldr	r2, [r7, #32]
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d203      	bcs.n	80074c4 <create_name+0x1d4>
 80074bc:	69ba      	ldr	r2, [r7, #24]
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d123      	bne.n	800750c <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	2b0b      	cmp	r3, #11
 80074c8:	d106      	bne.n	80074d8 <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 80074ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074ce:	f043 0303 	orr.w	r3, r3, #3
 80074d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80074d6:	e076      	b.n	80075c6 <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80074d8:	69ba      	ldr	r2, [r7, #24]
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d005      	beq.n	80074ec <create_name+0x1fc>
 80074e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074e4:	f043 0303 	orr.w	r3, r3, #3
 80074e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80074ec:	69ba      	ldr	r2, [r7, #24]
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d867      	bhi.n	80075c4 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	61bb      	str	r3, [r7, #24]
 80074f8:	2308      	movs	r3, #8
 80074fa:	623b      	str	r3, [r7, #32]
 80074fc:	230b      	movs	r3, #11
 80074fe:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007500:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800750a:	e052      	b.n	80075b2 <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800750c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800750e:	2b7f      	cmp	r3, #127	; 0x7f
 8007510:	d914      	bls.n	800753c <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007512:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007514:	2100      	movs	r1, #0
 8007516:	4618      	mov	r0, r3
 8007518:	f001 ff94 	bl	8009444 <ff_convert>
 800751c:	4603      	mov	r3, r0
 800751e:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007520:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007522:	2b00      	cmp	r3, #0
 8007524:	d004      	beq.n	8007530 <create_name+0x240>
 8007526:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007528:	3b80      	subs	r3, #128	; 0x80
 800752a:	4a24      	ldr	r2, [pc, #144]	; (80075bc <create_name+0x2cc>)
 800752c:	5cd3      	ldrb	r3, [r2, r3]
 800752e:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007530:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007534:	f043 0302 	orr.w	r3, r3, #2
 8007538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800753c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800753e:	2b00      	cmp	r3, #0
 8007540:	d007      	beq.n	8007552 <create_name+0x262>
 8007542:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007544:	4619      	mov	r1, r3
 8007546:	481e      	ldr	r0, [pc, #120]	; (80075c0 <create_name+0x2d0>)
 8007548:	f7fe f9c0 	bl	80058cc <chk_chr>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d008      	beq.n	8007564 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007552:	235f      	movs	r3, #95	; 0x5f
 8007554:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007556:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800755a:	f043 0303 	orr.w	r3, r3, #3
 800755e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007562:	e01b      	b.n	800759c <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007564:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007566:	2b40      	cmp	r3, #64	; 0x40
 8007568:	d909      	bls.n	800757e <create_name+0x28e>
 800756a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800756c:	2b5a      	cmp	r3, #90	; 0x5a
 800756e:	d806      	bhi.n	800757e <create_name+0x28e>
					b |= 2;
 8007570:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007574:	f043 0302 	orr.w	r3, r3, #2
 8007578:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800757c:	e00e      	b.n	800759c <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800757e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007580:	2b60      	cmp	r3, #96	; 0x60
 8007582:	d90b      	bls.n	800759c <create_name+0x2ac>
 8007584:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007586:	2b7a      	cmp	r3, #122	; 0x7a
 8007588:	d808      	bhi.n	800759c <create_name+0x2ac>
						b |= 1; w -= 0x20;
 800758a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800758e:	f043 0301 	orr.w	r3, r3, #1
 8007592:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007596:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007598:	3b20      	subs	r3, #32
 800759a:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075a2:	699a      	ldr	r2, [r3, #24]
 80075a4:	6a3b      	ldr	r3, [r7, #32]
 80075a6:	1c59      	adds	r1, r3, #1
 80075a8:	6239      	str	r1, [r7, #32]
 80075aa:	4413      	add	r3, r2
 80075ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80075ae:	b2d2      	uxtb	r2, r2
 80075b0:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 80075b2:	e762      	b.n	800747a <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 80075b4:	bf00      	nop
 80075b6:	e006      	b.n	80075c6 <create_name+0x2d6>
 80075b8:	08009668 	.word	0x08009668
 80075bc:	0800bef0 	.word	0x0800bef0
 80075c0:	08009674 	.word	0x08009674
			if (si > di) break;			/* No extension */
 80075c4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075cc:	699b      	ldr	r3, [r3, #24]
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	2be5      	cmp	r3, #229	; 0xe5
 80075d2:	d105      	bne.n	80075e0 <create_name+0x2f0>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	2205      	movs	r2, #5
 80075de:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	2b08      	cmp	r3, #8
 80075e4:	d104      	bne.n	80075f0 <create_name+0x300>
 80075e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 80075f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80075f4:	f003 030c 	and.w	r3, r3, #12
 80075f8:	2b0c      	cmp	r3, #12
 80075fa:	d005      	beq.n	8007608 <create_name+0x318>
 80075fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007600:	f003 0303 	and.w	r3, r3, #3
 8007604:	2b03      	cmp	r3, #3
 8007606:	d105      	bne.n	8007614 <create_name+0x324>
		cf |= NS_LFN;
 8007608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800760c:	f043 0302 	orr.w	r3, r3, #2
 8007610:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007618:	f003 0302 	and.w	r3, r3, #2
 800761c:	2b00      	cmp	r3, #0
 800761e:	d117      	bne.n	8007650 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007620:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007624:	f003 0303 	and.w	r3, r3, #3
 8007628:	2b01      	cmp	r3, #1
 800762a:	d105      	bne.n	8007638 <create_name+0x348>
 800762c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007630:	f043 0310 	orr.w	r3, r3, #16
 8007634:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007638:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800763c:	f003 030c 	and.w	r3, r3, #12
 8007640:	2b04      	cmp	r3, #4
 8007642:	d105      	bne.n	8007650 <create_name+0x360>
 8007644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007648:	f043 0308 	orr.w	r3, r3, #8
 800764c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007656:	699b      	ldr	r3, [r3, #24]
 8007658:	330b      	adds	r3, #11
 800765a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800765e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007660:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8007662:	4618      	mov	r0, r3
 8007664:	3728      	adds	r7, #40	; 0x28
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop

0800766c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	2b2f      	cmp	r3, #47	; 0x2f
 800767c:	d003      	beq.n	8007686 <follow_path+0x1a>
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	2b5c      	cmp	r3, #92	; 0x5c
 8007684:	d102      	bne.n	800768c <follow_path+0x20>
		path++;
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	3301      	adds	r3, #1
 800768a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007692:	461a      	mov	r2, r3
 8007694:	2300      	movs	r3, #0
 8007696:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	2b1f      	cmp	r3, #31
 800769e:	d80c      	bhi.n	80076ba <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 80076a0:	2100      	movs	r1, #0
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f7fe ffe9 	bl	800667a <dir_sdi>
 80076a8:	4603      	mov	r3, r0
 80076aa:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076b2:	461a      	mov	r2, r3
 80076b4:	2300      	movs	r3, #0
 80076b6:	6153      	str	r3, [r2, #20]
 80076b8:	e049      	b.n	800774e <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80076ba:	463b      	mov	r3, r7
 80076bc:	4619      	mov	r1, r3
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f7ff fe16 	bl	80072f0 <create_name>
 80076c4:	4603      	mov	r3, r0
 80076c6:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80076c8:	7bfb      	ldrb	r3, [r7, #15]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d13a      	bne.n	8007744 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f7ff fc1e 	bl	8006f10 <dir_find>
 80076d4:	4603      	mov	r3, r0
 80076d6:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076de:	699b      	ldr	r3, [r3, #24]
 80076e0:	7adb      	ldrb	r3, [r3, #11]
 80076e2:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80076e4:	7bfb      	ldrb	r3, [r7, #15]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00a      	beq.n	8007700 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80076ea:	7bfb      	ldrb	r3, [r7, #15]
 80076ec:	2b04      	cmp	r3, #4
 80076ee:	d12b      	bne.n	8007748 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80076f0:	7bbb      	ldrb	r3, [r7, #14]
 80076f2:	f003 0304 	and.w	r3, r3, #4
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d126      	bne.n	8007748 <follow_path+0xdc>
 80076fa:	2305      	movs	r3, #5
 80076fc:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80076fe:	e023      	b.n	8007748 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007700:	7bbb      	ldrb	r3, [r7, #14]
 8007702:	f003 0304 	and.w	r3, r3, #4
 8007706:	2b00      	cmp	r3, #0
 8007708:	d120      	bne.n	800774c <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007710:	695b      	ldr	r3, [r3, #20]
 8007712:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	330b      	adds	r3, #11
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	f003 0310 	and.w	r3, r3, #16
 800771e:	2b00      	cmp	r3, #0
 8007720:	d102      	bne.n	8007728 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 8007722:	2305      	movs	r3, #5
 8007724:	73fb      	strb	r3, [r7, #15]
 8007726:	e012      	b.n	800774e <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68b9      	ldr	r1, [r7, #8]
 8007732:	4618      	mov	r0, r3
 8007734:	f7ff fa07 	bl	8006b46 <ld_clust>
 8007738:	4602      	mov	r2, r0
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007740:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007742:	e7ba      	b.n	80076ba <follow_path+0x4e>
			if (res != FR_OK) break;
 8007744:	bf00      	nop
 8007746:	e002      	b.n	800774e <follow_path+0xe2>
				break;
 8007748:	bf00      	nop
 800774a:	e000      	b.n	800774e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800774c:	bf00      	nop
		}
	}

	return res;
 800774e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007750:	4618      	mov	r0, r3
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007758:	b480      	push	{r7}
 800775a:	b087      	sub	sp, #28
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007760:	f04f 33ff 	mov.w	r3, #4294967295
 8007764:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d031      	beq.n	80077d2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	617b      	str	r3, [r7, #20]
 8007774:	e002      	b.n	800777c <get_ldnumber+0x24>
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	3301      	adds	r3, #1
 800777a:	617b      	str	r3, [r7, #20]
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	2b1f      	cmp	r3, #31
 8007782:	d903      	bls.n	800778c <get_ldnumber+0x34>
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	2b3a      	cmp	r3, #58	; 0x3a
 800778a:	d1f4      	bne.n	8007776 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	2b3a      	cmp	r3, #58	; 0x3a
 8007792:	d11c      	bne.n	80077ce <get_ldnumber+0x76>
			tp = *path;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	1c5a      	adds	r2, r3, #1
 800779e:	60fa      	str	r2, [r7, #12]
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	3b30      	subs	r3, #48	; 0x30
 80077a4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	2b09      	cmp	r3, #9
 80077aa:	d80e      	bhi.n	80077ca <get_ldnumber+0x72>
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d10a      	bne.n	80077ca <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d107      	bne.n	80077ca <get_ldnumber+0x72>
					vol = (int)i;
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	3301      	adds	r3, #1
 80077c2:	617b      	str	r3, [r7, #20]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	697a      	ldr	r2, [r7, #20]
 80077c8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	e002      	b.n	80077d4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80077ce:	2300      	movs	r3, #0
 80077d0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80077d2:	693b      	ldr	r3, [r7, #16]
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	371c      	adds	r7, #28
 80077d8:	46bd      	mov	sp, r7
 80077da:	bc80      	pop	{r7}
 80077dc:	4770      	bx	lr
	...

080077e0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077f0:	2200      	movs	r2, #0
 80077f2:	711a      	strb	r2, [r3, #4]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077fa:	461a      	mov	r2, r3
 80077fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007800:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8007802:	6839      	ldr	r1, [r7, #0]
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f7fe fa8b 	bl	8005d20 <move_window>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d001      	beq.n	8007814 <check_fs+0x34>
		return 3;
 8007810:	2303      	movs	r3, #3
 8007812:	e04a      	b.n	80078aa <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800781a:	3301      	adds	r3, #1
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	021b      	lsls	r3, r3, #8
 8007820:	b21a      	sxth	r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8007828:	b21b      	sxth	r3, r3
 800782a:	4313      	orrs	r3, r2
 800782c:	b21b      	sxth	r3, r3
 800782e:	4a21      	ldr	r2, [pc, #132]	; (80078b4 <check_fs+0xd4>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d001      	beq.n	8007838 <check_fs+0x58>
		return 2;
 8007834:	2302      	movs	r3, #2
 8007836:	e038      	b.n	80078aa <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	3336      	adds	r3, #54	; 0x36
 800783c:	3303      	adds	r3, #3
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	061a      	lsls	r2, r3, #24
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	3336      	adds	r3, #54	; 0x36
 8007846:	3302      	adds	r3, #2
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	041b      	lsls	r3, r3, #16
 800784c:	4313      	orrs	r3, r2
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	3236      	adds	r2, #54	; 0x36
 8007852:	3201      	adds	r2, #1
 8007854:	7812      	ldrb	r2, [r2, #0]
 8007856:	0212      	lsls	r2, r2, #8
 8007858:	4313      	orrs	r3, r2
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8007860:	4313      	orrs	r3, r2
 8007862:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007866:	4a14      	ldr	r2, [pc, #80]	; (80078b8 <check_fs+0xd8>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d101      	bne.n	8007870 <check_fs+0x90>
		return 0;
 800786c:	2300      	movs	r3, #0
 800786e:	e01c      	b.n	80078aa <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	3352      	adds	r3, #82	; 0x52
 8007874:	3303      	adds	r3, #3
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	061a      	lsls	r2, r3, #24
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	3352      	adds	r3, #82	; 0x52
 800787e:	3302      	adds	r3, #2
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	041b      	lsls	r3, r3, #16
 8007884:	4313      	orrs	r3, r2
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	3252      	adds	r2, #82	; 0x52
 800788a:	3201      	adds	r2, #1
 800788c:	7812      	ldrb	r2, [r2, #0]
 800788e:	0212      	lsls	r2, r2, #8
 8007890:	4313      	orrs	r3, r2
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8007898:	4313      	orrs	r3, r2
 800789a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800789e:	4a06      	ldr	r2, [pc, #24]	; (80078b8 <check_fs+0xd8>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d101      	bne.n	80078a8 <check_fs+0xc8>
		return 0;
 80078a4:	2300      	movs	r3, #0
 80078a6:	e000      	b.n	80078aa <check_fs+0xca>

	return 1;
 80078a8:	2301      	movs	r3, #1
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3708      	adds	r7, #8
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	ffffaa55 	.word	0xffffaa55
 80078b8:	00544146 	.word	0x00544146

080078bc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b096      	sub	sp, #88	; 0x58
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	4613      	mov	r3, r2
 80078c8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2200      	movs	r2, #0
 80078ce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80078d0:	68b8      	ldr	r0, [r7, #8]
 80078d2:	f7ff ff41 	bl	8007758 <get_ldnumber>
 80078d6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80078d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078da:	2b00      	cmp	r3, #0
 80078dc:	da01      	bge.n	80078e2 <find_volume+0x26>
 80078de:	230b      	movs	r3, #11
 80078e0:	e311      	b.n	8007f06 <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80078e2:	4a98      	ldr	r2, [pc, #608]	; (8007b44 <find_volume+0x288>)
 80078e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078ea:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80078ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d101      	bne.n	80078f6 <find_volume+0x3a>
 80078f2:	230c      	movs	r3, #12
 80078f4:	e307      	b.n	8007f06 <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078fa:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80078fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d01c      	beq.n	8007942 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800790e:	785b      	ldrb	r3, [r3, #1]
 8007910:	4618      	mov	r0, r3
 8007912:	f7fd fedf 	bl	80056d4 <disk_status>
 8007916:	4603      	mov	r3, r0
 8007918:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800791c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007920:	f003 0301 	and.w	r3, r3, #1
 8007924:	2b00      	cmp	r3, #0
 8007926:	d10c      	bne.n	8007942 <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8007928:	79fb      	ldrb	r3, [r7, #7]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d007      	beq.n	800793e <find_volume+0x82>
 800792e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007932:	f003 0304 	and.w	r3, r3, #4
 8007936:	2b00      	cmp	r3, #0
 8007938:	d001      	beq.n	800793e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800793a:	230a      	movs	r3, #10
 800793c:	e2e3      	b.n	8007f06 <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 800793e:	2300      	movs	r3, #0
 8007940:	e2e1      	b.n	8007f06 <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007948:	2200      	movs	r2, #0
 800794a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800794c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800794e:	b2da      	uxtb	r2, r3
 8007950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007956:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800795a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800795e:	785b      	ldrb	r3, [r3, #1]
 8007960:	4618      	mov	r0, r3
 8007962:	f7fd fed1 	bl	8005708 <disk_initialize>
 8007966:	4603      	mov	r3, r0
 8007968:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800796c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007970:	f003 0301 	and.w	r3, r3, #1
 8007974:	2b00      	cmp	r3, #0
 8007976:	d001      	beq.n	800797c <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007978:	2303      	movs	r3, #3
 800797a:	e2c4      	b.n	8007f06 <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800797c:	79fb      	ldrb	r3, [r7, #7]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d007      	beq.n	8007992 <find_volume+0xd6>
 8007982:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007986:	f003 0304 	and.w	r3, r3, #4
 800798a:	2b00      	cmp	r3, #0
 800798c:	d001      	beq.n	8007992 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 800798e:	230a      	movs	r3, #10
 8007990:	e2b9      	b.n	8007f06 <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8007992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007994:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007998:	7858      	ldrb	r0, [r3, #1]
 800799a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800799c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079a0:	330a      	adds	r3, #10
 80079a2:	461a      	mov	r2, r3
 80079a4:	2102      	movs	r1, #2
 80079a6:	f7fd ff15 	bl	80057d4 <disk_ioctl>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d10d      	bne.n	80079cc <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 80079b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079b6:	895b      	ldrh	r3, [r3, #10]
 80079b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079bc:	d306      	bcc.n	80079cc <find_volume+0x110>
 80079be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079c4:	895b      	ldrh	r3, [r3, #10]
 80079c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079ca:	d901      	bls.n	80079d0 <find_volume+0x114>
 80079cc:	2301      	movs	r3, #1
 80079ce:	e29a      	b.n	8007f06 <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80079d0:	2300      	movs	r3, #0
 80079d2:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80079d4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80079d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80079d8:	f7ff ff02 	bl	80077e0 <check_fs>
 80079dc:	4603      	mov	r3, r0
 80079de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80079e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d153      	bne.n	8007a92 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80079ea:	2300      	movs	r3, #0
 80079ec:	643b      	str	r3, [r7, #64]	; 0x40
 80079ee:	e028      	b.n	8007a42 <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 80079f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079f4:	011b      	lsls	r3, r3, #4
 80079f6:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80079fa:	4413      	add	r3, r2
 80079fc:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80079fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a00:	3304      	adds	r3, #4
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d012      	beq.n	8007a2e <find_volume+0x172>
 8007a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0a:	330b      	adds	r3, #11
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	061a      	lsls	r2, r3, #24
 8007a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a12:	330a      	adds	r3, #10
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	041b      	lsls	r3, r3, #16
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a1c:	3209      	adds	r2, #9
 8007a1e:	7812      	ldrb	r2, [r2, #0]
 8007a20:	0212      	lsls	r2, r2, #8
 8007a22:	4313      	orrs	r3, r2
 8007a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a26:	3208      	adds	r2, #8
 8007a28:	7812      	ldrb	r2, [r2, #0]
 8007a2a:	431a      	orrs	r2, r3
 8007a2c:	e000      	b.n	8007a30 <find_volume+0x174>
 8007a2e:	2200      	movs	r2, #0
 8007a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	3358      	adds	r3, #88	; 0x58
 8007a36:	443b      	add	r3, r7
 8007a38:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a3e:	3301      	adds	r3, #1
 8007a40:	643b      	str	r3, [r7, #64]	; 0x40
 8007a42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a44:	2b03      	cmp	r3, #3
 8007a46:	d9d3      	bls.n	80079f0 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8007a48:	2300      	movs	r3, #0
 8007a4a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d002      	beq.n	8007a58 <find_volume+0x19c>
 8007a52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a54:	3b01      	subs	r3, #1
 8007a56:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8007a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	3358      	adds	r3, #88	; 0x58
 8007a5e:	443b      	add	r3, r7
 8007a60:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007a64:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8007a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d005      	beq.n	8007a78 <find_volume+0x1bc>
 8007a6c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007a6e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007a70:	f7ff feb6 	bl	80077e0 <check_fs>
 8007a74:	4603      	mov	r3, r0
 8007a76:	e000      	b.n	8007a7a <find_volume+0x1be>
 8007a78:	2302      	movs	r3, #2
 8007a7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8007a7e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d005      	beq.n	8007a92 <find_volume+0x1d6>
 8007a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a88:	3301      	adds	r3, #1
 8007a8a:	643b      	str	r3, [r7, #64]	; 0x40
 8007a8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a8e:	2b03      	cmp	r3, #3
 8007a90:	d9e2      	bls.n	8007a58 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007a92:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007a96:	2b03      	cmp	r3, #3
 8007a98:	d101      	bne.n	8007a9e <find_volume+0x1e2>
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e233      	b.n	8007f06 <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8007a9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d001      	beq.n	8007aaa <find_volume+0x1ee>
 8007aa6:	230d      	movs	r3, #13
 8007aa8:	e22d      	b.n	8007f06 <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aac:	7b1b      	ldrb	r3, [r3, #12]
 8007aae:	021b      	lsls	r3, r3, #8
 8007ab0:	b21a      	sxth	r2, r3
 8007ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab4:	7adb      	ldrb	r3, [r3, #11]
 8007ab6:	b21b      	sxth	r3, r3
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	b21a      	sxth	r2, r3
 8007abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ac2:	895b      	ldrh	r3, [r3, #10]
 8007ac4:	b21b      	sxth	r3, r3
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d001      	beq.n	8007ace <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 8007aca:	230d      	movs	r3, #13
 8007acc:	e21b      	b.n	8007f06 <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8007ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad0:	7ddb      	ldrb	r3, [r3, #23]
 8007ad2:	021b      	lsls	r3, r3, #8
 8007ad4:	b21a      	sxth	r2, r3
 8007ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad8:	7d9b      	ldrb	r3, [r3, #22]
 8007ada:	b21b      	sxth	r3, r3
 8007adc:	4313      	orrs	r3, r2
 8007ade:	b21b      	sxth	r3, r3
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8007ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d112      	bne.n	8007b10 <find_volume+0x254>
 8007aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aec:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007af0:	061a      	lsls	r2, r3, #24
 8007af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007af8:	041b      	lsls	r3, r3, #16
 8007afa:	4313      	orrs	r3, r2
 8007afc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007afe:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8007b02:	0212      	lsls	r2, r2, #8
 8007b04:	4313      	orrs	r3, r2
 8007b06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b08:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8007b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b16:	461a      	mov	r2, r3
 8007b18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b1a:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8007b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1e:	7c1a      	ldrb	r2, [r3, #16]
 8007b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b26:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8007b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b2e:	78db      	ldrb	r3, [r3, #3]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d009      	beq.n	8007b48 <find_volume+0x28c>
 8007b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b3a:	78db      	ldrb	r3, [r3, #3]
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d003      	beq.n	8007b48 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 8007b40:	230d      	movs	r3, #13
 8007b42:	e1e0      	b.n	8007f06 <find_volume+0x64a>
 8007b44:	20002b0c 	.word	0x20002b0c
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8007b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b4e:	78db      	ldrb	r3, [r3, #3]
 8007b50:	461a      	mov	r2, r3
 8007b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b54:	fb02 f303 	mul.w	r3, r2, r3
 8007b58:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8007b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5c:	7b5a      	ldrb	r2, [r3, #13]
 8007b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b64:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8007b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b6c:	789b      	ldrb	r3, [r3, #2]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00c      	beq.n	8007b8c <find_volume+0x2d0>
 8007b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b78:	789b      	ldrb	r3, [r3, #2]
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b82:	789b      	ldrb	r3, [r3, #2]
 8007b84:	3b01      	subs	r3, #1
 8007b86:	4013      	ands	r3, r2
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d001      	beq.n	8007b90 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 8007b8c:	230d      	movs	r3, #13
 8007b8e:	e1ba      	b.n	8007f06 <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8007b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b92:	7c9b      	ldrb	r3, [r3, #18]
 8007b94:	021b      	lsls	r3, r3, #8
 8007b96:	b21a      	sxth	r2, r3
 8007b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9a:	7c5b      	ldrb	r3, [r3, #17]
 8007b9c:	b21b      	sxth	r3, r3
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	b21b      	sxth	r3, r3
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007baa:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8007bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bb2:	891b      	ldrh	r3, [r3, #8]
 8007bb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bb6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007bba:	8952      	ldrh	r2, [r2, #10]
 8007bbc:	0952      	lsrs	r2, r2, #5
 8007bbe:	b292      	uxth	r2, r2
 8007bc0:	fbb3 f1f2 	udiv	r1, r3, r2
 8007bc4:	fb01 f202 	mul.w	r2, r1, r2
 8007bc8:	1a9b      	subs	r3, r3, r2
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d001      	beq.n	8007bd4 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 8007bd0:	230d      	movs	r3, #13
 8007bd2:	e198      	b.n	8007f06 <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8007bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd6:	7d1b      	ldrb	r3, [r3, #20]
 8007bd8:	021b      	lsls	r3, r3, #8
 8007bda:	b21a      	sxth	r2, r3
 8007bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bde:	7cdb      	ldrb	r3, [r3, #19]
 8007be0:	b21b      	sxth	r3, r3
 8007be2:	4313      	orrs	r3, r2
 8007be4:	b21b      	sxth	r3, r3
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8007bea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d112      	bne.n	8007c16 <find_volume+0x35a>
 8007bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007bf6:	061a      	lsls	r2, r3, #24
 8007bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bfa:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007bfe:	041b      	lsls	r3, r3, #16
 8007c00:	4313      	orrs	r3, r2
 8007c02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c04:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8007c08:	0212      	lsls	r2, r2, #8
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c0e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8007c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c18:	7bdb      	ldrb	r3, [r3, #15]
 8007c1a:	021b      	lsls	r3, r3, #8
 8007c1c:	b21a      	sxth	r2, r3
 8007c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c20:	7b9b      	ldrb	r3, [r3, #14]
 8007c22:	b21b      	sxth	r3, r3
 8007c24:	4313      	orrs	r3, r2
 8007c26:	b21b      	sxth	r3, r3
 8007c28:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8007c2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d101      	bne.n	8007c34 <find_volume+0x378>
 8007c30:	230d      	movs	r3, #13
 8007c32:	e168      	b.n	8007f06 <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8007c34:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c38:	4413      	add	r3, r2
 8007c3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c3c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007c40:	8911      	ldrh	r1, [r2, #8]
 8007c42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c44:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007c48:	8952      	ldrh	r2, [r2, #10]
 8007c4a:	0952      	lsrs	r2, r2, #5
 8007c4c:	b292      	uxth	r2, r2
 8007c4e:	fbb1 f2f2 	udiv	r2, r1, r2
 8007c52:	b292      	uxth	r2, r2
 8007c54:	4413      	add	r3, r2
 8007c56:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007c58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d201      	bcs.n	8007c64 <find_volume+0x3a8>
 8007c60:	230d      	movs	r3, #13
 8007c62:	e150      	b.n	8007f06 <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8007c64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c68:	1ad3      	subs	r3, r2, r3
 8007c6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c6c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007c70:	7892      	ldrb	r2, [r2, #2]
 8007c72:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c76:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8007c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d101      	bne.n	8007c82 <find_volume+0x3c6>
 8007c7e:	230d      	movs	r3, #13
 8007c80:	e141      	b.n	8007f06 <find_volume+0x64a>
	fmt = FS_FAT12;
 8007c82:	2301      	movs	r3, #1
 8007c84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8007c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d902      	bls.n	8007c98 <find_volume+0x3dc>
 8007c92:	2302      	movs	r3, #2
 8007c94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8007c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d902      	bls.n	8007ca8 <find_volume+0x3ec>
 8007ca2:	2303      	movs	r3, #3
 8007ca4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8007ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007caa:	3302      	adds	r3, #2
 8007cac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007cb2:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 8007cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cba:	461a      	mov	r2, r3
 8007cbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cbe:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8007cc0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cc4:	4413      	add	r3, r2
 8007cc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cc8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007ccc:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 8007cce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd2:	4413      	add	r3, r2
 8007cd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cd6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007cda:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 8007cdc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ce0:	2b03      	cmp	r3, #3
 8007ce2:	d124      	bne.n	8007d2e <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8007ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cea:	891b      	ldrh	r3, [r3, #8]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d001      	beq.n	8007cf4 <find_volume+0x438>
 8007cf0:	230d      	movs	r3, #13
 8007cf2:	e108      	b.n	8007f06 <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8007cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007cfa:	061a      	lsls	r2, r3, #24
 8007cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfe:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8007d02:	041b      	lsls	r3, r3, #16
 8007d04:	4313      	orrs	r3, r2
 8007d06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d08:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8007d0c:	0212      	lsls	r2, r2, #8
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d12:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8007d16:	4313      	orrs	r3, r2
 8007d18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007d1e:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8007d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d26:	695b      	ldr	r3, [r3, #20]
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	647b      	str	r3, [r7, #68]	; 0x44
 8007d2c:	e02b      	b.n	8007d86 <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8007d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d34:	891b      	ldrh	r3, [r3, #8]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d101      	bne.n	8007d3e <find_volume+0x482>
 8007d3a:	230d      	movs	r3, #13
 8007d3c:	e0e3      	b.n	8007f06 <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8007d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d44:	6a1a      	ldr	r2, [r3, #32]
 8007d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d48:	4413      	add	r3, r2
 8007d4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d4c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007d50:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007d52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d105      	bne.n	8007d66 <find_volume+0x4aa>
 8007d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d60:	695b      	ldr	r3, [r3, #20]
 8007d62:	005b      	lsls	r3, r3, #1
 8007d64:	e00e      	b.n	8007d84 <find_volume+0x4c8>
 8007d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d6c:	695a      	ldr	r2, [r3, #20]
 8007d6e:	4613      	mov	r3, r2
 8007d70:	005b      	lsls	r3, r3, #1
 8007d72:	4413      	add	r3, r2
 8007d74:	085a      	lsrs	r2, r3, #1
 8007d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d7c:	695b      	ldr	r3, [r3, #20]
 8007d7e:	f003 0301 	and.w	r3, r3, #1
 8007d82:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8007d84:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8007d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d8c:	699a      	ldr	r2, [r3, #24]
 8007d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d94:	895b      	ldrh	r3, [r3, #10]
 8007d96:	4619      	mov	r1, r3
 8007d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d9a:	440b      	add	r3, r1
 8007d9c:	3b01      	subs	r3, #1
 8007d9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007da0:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8007da4:	8949      	ldrh	r1, [r1, #10]
 8007da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d201      	bcs.n	8007db2 <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 8007dae:	230d      	movs	r3, #13
 8007db0:	e0a9      	b.n	8007f06 <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8007db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007db8:	461a      	mov	r2, r3
 8007dba:	f04f 33ff 	mov.w	r3, #4294967295
 8007dbe:	6113      	str	r3, [r2, #16]
 8007dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dc6:	691b      	ldr	r3, [r3, #16]
 8007dc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007dce:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8007dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dd6:	2280      	movs	r2, #128	; 0x80
 8007dd8:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8007dda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007dde:	2b03      	cmp	r3, #3
 8007de0:	d17a      	bne.n	8007ed8 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8007de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007de8:	021b      	lsls	r3, r3, #8
 8007dea:	b21a      	sxth	r2, r3
 8007dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007df2:	b21b      	sxth	r3, r3
 8007df4:	4313      	orrs	r3, r2
 8007df6:	b21b      	sxth	r3, r3
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d16d      	bne.n	8007ed8 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 8007dfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dfe:	3301      	adds	r3, #1
 8007e00:	4619      	mov	r1, r3
 8007e02:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e04:	f7fd ff8c 	bl	8005d20 <move_window>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d164      	bne.n	8007ed8 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 8007e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e14:	2200      	movs	r2, #0
 8007e16:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1a:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8007e1e:	021b      	lsls	r3, r3, #8
 8007e20:	b21a      	sxth	r2, r3
 8007e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e24:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8007e28:	b21b      	sxth	r3, r3
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	b21b      	sxth	r3, r3
 8007e2e:	4a38      	ldr	r2, [pc, #224]	; (8007f10 <find_volume+0x654>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d151      	bne.n	8007ed8 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8007e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e36:	78db      	ldrb	r3, [r3, #3]
 8007e38:	061a      	lsls	r2, r3, #24
 8007e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3c:	789b      	ldrb	r3, [r3, #2]
 8007e3e:	041b      	lsls	r3, r3, #16
 8007e40:	4313      	orrs	r3, r2
 8007e42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e44:	7852      	ldrb	r2, [r2, #1]
 8007e46:	0212      	lsls	r2, r2, #8
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e4c:	7812      	ldrb	r2, [r2, #0]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	4a30      	ldr	r2, [pc, #192]	; (8007f14 <find_volume+0x658>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d140      	bne.n	8007ed8 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8007e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e58:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8007e5c:	061a      	lsls	r2, r3, #24
 8007e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e60:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8007e64:	041b      	lsls	r3, r3, #16
 8007e66:	4313      	orrs	r3, r2
 8007e68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e6a:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8007e6e:	0212      	lsls	r2, r2, #8
 8007e70:	4313      	orrs	r3, r2
 8007e72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e74:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	4a27      	ldr	r2, [pc, #156]	; (8007f18 <find_volume+0x65c>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d12b      	bne.n	8007ed8 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8007e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e82:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8007e86:	061a      	lsls	r2, r3, #24
 8007e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8a:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8007e8e:	041b      	lsls	r3, r3, #16
 8007e90:	4313      	orrs	r3, r2
 8007e92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e94:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8007e98:	0212      	lsls	r2, r2, #8
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e9e:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ea6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007eaa:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8007eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eae:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8007eb2:	061a      	lsls	r2, r3, #24
 8007eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb6:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8007eba:	041b      	lsls	r3, r3, #16
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ec0:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8007ec4:	0212      	lsls	r2, r2, #8
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007eca:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ed2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007ed6:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8007ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ede:	461a      	mov	r2, r3
 8007ee0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ee4:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8007ee6:	4b0d      	ldr	r3, [pc, #52]	; (8007f1c <find_volume+0x660>)
 8007ee8:	881b      	ldrh	r3, [r3, #0]
 8007eea:	3301      	adds	r3, #1
 8007eec:	b29a      	uxth	r2, r3
 8007eee:	4b0b      	ldr	r3, [pc, #44]	; (8007f1c <find_volume+0x660>)
 8007ef0:	801a      	strh	r2, [r3, #0]
 8007ef2:	4b0a      	ldr	r3, [pc, #40]	; (8007f1c <find_volume+0x660>)
 8007ef4:	881a      	ldrh	r2, [r3, #0]
 8007ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007efc:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8007efe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f00:	f7fd fe92 	bl	8005c28 <clear_lock>
#endif

	return FR_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3758      	adds	r7, #88	; 0x58
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	ffffaa55 	.word	0xffffaa55
 8007f14:	41615252 	.word	0x41615252
 8007f18:	61417272 	.word	0x61417272
 8007f1c:	20002b10 	.word	0x20002b10

08007f20 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d02a      	beq.n	8007f88 <validate+0x68>
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d024      	beq.n	8007f88 <validate+0x68>
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d01b      	beq.n	8007f88 <validate+0x68>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f5c:	88da      	ldrh	r2, [r3, #6]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f64:	889b      	ldrh	r3, [r3, #4]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d10e      	bne.n	8007f88 <validate+0x68>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f76:	785b      	ldrb	r3, [r3, #1]
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f7fd fbab 	bl	80056d4 <disk_status>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	f003 0301 	and.w	r3, r3, #1
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d001      	beq.n	8007f8c <validate+0x6c>
		return FR_INVALID_OBJECT;
 8007f88:	2309      	movs	r3, #9
 8007f8a:	e000      	b.n	8007f8e <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
	...

08007f98 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b088      	sub	sp, #32
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8007faa:	f107 0310 	add.w	r3, r7, #16
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7ff fbd2 	bl	8007758 <get_ldnumber>
 8007fb4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	da01      	bge.n	8007fc0 <f_mount+0x28>
 8007fbc:	230b      	movs	r3, #11
 8007fbe:	e02f      	b.n	8008020 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007fc0:	4a19      	ldr	r2, [pc, #100]	; (8008028 <f_mount+0x90>)
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fc8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d007      	beq.n	8007fe0 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8007fd0:	69b8      	ldr	r0, [r7, #24]
 8007fd2:	f7fd fe29 	bl	8005c28 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fdc:	2200      	movs	r2, #0
 8007fde:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d004      	beq.n	8007ff0 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fec:	2200      	movs	r2, #0
 8007fee:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007ff0:	68fa      	ldr	r2, [r7, #12]
 8007ff2:	490d      	ldr	r1, [pc, #52]	; (8008028 <f_mount+0x90>)
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d002      	beq.n	8008006 <f_mount+0x6e>
 8008000:	79fb      	ldrb	r3, [r7, #7]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d001      	beq.n	800800a <f_mount+0x72>
 8008006:	2300      	movs	r3, #0
 8008008:	e00a      	b.n	8008020 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800800a:	f107 0108 	add.w	r1, r7, #8
 800800e:	f107 030c 	add.w	r3, r7, #12
 8008012:	2200      	movs	r2, #0
 8008014:	4618      	mov	r0, r3
 8008016:	f7ff fc51 	bl	80078bc <find_volume>
 800801a:	4603      	mov	r3, r0
 800801c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800801e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008020:	4618      	mov	r0, r3
 8008022:	3720      	adds	r7, #32
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}
 8008028:	20002b0c 	.word	0x20002b0c

0800802c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8008032:	b086      	sub	sp, #24
 8008034:	af00      	add	r7, sp, #0
 8008036:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800803a:	f843 0c4c 	str.w	r0, [r3, #-76]
 800803e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008042:	f843 1c50 	str.w	r1, [r3, #-80]
 8008046:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800804a:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800804e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008052:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d101      	bne.n	800805e <f_open+0x32>
 800805a:	2309      	movs	r3, #9
 800805c:	e2f7      	b.n	800864e <f_open+0x622>
	fp->fs = 0;			/* Clear file object */
 800805e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008062:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800806a:	461a      	mov	r2, r3
 800806c:	2300      	movs	r3, #0
 800806e:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8008070:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008074:	461a      	mov	r2, r3
 8008076:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800807a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800807e:	f003 031f 	and.w	r3, r3, #31
 8008082:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8008086:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800808a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800808e:	f023 0301 	bic.w	r3, r3, #1
 8008092:	b2da      	uxtb	r2, r3
 8008094:	f107 0118 	add.w	r1, r7, #24
 8008098:	3910      	subs	r1, #16
 800809a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800809e:	3b18      	subs	r3, #24
 80080a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7ff fc09 	bl	80078bc <find_volume>
 80080aa:	4603      	mov	r3, r0
 80080ac:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80080b0:	f102 0217 	add.w	r2, r2, #23
 80080b4:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80080b6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80080ba:	f103 0317 	add.w	r3, r3, #23
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f040 82bf 	bne.w	8008644 <f_open+0x618>
		INIT_BUF(dj);
 80080c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80080ca:	461a      	mov	r2, r3
 80080cc:	f107 0318 	add.w	r3, r7, #24
 80080d0:	3b04      	subs	r3, #4
 80080d2:	f8c2 3fe0 	str.w	r3, [r2, #4064]	; 0xfe0
 80080d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80080da:	461a      	mov	r2, r3
 80080dc:	4bd4      	ldr	r3, [pc, #848]	; (8008430 <f_open+0x404>)
 80080de:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 80080e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80080e6:	f853 2c50 	ldr.w	r2, [r3, #-80]
 80080ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80080ee:	3b18      	subs	r3, #24
 80080f0:	4611      	mov	r1, r2
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7ff faba 	bl	800766c <follow_path>
 80080f8:	4603      	mov	r3, r0
 80080fa:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80080fe:	f102 0217 	add.w	r2, r2, #23
 8008102:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8008104:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008108:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 800810c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008110:	f102 0210 	add.w	r2, r2, #16
 8008114:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008116:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800811a:	f103 0317 	add.w	r3, r3, #23
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d126      	bne.n	8008172 <f_open+0x146>
			if (!dir)	/* Default directory itself */
 8008124:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008128:	f103 0310 	add.w	r3, r3, #16
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d106      	bne.n	8008140 <f_open+0x114>
				res = FR_INVALID_NAME;
 8008132:	2306      	movs	r3, #6
 8008134:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008138:	f102 0217 	add.w	r2, r2, #23
 800813c:	7013      	strb	r3, [r2, #0]
 800813e:	e018      	b.n	8008172 <f_open+0x146>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008140:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008144:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008148:	f023 0301 	bic.w	r3, r3, #1
 800814c:	2b00      	cmp	r3, #0
 800814e:	bf14      	ite	ne
 8008150:	2301      	movne	r3, #1
 8008152:	2300      	moveq	r3, #0
 8008154:	b2db      	uxtb	r3, r3
 8008156:	461a      	mov	r2, r3
 8008158:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800815c:	3b18      	subs	r3, #24
 800815e:	4611      	mov	r1, r2
 8008160:	4618      	mov	r0, r3
 8008162:	f7fd fbcd 	bl	8005900 <chk_lock>
 8008166:	4603      	mov	r3, r0
 8008168:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800816c:	f102 0217 	add.w	r2, r2, #23
 8008170:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008172:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008176:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800817a:	f003 031c 	and.w	r3, r3, #28
 800817e:	2b00      	cmp	r3, #0
 8008180:	f000 813c 	beq.w	80083fc <f_open+0x3d0>
			if (res != FR_OK) {					/* No file, create new */
 8008184:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008188:	f103 0317 	add.w	r3, r3, #23
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d02e      	beq.n	80081f0 <f_open+0x1c4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8008192:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008196:	f103 0317 	add.w	r3, r3, #23
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	2b04      	cmp	r3, #4
 800819e:	d112      	bne.n	80081c6 <f_open+0x19a>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80081a0:	f7fd fc1e 	bl	80059e0 <enq_lock>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d007      	beq.n	80081ba <f_open+0x18e>
 80081aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80081ae:	3b18      	subs	r3, #24
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7fe ff79 	bl	80070a8 <dir_register>
 80081b6:	4603      	mov	r3, r0
 80081b8:	e000      	b.n	80081bc <f_open+0x190>
 80081ba:	2312      	movs	r3, #18
 80081bc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80081c0:	f102 0217 	add.w	r2, r2, #23
 80081c4:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80081c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80081ca:	461a      	mov	r2, r3
 80081cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80081d0:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80081d4:	f043 0308 	orr.w	r3, r3, #8
 80081d8:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 80081dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80081e0:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 80081e4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80081e8:	f102 0210 	add.w	r2, r2, #16
 80081ec:	6013      	str	r3, [r2, #0]
 80081ee:	e01f      	b.n	8008230 <f_open+0x204>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80081f0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80081f4:	f103 0310 	add.w	r3, r3, #16
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	330b      	adds	r3, #11
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	f003 0311 	and.w	r3, r3, #17
 8008202:	2b00      	cmp	r3, #0
 8008204:	d006      	beq.n	8008214 <f_open+0x1e8>
					res = FR_DENIED;
 8008206:	2307      	movs	r3, #7
 8008208:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800820c:	f102 0217 	add.w	r2, r2, #23
 8008210:	7013      	strb	r3, [r2, #0]
 8008212:	e00d      	b.n	8008230 <f_open+0x204>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8008214:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008218:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800821c:	f003 0304 	and.w	r3, r3, #4
 8008220:	2b00      	cmp	r3, #0
 8008222:	d005      	beq.n	8008230 <f_open+0x204>
						res = FR_EXIST;
 8008224:	2308      	movs	r3, #8
 8008226:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800822a:	f102 0217 	add.w	r2, r2, #23
 800822e:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008230:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008234:	f103 0317 	add.w	r3, r3, #23
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	f040 8113 	bne.w	8008466 <f_open+0x43a>
 8008240:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008244:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008248:	f003 0308 	and.w	r3, r3, #8
 800824c:	2b00      	cmp	r3, #0
 800824e:	f000 810a 	beq.w	8008466 <f_open+0x43a>
				dw = GET_FATTIME();				/* Created time */
 8008252:	f7fd f9e3 	bl	800561c <get_fattime>
 8008256:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800825a:	f103 030c 	add.w	r3, r3, #12
 800825e:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8008260:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008264:	f103 0310 	add.w	r3, r3, #16
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	330e      	adds	r3, #14
 800826c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008270:	f102 020c 	add.w	r2, r2, #12
 8008274:	6812      	ldr	r2, [r2, #0]
 8008276:	b2d2      	uxtb	r2, r2
 8008278:	701a      	strb	r2, [r3, #0]
 800827a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800827e:	f103 030c 	add.w	r3, r3, #12
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	b29b      	uxth	r3, r3
 8008286:	0a1b      	lsrs	r3, r3, #8
 8008288:	b29a      	uxth	r2, r3
 800828a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800828e:	f103 0310 	add.w	r3, r3, #16
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	330f      	adds	r3, #15
 8008296:	b2d2      	uxtb	r2, r2
 8008298:	701a      	strb	r2, [r3, #0]
 800829a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800829e:	f103 030c 	add.w	r3, r3, #12
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	0c1a      	lsrs	r2, r3, #16
 80082a6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80082aa:	f103 0310 	add.w	r3, r3, #16
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	3310      	adds	r3, #16
 80082b2:	b2d2      	uxtb	r2, r2
 80082b4:	701a      	strb	r2, [r3, #0]
 80082b6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80082ba:	f103 030c 	add.w	r3, r3, #12
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	0e1a      	lsrs	r2, r3, #24
 80082c2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80082c6:	f103 0310 	add.w	r3, r3, #16
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	3311      	adds	r3, #17
 80082ce:	b2d2      	uxtb	r2, r2
 80082d0:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80082d2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80082d6:	f103 0310 	add.w	r3, r3, #16
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	330b      	adds	r3, #11
 80082de:	2200      	movs	r2, #0
 80082e0:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80082e2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80082e6:	f103 0310 	add.w	r3, r3, #16
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	331c      	adds	r3, #28
 80082ee:	2200      	movs	r2, #0
 80082f0:	701a      	strb	r2, [r3, #0]
 80082f2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80082f6:	f103 0310 	add.w	r3, r3, #16
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	331d      	adds	r3, #29
 80082fe:	2200      	movs	r2, #0
 8008300:	701a      	strb	r2, [r3, #0]
 8008302:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008306:	f103 0310 	add.w	r3, r3, #16
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	331e      	adds	r3, #30
 800830e:	2200      	movs	r2, #0
 8008310:	701a      	strb	r2, [r3, #0]
 8008312:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008316:	f103 0310 	add.w	r3, r3, #16
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	331f      	adds	r3, #31
 800831e:	2200      	movs	r2, #0
 8008320:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8008322:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008326:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800832a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800832e:	f102 0210 	add.w	r2, r2, #16
 8008332:	6811      	ldr	r1, [r2, #0]
 8008334:	4618      	mov	r0, r3
 8008336:	f7fe fc06 	bl	8006b46 <ld_clust>
 800833a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800833e:	f103 0308 	add.w	r3, r3, #8
 8008342:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8008344:	2100      	movs	r1, #0
 8008346:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800834a:	f103 0310 	add.w	r3, r3, #16
 800834e:	6818      	ldr	r0, [r3, #0]
 8008350:	f7fe fc27 	bl	8006ba2 <st_clust>
				dj.fs->wflag = 1;
 8008354:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008358:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800835c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008360:	2201      	movs	r2, #1
 8008362:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8008364:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008368:	f103 0308 	add.w	r3, r3, #8
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d079      	beq.n	8008466 <f_open+0x43a>
					dw = dj.fs->winsect;
 8008372:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008376:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800837a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800837e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008380:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008384:	f102 020c 	add.w	r2, r2, #12
 8008388:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800838a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800838e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8008392:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008396:	f102 0208 	add.w	r2, r2, #8
 800839a:	6811      	ldr	r1, [r2, #0]
 800839c:	4618      	mov	r0, r3
 800839e:	f7fe f823 	bl	80063e8 <remove_chain>
 80083a2:	4603      	mov	r3, r0
 80083a4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80083a8:	f102 0217 	add.w	r2, r2, #23
 80083ac:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 80083ae:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80083b2:	f103 0317 	add.w	r3, r3, #23
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d154      	bne.n	8008466 <f_open+0x43a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80083bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80083c0:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	; 0xfc8
 80083c4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80083c8:	f103 0308 	add.w	r3, r3, #8
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	3b01      	subs	r3, #1
 80083d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80083d4:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 80083d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80083da:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 80083de:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80083e2:	f102 020c 	add.w	r2, r2, #12
 80083e6:	6811      	ldr	r1, [r2, #0]
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7fd fc99 	bl	8005d20 <move_window>
 80083ee:	4603      	mov	r3, r0
 80083f0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80083f4:	f102 0217 	add.w	r2, r2, #23
 80083f8:	7013      	strb	r3, [r2, #0]
 80083fa:	e034      	b.n	8008466 <f_open+0x43a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80083fc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008400:	f103 0317 	add.w	r3, r3, #23
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d12d      	bne.n	8008466 <f_open+0x43a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800840a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800840e:	f103 0310 	add.w	r3, r3, #16
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	330b      	adds	r3, #11
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	f003 0310 	and.w	r3, r3, #16
 800841c:	2b00      	cmp	r3, #0
 800841e:	d009      	beq.n	8008434 <f_open+0x408>
					res = FR_NO_FILE;
 8008420:	2304      	movs	r3, #4
 8008422:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008426:	f102 0217 	add.w	r2, r2, #23
 800842a:	7013      	strb	r3, [r2, #0]
 800842c:	e01b      	b.n	8008466 <f_open+0x43a>
 800842e:	bf00      	nop
 8008430:	20002b2c 	.word	0x20002b2c
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8008434:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008438:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800843c:	f003 0302 	and.w	r3, r3, #2
 8008440:	2b00      	cmp	r3, #0
 8008442:	d010      	beq.n	8008466 <f_open+0x43a>
 8008444:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008448:	f103 0310 	add.w	r3, r3, #16
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	330b      	adds	r3, #11
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	f003 0301 	and.w	r3, r3, #1
 8008456:	2b00      	cmp	r3, #0
 8008458:	d005      	beq.n	8008466 <f_open+0x43a>
						res = FR_DENIED;
 800845a:	2307      	movs	r3, #7
 800845c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008460:	f102 0217 	add.w	r2, r2, #23
 8008464:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8008466:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800846a:	f103 0317 	add.w	r3, r3, #23
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d157      	bne.n	8008524 <f_open+0x4f8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008474:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008478:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800847c:	f003 0308 	and.w	r3, r3, #8
 8008480:	2b00      	cmp	r3, #0
 8008482:	d00a      	beq.n	800849a <f_open+0x46e>
				mode |= FA__WRITTEN;
 8008484:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008488:	461a      	mov	r2, r3
 800848a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800848e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008492:	f043 0320 	orr.w	r3, r3, #32
 8008496:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800849a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800849e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 80084a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80084ac:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80084b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80084b4:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 80084b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80084ba:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80084be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084c2:	461a      	mov	r2, r3
 80084c4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80084c8:	f103 0310 	add.w	r3, r3, #16
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80084d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80084d4:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80084d8:	f023 0301 	bic.w	r3, r3, #1
 80084dc:	2b00      	cmp	r3, #0
 80084de:	bf14      	ite	ne
 80084e0:	2301      	movne	r3, #1
 80084e2:	2300      	moveq	r3, #0
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	461a      	mov	r2, r3
 80084e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80084ec:	3b18      	subs	r3, #24
 80084ee:	4611      	mov	r1, r2
 80084f0:	4618      	mov	r0, r3
 80084f2:	f7fd fa99 	bl	8005a28 <inc_lock>
 80084f6:	4602      	mov	r2, r0
 80084f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80084fc:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008504:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8008506:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800850a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800850e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008514:	2b00      	cmp	r3, #0
 8008516:	d105      	bne.n	8008524 <f_open+0x4f8>
 8008518:	2302      	movs	r3, #2
 800851a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800851e:	f102 0217 	add.w	r2, r2, #23
 8008522:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8008524:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008528:	f103 0317 	add.w	r3, r3, #23
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	f040 8088 	bne.w	8008644 <f_open+0x618>
			fp->flag = mode;					/* File access mode */
 8008534:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008538:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800853c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008540:	461a      	mov	r2, r3
 8008542:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008546:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800854a:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 800854c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008550:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008558:	2200      	movs	r2, #0
 800855a:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800855c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008560:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8008564:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008568:	f102 0210 	add.w	r2, r2, #16
 800856c:	6811      	ldr	r1, [r2, #0]
 800856e:	4618      	mov	r0, r3
 8008570:	f7fe fae9 	bl	8006b46 <ld_clust>
 8008574:	4602      	mov	r2, r0
 8008576:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800857a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800857e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008582:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8008584:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008588:	f103 0310 	add.w	r3, r3, #16
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	331f      	adds	r3, #31
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	061a      	lsls	r2, r3, #24
 8008594:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008598:	f103 0310 	add.w	r3, r3, #16
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	331e      	adds	r3, #30
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	041b      	lsls	r3, r3, #16
 80085a4:	4313      	orrs	r3, r2
 80085a6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80085aa:	f102 0210 	add.w	r2, r2, #16
 80085ae:	6812      	ldr	r2, [r2, #0]
 80085b0:	321d      	adds	r2, #29
 80085b2:	7812      	ldrb	r2, [r2, #0]
 80085b4:	0212      	lsls	r2, r2, #8
 80085b6:	4313      	orrs	r3, r2
 80085b8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80085bc:	f102 0210 	add.w	r2, r2, #16
 80085c0:	6812      	ldr	r2, [r2, #0]
 80085c2:	321c      	adds	r2, #28
 80085c4:	7812      	ldrb	r2, [r2, #0]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80085cc:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80085d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80085d4:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 80085d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80085da:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80085de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085e2:	461a      	mov	r2, r3
 80085e4:	2300      	movs	r3, #0
 80085e6:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 80085e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80085ec:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80085f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085f4:	461a      	mov	r2, r3
 80085f6:	2300      	movs	r3, #0
 80085f8:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80085fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80085fe:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008606:	461a      	mov	r2, r3
 8008608:	2300      	movs	r3, #0
 800860a:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800860c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008610:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8008614:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008618:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800861c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008620:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 8008622:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008626:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800862a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008634:	88da      	ldrh	r2, [r3, #6]
 8008636:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800863a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800863e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008642:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8008644:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008648:	f103 0317 	add.w	r3, r3, #23
 800864c:	781b      	ldrb	r3, [r3, #0]
}
 800864e:	4618      	mov	r0, r3
 8008650:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8008654:	3718      	adds	r7, #24
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop

0800865c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b08a      	sub	sp, #40	; 0x28
 8008660:	af00      	add	r7, sp, #0
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	607a      	str	r2, [r7, #4]
 8008668:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	2200      	movs	r2, #0
 8008672:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	f7ff fc53 	bl	8007f20 <validate>
 800867a:	4603      	mov	r3, r0
 800867c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800867e:	7dfb      	ldrb	r3, [r7, #23]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d001      	beq.n	8008688 <f_write+0x2c>
 8008684:	7dfb      	ldrb	r3, [r7, #23]
 8008686:	e21e      	b.n	8008ac6 <f_write+0x46a>
	if (fp->err)							/* Check error */
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800868e:	79db      	ldrb	r3, [r3, #7]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d004      	beq.n	800869e <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800869a:	79db      	ldrb	r3, [r3, #7]
 800869c:	e213      	b.n	8008ac6 <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086a4:	799b      	ldrb	r3, [r3, #6]
 80086a6:	f003 0302 	and.w	r3, r3, #2
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d101      	bne.n	80086b2 <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 80086ae:	2307      	movs	r3, #7
 80086b0:	e209      	b.n	8008ac6 <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086b8:	689a      	ldr	r2, [r3, #8]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	441a      	add	r2, r3
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	f080 81d9 	bcs.w	8008a7e <f_write+0x422>
 80086cc:	2300      	movs	r3, #0
 80086ce:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80086d0:	e1d5      	b.n	8008a7e <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	68fa      	ldr	r2, [r7, #12]
 80086dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80086e0:	6812      	ldr	r2, [r2, #0]
 80086e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80086e6:	8952      	ldrh	r2, [r2, #10]
 80086e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80086ec:	fb01 f202 	mul.w	r2, r1, r2
 80086f0:	1a9b      	subs	r3, r3, r2
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	f040 8169 	bne.w	80089ca <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	68fa      	ldr	r2, [r7, #12]
 8008702:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008706:	6812      	ldr	r2, [r2, #0]
 8008708:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800870c:	8952      	ldrh	r2, [r2, #10]
 800870e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008712:	b2da      	uxtb	r2, r3
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008720:	789b      	ldrb	r3, [r3, #2]
 8008722:	3b01      	subs	r3, #1
 8008724:	b2db      	uxtb	r3, r3
 8008726:	4013      	ands	r3, r2
 8008728:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800872a:	7dbb      	ldrb	r3, [r7, #22]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d15f      	bne.n	80087f0 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d111      	bne.n	8008760 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008742:	691b      	ldr	r3, [r3, #16]
 8008744:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8008746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008748:	2b00      	cmp	r3, #0
 800874a:	d126      	bne.n	800879a <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2100      	movs	r1, #0
 8008756:	4618      	mov	r0, r3
 8008758:	f7fd fea7 	bl	80064aa <create_chain>
 800875c:	6278      	str	r0, [r7, #36]	; 0x24
 800875e:	e01c      	b.n	800879a <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008768:	2b00      	cmp	r3, #0
 800876a:	d009      	beq.n	8008780 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	4619      	mov	r1, r3
 8008776:	68f8      	ldr	r0, [r7, #12]
 8008778:	f7fd ff3f 	bl	80065fa <clmt_clust>
 800877c:	6278      	str	r0, [r7, #36]	; 0x24
 800877e:	e00c      	b.n	800879a <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800878e:	695b      	ldr	r3, [r3, #20]
 8008790:	4619      	mov	r1, r3
 8008792:	4610      	mov	r0, r2
 8008794:	f7fd fe89 	bl	80064aa <create_chain>
 8008798:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800879a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879c:	2b00      	cmp	r3, #0
 800879e:	f000 8173 	beq.w	8008a88 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80087a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d106      	bne.n	80087b6 <f_write+0x15a>
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087ae:	2202      	movs	r2, #2
 80087b0:	71da      	strb	r2, [r3, #7]
 80087b2:	2302      	movs	r3, #2
 80087b4:	e187      	b.n	8008ac6 <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80087b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087bc:	d106      	bne.n	80087cc <f_write+0x170>
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087c4:	2201      	movs	r2, #1
 80087c6:	71da      	strb	r2, [r3, #7]
 80087c8:	2301      	movs	r3, #1
 80087ca:	e17c      	b.n	8008ac6 <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087d2:	461a      	mov	r2, r3
 80087d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d6:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087de:	691b      	ldr	r3, [r3, #16]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d105      	bne.n	80087f0 <f_write+0x194>
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087ea:	461a      	mov	r2, r3
 80087ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ee:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087f6:	799b      	ldrb	r3, [r3, #6]
 80087f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d023      	beq.n	8008848 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800880c:	7858      	ldrb	r0, [r3, #1]
 800880e:	68f9      	ldr	r1, [r7, #12]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008816:	699a      	ldr	r2, [r3, #24]
 8008818:	2301      	movs	r3, #1
 800881a:	f7fc ffbb 	bl	8005794 <disk_write>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d006      	beq.n	8008832 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800882a:	2201      	movs	r2, #1
 800882c:	71da      	strb	r2, [r3, #7]
 800882e:	2301      	movs	r3, #1
 8008830:	e149      	b.n	8008ac6 <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008838:	799b      	ldrb	r3, [r3, #6]
 800883a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800883e:	b2da      	uxtb	r2, r3
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008846:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008856:	695b      	ldr	r3, [r3, #20]
 8008858:	4619      	mov	r1, r3
 800885a:	4610      	mov	r0, r2
 800885c:	f7fd fb51 	bl	8005f02 <clust2sect>
 8008860:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d106      	bne.n	8008876 <f_write+0x21a>
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800886e:	2202      	movs	r2, #2
 8008870:	71da      	strb	r2, [r3, #7]
 8008872:	2302      	movs	r3, #2
 8008874:	e127      	b.n	8008ac6 <f_write+0x46a>
			sect += csect;
 8008876:	7dbb      	ldrb	r3, [r7, #22]
 8008878:	693a      	ldr	r2, [r7, #16]
 800887a:	4413      	add	r3, r2
 800887c:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800888a:	895b      	ldrh	r3, [r3, #10]
 800888c:	461a      	mov	r2, r3
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	fbb3 f3f2 	udiv	r3, r3, r2
 8008894:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008896:	69fb      	ldr	r3, [r7, #28]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d069      	beq.n	8008970 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800889c:	7dba      	ldrb	r2, [r7, #22]
 800889e:	69fb      	ldr	r3, [r7, #28]
 80088a0:	4413      	add	r3, r2
 80088a2:	68fa      	ldr	r2, [r7, #12]
 80088a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80088a8:	6812      	ldr	r2, [r2, #0]
 80088aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80088ae:	7892      	ldrb	r2, [r2, #2]
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d90a      	bls.n	80088ca <f_write+0x26e>
					cc = fp->fs->csize - csect;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088c0:	789b      	ldrb	r3, [r3, #2]
 80088c2:	461a      	mov	r2, r3
 80088c4:	7dbb      	ldrb	r3, [r7, #22]
 80088c6:	1ad3      	subs	r3, r2, r3
 80088c8:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088d6:	7858      	ldrb	r0, [r3, #1]
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	693a      	ldr	r2, [r7, #16]
 80088dc:	69b9      	ldr	r1, [r7, #24]
 80088de:	f7fc ff59 	bl	8005794 <disk_write>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d006      	beq.n	80088f6 <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088ee:	2201      	movs	r2, #1
 80088f0:	71da      	strb	r2, [r3, #7]
 80088f2:	2301      	movs	r3, #1
 80088f4:	e0e7      	b.n	8008ac6 <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088fc:	699a      	ldr	r2, [r3, #24]
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	1ad3      	subs	r3, r2, r3
 8008902:	69fa      	ldr	r2, [r7, #28]
 8008904:	429a      	cmp	r2, r3
 8008906:	d926      	bls.n	8008956 <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008910:	699a      	ldr	r2, [r3, #24]
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	1ad3      	subs	r3, r2, r3
 8008916:	68fa      	ldr	r2, [r7, #12]
 8008918:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800891c:	6812      	ldr	r2, [r2, #0]
 800891e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008922:	8952      	ldrh	r2, [r2, #10]
 8008924:	fb02 f303 	mul.w	r3, r2, r3
 8008928:	69ba      	ldr	r2, [r7, #24]
 800892a:	18d1      	adds	r1, r2, r3
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008938:	895b      	ldrh	r3, [r3, #10]
 800893a:	461a      	mov	r2, r3
 800893c:	f7fc ff68 	bl	8005810 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008946:	799b      	ldrb	r3, [r3, #6]
 8008948:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800894c:	b2da      	uxtb	r2, r3
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008954:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008962:	895b      	ldrh	r3, [r3, #10]
 8008964:	461a      	mov	r2, r3
 8008966:	69fb      	ldr	r3, [r7, #28]
 8008968:	fb02 f303 	mul.w	r3, r2, r3
 800896c:	623b      	str	r3, [r7, #32]
				continue;
 800896e:	e06e      	b.n	8008a4e <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008976:	699b      	ldr	r3, [r3, #24]
 8008978:	693a      	ldr	r2, [r7, #16]
 800897a:	429a      	cmp	r2, r3
 800897c:	d01f      	beq.n	80089be <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008984:	689a      	ldr	r2, [r3, #8]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	429a      	cmp	r2, r3
 8008990:	d215      	bcs.n	80089be <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800899e:	7858      	ldrb	r0, [r3, #1]
 80089a0:	68f9      	ldr	r1, [r7, #12]
 80089a2:	2301      	movs	r3, #1
 80089a4:	693a      	ldr	r2, [r7, #16]
 80089a6:	f7fc fed5 	bl	8005754 <disk_read>
 80089aa:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d006      	beq.n	80089be <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089b6:	2201      	movs	r2, #1
 80089b8:	71da      	strb	r2, [r3, #7]
 80089ba:	2301      	movs	r3, #1
 80089bc:	e083      	b.n	8008ac6 <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089c4:	461a      	mov	r2, r3
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089d6:	895b      	ldrh	r3, [r3, #10]
 80089d8:	4618      	mov	r0, r3
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80089e8:	6812      	ldr	r2, [r2, #0]
 80089ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80089ee:	8952      	ldrh	r2, [r2, #10]
 80089f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80089f4:	fb01 f202 	mul.w	r2, r1, r2
 80089f8:	1a9b      	subs	r3, r3, r2
 80089fa:	1ac3      	subs	r3, r0, r3
 80089fc:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 80089fe:	6a3a      	ldr	r2, [r7, #32]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d901      	bls.n	8008a0a <f_write+0x3ae>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	68fa      	ldr	r2, [r7, #12]
 8008a14:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008a18:	6812      	ldr	r2, [r2, #0]
 8008a1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008a1e:	8952      	ldrh	r2, [r2, #10]
 8008a20:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a24:	fb01 f202 	mul.w	r2, r1, r2
 8008a28:	1a9b      	subs	r3, r3, r2
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	6a3a      	ldr	r2, [r7, #32]
 8008a30:	69b9      	ldr	r1, [r7, #24]
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7fc feec 	bl	8005810 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a3e:	799b      	ldrb	r3, [r3, #6]
 8008a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a44:	b2da      	uxtb	r2, r3
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a4c:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8008a4e:	69ba      	ldr	r2, [r7, #24]
 8008a50:	6a3b      	ldr	r3, [r7, #32]
 8008a52:	4413      	add	r3, r2
 8008a54:	61bb      	str	r3, [r7, #24]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a5c:	689a      	ldr	r2, [r3, #8]
 8008a5e:	6a3b      	ldr	r3, [r7, #32]
 8008a60:	4413      	add	r3, r2
 8008a62:	68fa      	ldr	r2, [r7, #12]
 8008a64:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008a68:	6093      	str	r3, [r2, #8]
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	6a3b      	ldr	r3, [r7, #32]
 8008a70:	441a      	add	r2, r3
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	601a      	str	r2, [r3, #0]
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	6a3b      	ldr	r3, [r7, #32]
 8008a7a:	1ad3      	subs	r3, r2, r3
 8008a7c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f47f ae26 	bne.w	80086d2 <f_write+0x76>
 8008a86:	e000      	b.n	8008a8a <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008a88:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a90:	689a      	ldr	r2, [r3, #8]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d907      	bls.n	8008aae <f_write+0x452>
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	68fa      	ldr	r2, [r7, #12]
 8008aa8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008aac:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ab4:	799b      	ldrb	r3, [r3, #6]
 8008ab6:	f043 0320 	orr.w	r3, r3, #32
 8008aba:	b2da      	uxtb	r2, r3
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ac2:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3728      	adds	r7, #40	; 0x28
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b086      	sub	sp, #24
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f7ff fa22 	bl	8007f20 <validate>
 8008adc:	4603      	mov	r3, r0
 8008ade:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008ae0:	7dfb      	ldrb	r3, [r7, #23]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	f040 80bc 	bne.w	8008c60 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aee:	799b      	ldrb	r3, [r3, #6]
 8008af0:	f003 0320 	and.w	r3, r3, #32
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	f000 80b3 	beq.w	8008c60 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b00:	799b      	ldrb	r3, [r3, #6]
 8008b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d01e      	beq.n	8008b48 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b16:	7858      	ldrb	r0, [r3, #1]
 8008b18:	6879      	ldr	r1, [r7, #4]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b20:	699a      	ldr	r2, [r3, #24]
 8008b22:	2301      	movs	r3, #1
 8008b24:	f7fc fe36 	bl	8005794 <disk_write>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d001      	beq.n	8008b32 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e097      	b.n	8008c62 <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b38:	799b      	ldrb	r3, [r3, #6]
 8008b3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b3e:	b2da      	uxtb	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b46:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b56:	69db      	ldr	r3, [r3, #28]
 8008b58:	4619      	mov	r1, r3
 8008b5a:	4610      	mov	r0, r2
 8008b5c:	f7fd f8e0 	bl	8005d20 <move_window>
 8008b60:	4603      	mov	r3, r0
 8008b62:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8008b64:	7dfb      	ldrb	r3, [r7, #23]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d17a      	bne.n	8008c60 <f_sync+0x192>
				dir = fp->dir_ptr;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b70:	6a1b      	ldr	r3, [r3, #32]
 8008b72:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	330b      	adds	r3, #11
 8008b78:	781a      	ldrb	r2, [r3, #0]
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	330b      	adds	r3, #11
 8008b7e:	f042 0220 	orr.w	r2, r2, #32
 8008b82:	b2d2      	uxtb	r2, r2
 8008b84:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b8c:	68da      	ldr	r2, [r3, #12]
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	331c      	adds	r3, #28
 8008b92:	b2d2      	uxtb	r2, r2
 8008b94:	701a      	strb	r2, [r3, #0]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	0a1b      	lsrs	r3, r3, #8
 8008ba2:	b29a      	uxth	r2, r3
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	331d      	adds	r3, #29
 8008ba8:	b2d2      	uxtb	r2, r2
 8008baa:	701a      	strb	r2, [r3, #0]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bb2:	68db      	ldr	r3, [r3, #12]
 8008bb4:	0c1a      	lsrs	r2, r3, #16
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	331e      	adds	r3, #30
 8008bba:	b2d2      	uxtb	r2, r2
 8008bbc:	701a      	strb	r2, [r3, #0]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bc4:	68db      	ldr	r3, [r3, #12]
 8008bc6:	0e1a      	lsrs	r2, r3, #24
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	331f      	adds	r3, #31
 8008bcc:	b2d2      	uxtb	r2, r2
 8008bce:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	4619      	mov	r1, r3
 8008bda:	6938      	ldr	r0, [r7, #16]
 8008bdc:	f7fd ffe1 	bl	8006ba2 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8008be0:	f7fc fd1c 	bl	800561c <get_fattime>
 8008be4:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	3316      	adds	r3, #22
 8008bea:	68fa      	ldr	r2, [r7, #12]
 8008bec:	b2d2      	uxtb	r2, r2
 8008bee:	701a      	strb	r2, [r3, #0]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	0a1b      	lsrs	r3, r3, #8
 8008bf6:	b29a      	uxth	r2, r3
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	3317      	adds	r3, #23
 8008bfc:	b2d2      	uxtb	r2, r2
 8008bfe:	701a      	strb	r2, [r3, #0]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	0c1a      	lsrs	r2, r3, #16
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	3318      	adds	r3, #24
 8008c08:	b2d2      	uxtb	r2, r2
 8008c0a:	701a      	strb	r2, [r3, #0]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	0e1a      	lsrs	r2, r3, #24
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	3319      	adds	r3, #25
 8008c14:	b2d2      	uxtb	r2, r2
 8008c16:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	3312      	adds	r3, #18
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	701a      	strb	r2, [r3, #0]
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	3313      	adds	r3, #19
 8008c24:	2200      	movs	r2, #0
 8008c26:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c2e:	799b      	ldrb	r3, [r3, #6]
 8008c30:	f023 0320 	bic.w	r3, r3, #32
 8008c34:	b2da      	uxtb	r2, r3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c3c:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7fd f894 	bl	8005d84 <sync_fs>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8008c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3718      	adds	r7, #24
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b084      	sub	sp, #16
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f7ff ff2b 	bl	8008ace <f_sync>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008c7c:	7bfb      	ldrb	r3, [r7, #15]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d119      	bne.n	8008cb6 <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f7ff f94c 	bl	8007f20 <validate>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008c8c:	7bfb      	ldrb	r3, [r7, #15]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d111      	bne.n	8008cb6 <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7fc ff80 	bl	8005ba0 <dec_lock>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008ca4:	7bfb      	ldrb	r3, [r7, #15]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d105      	bne.n	8008cb6 <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3710      	adds	r7, #16
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b090      	sub	sp, #64	; 0x40
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f7ff f928 	bl	8007f20 <validate>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8008cd6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d002      	beq.n	8008ce4 <f_lseek+0x24>
 8008cde:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008ce2:	e2da      	b.n	800929a <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cea:	79db      	ldrb	r3, [r3, #7]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d004      	beq.n	8008cfa <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cf6:	79db      	ldrb	r3, [r3, #7]
 8008cf8:	e2cf      	b.n	800929a <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	f000 8124 	beq.w	8008f50 <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d0e:	d16c      	bne.n	8008dea <f_lseek+0x12a>
			tbl = fp->cltbl;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d18:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1c:	1d1a      	adds	r2, r3, #4
 8008d1e:	627a      	str	r2, [r7, #36]	; 0x24
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	617b      	str	r3, [r7, #20]
 8008d24:	2302      	movs	r3, #2
 8008d26:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d2e:	691b      	ldr	r3, [r3, #16]
 8008d30:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8008d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d046      	beq.n	8008dc6 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3a:	613b      	str	r3, [r7, #16]
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d42:	3302      	adds	r3, #2
 8008d44:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8008d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d48:	60fb      	str	r3, [r7, #12]
 8008d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7fd f8f5 	bl	8005f4a <get_fat>
 8008d60:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8008d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d806      	bhi.n	8008d76 <f_lseek+0xb6>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d6e:	2202      	movs	r2, #2
 8008d70:	71da      	strb	r2, [r3, #7]
 8008d72:	2302      	movs	r3, #2
 8008d74:	e291      	b.n	800929a <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d7c:	d106      	bne.n	8008d8c <f_lseek+0xcc>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d84:	2201      	movs	r2, #1
 8008d86:	71da      	strb	r2, [r3, #7]
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e286      	b.n	800929a <f_lseek+0x5da>
					} while (cl == pcl + 1);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d0d7      	beq.n	8008d46 <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008d96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d809      	bhi.n	8008db2 <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da0:	1d1a      	adds	r2, r3, #4
 8008da2:	627a      	str	r2, [r7, #36]	; 0x24
 8008da4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008da6:	601a      	str	r2, [r3, #0]
 8008da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008daa:	1d1a      	adds	r2, r3, #4
 8008dac:	627a      	str	r2, [r7, #36]	; 0x24
 8008dae:	693a      	ldr	r2, [r7, #16]
 8008db0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dbe:	695b      	ldr	r3, [r3, #20]
 8008dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d3b8      	bcc.n	8008d38 <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dd0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8008dd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d803      	bhi.n	8008de2 <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 8008dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ddc:	2200      	movs	r2, #0
 8008dde:	601a      	str	r2, [r3, #0]
 8008de0:	e259      	b.n	8009296 <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008de2:	2311      	movs	r3, #17
 8008de4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008de8:	e255      	b.n	8009296 <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	683a      	ldr	r2, [r7, #0]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d904      	bls.n	8008e02 <f_lseek+0x142>
				ofs = fp->fsize;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e08:	461a      	mov	r2, r3
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	6093      	str	r3, [r2, #8]
			if (ofs) {
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f000 8240 	beq.w	8009296 <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	3b01      	subs	r3, #1
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f7fd fbec 	bl	80065fa <clmt_clust>
 8008e22:	4602      	mov	r2, r0
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e2a:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e3a:	695b      	ldr	r3, [r3, #20]
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	4610      	mov	r0, r2
 8008e40:	f7fd f85f 	bl	8005f02 <clust2sect>
 8008e44:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d106      	bne.n	8008e5a <f_lseek+0x19a>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e52:	2202      	movs	r2, #2
 8008e54:	71da      	strb	r2, [r3, #7]
 8008e56:	2302      	movs	r3, #2
 8008e58:	e21f      	b.n	800929a <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008e64:	6812      	ldr	r2, [r2, #0]
 8008e66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008e6a:	8952      	ldrh	r2, [r2, #10]
 8008e6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008e76:	6812      	ldr	r2, [r2, #0]
 8008e78:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008e7c:	7892      	ldrb	r2, [r2, #2]
 8008e7e:	3a01      	subs	r2, #1
 8008e80:	4013      	ands	r3, r2
 8008e82:	69ba      	ldr	r2, [r7, #24]
 8008e84:	4413      	add	r3, r2
 8008e86:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008e96:	6812      	ldr	r2, [r2, #0]
 8008e98:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008e9c:	8952      	ldrh	r2, [r2, #10]
 8008e9e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ea2:	fb01 f202 	mul.w	r2, r1, r2
 8008ea6:	1a9b      	subs	r3, r3, r2
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	f000 81f4 	beq.w	8009296 <f_lseek+0x5d6>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008eb4:	699b      	ldr	r3, [r3, #24]
 8008eb6:	69ba      	ldr	r2, [r7, #24]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	f000 81ec 	beq.w	8009296 <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ec4:	799b      	ldrb	r3, [r3, #6]
 8008ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d023      	beq.n	8008f16 <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008eda:	7858      	ldrb	r0, [r3, #1]
 8008edc:	6879      	ldr	r1, [r7, #4]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ee4:	699a      	ldr	r2, [r3, #24]
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	f7fc fc54 	bl	8005794 <disk_write>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d006      	beq.n	8008f00 <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ef8:	2201      	movs	r2, #1
 8008efa:	71da      	strb	r2, [r3, #7]
 8008efc:	2301      	movs	r3, #1
 8008efe:	e1cc      	b.n	800929a <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f06:	799b      	ldrb	r3, [r3, #6]
 8008f08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f0c:	b2da      	uxtb	r2, r3
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f14:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f22:	7858      	ldrb	r0, [r3, #1]
 8008f24:	6879      	ldr	r1, [r7, #4]
 8008f26:	2301      	movs	r3, #1
 8008f28:	69ba      	ldr	r2, [r7, #24]
 8008f2a:	f7fc fc13 	bl	8005754 <disk_read>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d006      	beq.n	8008f42 <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	71da      	strb	r2, [r3, #7]
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e1ab      	b.n	800929a <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f48:	461a      	mov	r2, r3
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	6193      	str	r3, [r2, #24]
 8008f4e:	e1a2      	b.n	8009296 <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	683a      	ldr	r2, [r7, #0]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d90c      	bls.n	8008f78 <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f64:	799b      	ldrb	r3, [r3, #6]
 8008f66:	f003 0302 	and.w	r3, r3, #2
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d104      	bne.n	8008f78 <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008f82:	2300      	movs	r3, #0
 8008f84:	637b      	str	r3, [r7, #52]	; 0x34
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f90:	6093      	str	r3, [r2, #8]
		if (ofs) {
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	f000 8100 	beq.w	800919a <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fa6:	789b      	ldrb	r3, [r3, #2]
 8008fa8:	461a      	mov	r2, r3
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fb6:	895b      	ldrh	r3, [r3, #10]
 8008fb8:	fb02 f303 	mul.w	r3, r2, r3
 8008fbc:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008fbe:	6a3b      	ldr	r3, [r7, #32]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d021      	beq.n	8009008 <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	1e5a      	subs	r2, r3, #1
 8008fc8:	69fb      	ldr	r3, [r7, #28]
 8008fca:	fbb2 f2f3 	udiv	r2, r2, r3
 8008fce:	6a3b      	ldr	r3, [r7, #32]
 8008fd0:	1e59      	subs	r1, r3, #1
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d315      	bcc.n	8009008 <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8008fdc:	6a3b      	ldr	r3, [r7, #32]
 8008fde:	1e5a      	subs	r2, r3, #1
 8008fe0:	69fb      	ldr	r3, [r7, #28]
 8008fe2:	425b      	negs	r3, r3
 8008fe4:	4013      	ands	r3, r2
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008fec:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	683a      	ldr	r2, [r7, #0]
 8008ff8:	1ad3      	subs	r3, r2, r3
 8008ffa:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009002:	695b      	ldr	r3, [r3, #20]
 8009004:	63bb      	str	r3, [r7, #56]	; 0x38
 8009006:	e031      	b.n	800906c <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800900e:	691b      	ldr	r3, [r3, #16]
 8009010:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009014:	2b00      	cmp	r3, #0
 8009016:	d123      	bne.n	8009060 <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2100      	movs	r1, #0
 8009022:	4618      	mov	r0, r3
 8009024:	f7fd fa41 	bl	80064aa <create_chain>
 8009028:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800902a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902c:	2b01      	cmp	r3, #1
 800902e:	d106      	bne.n	800903e <f_lseek+0x37e>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009036:	2202      	movs	r2, #2
 8009038:	71da      	strb	r2, [r3, #7]
 800903a:	2302      	movs	r3, #2
 800903c:	e12d      	b.n	800929a <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800903e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009044:	d106      	bne.n	8009054 <f_lseek+0x394>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800904c:	2201      	movs	r2, #1
 800904e:	71da      	strb	r2, [r3, #7]
 8009050:	2301      	movs	r3, #1
 8009052:	e122      	b.n	800929a <f_lseek+0x5da>
					fp->sclust = clst;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800905a:	461a      	mov	r2, r3
 800905c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800905e:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009066:	461a      	mov	r2, r3
 8009068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906a:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 800906c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906e:	2b00      	cmp	r3, #0
 8009070:	f000 8093 	beq.w	800919a <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 8009074:	e052      	b.n	800911c <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800907c:	799b      	ldrb	r3, [r3, #6]
 800907e:	f003 0302 	and.w	r3, r3, #2
 8009082:	2b00      	cmp	r3, #0
 8009084:	d00e      	beq.n	80090a4 <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009090:	4618      	mov	r0, r3
 8009092:	f7fd fa0a 	bl	80064aa <create_chain>
 8009096:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8009098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909a:	2b00      	cmp	r3, #0
 800909c:	d10b      	bne.n	80090b6 <f_lseek+0x3f6>
							ofs = bcs; break;
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	603b      	str	r3, [r7, #0]
 80090a2:	e03f      	b.n	8009124 <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7fc ff4b 	bl	8005f4a <get_fat>
 80090b4:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80090b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090bc:	d106      	bne.n	80090cc <f_lseek+0x40c>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090c4:	2201      	movs	r2, #1
 80090c6:	71da      	strb	r2, [r3, #7]
 80090c8:	2301      	movs	r3, #1
 80090ca:	e0e6      	b.n	800929a <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 80090cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d909      	bls.n	80090e6 <f_lseek+0x426>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090de:	695b      	ldr	r3, [r3, #20]
 80090e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d306      	bcc.n	80090f4 <f_lseek+0x434>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090ec:	2202      	movs	r2, #2
 80090ee:	71da      	strb	r2, [r3, #7]
 80090f0:	2302      	movs	r3, #2
 80090f2:	e0d2      	b.n	800929a <f_lseek+0x5da>
					fp->clust = clst;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090fa:	461a      	mov	r2, r3
 80090fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fe:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009106:	689a      	ldr	r2, [r3, #8]
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	4413      	add	r3, r2
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009112:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 8009114:	683a      	ldr	r2, [r7, #0]
 8009116:	69fb      	ldr	r3, [r7, #28]
 8009118:	1ad3      	subs	r3, r2, r3
 800911a:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800911c:	683a      	ldr	r2, [r7, #0]
 800911e:	69fb      	ldr	r3, [r7, #28]
 8009120:	429a      	cmp	r2, r3
 8009122:	d8a8      	bhi.n	8009076 <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800912a:	689a      	ldr	r2, [r3, #8]
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	4413      	add	r3, r2
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009136:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009144:	895b      	ldrh	r3, [r3, #10]
 8009146:	461a      	mov	r2, r3
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	fbb3 f1f2 	udiv	r1, r3, r2
 800914e:	fb01 f202 	mul.w	r2, r1, r2
 8009152:	1a9b      	subs	r3, r3, r2
 8009154:	2b00      	cmp	r3, #0
 8009156:	d020      	beq.n	800919a <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009162:	4618      	mov	r0, r3
 8009164:	f7fc fecd 	bl	8005f02 <clust2sect>
 8009168:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800916a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800916c:	2b00      	cmp	r3, #0
 800916e:	d106      	bne.n	800917e <f_lseek+0x4be>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009176:	2202      	movs	r2, #2
 8009178:	71da      	strb	r2, [r3, #7]
 800917a:	2302      	movs	r3, #2
 800917c:	e08d      	b.n	800929a <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800918a:	895b      	ldrh	r3, [r3, #10]
 800918c:	461a      	mov	r2, r3
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	fbb3 f3f2 	udiv	r3, r3, r2
 8009194:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009196:	4413      	add	r3, r2
 8009198:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80091a8:	6812      	ldr	r2, [r2, #0]
 80091aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80091ae:	8952      	ldrh	r2, [r2, #10]
 80091b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80091b4:	fb01 f202 	mul.w	r2, r1, r2
 80091b8:	1a9b      	subs	r3, r3, r2
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d04e      	beq.n	800925c <f_lseek+0x59c>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091c4:	699b      	ldr	r3, [r3, #24]
 80091c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d047      	beq.n	800925c <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091d2:	799b      	ldrb	r3, [r3, #6]
 80091d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d023      	beq.n	8009224 <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091e8:	7858      	ldrb	r0, [r3, #1]
 80091ea:	6879      	ldr	r1, [r7, #4]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091f2:	699a      	ldr	r2, [r3, #24]
 80091f4:	2301      	movs	r3, #1
 80091f6:	f7fc facd 	bl	8005794 <disk_write>
 80091fa:	4603      	mov	r3, r0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d006      	beq.n	800920e <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009206:	2201      	movs	r2, #1
 8009208:	71da      	strb	r2, [r3, #7]
 800920a:	2301      	movs	r3, #1
 800920c:	e045      	b.n	800929a <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009214:	799b      	ldrb	r3, [r3, #6]
 8009216:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800921a:	b2da      	uxtb	r2, r3
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009222:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009230:	7858      	ldrb	r0, [r3, #1]
 8009232:	6879      	ldr	r1, [r7, #4]
 8009234:	2301      	movs	r3, #1
 8009236:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009238:	f7fc fa8c 	bl	8005754 <disk_read>
 800923c:	4603      	mov	r3, r0
 800923e:	2b00      	cmp	r3, #0
 8009240:	d006      	beq.n	8009250 <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009248:	2201      	movs	r2, #1
 800924a:	71da      	strb	r2, [r3, #7]
 800924c:	2301      	movs	r3, #1
 800924e:	e024      	b.n	800929a <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009256:	461a      	mov	r2, r3
 8009258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800925a:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009262:	689a      	ldr	r2, [r3, #8]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800926a:	68db      	ldr	r3, [r3, #12]
 800926c:	429a      	cmp	r2, r3
 800926e:	d912      	bls.n	8009296 <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800927e:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009286:	799b      	ldrb	r3, [r3, #6]
 8009288:	f043 0320 	orr.w	r3, r3, #32
 800928c:	b2da      	uxtb	r2, r3
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009294:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8009296:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800929a:	4618      	mov	r0, r3
 800929c:	3740      	adds	r7, #64	; 0x40
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}

080092a2 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b084      	sub	sp, #16
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
 80092aa:	460b      	mov	r3, r1
 80092ac:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 80092ae:	78fb      	ldrb	r3, [r7, #3]
 80092b0:	2b0a      	cmp	r3, #10
 80092b2:	d103      	bne.n	80092bc <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80092b4:	210d      	movs	r1, #13
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f7ff fff3 	bl	80092a2 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	db25      	blt.n	8009314 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	1c5a      	adds	r2, r3, #1
 80092cc:	60fa      	str	r2, [r7, #12]
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	4413      	add	r3, r2
 80092d2:	78fa      	ldrb	r2, [r7, #3]
 80092d4:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2b3c      	cmp	r3, #60	; 0x3c
 80092da:	dd12      	ble.n	8009302 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6818      	ldr	r0, [r3, #0]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f103 010c 	add.w	r1, r3, #12
 80092e6:	68fa      	ldr	r2, [r7, #12]
 80092e8:	f107 0308 	add.w	r3, r7, #8
 80092ec:	f7ff f9b6 	bl	800865c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80092f0:	68ba      	ldr	r2, [r7, #8]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d101      	bne.n	80092fc <putc_bfd+0x5a>
 80092f8:	2300      	movs	r3, #0
 80092fa:	e001      	b.n	8009300 <putc_bfd+0x5e>
 80092fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009300:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	68fa      	ldr	r2, [r7, #12]
 8009306:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	1c5a      	adds	r2, r3, #1
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	609a      	str	r2, [r3, #8]
 8009312:	e000      	b.n	8009316 <putc_bfd+0x74>
	if (i < 0) return;
 8009314:	bf00      	nop
}
 8009316:	3710      	adds	r7, #16
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800931c:	b590      	push	{r4, r7, lr}
 800931e:	b097      	sub	sp, #92	; 0x5c
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800932a:	2300      	movs	r3, #0
 800932c:	613b      	str	r3, [r7, #16]
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 8009332:	e009      	b.n	8009348 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	1c5a      	adds	r2, r3, #1
 8009338:	607a      	str	r2, [r7, #4]
 800933a:	781a      	ldrb	r2, [r3, #0]
 800933c:	f107 030c 	add.w	r3, r7, #12
 8009340:	4611      	mov	r1, r2
 8009342:	4618      	mov	r0, r3
 8009344:	f7ff ffad 	bl	80092a2 <putc_bfd>
	while (*str)			/* Put the string */
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d1f1      	bne.n	8009334 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	2b00      	cmp	r3, #0
 8009354:	db15      	blt.n	8009382 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8009356:	68f8      	ldr	r0, [r7, #12]
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	461c      	mov	r4, r3
 800935c:	f107 0208 	add.w	r2, r7, #8
 8009360:	f107 030c 	add.w	r3, r7, #12
 8009364:	f103 010c 	add.w	r1, r3, #12
 8009368:	4613      	mov	r3, r2
 800936a:	4622      	mov	r2, r4
 800936c:	f7ff f976 	bl	800865c <f_write>
 8009370:	4603      	mov	r3, r0
 8009372:	2b00      	cmp	r3, #0
 8009374:	d105      	bne.n	8009382 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	68ba      	ldr	r2, [r7, #8]
 800937a:	4293      	cmp	r3, r2
 800937c:	d101      	bne.n	8009382 <f_puts+0x66>
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	e001      	b.n	8009386 <f_puts+0x6a>
	return EOF;
 8009382:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009386:	4618      	mov	r0, r3
 8009388:	375c      	adds	r7, #92	; 0x5c
 800938a:	46bd      	mov	sp, r7
 800938c:	bd90      	pop	{r4, r7, pc}
	...

08009390 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009390:	b480      	push	{r7}
 8009392:	b087      	sub	sp, #28
 8009394:	af00      	add	r7, sp, #0
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	60b9      	str	r1, [r7, #8]
 800939a:	4613      	mov	r3, r2
 800939c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800939e:	2301      	movs	r3, #1
 80093a0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80093a2:	2300      	movs	r3, #0
 80093a4:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80093a6:	4b1e      	ldr	r3, [pc, #120]	; (8009420 <FATFS_LinkDriverEx+0x90>)
 80093a8:	7a5b      	ldrb	r3, [r3, #9]
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d831      	bhi.n	8009414 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80093b0:	4b1b      	ldr	r3, [pc, #108]	; (8009420 <FATFS_LinkDriverEx+0x90>)
 80093b2:	7a5b      	ldrb	r3, [r3, #9]
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	461a      	mov	r2, r3
 80093b8:	4b19      	ldr	r3, [pc, #100]	; (8009420 <FATFS_LinkDriverEx+0x90>)
 80093ba:	2100      	movs	r1, #0
 80093bc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80093be:	4b18      	ldr	r3, [pc, #96]	; (8009420 <FATFS_LinkDriverEx+0x90>)
 80093c0:	7a5b      	ldrb	r3, [r3, #9]
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	4a16      	ldr	r2, [pc, #88]	; (8009420 <FATFS_LinkDriverEx+0x90>)
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	4413      	add	r3, r2
 80093ca:	68fa      	ldr	r2, [r7, #12]
 80093cc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80093ce:	4b14      	ldr	r3, [pc, #80]	; (8009420 <FATFS_LinkDriverEx+0x90>)
 80093d0:	7a5b      	ldrb	r3, [r3, #9]
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	461a      	mov	r2, r3
 80093d6:	4b12      	ldr	r3, [pc, #72]	; (8009420 <FATFS_LinkDriverEx+0x90>)
 80093d8:	4413      	add	r3, r2
 80093da:	79fa      	ldrb	r2, [r7, #7]
 80093dc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80093de:	4b10      	ldr	r3, [pc, #64]	; (8009420 <FATFS_LinkDriverEx+0x90>)
 80093e0:	7a5b      	ldrb	r3, [r3, #9]
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	1c5a      	adds	r2, r3, #1
 80093e6:	b2d1      	uxtb	r1, r2
 80093e8:	4a0d      	ldr	r2, [pc, #52]	; (8009420 <FATFS_LinkDriverEx+0x90>)
 80093ea:	7251      	strb	r1, [r2, #9]
 80093ec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80093ee:	7dbb      	ldrb	r3, [r7, #22]
 80093f0:	3330      	adds	r3, #48	; 0x30
 80093f2:	b2da      	uxtb	r2, r3
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	3301      	adds	r3, #1
 80093fc:	223a      	movs	r2, #58	; 0x3a
 80093fe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	3302      	adds	r3, #2
 8009404:	222f      	movs	r2, #47	; 0x2f
 8009406:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	3303      	adds	r3, #3
 800940c:	2200      	movs	r2, #0
 800940e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009410:	2300      	movs	r3, #0
 8009412:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8009414:	7dfb      	ldrb	r3, [r7, #23]
}
 8009416:	4618      	mov	r0, r3
 8009418:	371c      	adds	r7, #28
 800941a:	46bd      	mov	sp, r7
 800941c:	bc80      	pop	{r7}
 800941e:	4770      	bx	lr
 8009420:	20002d2c 	.word	0x20002d2c

08009424 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800942e:	2200      	movs	r2, #0
 8009430:	6839      	ldr	r1, [r7, #0]
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f7ff ffac 	bl	8009390 <FATFS_LinkDriverEx>
 8009438:	4603      	mov	r3, r0
}
 800943a:	4618      	mov	r0, r3
 800943c:	3708      	adds	r7, #8
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
	...

08009444 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8009444:	b480      	push	{r7}
 8009446:	b085      	sub	sp, #20
 8009448:	af00      	add	r7, sp, #0
 800944a:	4603      	mov	r3, r0
 800944c:	6039      	str	r1, [r7, #0]
 800944e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009450:	88fb      	ldrh	r3, [r7, #6]
 8009452:	2b7f      	cmp	r3, #127	; 0x7f
 8009454:	d802      	bhi.n	800945c <ff_convert+0x18>
		c = chr;
 8009456:	88fb      	ldrh	r3, [r7, #6]
 8009458:	81fb      	strh	r3, [r7, #14]
 800945a:	e025      	b.n	80094a8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d00b      	beq.n	800947a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009462:	88fb      	ldrh	r3, [r7, #6]
 8009464:	2bff      	cmp	r3, #255	; 0xff
 8009466:	d805      	bhi.n	8009474 <ff_convert+0x30>
 8009468:	88fb      	ldrh	r3, [r7, #6]
 800946a:	3b80      	subs	r3, #128	; 0x80
 800946c:	4a11      	ldr	r2, [pc, #68]	; (80094b4 <ff_convert+0x70>)
 800946e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009472:	e000      	b.n	8009476 <ff_convert+0x32>
 8009474:	2300      	movs	r3, #0
 8009476:	81fb      	strh	r3, [r7, #14]
 8009478:	e016      	b.n	80094a8 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800947a:	2300      	movs	r3, #0
 800947c:	81fb      	strh	r3, [r7, #14]
 800947e:	e009      	b.n	8009494 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009480:	89fb      	ldrh	r3, [r7, #14]
 8009482:	4a0c      	ldr	r2, [pc, #48]	; (80094b4 <ff_convert+0x70>)
 8009484:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009488:	88fa      	ldrh	r2, [r7, #6]
 800948a:	429a      	cmp	r2, r3
 800948c:	d006      	beq.n	800949c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800948e:	89fb      	ldrh	r3, [r7, #14]
 8009490:	3301      	adds	r3, #1
 8009492:	81fb      	strh	r3, [r7, #14]
 8009494:	89fb      	ldrh	r3, [r7, #14]
 8009496:	2b7f      	cmp	r3, #127	; 0x7f
 8009498:	d9f2      	bls.n	8009480 <ff_convert+0x3c>
 800949a:	e000      	b.n	800949e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800949c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800949e:	89fb      	ldrh	r3, [r7, #14]
 80094a0:	3380      	adds	r3, #128	; 0x80
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80094a8:	89fb      	ldrh	r3, [r7, #14]
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3714      	adds	r7, #20
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bc80      	pop	{r7}
 80094b2:	4770      	bx	lr
 80094b4:	0800bf80 	.word	0x0800bf80

080094b8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b085      	sub	sp, #20
 80094bc:	af00      	add	r7, sp, #0
 80094be:	4603      	mov	r3, r0
 80094c0:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80094c2:	2300      	movs	r3, #0
 80094c4:	60fb      	str	r3, [r7, #12]
 80094c6:	e002      	b.n	80094ce <ff_wtoupper+0x16>
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	3301      	adds	r3, #1
 80094cc:	60fb      	str	r3, [r7, #12]
 80094ce:	4a0f      	ldr	r2, [pc, #60]	; (800950c <ff_wtoupper+0x54>)
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d006      	beq.n	80094e8 <ff_wtoupper+0x30>
 80094da:	4a0c      	ldr	r2, [pc, #48]	; (800950c <ff_wtoupper+0x54>)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094e2:	88fa      	ldrh	r2, [r7, #6]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d1ef      	bne.n	80094c8 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 80094e8:	4a08      	ldr	r2, [pc, #32]	; (800950c <ff_wtoupper+0x54>)
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d004      	beq.n	80094fe <ff_wtoupper+0x46>
 80094f4:	4a06      	ldr	r2, [pc, #24]	; (8009510 <ff_wtoupper+0x58>)
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094fc:	e000      	b.n	8009500 <ff_wtoupper+0x48>
 80094fe:	88fb      	ldrh	r3, [r7, #6]
}
 8009500:	4618      	mov	r0, r3
 8009502:	3714      	adds	r7, #20
 8009504:	46bd      	mov	sp, r7
 8009506:	bc80      	pop	{r7}
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	0800c080 	.word	0x0800c080
 8009510:	0800c260 	.word	0x0800c260

08009514 <__itoa>:
 8009514:	1e93      	subs	r3, r2, #2
 8009516:	2b22      	cmp	r3, #34	; 0x22
 8009518:	b510      	push	{r4, lr}
 800951a:	460c      	mov	r4, r1
 800951c:	d904      	bls.n	8009528 <__itoa+0x14>
 800951e:	2300      	movs	r3, #0
 8009520:	461c      	mov	r4, r3
 8009522:	700b      	strb	r3, [r1, #0]
 8009524:	4620      	mov	r0, r4
 8009526:	bd10      	pop	{r4, pc}
 8009528:	2a0a      	cmp	r2, #10
 800952a:	d109      	bne.n	8009540 <__itoa+0x2c>
 800952c:	2800      	cmp	r0, #0
 800952e:	da07      	bge.n	8009540 <__itoa+0x2c>
 8009530:	232d      	movs	r3, #45	; 0x2d
 8009532:	700b      	strb	r3, [r1, #0]
 8009534:	2101      	movs	r1, #1
 8009536:	4240      	negs	r0, r0
 8009538:	4421      	add	r1, r4
 800953a:	f000 f805 	bl	8009548 <__utoa>
 800953e:	e7f1      	b.n	8009524 <__itoa+0x10>
 8009540:	2100      	movs	r1, #0
 8009542:	e7f9      	b.n	8009538 <__itoa+0x24>

08009544 <itoa>:
 8009544:	f7ff bfe6 	b.w	8009514 <__itoa>

08009548 <__utoa>:
 8009548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800954a:	b08b      	sub	sp, #44	; 0x2c
 800954c:	4605      	mov	r5, r0
 800954e:	460b      	mov	r3, r1
 8009550:	466e      	mov	r6, sp
 8009552:	4c1d      	ldr	r4, [pc, #116]	; (80095c8 <__utoa+0x80>)
 8009554:	f104 0c20 	add.w	ip, r4, #32
 8009558:	4637      	mov	r7, r6
 800955a:	6820      	ldr	r0, [r4, #0]
 800955c:	6861      	ldr	r1, [r4, #4]
 800955e:	3408      	adds	r4, #8
 8009560:	c703      	stmia	r7!, {r0, r1}
 8009562:	4564      	cmp	r4, ip
 8009564:	463e      	mov	r6, r7
 8009566:	d1f7      	bne.n	8009558 <__utoa+0x10>
 8009568:	7921      	ldrb	r1, [r4, #4]
 800956a:	6820      	ldr	r0, [r4, #0]
 800956c:	7139      	strb	r1, [r7, #4]
 800956e:	1e91      	subs	r1, r2, #2
 8009570:	2922      	cmp	r1, #34	; 0x22
 8009572:	6038      	str	r0, [r7, #0]
 8009574:	f04f 0100 	mov.w	r1, #0
 8009578:	d904      	bls.n	8009584 <__utoa+0x3c>
 800957a:	7019      	strb	r1, [r3, #0]
 800957c:	460b      	mov	r3, r1
 800957e:	4618      	mov	r0, r3
 8009580:	b00b      	add	sp, #44	; 0x2c
 8009582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009584:	1e58      	subs	r0, r3, #1
 8009586:	4684      	mov	ip, r0
 8009588:	fbb5 f7f2 	udiv	r7, r5, r2
 800958c:	fb02 5617 	mls	r6, r2, r7, r5
 8009590:	3628      	adds	r6, #40	; 0x28
 8009592:	446e      	add	r6, sp
 8009594:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8009598:	460c      	mov	r4, r1
 800959a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800959e:	462e      	mov	r6, r5
 80095a0:	42b2      	cmp	r2, r6
 80095a2:	463d      	mov	r5, r7
 80095a4:	f101 0101 	add.w	r1, r1, #1
 80095a8:	d9ee      	bls.n	8009588 <__utoa+0x40>
 80095aa:	2200      	movs	r2, #0
 80095ac:	545a      	strb	r2, [r3, r1]
 80095ae:	1919      	adds	r1, r3, r4
 80095b0:	1aa5      	subs	r5, r4, r2
 80095b2:	42aa      	cmp	r2, r5
 80095b4:	dae3      	bge.n	800957e <__utoa+0x36>
 80095b6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80095ba:	780e      	ldrb	r6, [r1, #0]
 80095bc:	3201      	adds	r2, #1
 80095be:	7006      	strb	r6, [r0, #0]
 80095c0:	f801 5901 	strb.w	r5, [r1], #-1
 80095c4:	e7f4      	b.n	80095b0 <__utoa+0x68>
 80095c6:	bf00      	nop
 80095c8:	0800c440 	.word	0x0800c440

080095cc <memset>:
 80095cc:	4603      	mov	r3, r0
 80095ce:	4402      	add	r2, r0
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d100      	bne.n	80095d6 <memset+0xa>
 80095d4:	4770      	bx	lr
 80095d6:	f803 1b01 	strb.w	r1, [r3], #1
 80095da:	e7f9      	b.n	80095d0 <memset+0x4>

080095dc <__libc_init_array>:
 80095dc:	b570      	push	{r4, r5, r6, lr}
 80095de:	2600      	movs	r6, #0
 80095e0:	4d0c      	ldr	r5, [pc, #48]	; (8009614 <__libc_init_array+0x38>)
 80095e2:	4c0d      	ldr	r4, [pc, #52]	; (8009618 <__libc_init_array+0x3c>)
 80095e4:	1b64      	subs	r4, r4, r5
 80095e6:	10a4      	asrs	r4, r4, #2
 80095e8:	42a6      	cmp	r6, r4
 80095ea:	d109      	bne.n	8009600 <__libc_init_array+0x24>
 80095ec:	f000 f81a 	bl	8009624 <_init>
 80095f0:	2600      	movs	r6, #0
 80095f2:	4d0a      	ldr	r5, [pc, #40]	; (800961c <__libc_init_array+0x40>)
 80095f4:	4c0a      	ldr	r4, [pc, #40]	; (8009620 <__libc_init_array+0x44>)
 80095f6:	1b64      	subs	r4, r4, r5
 80095f8:	10a4      	asrs	r4, r4, #2
 80095fa:	42a6      	cmp	r6, r4
 80095fc:	d105      	bne.n	800960a <__libc_init_array+0x2e>
 80095fe:	bd70      	pop	{r4, r5, r6, pc}
 8009600:	f855 3b04 	ldr.w	r3, [r5], #4
 8009604:	4798      	blx	r3
 8009606:	3601      	adds	r6, #1
 8009608:	e7ee      	b.n	80095e8 <__libc_init_array+0xc>
 800960a:	f855 3b04 	ldr.w	r3, [r5], #4
 800960e:	4798      	blx	r3
 8009610:	3601      	adds	r6, #1
 8009612:	e7f2      	b.n	80095fa <__libc_init_array+0x1e>
 8009614:	0800c468 	.word	0x0800c468
 8009618:	0800c468 	.word	0x0800c468
 800961c:	0800c468 	.word	0x0800c468
 8009620:	0800c46c 	.word	0x0800c46c

08009624 <_init>:
 8009624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009626:	bf00      	nop
 8009628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800962a:	bc08      	pop	{r3}
 800962c:	469e      	mov	lr, r3
 800962e:	4770      	bx	lr

08009630 <_fini>:
 8009630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009632:	bf00      	nop
 8009634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009636:	bc08      	pop	{r3}
 8009638:	469e      	mov	lr, r3
 800963a:	4770      	bx	lr

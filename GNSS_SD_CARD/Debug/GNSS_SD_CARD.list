
GNSS_SD_CARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  080071b0  080071b0  000171b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007798  08007798  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08007798  08007798  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007798  08007798  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007798  08007798  00017798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800779c  0800779c  0001779c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080077a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002358  20000024  080077c4  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000237c  080077c4  0002237c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cf47  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000255d  00000000  00000000  0002cfd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c30  00000000  00000000  0002f538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000095f  00000000  00000000  00030168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017922  00000000  00000000  00030ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010df5  00000000  00000000  000483e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084bd9  00000000  00000000  000591de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000030dc  00000000  00000000  000dddb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000e0e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08007198 	.word	0x08007198

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08007198 	.word	0x08007198

0800014c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	2110      	movs	r1, #16
 8000154:	4803      	ldr	r0, [pc, #12]	; (8000164 <SELECT+0x18>)
 8000156:	f001 fad9 	bl	800170c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800015a:	2001      	movs	r0, #1
 800015c:	f000 ff6e 	bl	800103c <HAL_Delay>
}
 8000160:	bf00      	nop
 8000162:	bd80      	pop	{r7, pc}
 8000164:	40010800 	.word	0x40010800

08000168 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800016c:	2201      	movs	r2, #1
 800016e:	2110      	movs	r1, #16
 8000170:	4803      	ldr	r0, [pc, #12]	; (8000180 <DESELECT+0x18>)
 8000172:	f001 facb 	bl	800170c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000176:	2001      	movs	r0, #1
 8000178:	f000 ff60 	bl	800103c <HAL_Delay>
}
 800017c:	bf00      	nop
 800017e:	bd80      	pop	{r7, pc}
 8000180:	40010800 	.word	0x40010800

08000184 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800018e:	bf00      	nop
 8000190:	4b08      	ldr	r3, [pc, #32]	; (80001b4 <SPI_TxByte+0x30>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	689b      	ldr	r3, [r3, #8]
 8000196:	f003 0302 	and.w	r3, r3, #2
 800019a:	2b02      	cmp	r3, #2
 800019c:	d1f8      	bne.n	8000190 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800019e:	1df9      	adds	r1, r7, #7
 80001a0:	2364      	movs	r3, #100	; 0x64
 80001a2:	2201      	movs	r2, #1
 80001a4:	4803      	ldr	r0, [pc, #12]	; (80001b4 <SPI_TxByte+0x30>)
 80001a6:	f001 ff5d 	bl	8002064 <HAL_SPI_Transmit>
}
 80001aa:	bf00      	nop
 80001ac:	3708      	adds	r7, #8
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	bf00      	nop
 80001b4:	200020a4 	.word	0x200020a4

080001b8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
 80001c0:	460b      	mov	r3, r1
 80001c2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80001c4:	bf00      	nop
 80001c6:	4b08      	ldr	r3, [pc, #32]	; (80001e8 <SPI_TxBuffer+0x30>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	f003 0302 	and.w	r3, r3, #2
 80001d0:	2b02      	cmp	r3, #2
 80001d2:	d1f8      	bne.n	80001c6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80001d4:	887a      	ldrh	r2, [r7, #2]
 80001d6:	2364      	movs	r3, #100	; 0x64
 80001d8:	6879      	ldr	r1, [r7, #4]
 80001da:	4803      	ldr	r0, [pc, #12]	; (80001e8 <SPI_TxBuffer+0x30>)
 80001dc:	f001 ff42 	bl	8002064 <HAL_SPI_Transmit>
}
 80001e0:	bf00      	nop
 80001e2:	3708      	adds	r7, #8
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	200020a4 	.word	0x200020a4

080001ec <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b084      	sub	sp, #16
 80001f0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80001f2:	23ff      	movs	r3, #255	; 0xff
 80001f4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80001f6:	bf00      	nop
 80001f8:	4b09      	ldr	r3, [pc, #36]	; (8000220 <SPI_RxByte+0x34>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	689b      	ldr	r3, [r3, #8]
 80001fe:	f003 0302 	and.w	r3, r3, #2
 8000202:	2b02      	cmp	r3, #2
 8000204:	d1f8      	bne.n	80001f8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000206:	1dba      	adds	r2, r7, #6
 8000208:	1df9      	adds	r1, r7, #7
 800020a:	2364      	movs	r3, #100	; 0x64
 800020c:	9300      	str	r3, [sp, #0]
 800020e:	2301      	movs	r3, #1
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <SPI_RxByte+0x34>)
 8000212:	f002 f86b 	bl	80022ec <HAL_SPI_TransmitReceive>

	return data;
 8000216:	79bb      	ldrb	r3, [r7, #6]
}
 8000218:	4618      	mov	r0, r3
 800021a:	3708      	adds	r7, #8
 800021c:	46bd      	mov	sp, r7
 800021e:	bd80      	pop	{r7, pc}
 8000220:	200020a4 	.word	0x200020a4

08000224 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800022c:	f7ff ffde 	bl	80001ec <SPI_RxByte>
 8000230:	4603      	mov	r3, r0
 8000232:	461a      	mov	r2, r3
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	701a      	strb	r2, [r3, #0]
}
 8000238:	bf00      	nop
 800023a:	3708      	adds	r7, #8
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}

08000240 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000246:	4b0a      	ldr	r3, [pc, #40]	; (8000270 <SD_ReadyWait+0x30>)
 8000248:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800024c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800024e:	f7ff ffcd 	bl	80001ec <SPI_RxByte>
 8000252:	4603      	mov	r3, r0
 8000254:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	2bff      	cmp	r3, #255	; 0xff
 800025a:	d003      	beq.n	8000264 <SD_ReadyWait+0x24>
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <SD_ReadyWait+0x30>)
 800025e:	881b      	ldrh	r3, [r3, #0]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d1f4      	bne.n	800024e <SD_ReadyWait+0xe>

	return res;
 8000264:	79fb      	ldrb	r3, [r7, #7]
}
 8000266:	4618      	mov	r0, r3
 8000268:	3708      	adds	r7, #8
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	20000042 	.word	0x20000042

08000274 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800027a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800027e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000280:	f7ff ff72 	bl	8000168 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000284:	2300      	movs	r3, #0
 8000286:	60bb      	str	r3, [r7, #8]
 8000288:	e005      	b.n	8000296 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800028a:	20ff      	movs	r0, #255	; 0xff
 800028c:	f7ff ff7a 	bl	8000184 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	3301      	adds	r3, #1
 8000294:	60bb      	str	r3, [r7, #8]
 8000296:	68bb      	ldr	r3, [r7, #8]
 8000298:	2b09      	cmp	r3, #9
 800029a:	ddf6      	ble.n	800028a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800029c:	f7ff ff56 	bl	800014c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80002a0:	2340      	movs	r3, #64	; 0x40
 80002a2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80002a4:	2300      	movs	r3, #0
 80002a6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80002a8:	2300      	movs	r3, #0
 80002aa:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80002ac:	2300      	movs	r3, #0
 80002ae:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80002b0:	2300      	movs	r3, #0
 80002b2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80002b4:	2395      	movs	r3, #149	; 0x95
 80002b6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80002b8:	463b      	mov	r3, r7
 80002ba:	2106      	movs	r1, #6
 80002bc:	4618      	mov	r0, r3
 80002be:	f7ff ff7b 	bl	80001b8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80002c2:	e002      	b.n	80002ca <SD_PowerOn+0x56>
	{
		cnt--;
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	3b01      	subs	r3, #1
 80002c8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80002ca:	f7ff ff8f 	bl	80001ec <SPI_RxByte>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b01      	cmp	r3, #1
 80002d2:	d002      	beq.n	80002da <SD_PowerOn+0x66>
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d1f4      	bne.n	80002c4 <SD_PowerOn+0x50>
	}

	DESELECT();
 80002da:	f7ff ff45 	bl	8000168 <DESELECT>
	SPI_TxByte(0XFF);
 80002de:	20ff      	movs	r0, #255	; 0xff
 80002e0:	f7ff ff50 	bl	8000184 <SPI_TxByte>

	PowerFlag = 1;
 80002e4:	4b03      	ldr	r3, [pc, #12]	; (80002f4 <SD_PowerOn+0x80>)
 80002e6:	2201      	movs	r2, #1
 80002e8:	701a      	strb	r2, [r3, #0]
}
 80002ea:	bf00      	nop
 80002ec:	3710      	adds	r7, #16
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	20000045 	.word	0x20000045

080002f8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80002fc:	4b03      	ldr	r3, [pc, #12]	; (800030c <SD_PowerOff+0x14>)
 80002fe:	2200      	movs	r2, #0
 8000300:	701a      	strb	r2, [r3, #0]
}
 8000302:	bf00      	nop
 8000304:	46bd      	mov	sp, r7
 8000306:	bc80      	pop	{r7}
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	20000045 	.word	0x20000045

08000310 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000314:	4b02      	ldr	r3, [pc, #8]	; (8000320 <SD_CheckPower+0x10>)
 8000316:	781b      	ldrb	r3, [r3, #0]
}
 8000318:	4618      	mov	r0, r3
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr
 8000320:	20000045 	.word	0x20000045

08000324 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800032e:	4b13      	ldr	r3, [pc, #76]	; (800037c <SD_RxDataBlock+0x58>)
 8000330:	22c8      	movs	r2, #200	; 0xc8
 8000332:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000334:	f7ff ff5a 	bl	80001ec <SPI_RxByte>
 8000338:	4603      	mov	r3, r0
 800033a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800033c:	7bfb      	ldrb	r3, [r7, #15]
 800033e:	2bff      	cmp	r3, #255	; 0xff
 8000340:	d103      	bne.n	800034a <SD_RxDataBlock+0x26>
 8000342:	4b0e      	ldr	r3, [pc, #56]	; (800037c <SD_RxDataBlock+0x58>)
 8000344:	881b      	ldrh	r3, [r3, #0]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d1f4      	bne.n	8000334 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800034a:	7bfb      	ldrb	r3, [r7, #15]
 800034c:	2bfe      	cmp	r3, #254	; 0xfe
 800034e:	d001      	beq.n	8000354 <SD_RxDataBlock+0x30>
 8000350:	2300      	movs	r3, #0
 8000352:	e00f      	b.n	8000374 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	1c5a      	adds	r2, r3, #1
 8000358:	607a      	str	r2, [r7, #4]
 800035a:	4618      	mov	r0, r3
 800035c:	f7ff ff62 	bl	8000224 <SPI_RxBytePtr>
	} while(len--);
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	1e5a      	subs	r2, r3, #1
 8000364:	603a      	str	r2, [r7, #0]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d1f4      	bne.n	8000354 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800036a:	f7ff ff3f 	bl	80001ec <SPI_RxByte>
	SPI_RxByte();
 800036e:	f7ff ff3d 	bl	80001ec <SPI_RxByte>

	return TRUE;
 8000372:	2301      	movs	r3, #1
}
 8000374:	4618      	mov	r0, r3
 8000376:	3710      	adds	r7, #16
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	20000040 	.word	0x20000040

08000380 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	460b      	mov	r3, r1
 800038a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800038c:	2300      	movs	r3, #0
 800038e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000390:	f7ff ff56 	bl	8000240 <SD_ReadyWait>
 8000394:	4603      	mov	r3, r0
 8000396:	2bff      	cmp	r3, #255	; 0xff
 8000398:	d001      	beq.n	800039e <SD_TxDataBlock+0x1e>
 800039a:	2300      	movs	r3, #0
 800039c:	e02f      	b.n	80003fe <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800039e:	78fb      	ldrb	r3, [r7, #3]
 80003a0:	4618      	mov	r0, r3
 80003a2:	f7ff feef 	bl	8000184 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80003a6:	78fb      	ldrb	r3, [r7, #3]
 80003a8:	2bfd      	cmp	r3, #253	; 0xfd
 80003aa:	d020      	beq.n	80003ee <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80003ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003b0:	6878      	ldr	r0, [r7, #4]
 80003b2:	f7ff ff01 	bl	80001b8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80003b6:	f7ff ff19 	bl	80001ec <SPI_RxByte>
		SPI_RxByte();
 80003ba:	f7ff ff17 	bl	80001ec <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80003be:	e00b      	b.n	80003d8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80003c0:	f7ff ff14 	bl	80001ec <SPI_RxByte>
 80003c4:	4603      	mov	r3, r0
 80003c6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80003c8:	7bfb      	ldrb	r3, [r7, #15]
 80003ca:	f003 031f 	and.w	r3, r3, #31
 80003ce:	2b05      	cmp	r3, #5
 80003d0:	d006      	beq.n	80003e0 <SD_TxDataBlock+0x60>
			i++;
 80003d2:	7bbb      	ldrb	r3, [r7, #14]
 80003d4:	3301      	adds	r3, #1
 80003d6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80003d8:	7bbb      	ldrb	r3, [r7, #14]
 80003da:	2b40      	cmp	r3, #64	; 0x40
 80003dc:	d9f0      	bls.n	80003c0 <SD_TxDataBlock+0x40>
 80003de:	e000      	b.n	80003e2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80003e0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80003e2:	bf00      	nop
 80003e4:	f7ff ff02 	bl	80001ec <SPI_RxByte>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d0fa      	beq.n	80003e4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80003ee:	7bfb      	ldrb	r3, [r7, #15]
 80003f0:	f003 031f 	and.w	r3, r3, #31
 80003f4:	2b05      	cmp	r3, #5
 80003f6:	d101      	bne.n	80003fc <SD_TxDataBlock+0x7c>
 80003f8:	2301      	movs	r3, #1
 80003fa:	e000      	b.n	80003fe <SD_TxDataBlock+0x7e>

	return FALSE;
 80003fc:	2300      	movs	r3, #0
}
 80003fe:	4618      	mov	r0, r3
 8000400:	3710      	adds	r7, #16
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}

08000406 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000406:	b580      	push	{r7, lr}
 8000408:	b084      	sub	sp, #16
 800040a:	af00      	add	r7, sp, #0
 800040c:	4603      	mov	r3, r0
 800040e:	6039      	str	r1, [r7, #0]
 8000410:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000412:	f7ff ff15 	bl	8000240 <SD_ReadyWait>
 8000416:	4603      	mov	r3, r0
 8000418:	2bff      	cmp	r3, #255	; 0xff
 800041a:	d001      	beq.n	8000420 <SD_SendCmd+0x1a>
 800041c:	23ff      	movs	r3, #255	; 0xff
 800041e:	e042      	b.n	80004a6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000420:	79fb      	ldrb	r3, [r7, #7]
 8000422:	4618      	mov	r0, r3
 8000424:	f7ff feae 	bl	8000184 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	0e1b      	lsrs	r3, r3, #24
 800042c:	b2db      	uxtb	r3, r3
 800042e:	4618      	mov	r0, r3
 8000430:	f7ff fea8 	bl	8000184 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	0c1b      	lsrs	r3, r3, #16
 8000438:	b2db      	uxtb	r3, r3
 800043a:	4618      	mov	r0, r3
 800043c:	f7ff fea2 	bl	8000184 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000440:	683b      	ldr	r3, [r7, #0]
 8000442:	0a1b      	lsrs	r3, r3, #8
 8000444:	b2db      	uxtb	r3, r3
 8000446:	4618      	mov	r0, r3
 8000448:	f7ff fe9c 	bl	8000184 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	b2db      	uxtb	r3, r3
 8000450:	4618      	mov	r0, r3
 8000452:	f7ff fe97 	bl	8000184 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000456:	79fb      	ldrb	r3, [r7, #7]
 8000458:	2b40      	cmp	r3, #64	; 0x40
 800045a:	d102      	bne.n	8000462 <SD_SendCmd+0x5c>
 800045c:	2395      	movs	r3, #149	; 0x95
 800045e:	73fb      	strb	r3, [r7, #15]
 8000460:	e007      	b.n	8000472 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000462:	79fb      	ldrb	r3, [r7, #7]
 8000464:	2b48      	cmp	r3, #72	; 0x48
 8000466:	d102      	bne.n	800046e <SD_SendCmd+0x68>
 8000468:	2387      	movs	r3, #135	; 0x87
 800046a:	73fb      	strb	r3, [r7, #15]
 800046c:	e001      	b.n	8000472 <SD_SendCmd+0x6c>
	else crc = 1;
 800046e:	2301      	movs	r3, #1
 8000470:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000472:	7bfb      	ldrb	r3, [r7, #15]
 8000474:	4618      	mov	r0, r3
 8000476:	f7ff fe85 	bl	8000184 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	2b4c      	cmp	r3, #76	; 0x4c
 800047e:	d101      	bne.n	8000484 <SD_SendCmd+0x7e>
 8000480:	f7ff feb4 	bl	80001ec <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000484:	230a      	movs	r3, #10
 8000486:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000488:	f7ff feb0 	bl	80001ec <SPI_RxByte>
 800048c:	4603      	mov	r3, r0
 800048e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000490:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000494:	2b00      	cmp	r3, #0
 8000496:	da05      	bge.n	80004a4 <SD_SendCmd+0x9e>
 8000498:	7bbb      	ldrb	r3, [r7, #14]
 800049a:	3b01      	subs	r3, #1
 800049c:	73bb      	strb	r3, [r7, #14]
 800049e:	7bbb      	ldrb	r3, [r7, #14]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d1f1      	bne.n	8000488 <SD_SendCmd+0x82>

	return res;
 80004a4:	7b7b      	ldrb	r3, [r7, #13]
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	3710      	adds	r7, #16
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
	...

080004b0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80004b0:	b590      	push	{r4, r7, lr}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <SD_disk_initialize+0x14>
 80004c0:	2301      	movs	r3, #1
 80004c2:	e0d1      	b.n	8000668 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80004c4:	4b6a      	ldr	r3, [pc, #424]	; (8000670 <SD_disk_initialize+0x1c0>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	f003 0302 	and.w	r3, r3, #2
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d003      	beq.n	80004da <SD_disk_initialize+0x2a>
 80004d2:	4b67      	ldr	r3, [pc, #412]	; (8000670 <SD_disk_initialize+0x1c0>)
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	e0c6      	b.n	8000668 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80004da:	f7ff fecb 	bl	8000274 <SD_PowerOn>

	/* slave select */
	SELECT();
 80004de:	f7ff fe35 	bl	800014c <SELECT>

	/* check disk type */
	type = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80004e6:	2100      	movs	r1, #0
 80004e8:	2040      	movs	r0, #64	; 0x40
 80004ea:	f7ff ff8c 	bl	8000406 <SD_SendCmd>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	f040 80a1 	bne.w	8000638 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80004f6:	4b5f      	ldr	r3, [pc, #380]	; (8000674 <SD_disk_initialize+0x1c4>)
 80004f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004fc:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80004fe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000502:	2048      	movs	r0, #72	; 0x48
 8000504:	f7ff ff7f 	bl	8000406 <SD_SendCmd>
 8000508:	4603      	mov	r3, r0
 800050a:	2b01      	cmp	r3, #1
 800050c:	d155      	bne.n	80005ba <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800050e:	2300      	movs	r3, #0
 8000510:	73fb      	strb	r3, [r7, #15]
 8000512:	e00c      	b.n	800052e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000514:	7bfc      	ldrb	r4, [r7, #15]
 8000516:	f7ff fe69 	bl	80001ec <SPI_RxByte>
 800051a:	4603      	mov	r3, r0
 800051c:	461a      	mov	r2, r3
 800051e:	f104 0310 	add.w	r3, r4, #16
 8000522:	443b      	add	r3, r7
 8000524:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000528:	7bfb      	ldrb	r3, [r7, #15]
 800052a:	3301      	adds	r3, #1
 800052c:	73fb      	strb	r3, [r7, #15]
 800052e:	7bfb      	ldrb	r3, [r7, #15]
 8000530:	2b03      	cmp	r3, #3
 8000532:	d9ef      	bls.n	8000514 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000534:	7abb      	ldrb	r3, [r7, #10]
 8000536:	2b01      	cmp	r3, #1
 8000538:	d17e      	bne.n	8000638 <SD_disk_initialize+0x188>
 800053a:	7afb      	ldrb	r3, [r7, #11]
 800053c:	2baa      	cmp	r3, #170	; 0xaa
 800053e:	d17b      	bne.n	8000638 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000540:	2100      	movs	r1, #0
 8000542:	2077      	movs	r0, #119	; 0x77
 8000544:	f7ff ff5f 	bl	8000406 <SD_SendCmd>
 8000548:	4603      	mov	r3, r0
 800054a:	2b01      	cmp	r3, #1
 800054c:	d807      	bhi.n	800055e <SD_disk_initialize+0xae>
 800054e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000552:	2069      	movs	r0, #105	; 0x69
 8000554:	f7ff ff57 	bl	8000406 <SD_SendCmd>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d004      	beq.n	8000568 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800055e:	4b45      	ldr	r3, [pc, #276]	; (8000674 <SD_disk_initialize+0x1c4>)
 8000560:	881b      	ldrh	r3, [r3, #0]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d1ec      	bne.n	8000540 <SD_disk_initialize+0x90>
 8000566:	e000      	b.n	800056a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000568:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800056a:	4b42      	ldr	r3, [pc, #264]	; (8000674 <SD_disk_initialize+0x1c4>)
 800056c:	881b      	ldrh	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d062      	beq.n	8000638 <SD_disk_initialize+0x188>
 8000572:	2100      	movs	r1, #0
 8000574:	207a      	movs	r0, #122	; 0x7a
 8000576:	f7ff ff46 	bl	8000406 <SD_SendCmd>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d15b      	bne.n	8000638 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000580:	2300      	movs	r3, #0
 8000582:	73fb      	strb	r3, [r7, #15]
 8000584:	e00c      	b.n	80005a0 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000586:	7bfc      	ldrb	r4, [r7, #15]
 8000588:	f7ff fe30 	bl	80001ec <SPI_RxByte>
 800058c:	4603      	mov	r3, r0
 800058e:	461a      	mov	r2, r3
 8000590:	f104 0310 	add.w	r3, r4, #16
 8000594:	443b      	add	r3, r7
 8000596:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800059a:	7bfb      	ldrb	r3, [r7, #15]
 800059c:	3301      	adds	r3, #1
 800059e:	73fb      	strb	r3, [r7, #15]
 80005a0:	7bfb      	ldrb	r3, [r7, #15]
 80005a2:	2b03      	cmp	r3, #3
 80005a4:	d9ef      	bls.n	8000586 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80005a6:	7a3b      	ldrb	r3, [r7, #8]
 80005a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SD_disk_initialize+0x104>
 80005b0:	230c      	movs	r3, #12
 80005b2:	e000      	b.n	80005b6 <SD_disk_initialize+0x106>
 80005b4:	2304      	movs	r3, #4
 80005b6:	73bb      	strb	r3, [r7, #14]
 80005b8:	e03e      	b.n	8000638 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80005ba:	2100      	movs	r1, #0
 80005bc:	2077      	movs	r0, #119	; 0x77
 80005be:	f7ff ff22 	bl	8000406 <SD_SendCmd>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d808      	bhi.n	80005da <SD_disk_initialize+0x12a>
 80005c8:	2100      	movs	r1, #0
 80005ca:	2069      	movs	r0, #105	; 0x69
 80005cc:	f7ff ff1b 	bl	8000406 <SD_SendCmd>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d801      	bhi.n	80005da <SD_disk_initialize+0x12a>
 80005d6:	2302      	movs	r3, #2
 80005d8:	e000      	b.n	80005dc <SD_disk_initialize+0x12c>
 80005da:	2301      	movs	r3, #1
 80005dc:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80005de:	7bbb      	ldrb	r3, [r7, #14]
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	d10e      	bne.n	8000602 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80005e4:	2100      	movs	r1, #0
 80005e6:	2077      	movs	r0, #119	; 0x77
 80005e8:	f7ff ff0d 	bl	8000406 <SD_SendCmd>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d80e      	bhi.n	8000610 <SD_disk_initialize+0x160>
 80005f2:	2100      	movs	r1, #0
 80005f4:	2069      	movs	r0, #105	; 0x69
 80005f6:	f7ff ff06 	bl	8000406 <SD_SendCmd>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d107      	bne.n	8000610 <SD_disk_initialize+0x160>
 8000600:	e00c      	b.n	800061c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000602:	2100      	movs	r1, #0
 8000604:	2041      	movs	r0, #65	; 0x41
 8000606:	f7ff fefe 	bl	8000406 <SD_SendCmd>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d004      	beq.n	800061a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <SD_disk_initialize+0x1c4>)
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d1e2      	bne.n	80005de <SD_disk_initialize+0x12e>
 8000618:	e000      	b.n	800061c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800061a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800061c:	4b15      	ldr	r3, [pc, #84]	; (8000674 <SD_disk_initialize+0x1c4>)
 800061e:	881b      	ldrh	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d007      	beq.n	8000634 <SD_disk_initialize+0x184>
 8000624:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000628:	2050      	movs	r0, #80	; 0x50
 800062a:	f7ff feec 	bl	8000406 <SD_SendCmd>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SD_disk_initialize+0x188>
 8000634:	2300      	movs	r3, #0
 8000636:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000638:	4a0f      	ldr	r2, [pc, #60]	; (8000678 <SD_disk_initialize+0x1c8>)
 800063a:	7bbb      	ldrb	r3, [r7, #14]
 800063c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800063e:	f7ff fd93 	bl	8000168 <DESELECT>
	SPI_RxByte();
 8000642:	f7ff fdd3 	bl	80001ec <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000646:	7bbb      	ldrb	r3, [r7, #14]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d008      	beq.n	800065e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <SD_disk_initialize+0x1c0>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	b2db      	uxtb	r3, r3
 8000652:	f023 0301 	bic.w	r3, r3, #1
 8000656:	b2da      	uxtb	r2, r3
 8000658:	4b05      	ldr	r3, [pc, #20]	; (8000670 <SD_disk_initialize+0x1c0>)
 800065a:	701a      	strb	r2, [r3, #0]
 800065c:	e001      	b.n	8000662 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800065e:	f7ff fe4b 	bl	80002f8 <SD_PowerOff>
	}

	return Stat;
 8000662:	4b03      	ldr	r3, [pc, #12]	; (8000670 <SD_disk_initialize+0x1c0>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	b2db      	uxtb	r3, r3
}
 8000668:	4618      	mov	r0, r3
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	bd90      	pop	{r4, r7, pc}
 8000670:	20000000 	.word	0x20000000
 8000674:	20000040 	.word	0x20000040
 8000678:	20000044 	.word	0x20000044

0800067c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SD_disk_status+0x14>
 800068c:	2301      	movs	r3, #1
 800068e:	e002      	b.n	8000696 <SD_disk_status+0x1a>
	return Stat;
 8000690:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <SD_disk_status+0x24>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	b2db      	uxtb	r3, r3
}
 8000696:	4618      	mov	r0, r3
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr
 80006a0:	20000000 	.word	0x20000000

080006a4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60b9      	str	r1, [r7, #8]
 80006ac:	607a      	str	r2, [r7, #4]
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	4603      	mov	r3, r0
 80006b2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d102      	bne.n	80006c0 <SD_disk_read+0x1c>
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d101      	bne.n	80006c4 <SD_disk_read+0x20>
 80006c0:	2304      	movs	r3, #4
 80006c2:	e051      	b.n	8000768 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80006c4:	4b2a      	ldr	r3, [pc, #168]	; (8000770 <SD_disk_read+0xcc>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SD_disk_read+0x32>
 80006d2:	2303      	movs	r3, #3
 80006d4:	e048      	b.n	8000768 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80006d6:	4b27      	ldr	r3, [pc, #156]	; (8000774 <SD_disk_read+0xd0>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	f003 0304 	and.w	r3, r3, #4
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d102      	bne.n	80006e8 <SD_disk_read+0x44>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	025b      	lsls	r3, r3, #9
 80006e6:	607b      	str	r3, [r7, #4]

	SELECT();
 80006e8:	f7ff fd30 	bl	800014c <SELECT>

	if (count == 1)
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d111      	bne.n	8000716 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80006f2:	6879      	ldr	r1, [r7, #4]
 80006f4:	2051      	movs	r0, #81	; 0x51
 80006f6:	f7ff fe86 	bl	8000406 <SD_SendCmd>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d129      	bne.n	8000754 <SD_disk_read+0xb0>
 8000700:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000704:	68b8      	ldr	r0, [r7, #8]
 8000706:	f7ff fe0d 	bl	8000324 <SD_RxDataBlock>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d021      	beq.n	8000754 <SD_disk_read+0xb0>
 8000710:	2300      	movs	r3, #0
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	e01e      	b.n	8000754 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000716:	6879      	ldr	r1, [r7, #4]
 8000718:	2052      	movs	r0, #82	; 0x52
 800071a:	f7ff fe74 	bl	8000406 <SD_SendCmd>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d117      	bne.n	8000754 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000724:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000728:	68b8      	ldr	r0, [r7, #8]
 800072a:	f7ff fdfb 	bl	8000324 <SD_RxDataBlock>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d00a      	beq.n	800074a <SD_disk_read+0xa6>
				buff += 512;
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800073a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	3b01      	subs	r3, #1
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d1ed      	bne.n	8000724 <SD_disk_read+0x80>
 8000748:	e000      	b.n	800074c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800074a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800074c:	2100      	movs	r1, #0
 800074e:	204c      	movs	r0, #76	; 0x4c
 8000750:	f7ff fe59 	bl	8000406 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000754:	f7ff fd08 	bl	8000168 <DESELECT>
	SPI_RxByte();
 8000758:	f7ff fd48 	bl	80001ec <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	bf14      	ite	ne
 8000762:	2301      	movne	r3, #1
 8000764:	2300      	moveq	r3, #0
 8000766:	b2db      	uxtb	r3, r3
}
 8000768:	4618      	mov	r0, r3
 800076a:	3710      	adds	r7, #16
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000000 	.word	0x20000000
 8000774:	20000044 	.word	0x20000044

08000778 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	60b9      	str	r1, [r7, #8]
 8000780:	607a      	str	r2, [r7, #4]
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	4603      	mov	r3, r0
 8000786:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000788:	7bfb      	ldrb	r3, [r7, #15]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d102      	bne.n	8000794 <SD_disk_write+0x1c>
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d101      	bne.n	8000798 <SD_disk_write+0x20>
 8000794:	2304      	movs	r3, #4
 8000796:	e06b      	b.n	8000870 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000798:	4b37      	ldr	r3, [pc, #220]	; (8000878 <SD_disk_write+0x100>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	b2db      	uxtb	r3, r3
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SD_disk_write+0x32>
 80007a6:	2303      	movs	r3, #3
 80007a8:	e062      	b.n	8000870 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80007aa:	4b33      	ldr	r3, [pc, #204]	; (8000878 <SD_disk_write+0x100>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	f003 0304 	and.w	r3, r3, #4
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SD_disk_write+0x44>
 80007b8:	2302      	movs	r3, #2
 80007ba:	e059      	b.n	8000870 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80007bc:	4b2f      	ldr	r3, [pc, #188]	; (800087c <SD_disk_write+0x104>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	f003 0304 	and.w	r3, r3, #4
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d102      	bne.n	80007ce <SD_disk_write+0x56>
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	025b      	lsls	r3, r3, #9
 80007cc:	607b      	str	r3, [r7, #4]

	SELECT();
 80007ce:	f7ff fcbd 	bl	800014c <SELECT>

	if (count == 1)
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d110      	bne.n	80007fa <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80007d8:	6879      	ldr	r1, [r7, #4]
 80007da:	2058      	movs	r0, #88	; 0x58
 80007dc:	f7ff fe13 	bl	8000406 <SD_SendCmd>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d13a      	bne.n	800085c <SD_disk_write+0xe4>
 80007e6:	21fe      	movs	r1, #254	; 0xfe
 80007e8:	68b8      	ldr	r0, [r7, #8]
 80007ea:	f7ff fdc9 	bl	8000380 <SD_TxDataBlock>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d033      	beq.n	800085c <SD_disk_write+0xe4>
			count = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	e030      	b.n	800085c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80007fa:	4b20      	ldr	r3, [pc, #128]	; (800087c <SD_disk_write+0x104>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	2b00      	cmp	r3, #0
 8000804:	d007      	beq.n	8000816 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000806:	2100      	movs	r1, #0
 8000808:	2077      	movs	r0, #119	; 0x77
 800080a:	f7ff fdfc 	bl	8000406 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800080e:	6839      	ldr	r1, [r7, #0]
 8000810:	2057      	movs	r0, #87	; 0x57
 8000812:	f7ff fdf8 	bl	8000406 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000816:	6879      	ldr	r1, [r7, #4]
 8000818:	2059      	movs	r0, #89	; 0x59
 800081a:	f7ff fdf4 	bl	8000406 <SD_SendCmd>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d11b      	bne.n	800085c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000824:	21fc      	movs	r1, #252	; 0xfc
 8000826:	68b8      	ldr	r0, [r7, #8]
 8000828:	f7ff fdaa 	bl	8000380 <SD_TxDataBlock>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d00a      	beq.n	8000848 <SD_disk_write+0xd0>
				buff += 512;
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000838:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	3b01      	subs	r3, #1
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d1ee      	bne.n	8000824 <SD_disk_write+0xac>
 8000846:	e000      	b.n	800084a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000848:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800084a:	21fd      	movs	r1, #253	; 0xfd
 800084c:	2000      	movs	r0, #0
 800084e:	f7ff fd97 	bl	8000380 <SD_TxDataBlock>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d101      	bne.n	800085c <SD_disk_write+0xe4>
			{
				count = 1;
 8000858:	2301      	movs	r3, #1
 800085a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800085c:	f7ff fc84 	bl	8000168 <DESELECT>
	SPI_RxByte();
 8000860:	f7ff fcc4 	bl	80001ec <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	bf14      	ite	ne
 800086a:	2301      	movne	r3, #1
 800086c:	2300      	moveq	r3, #0
 800086e:	b2db      	uxtb	r3, r3
}
 8000870:	4618      	mov	r0, r3
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000000 	.word	0x20000000
 800087c:	20000044 	.word	0x20000044

08000880 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000880:	b590      	push	{r4, r7, lr}
 8000882:	b08b      	sub	sp, #44	; 0x2c
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	603a      	str	r2, [r7, #0]
 800088a:	71fb      	strb	r3, [r7, #7]
 800088c:	460b      	mov	r3, r1
 800088e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SD_disk_ioctl+0x1e>
 800089a:	2304      	movs	r3, #4
 800089c:	e115      	b.n	8000aca <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800089e:	2301      	movs	r3, #1
 80008a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80008a4:	79bb      	ldrb	r3, [r7, #6]
 80008a6:	2b05      	cmp	r3, #5
 80008a8:	d124      	bne.n	80008f4 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80008aa:	6a3b      	ldr	r3, [r7, #32]
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b02      	cmp	r3, #2
 80008b0:	d012      	beq.n	80008d8 <SD_disk_ioctl+0x58>
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	dc1a      	bgt.n	80008ec <SD_disk_ioctl+0x6c>
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d002      	beq.n	80008c0 <SD_disk_ioctl+0x40>
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d006      	beq.n	80008cc <SD_disk_ioctl+0x4c>
 80008be:	e015      	b.n	80008ec <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80008c0:	f7ff fd1a 	bl	80002f8 <SD_PowerOff>
			res = RES_OK;
 80008c4:	2300      	movs	r3, #0
 80008c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80008ca:	e0fc      	b.n	8000ac6 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80008cc:	f7ff fcd2 	bl	8000274 <SD_PowerOn>
			res = RES_OK;
 80008d0:	2300      	movs	r3, #0
 80008d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80008d6:	e0f6      	b.n	8000ac6 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80008d8:	6a3b      	ldr	r3, [r7, #32]
 80008da:	1c5c      	adds	r4, r3, #1
 80008dc:	f7ff fd18 	bl	8000310 <SD_CheckPower>
 80008e0:	4603      	mov	r3, r0
 80008e2:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80008e4:	2300      	movs	r3, #0
 80008e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80008ea:	e0ec      	b.n	8000ac6 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80008ec:	2304      	movs	r3, #4
 80008ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80008f2:	e0e8      	b.n	8000ac6 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80008f4:	4b77      	ldr	r3, [pc, #476]	; (8000ad4 <SD_disk_ioctl+0x254>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SD_disk_ioctl+0x86>
 8000902:	2303      	movs	r3, #3
 8000904:	e0e1      	b.n	8000aca <SD_disk_ioctl+0x24a>

		SELECT();
 8000906:	f7ff fc21 	bl	800014c <SELECT>

		switch (ctrl)
 800090a:	79bb      	ldrb	r3, [r7, #6]
 800090c:	2b0d      	cmp	r3, #13
 800090e:	f200 80cb 	bhi.w	8000aa8 <SD_disk_ioctl+0x228>
 8000912:	a201      	add	r2, pc, #4	; (adr r2, 8000918 <SD_disk_ioctl+0x98>)
 8000914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000918:	08000a13 	.word	0x08000a13
 800091c:	08000951 	.word	0x08000951
 8000920:	08000a03 	.word	0x08000a03
 8000924:	08000aa9 	.word	0x08000aa9
 8000928:	08000aa9 	.word	0x08000aa9
 800092c:	08000aa9 	.word	0x08000aa9
 8000930:	08000aa9 	.word	0x08000aa9
 8000934:	08000aa9 	.word	0x08000aa9
 8000938:	08000aa9 	.word	0x08000aa9
 800093c:	08000aa9 	.word	0x08000aa9
 8000940:	08000aa9 	.word	0x08000aa9
 8000944:	08000a25 	.word	0x08000a25
 8000948:	08000a49 	.word	0x08000a49
 800094c:	08000a6d 	.word	0x08000a6d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000950:	2100      	movs	r1, #0
 8000952:	2049      	movs	r0, #73	; 0x49
 8000954:	f7ff fd57 	bl	8000406 <SD_SendCmd>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	f040 80a8 	bne.w	8000ab0 <SD_disk_ioctl+0x230>
 8000960:	f107 030c 	add.w	r3, r7, #12
 8000964:	2110      	movs	r1, #16
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff fcdc 	bl	8000324 <SD_RxDataBlock>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	f000 809e 	beq.w	8000ab0 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000974:	7b3b      	ldrb	r3, [r7, #12]
 8000976:	099b      	lsrs	r3, r3, #6
 8000978:	b2db      	uxtb	r3, r3
 800097a:	2b01      	cmp	r3, #1
 800097c:	d10e      	bne.n	800099c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800097e:	7d7b      	ldrb	r3, [r7, #21]
 8000980:	b29a      	uxth	r2, r3
 8000982:	7d3b      	ldrb	r3, [r7, #20]
 8000984:	b29b      	uxth	r3, r3
 8000986:	021b      	lsls	r3, r3, #8
 8000988:	b29b      	uxth	r3, r3
 800098a:	4413      	add	r3, r2
 800098c:	b29b      	uxth	r3, r3
 800098e:	3301      	adds	r3, #1
 8000990:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000992:	8bfb      	ldrh	r3, [r7, #30]
 8000994:	029a      	lsls	r2, r3, #10
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	e02e      	b.n	80009fa <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800099c:	7c7b      	ldrb	r3, [r7, #17]
 800099e:	f003 030f 	and.w	r3, r3, #15
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	7dbb      	ldrb	r3, [r7, #22]
 80009a6:	09db      	lsrs	r3, r3, #7
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	4413      	add	r3, r2
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	7d7b      	ldrb	r3, [r7, #21]
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	f003 0306 	and.w	r3, r3, #6
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	4413      	add	r3, r2
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	3302      	adds	r3, #2
 80009c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80009c4:	7d3b      	ldrb	r3, [r7, #20]
 80009c6:	099b      	lsrs	r3, r3, #6
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	7cfb      	ldrb	r3, [r7, #19]
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	4413      	add	r3, r2
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	7cbb      	ldrb	r3, [r7, #18]
 80009da:	029b      	lsls	r3, r3, #10
 80009dc:	b29b      	uxth	r3, r3
 80009de:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	4413      	add	r3, r2
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	3301      	adds	r3, #1
 80009ea:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80009ec:	8bfa      	ldrh	r2, [r7, #30]
 80009ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80009f2:	3b09      	subs	r3, #9
 80009f4:	409a      	lsls	r2, r3
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80009fa:	2300      	movs	r3, #0
 80009fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000a00:	e056      	b.n	8000ab0 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a08:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000a10:	e055      	b.n	8000abe <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000a12:	f7ff fc15 	bl	8000240 <SD_ReadyWait>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2bff      	cmp	r3, #255	; 0xff
 8000a1a:	d14b      	bne.n	8000ab4 <SD_disk_ioctl+0x234>
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000a22:	e047      	b.n	8000ab4 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000a24:	2100      	movs	r1, #0
 8000a26:	2049      	movs	r0, #73	; 0x49
 8000a28:	f7ff fced 	bl	8000406 <SD_SendCmd>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d142      	bne.n	8000ab8 <SD_disk_ioctl+0x238>
 8000a32:	2110      	movs	r1, #16
 8000a34:	6a38      	ldr	r0, [r7, #32]
 8000a36:	f7ff fc75 	bl	8000324 <SD_RxDataBlock>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d03b      	beq.n	8000ab8 <SD_disk_ioctl+0x238>
 8000a40:	2300      	movs	r3, #0
 8000a42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000a46:	e037      	b.n	8000ab8 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000a48:	2100      	movs	r1, #0
 8000a4a:	204a      	movs	r0, #74	; 0x4a
 8000a4c:	f7ff fcdb 	bl	8000406 <SD_SendCmd>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d132      	bne.n	8000abc <SD_disk_ioctl+0x23c>
 8000a56:	2110      	movs	r1, #16
 8000a58:	6a38      	ldr	r0, [r7, #32]
 8000a5a:	f7ff fc63 	bl	8000324 <SD_RxDataBlock>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d02b      	beq.n	8000abc <SD_disk_ioctl+0x23c>
 8000a64:	2300      	movs	r3, #0
 8000a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000a6a:	e027      	b.n	8000abc <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	207a      	movs	r0, #122	; 0x7a
 8000a70:	f7ff fcc9 	bl	8000406 <SD_SendCmd>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d116      	bne.n	8000aa8 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000a80:	e00b      	b.n	8000a9a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000a82:	6a3c      	ldr	r4, [r7, #32]
 8000a84:	1c63      	adds	r3, r4, #1
 8000a86:	623b      	str	r3, [r7, #32]
 8000a88:	f7ff fbb0 	bl	80001ec <SPI_RxByte>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000a90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a94:	3301      	adds	r3, #1
 8000a96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000a9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a9e:	2b03      	cmp	r3, #3
 8000aa0:	d9ef      	bls.n	8000a82 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000aa8:	2304      	movs	r3, #4
 8000aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000aae:	e006      	b.n	8000abe <SD_disk_ioctl+0x23e>
			break;
 8000ab0:	bf00      	nop
 8000ab2:	e004      	b.n	8000abe <SD_disk_ioctl+0x23e>
			break;
 8000ab4:	bf00      	nop
 8000ab6:	e002      	b.n	8000abe <SD_disk_ioctl+0x23e>
			break;
 8000ab8:	bf00      	nop
 8000aba:	e000      	b.n	8000abe <SD_disk_ioctl+0x23e>
			break;
 8000abc:	bf00      	nop
		}

		DESELECT();
 8000abe:	f7ff fb53 	bl	8000168 <DESELECT>
		SPI_RxByte();
 8000ac2:	f7ff fb93 	bl	80001ec <SPI_RxByte>
	}

	return res;
 8000ac6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	372c      	adds	r7, #44	; 0x2c
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd90      	pop	{r4, r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000000 	.word	0x20000000

08000ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000adc:	f000 fa4c 	bl	8000f78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae0:	f000 f830 	bl	8000b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae4:	f000 f8ca 	bl	8000c7c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ae8:	f000 f868 	bl	8000bbc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000aec:	f000 f89c 	bl	8000c28 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000af0:	f002 fb92 	bl	8003218 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 8000af4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000af8:	f000 faa0 	bl	800103c <HAL_Delay>
    f_mount(&fs, "", 0);
 8000afc:	2200      	movs	r2, #0
 8000afe:	490c      	ldr	r1, [pc, #48]	; (8000b30 <main+0x58>)
 8000b00:	480c      	ldr	r0, [pc, #48]	; (8000b34 <main+0x5c>)
 8000b02:	f005 f85f 	bl	8005bc4 <f_mount>
    f_open(&fil, "write.pdf", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8000b06:	2213      	movs	r2, #19
 8000b08:	490b      	ldr	r1, [pc, #44]	; (8000b38 <main+0x60>)
 8000b0a:	480c      	ldr	r0, [pc, #48]	; (8000b3c <main+0x64>)
 8000b0c:	f005 f8a4 	bl	8005c58 <f_open>
    f_lseek(&fil, fil.fsize);
 8000b10:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <main+0x64>)
 8000b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4808      	ldr	r0, [pc, #32]	; (8000b3c <main+0x64>)
 8000b1c:	f005 fee6 	bl	80068ec <f_lseek>
    f_puts("Hello from Nizar\n", &fil);
 8000b20:	4906      	ldr	r1, [pc, #24]	; (8000b3c <main+0x64>)
 8000b22:	4807      	ldr	r0, [pc, #28]	; (8000b40 <main+0x68>)
 8000b24:	f006 fa10 	bl	8006f48 <f_puts>
    f_close(&fil);
 8000b28:	4804      	ldr	r0, [pc, #16]	; (8000b3c <main+0x64>)
 8000b2a:	f005 feb4 	bl	8006896 <f_close>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <main+0x56>
 8000b30:	080071b0 	.word	0x080071b0
 8000b34:	20000048 	.word	0x20000048
 8000b38:	080071b4 	.word	0x080071b4
 8000b3c:	20001078 	.word	0x20001078
 8000b40:	080071c0 	.word	0x080071c0

08000b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b090      	sub	sp, #64	; 0x40
 8000b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4a:	f107 0318 	add.w	r3, r7, #24
 8000b4e:	2228      	movs	r2, #40	; 0x28
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f006 faf4 	bl	8007140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b66:	2302      	movs	r3, #2
 8000b68:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b6e:	2310      	movs	r3, #16
 8000b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b76:	f107 0318 	add.w	r3, r7, #24
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 fdde 	bl	800173c <HAL_RCC_OscConfig>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000b86:	f000 f8ab 	bl	8000ce0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8a:	230f      	movs	r3, #15
 8000b8c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f001 f84c 	bl	8001c40 <HAL_RCC_ClockConfig>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000bae:	f000 f897 	bl	8000ce0 <Error_Handler>
  }
}
 8000bb2:	bf00      	nop
 8000bb4:	3740      	adds	r7, #64	; 0x40
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bc0:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <MX_SPI1_Init+0x64>)
 8000bc2:	4a18      	ldr	r2, [pc, #96]	; (8000c24 <MX_SPI1_Init+0x68>)
 8000bc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bc6:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <MX_SPI1_Init+0x64>)
 8000bc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bcc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bce:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <MX_SPI1_Init+0x64>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bd4:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <MX_SPI1_Init+0x64>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bda:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <MX_SPI1_Init+0x64>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <MX_SPI1_Init+0x64>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000be6:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <MX_SPI1_Init+0x64>)
 8000be8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <MX_SPI1_Init+0x64>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <MX_SPI1_Init+0x64>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <MX_SPI1_Init+0x64>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c00:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <MX_SPI1_Init+0x64>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <MX_SPI1_Init+0x64>)
 8000c08:	220a      	movs	r2, #10
 8000c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c0c:	4804      	ldr	r0, [pc, #16]	; (8000c20 <MX_SPI1_Init+0x64>)
 8000c0e:	f001 f9a5 	bl	8001f5c <HAL_SPI_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c18:	f000 f862 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	200020a4 	.word	0x200020a4
 8000c24:	40013000 	.word	0x40013000

08000c28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_USART1_UART_Init+0x4c>)
 8000c2e:	4a12      	ldr	r2, [pc, #72]	; (8000c78 <MX_USART1_UART_Init+0x50>)
 8000c30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000c32:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <MX_USART1_UART_Init+0x4c>)
 8000c34:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <MX_USART1_UART_Init+0x4c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <MX_USART1_UART_Init+0x4c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <MX_USART1_UART_Init+0x4c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c4c:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <MX_USART1_UART_Init+0x4c>)
 8000c4e:	220c      	movs	r2, #12
 8000c50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <MX_USART1_UART_Init+0x4c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <MX_USART1_UART_Init+0x4c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c5e:	4805      	ldr	r0, [pc, #20]	; (8000c74 <MX_USART1_UART_Init+0x4c>)
 8000c60:	f001 fda7 	bl	80027b2 <HAL_UART_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c6a:	f000 f839 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200020fc 	.word	0x200020fc
 8000c78:	40013800 	.word	0x40013800

08000c7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c82:	f107 0308 	add.w	r3, r7, #8
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <MX_GPIO_Init+0x5c>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	4a10      	ldr	r2, [pc, #64]	; (8000cd8 <MX_GPIO_Init+0x5c>)
 8000c96:	f043 0304 	orr.w	r3, r3, #4
 8000c9a:	6193      	str	r3, [r2, #24]
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <MX_GPIO_Init+0x5c>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	f003 0304 	and.w	r3, r3, #4
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_PORT_GPIO_Port, SD_CS_PORT_Pin, GPIO_PIN_SET);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2110      	movs	r1, #16
 8000cac:	480b      	ldr	r0, [pc, #44]	; (8000cdc <MX_GPIO_Init+0x60>)
 8000cae:	f000 fd2d 	bl	800170c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_PORT_Pin */
  GPIO_InitStruct.Pin = SD_CS_PORT_Pin;
 8000cb2:	2310      	movs	r3, #16
 8000cb4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SD_CS_PORT_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	f107 0308 	add.w	r3, r7, #8
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4804      	ldr	r0, [pc, #16]	; (8000cdc <MX_GPIO_Init+0x60>)
 8000cca:	f000 fb9b 	bl	8001404 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cce:	bf00      	nop
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40010800 	.word	0x40010800

08000ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce4:	b672      	cpsid	i
}
 8000ce6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <Error_Handler+0x8>
	...

08000cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <HAL_MspInit+0x5c>)
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	4a14      	ldr	r2, [pc, #80]	; (8000d48 <HAL_MspInit+0x5c>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6193      	str	r3, [r2, #24]
 8000cfe:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <HAL_MspInit+0x5c>)
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <HAL_MspInit+0x5c>)
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	4a0e      	ldr	r2, [pc, #56]	; (8000d48 <HAL_MspInit+0x5c>)
 8000d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d14:	61d3      	str	r3, [r2, #28]
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <HAL_MspInit+0x5c>)
 8000d18:	69db      	ldr	r3, [r3, #28]
 8000d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <HAL_MspInit+0x60>)
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <HAL_MspInit+0x60>)
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40010000 	.word	0x40010000

08000d50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0310 	add.w	r3, r7, #16
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a1b      	ldr	r2, [pc, #108]	; (8000dd8 <HAL_SPI_MspInit+0x88>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d12f      	bne.n	8000dd0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d70:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <HAL_SPI_MspInit+0x8c>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	4a19      	ldr	r2, [pc, #100]	; (8000ddc <HAL_SPI_MspInit+0x8c>)
 8000d76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d7a:	6193      	str	r3, [r2, #24]
 8000d7c:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <HAL_SPI_MspInit+0x8c>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d88:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <HAL_SPI_MspInit+0x8c>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	4a13      	ldr	r2, [pc, #76]	; (8000ddc <HAL_SPI_MspInit+0x8c>)
 8000d8e:	f043 0304 	orr.w	r3, r3, #4
 8000d92:	6193      	str	r3, [r2, #24]
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <HAL_SPI_MspInit+0x8c>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	f003 0304 	and.w	r3, r3, #4
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000da0:	23a0      	movs	r3, #160	; 0xa0
 8000da2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000da8:	2303      	movs	r3, #3
 8000daa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	f107 0310 	add.w	r3, r7, #16
 8000db0:	4619      	mov	r1, r3
 8000db2:	480b      	ldr	r0, [pc, #44]	; (8000de0 <HAL_SPI_MspInit+0x90>)
 8000db4:	f000 fb26 	bl	8001404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000db8:	2340      	movs	r3, #64	; 0x40
 8000dba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4805      	ldr	r0, [pc, #20]	; (8000de0 <HAL_SPI_MspInit+0x90>)
 8000dcc:	f000 fb1a 	bl	8001404 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dd0:	bf00      	nop
 8000dd2:	3720      	adds	r7, #32
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40013000 	.word	0x40013000
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40010800 	.word	0x40010800

08000de4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 0310 	add.w	r3, r7, #16
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a20      	ldr	r2, [pc, #128]	; (8000e80 <HAL_UART_MspInit+0x9c>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d139      	bne.n	8000e78 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e04:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <HAL_UART_MspInit+0xa0>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	4a1e      	ldr	r2, [pc, #120]	; (8000e84 <HAL_UART_MspInit+0xa0>)
 8000e0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e0e:	6193      	str	r3, [r2, #24]
 8000e10:	4b1c      	ldr	r3, [pc, #112]	; (8000e84 <HAL_UART_MspInit+0xa0>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1c:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <HAL_UART_MspInit+0xa0>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	4a18      	ldr	r2, [pc, #96]	; (8000e84 <HAL_UART_MspInit+0xa0>)
 8000e22:	f043 0304 	orr.w	r3, r3, #4
 8000e26:	6193      	str	r3, [r2, #24]
 8000e28:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <HAL_UART_MspInit+0xa0>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	f003 0304 	and.w	r3, r3, #4
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f107 0310 	add.w	r3, r7, #16
 8000e46:	4619      	mov	r1, r3
 8000e48:	480f      	ldr	r0, [pc, #60]	; (8000e88 <HAL_UART_MspInit+0xa4>)
 8000e4a:	f000 fadb 	bl	8001404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5c:	f107 0310 	add.w	r3, r7, #16
 8000e60:	4619      	mov	r1, r3
 8000e62:	4809      	ldr	r0, [pc, #36]	; (8000e88 <HAL_UART_MspInit+0xa4>)
 8000e64:	f000 face 	bl	8001404 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	2025      	movs	r0, #37	; 0x25
 8000e6e:	f000 f9e0 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e72:	2025      	movs	r0, #37	; 0x25
 8000e74:	f000 f9f9 	bl	800126a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e78:	bf00      	nop
 8000e7a:	3720      	adds	r7, #32
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40013800 	.word	0x40013800
 8000e84:	40021000 	.word	0x40021000
 8000e88:	40010800 	.word	0x40010800

08000e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e90:	e7fe      	b.n	8000e90 <NMI_Handler+0x4>

08000e92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <HardFault_Handler+0x4>

08000e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <MemManage_Handler+0x4>

08000e9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <BusFault_Handler+0x4>

08000ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <UsageFault_Handler+0x4>

08000eaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr

08000eb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr

08000ec2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr
	...

08000ed0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <SysTick_Handler+0x34>)
 8000ed6:	881b      	ldrh	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d005      	beq.n	8000ee8 <SysTick_Handler+0x18>
		Timer1--;
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <SysTick_Handler+0x34>)
 8000ede:	881b      	ldrh	r3, [r3, #0]
 8000ee0:	3b01      	subs	r3, #1
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <SysTick_Handler+0x34>)
 8000ee6:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8000ee8:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <SysTick_Handler+0x38>)
 8000eea:	881b      	ldrh	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d005      	beq.n	8000efc <SysTick_Handler+0x2c>
		Timer2--;
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <SysTick_Handler+0x38>)
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	4b03      	ldr	r3, [pc, #12]	; (8000f08 <SysTick_Handler+0x38>)
 8000efa:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efc:	f000 f882 	bl	8001004 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000040 	.word	0x20000040
 8000f08:	20000042 	.word	0x20000042

08000f0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f10:	4802      	ldr	r0, [pc, #8]	; (8000f1c <USART1_IRQHandler+0x10>)
 8000f12:	f001 fc9f 	bl	8002854 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200020fc 	.word	0x200020fc

08000f20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f2c:	f7ff fff8 	bl	8000f20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f30:	480b      	ldr	r0, [pc, #44]	; (8000f60 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f32:	490c      	ldr	r1, [pc, #48]	; (8000f64 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f34:	4a0c      	ldr	r2, [pc, #48]	; (8000f68 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f38:	e002      	b.n	8000f40 <LoopCopyDataInit>

08000f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3e:	3304      	adds	r3, #4

08000f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f44:	d3f9      	bcc.n	8000f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f46:	4a09      	ldr	r2, [pc, #36]	; (8000f6c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f48:	4c09      	ldr	r4, [pc, #36]	; (8000f70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f4c:	e001      	b.n	8000f52 <LoopFillZerobss>

08000f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f50:	3204      	adds	r2, #4

08000f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f54:	d3fb      	bcc.n	8000f4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f56:	f006 f8fb 	bl	8007150 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f5a:	f7ff fdbd 	bl	8000ad8 <main>
  bx lr
 8000f5e:	4770      	bx	lr
  ldr r0, =_sdata
 8000f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f64:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000f68:	080077a0 	.word	0x080077a0
  ldr r2, =_sbss
 8000f6c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000f70:	2000237c 	.word	0x2000237c

08000f74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f74:	e7fe      	b.n	8000f74 <ADC1_2_IRQHandler>
	...

08000f78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <HAL_Init+0x28>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a07      	ldr	r2, [pc, #28]	; (8000fa0 <HAL_Init+0x28>)
 8000f82:	f043 0310 	orr.w	r3, r3, #16
 8000f86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f88:	2003      	movs	r0, #3
 8000f8a:	f000 f947 	bl	800121c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8e:	200f      	movs	r0, #15
 8000f90:	f000 f808 	bl	8000fa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f94:	f7ff feaa 	bl	8000cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40022000 	.word	0x40022000

08000fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <HAL_InitTick+0x54>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <HAL_InitTick+0x58>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 f95f 	bl	8001286 <HAL_SYSTICK_Config>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e00e      	b.n	8000ff0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b0f      	cmp	r3, #15
 8000fd6:	d80a      	bhi.n	8000fee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	f000 f927 	bl	8001232 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe4:	4a06      	ldr	r2, [pc, #24]	; (8001000 <HAL_InitTick+0x5c>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	e000      	b.n	8000ff0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000004 	.word	0x20000004
 8000ffc:	2000000c 	.word	0x2000000c
 8001000:	20000008 	.word	0x20000008

08001004 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <HAL_IncTick+0x1c>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	4b05      	ldr	r3, [pc, #20]	; (8001024 <HAL_IncTick+0x20>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4413      	add	r3, r2
 8001014:	4a03      	ldr	r2, [pc, #12]	; (8001024 <HAL_IncTick+0x20>)
 8001016:	6013      	str	r3, [r2, #0]
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr
 8001020:	2000000c 	.word	0x2000000c
 8001024:	20002144 	.word	0x20002144

08001028 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return uwTick;
 800102c:	4b02      	ldr	r3, [pc, #8]	; (8001038 <HAL_GetTick+0x10>)
 800102e:	681b      	ldr	r3, [r3, #0]
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	20002144 	.word	0x20002144

0800103c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001044:	f7ff fff0 	bl	8001028 <HAL_GetTick>
 8001048:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001054:	d005      	beq.n	8001062 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <HAL_Delay+0x44>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4413      	add	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001062:	bf00      	nop
 8001064:	f7ff ffe0 	bl	8001028 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	429a      	cmp	r2, r3
 8001072:	d8f7      	bhi.n	8001064 <HAL_Delay+0x28>
  {
  }
}
 8001074:	bf00      	nop
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2000000c 	.word	0x2000000c

08001084 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a0:	4013      	ands	r3, r2
 80010a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b6:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	60d3      	str	r3, [r2, #12]
}
 80010bc:	bf00      	nop
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <__NVIC_GetPriorityGrouping+0x18>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	0a1b      	lsrs	r3, r3, #8
 80010d6:	f003 0307 	and.w	r3, r3, #7
}
 80010da:	4618      	mov	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	db0b      	blt.n	8001112 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	f003 021f 	and.w	r2, r3, #31
 8001100:	4906      	ldr	r1, [pc, #24]	; (800111c <__NVIC_EnableIRQ+0x34>)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	095b      	lsrs	r3, r3, #5
 8001108:	2001      	movs	r0, #1
 800110a:	fa00 f202 	lsl.w	r2, r0, r2
 800110e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr
 800111c:	e000e100 	.word	0xe000e100

08001120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001130:	2b00      	cmp	r3, #0
 8001132:	db0a      	blt.n	800114a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	b2da      	uxtb	r2, r3
 8001138:	490c      	ldr	r1, [pc, #48]	; (800116c <__NVIC_SetPriority+0x4c>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	0112      	lsls	r2, r2, #4
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	440b      	add	r3, r1
 8001144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001148:	e00a      	b.n	8001160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4908      	ldr	r1, [pc, #32]	; (8001170 <__NVIC_SetPriority+0x50>)
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	3b04      	subs	r3, #4
 8001158:	0112      	lsls	r2, r2, #4
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	440b      	add	r3, r1
 800115e:	761a      	strb	r2, [r3, #24]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000e100 	.word	0xe000e100
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001174:	b480      	push	{r7}
 8001176:	b089      	sub	sp, #36	; 0x24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f1c3 0307 	rsb	r3, r3, #7
 800118e:	2b04      	cmp	r3, #4
 8001190:	bf28      	it	cs
 8001192:	2304      	movcs	r3, #4
 8001194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3304      	adds	r3, #4
 800119a:	2b06      	cmp	r3, #6
 800119c:	d902      	bls.n	80011a4 <NVIC_EncodePriority+0x30>
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3b03      	subs	r3, #3
 80011a2:	e000      	b.n	80011a6 <NVIC_EncodePriority+0x32>
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43da      	mvns	r2, r3
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	401a      	ands	r2, r3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011bc:	f04f 31ff 	mov.w	r1, #4294967295
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	43d9      	mvns	r1, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	4313      	orrs	r3, r2
         );
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3724      	adds	r7, #36	; 0x24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr

080011d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e8:	d301      	bcc.n	80011ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ea:	2301      	movs	r3, #1
 80011ec:	e00f      	b.n	800120e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ee:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <SysTick_Config+0x40>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f6:	210f      	movs	r1, #15
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295
 80011fc:	f7ff ff90 	bl	8001120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <SysTick_Config+0x40>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001206:	4b04      	ldr	r3, [pc, #16]	; (8001218 <SysTick_Config+0x40>)
 8001208:	2207      	movs	r2, #7
 800120a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	e000e010 	.word	0xe000e010

0800121c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff2d 	bl	8001084 <__NVIC_SetPriorityGrouping>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001232:	b580      	push	{r7, lr}
 8001234:	b086      	sub	sp, #24
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	60b9      	str	r1, [r7, #8]
 800123c:	607a      	str	r2, [r7, #4]
 800123e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001244:	f7ff ff42 	bl	80010cc <__NVIC_GetPriorityGrouping>
 8001248:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	68b9      	ldr	r1, [r7, #8]
 800124e:	6978      	ldr	r0, [r7, #20]
 8001250:	f7ff ff90 	bl	8001174 <NVIC_EncodePriority>
 8001254:	4602      	mov	r2, r0
 8001256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125a:	4611      	mov	r1, r2
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff5f 	bl	8001120 <__NVIC_SetPriority>
}
 8001262:	bf00      	nop
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	4603      	mov	r3, r0
 8001272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff35 	bl	80010e8 <__NVIC_EnableIRQ>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ffa2 	bl	80011d8 <SysTick_Config>
 8001294:	4603      	mov	r3, r0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800129e:	b480      	push	{r7}
 80012a0:	b085      	sub	sp, #20
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d008      	beq.n	80012c8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2204      	movs	r2, #4
 80012ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e020      	b.n	800130a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f022 020e 	bic.w	r2, r2, #14
 80012d6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 0201 	bic.w	r2, r2, #1
 80012e6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012f0:	2101      	movs	r1, #1
 80012f2:	fa01 f202 	lsl.w	r2, r1, r2
 80012f6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2201      	movs	r2, #1
 80012fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001308:	7bfb      	ldrb	r3, [r7, #15]
}
 800130a:	4618      	mov	r0, r3
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr

08001314 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800131c:	2300      	movs	r3, #0
 800131e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001326:	b2db      	uxtb	r3, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d005      	beq.n	8001338 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2204      	movs	r2, #4
 8001330:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	73fb      	strb	r3, [r7, #15]
 8001336:	e051      	b.n	80013dc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f022 020e 	bic.w	r2, r2, #14
 8001346:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0201 	bic.w	r2, r2, #1
 8001356:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a22      	ldr	r2, [pc, #136]	; (80013e8 <HAL_DMA_Abort_IT+0xd4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d029      	beq.n	80013b6 <HAL_DMA_Abort_IT+0xa2>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a21      	ldr	r2, [pc, #132]	; (80013ec <HAL_DMA_Abort_IT+0xd8>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d022      	beq.n	80013b2 <HAL_DMA_Abort_IT+0x9e>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a1f      	ldr	r2, [pc, #124]	; (80013f0 <HAL_DMA_Abort_IT+0xdc>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d01a      	beq.n	80013ac <HAL_DMA_Abort_IT+0x98>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a1e      	ldr	r2, [pc, #120]	; (80013f4 <HAL_DMA_Abort_IT+0xe0>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d012      	beq.n	80013a6 <HAL_DMA_Abort_IT+0x92>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a1c      	ldr	r2, [pc, #112]	; (80013f8 <HAL_DMA_Abort_IT+0xe4>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d00a      	beq.n	80013a0 <HAL_DMA_Abort_IT+0x8c>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a1b      	ldr	r2, [pc, #108]	; (80013fc <HAL_DMA_Abort_IT+0xe8>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d102      	bne.n	800139a <HAL_DMA_Abort_IT+0x86>
 8001394:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001398:	e00e      	b.n	80013b8 <HAL_DMA_Abort_IT+0xa4>
 800139a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800139e:	e00b      	b.n	80013b8 <HAL_DMA_Abort_IT+0xa4>
 80013a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013a4:	e008      	b.n	80013b8 <HAL_DMA_Abort_IT+0xa4>
 80013a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013aa:	e005      	b.n	80013b8 <HAL_DMA_Abort_IT+0xa4>
 80013ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b0:	e002      	b.n	80013b8 <HAL_DMA_Abort_IT+0xa4>
 80013b2:	2310      	movs	r3, #16
 80013b4:	e000      	b.n	80013b8 <HAL_DMA_Abort_IT+0xa4>
 80013b6:	2301      	movs	r3, #1
 80013b8:	4a11      	ldr	r2, [pc, #68]	; (8001400 <HAL_DMA_Abort_IT+0xec>)
 80013ba:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	4798      	blx	r3
    } 
  }
  return status;
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40020008 	.word	0x40020008
 80013ec:	4002001c 	.word	0x4002001c
 80013f0:	40020030 	.word	0x40020030
 80013f4:	40020044 	.word	0x40020044
 80013f8:	40020058 	.word	0x40020058
 80013fc:	4002006c 	.word	0x4002006c
 8001400:	40020000 	.word	0x40020000

08001404 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001404:	b480      	push	{r7}
 8001406:	b08b      	sub	sp, #44	; 0x2c
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800140e:	2300      	movs	r3, #0
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001412:	2300      	movs	r3, #0
 8001414:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001416:	e169      	b.n	80016ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001418:	2201      	movs	r2, #1
 800141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	69fa      	ldr	r2, [r7, #28]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	429a      	cmp	r2, r3
 8001432:	f040 8158 	bne.w	80016e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	4a9a      	ldr	r2, [pc, #616]	; (80016a4 <HAL_GPIO_Init+0x2a0>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d05e      	beq.n	80014fe <HAL_GPIO_Init+0xfa>
 8001440:	4a98      	ldr	r2, [pc, #608]	; (80016a4 <HAL_GPIO_Init+0x2a0>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d875      	bhi.n	8001532 <HAL_GPIO_Init+0x12e>
 8001446:	4a98      	ldr	r2, [pc, #608]	; (80016a8 <HAL_GPIO_Init+0x2a4>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d058      	beq.n	80014fe <HAL_GPIO_Init+0xfa>
 800144c:	4a96      	ldr	r2, [pc, #600]	; (80016a8 <HAL_GPIO_Init+0x2a4>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d86f      	bhi.n	8001532 <HAL_GPIO_Init+0x12e>
 8001452:	4a96      	ldr	r2, [pc, #600]	; (80016ac <HAL_GPIO_Init+0x2a8>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d052      	beq.n	80014fe <HAL_GPIO_Init+0xfa>
 8001458:	4a94      	ldr	r2, [pc, #592]	; (80016ac <HAL_GPIO_Init+0x2a8>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d869      	bhi.n	8001532 <HAL_GPIO_Init+0x12e>
 800145e:	4a94      	ldr	r2, [pc, #592]	; (80016b0 <HAL_GPIO_Init+0x2ac>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d04c      	beq.n	80014fe <HAL_GPIO_Init+0xfa>
 8001464:	4a92      	ldr	r2, [pc, #584]	; (80016b0 <HAL_GPIO_Init+0x2ac>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d863      	bhi.n	8001532 <HAL_GPIO_Init+0x12e>
 800146a:	4a92      	ldr	r2, [pc, #584]	; (80016b4 <HAL_GPIO_Init+0x2b0>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d046      	beq.n	80014fe <HAL_GPIO_Init+0xfa>
 8001470:	4a90      	ldr	r2, [pc, #576]	; (80016b4 <HAL_GPIO_Init+0x2b0>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d85d      	bhi.n	8001532 <HAL_GPIO_Init+0x12e>
 8001476:	2b12      	cmp	r3, #18
 8001478:	d82a      	bhi.n	80014d0 <HAL_GPIO_Init+0xcc>
 800147a:	2b12      	cmp	r3, #18
 800147c:	d859      	bhi.n	8001532 <HAL_GPIO_Init+0x12e>
 800147e:	a201      	add	r2, pc, #4	; (adr r2, 8001484 <HAL_GPIO_Init+0x80>)
 8001480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001484:	080014ff 	.word	0x080014ff
 8001488:	080014d9 	.word	0x080014d9
 800148c:	080014eb 	.word	0x080014eb
 8001490:	0800152d 	.word	0x0800152d
 8001494:	08001533 	.word	0x08001533
 8001498:	08001533 	.word	0x08001533
 800149c:	08001533 	.word	0x08001533
 80014a0:	08001533 	.word	0x08001533
 80014a4:	08001533 	.word	0x08001533
 80014a8:	08001533 	.word	0x08001533
 80014ac:	08001533 	.word	0x08001533
 80014b0:	08001533 	.word	0x08001533
 80014b4:	08001533 	.word	0x08001533
 80014b8:	08001533 	.word	0x08001533
 80014bc:	08001533 	.word	0x08001533
 80014c0:	08001533 	.word	0x08001533
 80014c4:	08001533 	.word	0x08001533
 80014c8:	080014e1 	.word	0x080014e1
 80014cc:	080014f5 	.word	0x080014f5
 80014d0:	4a79      	ldr	r2, [pc, #484]	; (80016b8 <HAL_GPIO_Init+0x2b4>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d013      	beq.n	80014fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014d6:	e02c      	b.n	8001532 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	623b      	str	r3, [r7, #32]
          break;
 80014de:	e029      	b.n	8001534 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	3304      	adds	r3, #4
 80014e6:	623b      	str	r3, [r7, #32]
          break;
 80014e8:	e024      	b.n	8001534 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	3308      	adds	r3, #8
 80014f0:	623b      	str	r3, [r7, #32]
          break;
 80014f2:	e01f      	b.n	8001534 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	330c      	adds	r3, #12
 80014fa:	623b      	str	r3, [r7, #32]
          break;
 80014fc:	e01a      	b.n	8001534 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d102      	bne.n	800150c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001506:	2304      	movs	r3, #4
 8001508:	623b      	str	r3, [r7, #32]
          break;
 800150a:	e013      	b.n	8001534 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d105      	bne.n	8001520 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001514:	2308      	movs	r3, #8
 8001516:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69fa      	ldr	r2, [r7, #28]
 800151c:	611a      	str	r2, [r3, #16]
          break;
 800151e:	e009      	b.n	8001534 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001520:	2308      	movs	r3, #8
 8001522:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69fa      	ldr	r2, [r7, #28]
 8001528:	615a      	str	r2, [r3, #20]
          break;
 800152a:	e003      	b.n	8001534 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800152c:	2300      	movs	r3, #0
 800152e:	623b      	str	r3, [r7, #32]
          break;
 8001530:	e000      	b.n	8001534 <HAL_GPIO_Init+0x130>
          break;
 8001532:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	2bff      	cmp	r3, #255	; 0xff
 8001538:	d801      	bhi.n	800153e <HAL_GPIO_Init+0x13a>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	e001      	b.n	8001542 <HAL_GPIO_Init+0x13e>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3304      	adds	r3, #4
 8001542:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	2bff      	cmp	r3, #255	; 0xff
 8001548:	d802      	bhi.n	8001550 <HAL_GPIO_Init+0x14c>
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	e002      	b.n	8001556 <HAL_GPIO_Init+0x152>
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	3b08      	subs	r3, #8
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	210f      	movs	r1, #15
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	fa01 f303 	lsl.w	r3, r1, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	401a      	ands	r2, r3
 8001568:	6a39      	ldr	r1, [r7, #32]
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	fa01 f303 	lsl.w	r3, r1, r3
 8001570:	431a      	orrs	r2, r3
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	f000 80b1 	beq.w	80016e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001584:	4b4d      	ldr	r3, [pc, #308]	; (80016bc <HAL_GPIO_Init+0x2b8>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	4a4c      	ldr	r2, [pc, #304]	; (80016bc <HAL_GPIO_Init+0x2b8>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6193      	str	r3, [r2, #24]
 8001590:	4b4a      	ldr	r3, [pc, #296]	; (80016bc <HAL_GPIO_Init+0x2b8>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800159c:	4a48      	ldr	r2, [pc, #288]	; (80016c0 <HAL_GPIO_Init+0x2bc>)
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	089b      	lsrs	r3, r3, #2
 80015a2:	3302      	adds	r3, #2
 80015a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	220f      	movs	r2, #15
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	4013      	ands	r3, r2
 80015be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a40      	ldr	r2, [pc, #256]	; (80016c4 <HAL_GPIO_Init+0x2c0>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d013      	beq.n	80015f0 <HAL_GPIO_Init+0x1ec>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a3f      	ldr	r2, [pc, #252]	; (80016c8 <HAL_GPIO_Init+0x2c4>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d00d      	beq.n	80015ec <HAL_GPIO_Init+0x1e8>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a3e      	ldr	r2, [pc, #248]	; (80016cc <HAL_GPIO_Init+0x2c8>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d007      	beq.n	80015e8 <HAL_GPIO_Init+0x1e4>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a3d      	ldr	r2, [pc, #244]	; (80016d0 <HAL_GPIO_Init+0x2cc>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d101      	bne.n	80015e4 <HAL_GPIO_Init+0x1e0>
 80015e0:	2303      	movs	r3, #3
 80015e2:	e006      	b.n	80015f2 <HAL_GPIO_Init+0x1ee>
 80015e4:	2304      	movs	r3, #4
 80015e6:	e004      	b.n	80015f2 <HAL_GPIO_Init+0x1ee>
 80015e8:	2302      	movs	r3, #2
 80015ea:	e002      	b.n	80015f2 <HAL_GPIO_Init+0x1ee>
 80015ec:	2301      	movs	r3, #1
 80015ee:	e000      	b.n	80015f2 <HAL_GPIO_Init+0x1ee>
 80015f0:	2300      	movs	r3, #0
 80015f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f4:	f002 0203 	and.w	r2, r2, #3
 80015f8:	0092      	lsls	r2, r2, #2
 80015fa:	4093      	lsls	r3, r2
 80015fc:	68fa      	ldr	r2, [r7, #12]
 80015fe:	4313      	orrs	r3, r2
 8001600:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001602:	492f      	ldr	r1, [pc, #188]	; (80016c0 <HAL_GPIO_Init+0x2bc>)
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	089b      	lsrs	r3, r3, #2
 8001608:	3302      	adds	r3, #2
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d006      	beq.n	800162a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800161c:	4b2d      	ldr	r3, [pc, #180]	; (80016d4 <HAL_GPIO_Init+0x2d0>)
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	492c      	ldr	r1, [pc, #176]	; (80016d4 <HAL_GPIO_Init+0x2d0>)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	4313      	orrs	r3, r2
 8001626:	608b      	str	r3, [r1, #8]
 8001628:	e006      	b.n	8001638 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800162a:	4b2a      	ldr	r3, [pc, #168]	; (80016d4 <HAL_GPIO_Init+0x2d0>)
 800162c:	689a      	ldr	r2, [r3, #8]
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	43db      	mvns	r3, r3
 8001632:	4928      	ldr	r1, [pc, #160]	; (80016d4 <HAL_GPIO_Init+0x2d0>)
 8001634:	4013      	ands	r3, r2
 8001636:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d006      	beq.n	8001652 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001644:	4b23      	ldr	r3, [pc, #140]	; (80016d4 <HAL_GPIO_Init+0x2d0>)
 8001646:	68da      	ldr	r2, [r3, #12]
 8001648:	4922      	ldr	r1, [pc, #136]	; (80016d4 <HAL_GPIO_Init+0x2d0>)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	60cb      	str	r3, [r1, #12]
 8001650:	e006      	b.n	8001660 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001652:	4b20      	ldr	r3, [pc, #128]	; (80016d4 <HAL_GPIO_Init+0x2d0>)
 8001654:	68da      	ldr	r2, [r3, #12]
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	43db      	mvns	r3, r3
 800165a:	491e      	ldr	r1, [pc, #120]	; (80016d4 <HAL_GPIO_Init+0x2d0>)
 800165c:	4013      	ands	r3, r2
 800165e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d006      	beq.n	800167a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800166c:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <HAL_GPIO_Init+0x2d0>)
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	4918      	ldr	r1, [pc, #96]	; (80016d4 <HAL_GPIO_Init+0x2d0>)
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	4313      	orrs	r3, r2
 8001676:	604b      	str	r3, [r1, #4]
 8001678:	e006      	b.n	8001688 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800167a:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <HAL_GPIO_Init+0x2d0>)
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	43db      	mvns	r3, r3
 8001682:	4914      	ldr	r1, [pc, #80]	; (80016d4 <HAL_GPIO_Init+0x2d0>)
 8001684:	4013      	ands	r3, r2
 8001686:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d021      	beq.n	80016d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <HAL_GPIO_Init+0x2d0>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	490e      	ldr	r1, [pc, #56]	; (80016d4 <HAL_GPIO_Init+0x2d0>)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	4313      	orrs	r3, r2
 800169e:	600b      	str	r3, [r1, #0]
 80016a0:	e021      	b.n	80016e6 <HAL_GPIO_Init+0x2e2>
 80016a2:	bf00      	nop
 80016a4:	10320000 	.word	0x10320000
 80016a8:	10310000 	.word	0x10310000
 80016ac:	10220000 	.word	0x10220000
 80016b0:	10210000 	.word	0x10210000
 80016b4:	10120000 	.word	0x10120000
 80016b8:	10110000 	.word	0x10110000
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40010000 	.word	0x40010000
 80016c4:	40010800 	.word	0x40010800
 80016c8:	40010c00 	.word	0x40010c00
 80016cc:	40011000 	.word	0x40011000
 80016d0:	40011400 	.word	0x40011400
 80016d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016d8:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <HAL_GPIO_Init+0x304>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	43db      	mvns	r3, r3
 80016e0:	4909      	ldr	r1, [pc, #36]	; (8001708 <HAL_GPIO_Init+0x304>)
 80016e2:	4013      	ands	r3, r2
 80016e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e8:	3301      	adds	r3, #1
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	fa22 f303 	lsr.w	r3, r2, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f47f ae8e 	bne.w	8001418 <HAL_GPIO_Init+0x14>
  }
}
 80016fc:	bf00      	nop
 80016fe:	bf00      	nop
 8001700:	372c      	adds	r7, #44	; 0x2c
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr
 8001708:	40010400 	.word	0x40010400

0800170c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	460b      	mov	r3, r1
 8001716:	807b      	strh	r3, [r7, #2]
 8001718:	4613      	mov	r3, r2
 800171a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800171c:	787b      	ldrb	r3, [r7, #1]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001722:	887a      	ldrh	r2, [r7, #2]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001728:	e003      	b.n	8001732 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800172a:	887b      	ldrh	r3, [r7, #2]
 800172c:	041a      	lsls	r2, r3, #16
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	611a      	str	r2, [r3, #16]
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr

0800173c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e272      	b.n	8001c34 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	f000 8087 	beq.w	800186a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800175c:	4b92      	ldr	r3, [pc, #584]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 030c 	and.w	r3, r3, #12
 8001764:	2b04      	cmp	r3, #4
 8001766:	d00c      	beq.n	8001782 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001768:	4b8f      	ldr	r3, [pc, #572]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 030c 	and.w	r3, r3, #12
 8001770:	2b08      	cmp	r3, #8
 8001772:	d112      	bne.n	800179a <HAL_RCC_OscConfig+0x5e>
 8001774:	4b8c      	ldr	r3, [pc, #560]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800177c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001780:	d10b      	bne.n	800179a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001782:	4b89      	ldr	r3, [pc, #548]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d06c      	beq.n	8001868 <HAL_RCC_OscConfig+0x12c>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d168      	bne.n	8001868 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e24c      	b.n	8001c34 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017a2:	d106      	bne.n	80017b2 <HAL_RCC_OscConfig+0x76>
 80017a4:	4b80      	ldr	r3, [pc, #512]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a7f      	ldr	r2, [pc, #508]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80017aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	e02e      	b.n	8001810 <HAL_RCC_OscConfig+0xd4>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d10c      	bne.n	80017d4 <HAL_RCC_OscConfig+0x98>
 80017ba:	4b7b      	ldr	r3, [pc, #492]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a7a      	ldr	r2, [pc, #488]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80017c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	4b78      	ldr	r3, [pc, #480]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a77      	ldr	r2, [pc, #476]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	e01d      	b.n	8001810 <HAL_RCC_OscConfig+0xd4>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017dc:	d10c      	bne.n	80017f8 <HAL_RCC_OscConfig+0xbc>
 80017de:	4b72      	ldr	r3, [pc, #456]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a71      	ldr	r2, [pc, #452]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	4b6f      	ldr	r3, [pc, #444]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a6e      	ldr	r2, [pc, #440]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80017f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f4:	6013      	str	r3, [r2, #0]
 80017f6:	e00b      	b.n	8001810 <HAL_RCC_OscConfig+0xd4>
 80017f8:	4b6b      	ldr	r3, [pc, #428]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a6a      	ldr	r2, [pc, #424]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80017fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	4b68      	ldr	r3, [pc, #416]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a67      	ldr	r2, [pc, #412]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 800180a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800180e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d013      	beq.n	8001840 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001818:	f7ff fc06 	bl	8001028 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001820:	f7ff fc02 	bl	8001028 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b64      	cmp	r3, #100	; 0x64
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e200      	b.n	8001c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001832:	4b5d      	ldr	r3, [pc, #372]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f0      	beq.n	8001820 <HAL_RCC_OscConfig+0xe4>
 800183e:	e014      	b.n	800186a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001840:	f7ff fbf2 	bl	8001028 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001848:	f7ff fbee 	bl	8001028 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b64      	cmp	r3, #100	; 0x64
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e1ec      	b.n	8001c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800185a:	4b53      	ldr	r3, [pc, #332]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f0      	bne.n	8001848 <HAL_RCC_OscConfig+0x10c>
 8001866:	e000      	b.n	800186a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001868:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d063      	beq.n	800193e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001876:	4b4c      	ldr	r3, [pc, #304]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f003 030c 	and.w	r3, r3, #12
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00b      	beq.n	800189a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001882:	4b49      	ldr	r3, [pc, #292]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 030c 	and.w	r3, r3, #12
 800188a:	2b08      	cmp	r3, #8
 800188c:	d11c      	bne.n	80018c8 <HAL_RCC_OscConfig+0x18c>
 800188e:	4b46      	ldr	r3, [pc, #280]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d116      	bne.n	80018c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800189a:	4b43      	ldr	r3, [pc, #268]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d005      	beq.n	80018b2 <HAL_RCC_OscConfig+0x176>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d001      	beq.n	80018b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e1c0      	b.n	8001c34 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b2:	4b3d      	ldr	r3, [pc, #244]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	4939      	ldr	r1, [pc, #228]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c6:	e03a      	b.n	800193e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d020      	beq.n	8001912 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018d0:	4b36      	ldr	r3, [pc, #216]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d6:	f7ff fba7 	bl	8001028 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018de:	f7ff fba3 	bl	8001028 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e1a1      	b.n	8001c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f0:	4b2d      	ldr	r3, [pc, #180]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0f0      	beq.n	80018de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018fc:	4b2a      	ldr	r3, [pc, #168]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	4927      	ldr	r1, [pc, #156]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 800190c:	4313      	orrs	r3, r2
 800190e:	600b      	str	r3, [r1, #0]
 8001910:	e015      	b.n	800193e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001912:	4b26      	ldr	r3, [pc, #152]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001918:	f7ff fb86 	bl	8001028 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001920:	f7ff fb82 	bl	8001028 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e180      	b.n	8001c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001932:	4b1d      	ldr	r3, [pc, #116]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1f0      	bne.n	8001920 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	2b00      	cmp	r3, #0
 8001948:	d03a      	beq.n	80019c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d019      	beq.n	8001986 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001952:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <HAL_RCC_OscConfig+0x274>)
 8001954:	2201      	movs	r2, #1
 8001956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001958:	f7ff fb66 	bl	8001028 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001960:	f7ff fb62 	bl	8001028 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e160      	b.n	8001c34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001972:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f0      	beq.n	8001960 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800197e:	2001      	movs	r0, #1
 8001980:	f000 face 	bl	8001f20 <RCC_Delay>
 8001984:	e01c      	b.n	80019c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001986:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <HAL_RCC_OscConfig+0x274>)
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800198c:	f7ff fb4c 	bl	8001028 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001992:	e00f      	b.n	80019b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001994:	f7ff fb48 	bl	8001028 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d908      	bls.n	80019b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e146      	b.n	8001c34 <HAL_RCC_OscConfig+0x4f8>
 80019a6:	bf00      	nop
 80019a8:	40021000 	.word	0x40021000
 80019ac:	42420000 	.word	0x42420000
 80019b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b4:	4b92      	ldr	r3, [pc, #584]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 80019b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1e9      	bne.n	8001994 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f000 80a6 	beq.w	8001b1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ce:	2300      	movs	r3, #0
 80019d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019d2:	4b8b      	ldr	r3, [pc, #556]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10d      	bne.n	80019fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019de:	4b88      	ldr	r3, [pc, #544]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	4a87      	ldr	r2, [pc, #540]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 80019e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e8:	61d3      	str	r3, [r2, #28]
 80019ea:	4b85      	ldr	r3, [pc, #532]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019f6:	2301      	movs	r3, #1
 80019f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019fa:	4b82      	ldr	r3, [pc, #520]	; (8001c04 <HAL_RCC_OscConfig+0x4c8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d118      	bne.n	8001a38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a06:	4b7f      	ldr	r3, [pc, #508]	; (8001c04 <HAL_RCC_OscConfig+0x4c8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a7e      	ldr	r2, [pc, #504]	; (8001c04 <HAL_RCC_OscConfig+0x4c8>)
 8001a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a12:	f7ff fb09 	bl	8001028 <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a1a:	f7ff fb05 	bl	8001028 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b64      	cmp	r3, #100	; 0x64
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e103      	b.n	8001c34 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a2c:	4b75      	ldr	r3, [pc, #468]	; (8001c04 <HAL_RCC_OscConfig+0x4c8>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0f0      	beq.n	8001a1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d106      	bne.n	8001a4e <HAL_RCC_OscConfig+0x312>
 8001a40:	4b6f      	ldr	r3, [pc, #444]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	4a6e      	ldr	r2, [pc, #440]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	6213      	str	r3, [r2, #32]
 8001a4c:	e02d      	b.n	8001aaa <HAL_RCC_OscConfig+0x36e>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10c      	bne.n	8001a70 <HAL_RCC_OscConfig+0x334>
 8001a56:	4b6a      	ldr	r3, [pc, #424]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	4a69      	ldr	r2, [pc, #420]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001a5c:	f023 0301 	bic.w	r3, r3, #1
 8001a60:	6213      	str	r3, [r2, #32]
 8001a62:	4b67      	ldr	r3, [pc, #412]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	4a66      	ldr	r2, [pc, #408]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001a68:	f023 0304 	bic.w	r3, r3, #4
 8001a6c:	6213      	str	r3, [r2, #32]
 8001a6e:	e01c      	b.n	8001aaa <HAL_RCC_OscConfig+0x36e>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	2b05      	cmp	r3, #5
 8001a76:	d10c      	bne.n	8001a92 <HAL_RCC_OscConfig+0x356>
 8001a78:	4b61      	ldr	r3, [pc, #388]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	4a60      	ldr	r2, [pc, #384]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001a7e:	f043 0304 	orr.w	r3, r3, #4
 8001a82:	6213      	str	r3, [r2, #32]
 8001a84:	4b5e      	ldr	r3, [pc, #376]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	4a5d      	ldr	r2, [pc, #372]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	6213      	str	r3, [r2, #32]
 8001a90:	e00b      	b.n	8001aaa <HAL_RCC_OscConfig+0x36e>
 8001a92:	4b5b      	ldr	r3, [pc, #364]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	4a5a      	ldr	r2, [pc, #360]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001a98:	f023 0301 	bic.w	r3, r3, #1
 8001a9c:	6213      	str	r3, [r2, #32]
 8001a9e:	4b58      	ldr	r3, [pc, #352]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	4a57      	ldr	r2, [pc, #348]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001aa4:	f023 0304 	bic.w	r3, r3, #4
 8001aa8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d015      	beq.n	8001ade <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab2:	f7ff fab9 	bl	8001028 <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab8:	e00a      	b.n	8001ad0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aba:	f7ff fab5 	bl	8001028 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e0b1      	b.n	8001c34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad0:	4b4b      	ldr	r3, [pc, #300]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d0ee      	beq.n	8001aba <HAL_RCC_OscConfig+0x37e>
 8001adc:	e014      	b.n	8001b08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ade:	f7ff faa3 	bl	8001028 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae4:	e00a      	b.n	8001afc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae6:	f7ff fa9f 	bl	8001028 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e09b      	b.n	8001c34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001afc:	4b40      	ldr	r3, [pc, #256]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1ee      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b08:	7dfb      	ldrb	r3, [r7, #23]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d105      	bne.n	8001b1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b0e:	4b3c      	ldr	r3, [pc, #240]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	4a3b      	ldr	r2, [pc, #236]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f000 8087 	beq.w	8001c32 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b24:	4b36      	ldr	r3, [pc, #216]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 030c 	and.w	r3, r3, #12
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d061      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d146      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b38:	4b33      	ldr	r3, [pc, #204]	; (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3e:	f7ff fa73 	bl	8001028 <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b46:	f7ff fa6f 	bl	8001028 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e06d      	b.n	8001c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b58:	4b29      	ldr	r3, [pc, #164]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1f0      	bne.n	8001b46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b6c:	d108      	bne.n	8001b80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b6e:	4b24      	ldr	r3, [pc, #144]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	4921      	ldr	r1, [pc, #132]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b80:	4b1f      	ldr	r3, [pc, #124]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a19      	ldr	r1, [r3, #32]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	430b      	orrs	r3, r1
 8001b92:	491b      	ldr	r1, [pc, #108]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b98:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9e:	f7ff fa43 	bl	8001028 <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba6:	f7ff fa3f 	bl	8001028 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e03d      	b.n	8001c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0f0      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x46a>
 8001bc4:	e035      	b.n	8001c32 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc6:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bcc:	f7ff fa2c 	bl	8001028 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd4:	f7ff fa28 	bl	8001028 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e026      	b.n	8001c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be6:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f0      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x498>
 8001bf2:	e01e      	b.n	8001c32 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d107      	bne.n	8001c0c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e019      	b.n	8001c34 <HAL_RCC_OscConfig+0x4f8>
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40007000 	.word	0x40007000
 8001c08:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <HAL_RCC_OscConfig+0x500>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d106      	bne.n	8001c2e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d001      	beq.n	8001c32 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40021000 	.word	0x40021000

08001c40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e0d0      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c54:	4b6a      	ldr	r3, [pc, #424]	; (8001e00 <HAL_RCC_ClockConfig+0x1c0>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d910      	bls.n	8001c84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c62:	4b67      	ldr	r3, [pc, #412]	; (8001e00 <HAL_RCC_ClockConfig+0x1c0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f023 0207 	bic.w	r2, r3, #7
 8001c6a:	4965      	ldr	r1, [pc, #404]	; (8001e00 <HAL_RCC_ClockConfig+0x1c0>)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c72:	4b63      	ldr	r3, [pc, #396]	; (8001e00 <HAL_RCC_ClockConfig+0x1c0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e0b8      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d020      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c9c:	4b59      	ldr	r3, [pc, #356]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	4a58      	ldr	r2, [pc, #352]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ca6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d005      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cb4:	4b53      	ldr	r3, [pc, #332]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	4a52      	ldr	r2, [pc, #328]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001cba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc0:	4b50      	ldr	r3, [pc, #320]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	494d      	ldr	r1, [pc, #308]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d040      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d107      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce6:	4b47      	ldr	r3, [pc, #284]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d115      	bne.n	8001d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e07f      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d107      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cfe:	4b41      	ldr	r3, [pc, #260]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d109      	bne.n	8001d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e073      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0e:	4b3d      	ldr	r3, [pc, #244]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e06b      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d1e:	4b39      	ldr	r3, [pc, #228]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f023 0203 	bic.w	r2, r3, #3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	4936      	ldr	r1, [pc, #216]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d30:	f7ff f97a 	bl	8001028 <HAL_GetTick>
 8001d34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d36:	e00a      	b.n	8001d4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d38:	f7ff f976 	bl	8001028 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e053      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4e:	4b2d      	ldr	r3, [pc, #180]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 020c 	and.w	r2, r3, #12
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d1eb      	bne.n	8001d38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d60:	4b27      	ldr	r3, [pc, #156]	; (8001e00 <HAL_RCC_ClockConfig+0x1c0>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d210      	bcs.n	8001d90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6e:	4b24      	ldr	r3, [pc, #144]	; (8001e00 <HAL_RCC_ClockConfig+0x1c0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f023 0207 	bic.w	r2, r3, #7
 8001d76:	4922      	ldr	r1, [pc, #136]	; (8001e00 <HAL_RCC_ClockConfig+0x1c0>)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7e:	4b20      	ldr	r3, [pc, #128]	; (8001e00 <HAL_RCC_ClockConfig+0x1c0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d001      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e032      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d008      	beq.n	8001dae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d9c:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	4916      	ldr	r1, [pc, #88]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d009      	beq.n	8001dce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dba:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	490e      	ldr	r1, [pc, #56]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dce:	f000 f821 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	091b      	lsrs	r3, r3, #4
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	490a      	ldr	r1, [pc, #40]	; (8001e08 <HAL_RCC_ClockConfig+0x1c8>)
 8001de0:	5ccb      	ldrb	r3, [r1, r3]
 8001de2:	fa22 f303 	lsr.w	r3, r2, r3
 8001de6:	4a09      	ldr	r2, [pc, #36]	; (8001e0c <HAL_RCC_ClockConfig+0x1cc>)
 8001de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dea:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <HAL_RCC_ClockConfig+0x1d0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff f8d8 	bl	8000fa4 <HAL_InitTick>

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40022000 	.word	0x40022000
 8001e04:	40021000 	.word	0x40021000
 8001e08:	0800721c 	.word	0x0800721c
 8001e0c:	20000004 	.word	0x20000004
 8001e10:	20000008 	.word	0x20000008

08001e14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b087      	sub	sp, #28
 8001e18:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	2300      	movs	r3, #0
 8001e28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f003 030c 	and.w	r3, r3, #12
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d002      	beq.n	8001e44 <HAL_RCC_GetSysClockFreq+0x30>
 8001e3e:	2b08      	cmp	r3, #8
 8001e40:	d003      	beq.n	8001e4a <HAL_RCC_GetSysClockFreq+0x36>
 8001e42:	e027      	b.n	8001e94 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e44:	4b19      	ldr	r3, [pc, #100]	; (8001eac <HAL_RCC_GetSysClockFreq+0x98>)
 8001e46:	613b      	str	r3, [r7, #16]
      break;
 8001e48:	e027      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	0c9b      	lsrs	r3, r3, #18
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	4a17      	ldr	r2, [pc, #92]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e54:	5cd3      	ldrb	r3, [r2, r3]
 8001e56:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d010      	beq.n	8001e84 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e62:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	0c5b      	lsrs	r3, r3, #17
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	4a11      	ldr	r2, [pc, #68]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e6e:	5cd3      	ldrb	r3, [r2, r3]
 8001e70:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a0d      	ldr	r2, [pc, #52]	; (8001eac <HAL_RCC_GetSysClockFreq+0x98>)
 8001e76:	fb03 f202 	mul.w	r2, r3, r2
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	e004      	b.n	8001e8e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a0c      	ldr	r2, [pc, #48]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e88:	fb02 f303 	mul.w	r3, r2, r3
 8001e8c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	613b      	str	r3, [r7, #16]
      break;
 8001e92:	e002      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <HAL_RCC_GetSysClockFreq+0x98>)
 8001e96:	613b      	str	r3, [r7, #16]
      break;
 8001e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e9a:	693b      	ldr	r3, [r7, #16]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	371c      	adds	r7, #28
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	007a1200 	.word	0x007a1200
 8001eb0:	08007234 	.word	0x08007234
 8001eb4:	08007244 	.word	0x08007244
 8001eb8:	003d0900 	.word	0x003d0900

08001ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ec0:	4b02      	ldr	r3, [pc, #8]	; (8001ecc <HAL_RCC_GetHCLKFreq+0x10>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr
 8001ecc:	20000004 	.word	0x20000004

08001ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ed4:	f7ff fff2 	bl	8001ebc <HAL_RCC_GetHCLKFreq>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	0a1b      	lsrs	r3, r3, #8
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	4903      	ldr	r1, [pc, #12]	; (8001ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ee6:	5ccb      	ldrb	r3, [r1, r3]
 8001ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	0800722c 	.word	0x0800722c

08001ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001efc:	f7ff ffde 	bl	8001ebc <HAL_RCC_GetHCLKFreq>
 8001f00:	4602      	mov	r2, r0
 8001f02:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	0adb      	lsrs	r3, r3, #11
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	4903      	ldr	r1, [pc, #12]	; (8001f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f0e:	5ccb      	ldrb	r3, [r1, r3]
 8001f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	0800722c 	.word	0x0800722c

08001f20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f28:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <RCC_Delay+0x34>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a0a      	ldr	r2, [pc, #40]	; (8001f58 <RCC_Delay+0x38>)
 8001f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f32:	0a5b      	lsrs	r3, r3, #9
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	fb02 f303 	mul.w	r3, r2, r3
 8001f3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f3c:	bf00      	nop
  }
  while (Delay --);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	1e5a      	subs	r2, r3, #1
 8001f42:	60fa      	str	r2, [r7, #12]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1f9      	bne.n	8001f3c <RCC_Delay+0x1c>
}
 8001f48:	bf00      	nop
 8001f4a:	bf00      	nop
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr
 8001f54:	20000004 	.word	0x20000004
 8001f58:	10624dd3 	.word	0x10624dd3

08001f5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e076      	b.n	800205c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d108      	bne.n	8001f88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f7e:	d009      	beq.n	8001f94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	61da      	str	r2, [r3, #28]
 8001f86:	e005      	b.n	8001f94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d106      	bne.n	8001fb4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7fe fece 	bl	8000d50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002004:	431a      	orrs	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800200e:	431a      	orrs	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002018:	ea42 0103 	orr.w	r1, r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002020:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	0c1a      	lsrs	r2, r3, #16
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f002 0204 	and.w	r2, r2, #4
 800203a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	69da      	ldr	r2, [r3, #28]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800204a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	603b      	str	r3, [r7, #0]
 8002070:	4613      	mov	r3, r2
 8002072:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002074:	f7fe ffd8 	bl	8001028 <HAL_GetTick>
 8002078:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800207a:	88fb      	ldrh	r3, [r7, #6]
 800207c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b01      	cmp	r3, #1
 8002088:	d001      	beq.n	800208e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800208a:	2302      	movs	r3, #2
 800208c:	e12a      	b.n	80022e4 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d002      	beq.n	800209a <HAL_SPI_Transmit+0x36>
 8002094:	88fb      	ldrh	r3, [r7, #6]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e122      	b.n	80022e4 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d101      	bne.n	80020ac <HAL_SPI_Transmit+0x48>
 80020a8:	2302      	movs	r3, #2
 80020aa:	e11b      	b.n	80022e4 <HAL_SPI_Transmit+0x280>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2203      	movs	r2, #3
 80020b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	68ba      	ldr	r2, [r7, #8]
 80020c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	88fa      	ldrh	r2, [r7, #6]
 80020cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	88fa      	ldrh	r2, [r7, #6]
 80020d2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020fa:	d10f      	bne.n	800211c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800210a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800211a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002126:	2b40      	cmp	r3, #64	; 0x40
 8002128:	d007      	beq.n	800213a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002138:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002142:	d152      	bne.n	80021ea <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d002      	beq.n	8002152 <HAL_SPI_Transmit+0xee>
 800214c:	8b7b      	ldrh	r3, [r7, #26]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d145      	bne.n	80021de <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	881a      	ldrh	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	1c9a      	adds	r2, r3, #2
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800216c:	b29b      	uxth	r3, r3
 800216e:	3b01      	subs	r3, #1
 8002170:	b29a      	uxth	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002176:	e032      	b.n	80021de <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b02      	cmp	r3, #2
 8002184:	d112      	bne.n	80021ac <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	881a      	ldrh	r2, [r3, #0]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	1c9a      	adds	r2, r3, #2
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	3b01      	subs	r3, #1
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	86da      	strh	r2, [r3, #54]	; 0x36
 80021aa:	e018      	b.n	80021de <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021ac:	f7fe ff3c 	bl	8001028 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d803      	bhi.n	80021c4 <HAL_SPI_Transmit+0x160>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c2:	d102      	bne.n	80021ca <HAL_SPI_Transmit+0x166>
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d109      	bne.n	80021de <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e082      	b.n	80022e4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1c7      	bne.n	8002178 <HAL_SPI_Transmit+0x114>
 80021e8:	e053      	b.n	8002292 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <HAL_SPI_Transmit+0x194>
 80021f2:	8b7b      	ldrh	r3, [r7, #26]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d147      	bne.n	8002288 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	330c      	adds	r3, #12
 8002202:	7812      	ldrb	r2, [r2, #0]
 8002204:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002214:	b29b      	uxth	r3, r3
 8002216:	3b01      	subs	r3, #1
 8002218:	b29a      	uxth	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800221e:	e033      	b.n	8002288 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b02      	cmp	r3, #2
 800222c:	d113      	bne.n	8002256 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	330c      	adds	r3, #12
 8002238:	7812      	ldrb	r2, [r2, #0]
 800223a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002240:	1c5a      	adds	r2, r3, #1
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800224a:	b29b      	uxth	r3, r3
 800224c:	3b01      	subs	r3, #1
 800224e:	b29a      	uxth	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	86da      	strh	r2, [r3, #54]	; 0x36
 8002254:	e018      	b.n	8002288 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002256:	f7fe fee7 	bl	8001028 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	429a      	cmp	r2, r3
 8002264:	d803      	bhi.n	800226e <HAL_SPI_Transmit+0x20a>
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226c:	d102      	bne.n	8002274 <HAL_SPI_Transmit+0x210>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d109      	bne.n	8002288 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e02d      	b.n	80022e4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800228c:	b29b      	uxth	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1c6      	bne.n	8002220 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002292:	69fa      	ldr	r2, [r7, #28]
 8002294:	6839      	ldr	r1, [r7, #0]
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 fa5a 	bl	8002750 <SPI_EndRxTxTransaction>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d002      	beq.n	80022a8 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2220      	movs	r2, #32
 80022a6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10a      	bne.n	80022c6 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80022e2:	2300      	movs	r3, #0
  }
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3720      	adds	r7, #32
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08a      	sub	sp, #40	; 0x28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
 80022f8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80022fa:	2301      	movs	r3, #1
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022fe:	f7fe fe93 	bl	8001028 <HAL_GetTick>
 8002302:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800230a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002312:	887b      	ldrh	r3, [r7, #2]
 8002314:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002316:	7ffb      	ldrb	r3, [r7, #31]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d00c      	beq.n	8002336 <HAL_SPI_TransmitReceive+0x4a>
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002322:	d106      	bne.n	8002332 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d102      	bne.n	8002332 <HAL_SPI_TransmitReceive+0x46>
 800232c:	7ffb      	ldrb	r3, [r7, #31]
 800232e:	2b04      	cmp	r3, #4
 8002330:	d001      	beq.n	8002336 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002332:	2302      	movs	r3, #2
 8002334:	e17f      	b.n	8002636 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <HAL_SPI_TransmitReceive+0x5c>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d002      	beq.n	8002348 <HAL_SPI_TransmitReceive+0x5c>
 8002342:	887b      	ldrh	r3, [r7, #2]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e174      	b.n	8002636 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002352:	2b01      	cmp	r3, #1
 8002354:	d101      	bne.n	800235a <HAL_SPI_TransmitReceive+0x6e>
 8002356:	2302      	movs	r3, #2
 8002358:	e16d      	b.n	8002636 <HAL_SPI_TransmitReceive+0x34a>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b04      	cmp	r3, #4
 800236c:	d003      	beq.n	8002376 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2205      	movs	r2, #5
 8002372:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	887a      	ldrh	r2, [r7, #2]
 8002386:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	887a      	ldrh	r2, [r7, #2]
 800238c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	68ba      	ldr	r2, [r7, #8]
 8002392:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	887a      	ldrh	r2, [r7, #2]
 8002398:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	887a      	ldrh	r2, [r7, #2]
 800239e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b6:	2b40      	cmp	r3, #64	; 0x40
 80023b8:	d007      	beq.n	80023ca <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023d2:	d17e      	bne.n	80024d2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d002      	beq.n	80023e2 <HAL_SPI_TransmitReceive+0xf6>
 80023dc:	8afb      	ldrh	r3, [r7, #22]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d16c      	bne.n	80024bc <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	881a      	ldrh	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	1c9a      	adds	r2, r3, #2
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	3b01      	subs	r3, #1
 8002400:	b29a      	uxth	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002406:	e059      	b.n	80024bc <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b02      	cmp	r3, #2
 8002414:	d11b      	bne.n	800244e <HAL_SPI_TransmitReceive+0x162>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800241a:	b29b      	uxth	r3, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	d016      	beq.n	800244e <HAL_SPI_TransmitReceive+0x162>
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	2b01      	cmp	r3, #1
 8002424:	d113      	bne.n	800244e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	881a      	ldrh	r2, [r3, #0]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	1c9a      	adds	r2, r3, #2
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002440:	b29b      	uxth	r3, r3
 8002442:	3b01      	subs	r3, #1
 8002444:	b29a      	uxth	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800244a:	2300      	movs	r3, #0
 800244c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b01      	cmp	r3, #1
 800245a:	d119      	bne.n	8002490 <HAL_SPI_TransmitReceive+0x1a4>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002460:	b29b      	uxth	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d014      	beq.n	8002490 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002470:	b292      	uxth	r2, r2
 8002472:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002478:	1c9a      	adds	r2, r3, #2
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002482:	b29b      	uxth	r3, r3
 8002484:	3b01      	subs	r3, #1
 8002486:	b29a      	uxth	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800248c:	2301      	movs	r3, #1
 800248e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002490:	f7fe fdca 	bl	8001028 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800249c:	429a      	cmp	r2, r3
 800249e:	d80d      	bhi.n	80024bc <HAL_SPI_TransmitReceive+0x1d0>
 80024a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a6:	d009      	beq.n	80024bc <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e0bc      	b.n	8002636 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1a0      	bne.n	8002408 <HAL_SPI_TransmitReceive+0x11c>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d19b      	bne.n	8002408 <HAL_SPI_TransmitReceive+0x11c>
 80024d0:	e082      	b.n	80025d8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d002      	beq.n	80024e0 <HAL_SPI_TransmitReceive+0x1f4>
 80024da:	8afb      	ldrh	r3, [r7, #22]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d171      	bne.n	80025c4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	330c      	adds	r3, #12
 80024ea:	7812      	ldrb	r2, [r2, #0]
 80024ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	1c5a      	adds	r2, r3, #1
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	3b01      	subs	r3, #1
 8002500:	b29a      	uxth	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002506:	e05d      	b.n	80025c4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b02      	cmp	r3, #2
 8002514:	d11c      	bne.n	8002550 <HAL_SPI_TransmitReceive+0x264>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800251a:	b29b      	uxth	r3, r3
 800251c:	2b00      	cmp	r3, #0
 800251e:	d017      	beq.n	8002550 <HAL_SPI_TransmitReceive+0x264>
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	2b01      	cmp	r3, #1
 8002524:	d114      	bne.n	8002550 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	330c      	adds	r3, #12
 8002530:	7812      	ldrb	r2, [r2, #0]
 8002532:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002538:	1c5a      	adds	r2, r3, #1
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002542:	b29b      	uxth	r3, r3
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b01      	cmp	r3, #1
 800255c:	d119      	bne.n	8002592 <HAL_SPI_TransmitReceive+0x2a6>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002562:	b29b      	uxth	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	d014      	beq.n	8002592 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002584:	b29b      	uxth	r3, r3
 8002586:	3b01      	subs	r3, #1
 8002588:	b29a      	uxth	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800258e:	2301      	movs	r3, #1
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002592:	f7fe fd49 	bl	8001028 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	6a3b      	ldr	r3, [r7, #32]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800259e:	429a      	cmp	r2, r3
 80025a0:	d803      	bhi.n	80025aa <HAL_SPI_TransmitReceive+0x2be>
 80025a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a8:	d102      	bne.n	80025b0 <HAL_SPI_TransmitReceive+0x2c4>
 80025aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d109      	bne.n	80025c4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e038      	b.n	8002636 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d19c      	bne.n	8002508 <HAL_SPI_TransmitReceive+0x21c>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d197      	bne.n	8002508 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025d8:	6a3a      	ldr	r2, [r7, #32]
 80025da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 f8b7 	bl	8002750 <SPI_EndRxTxTransaction>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d008      	beq.n	80025fa <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2220      	movs	r2, #32
 80025ec:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e01d      	b.n	8002636 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10a      	bne.n	8002618 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002602:	2300      	movs	r3, #0
 8002604:	613b      	str	r3, [r7, #16]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e000      	b.n	8002636 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002634:	2300      	movs	r3, #0
  }
}
 8002636:	4618      	mov	r0, r3
 8002638:	3728      	adds	r7, #40	; 0x28
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b088      	sub	sp, #32
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	603b      	str	r3, [r7, #0]
 800264c:	4613      	mov	r3, r2
 800264e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002650:	f7fe fcea 	bl	8001028 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002658:	1a9b      	subs	r3, r3, r2
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	4413      	add	r3, r2
 800265e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002660:	f7fe fce2 	bl	8001028 <HAL_GetTick>
 8002664:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002666:	4b39      	ldr	r3, [pc, #228]	; (800274c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	015b      	lsls	r3, r3, #5
 800266c:	0d1b      	lsrs	r3, r3, #20
 800266e:	69fa      	ldr	r2, [r7, #28]
 8002670:	fb02 f303 	mul.w	r3, r2, r3
 8002674:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002676:	e054      	b.n	8002722 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800267e:	d050      	beq.n	8002722 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002680:	f7fe fcd2 	bl	8001028 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	69fa      	ldr	r2, [r7, #28]
 800268c:	429a      	cmp	r2, r3
 800268e:	d902      	bls.n	8002696 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d13d      	bne.n	8002712 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80026a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026ae:	d111      	bne.n	80026d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026b8:	d004      	beq.n	80026c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026c2:	d107      	bne.n	80026d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026dc:	d10f      	bne.n	80026fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e017      	b.n	8002742 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002718:	2300      	movs	r3, #0
 800271a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	3b01      	subs	r3, #1
 8002720:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	4013      	ands	r3, r2
 800272c:	68ba      	ldr	r2, [r7, #8]
 800272e:	429a      	cmp	r2, r3
 8002730:	bf0c      	ite	eq
 8002732:	2301      	moveq	r3, #1
 8002734:	2300      	movne	r3, #0
 8002736:	b2db      	uxtb	r3, r3
 8002738:	461a      	mov	r2, r3
 800273a:	79fb      	ldrb	r3, [r7, #7]
 800273c:	429a      	cmp	r2, r3
 800273e:	d19b      	bne.n	8002678 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3720      	adds	r7, #32
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000004 	.word	0x20000004

08002750 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af02      	add	r7, sp, #8
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2201      	movs	r2, #1
 8002764:	2102      	movs	r1, #2
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f7ff ff6a 	bl	8002640 <SPI_WaitFlagStateUntilTimeout>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d007      	beq.n	8002782 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002776:	f043 0220 	orr.w	r2, r3, #32
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e013      	b.n	80027aa <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	2200      	movs	r2, #0
 800278a:	2180      	movs	r1, #128	; 0x80
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f7ff ff57 	bl	8002640 <SPI_WaitFlagStateUntilTimeout>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d007      	beq.n	80027a8 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279c:	f043 0220 	orr.w	r2, r3, #32
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e000      	b.n	80027aa <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e042      	b.n	800284a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d106      	bne.n	80027de <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7fe fb03 	bl	8000de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2224      	movs	r2, #36	; 0x24
 80027e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027f4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 fc80 	bl	80030fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	691a      	ldr	r2, [r3, #16]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800280a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	695a      	ldr	r2, [r3, #20]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800281a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800282a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2220      	movs	r2, #32
 8002836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2220      	movs	r2, #32
 800283e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
	...

08002854 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b0ba      	sub	sp, #232	; 0xe8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800287a:	2300      	movs	r3, #0
 800287c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002880:	2300      	movs	r3, #0
 8002882:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002892:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10f      	bne.n	80028ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800289a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800289e:	f003 0320 	and.w	r3, r3, #32
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d009      	beq.n	80028ba <HAL_UART_IRQHandler+0x66>
 80028a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028aa:	f003 0320 	and.w	r3, r3, #32
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 fb63 	bl	8002f7e <UART_Receive_IT>
      return;
 80028b8:	e25b      	b.n	8002d72 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80028ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 80de 	beq.w	8002a80 <HAL_UART_IRQHandler+0x22c>
 80028c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d106      	bne.n	80028de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80028d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 80d1 	beq.w	8002a80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80028de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00b      	beq.n	8002902 <HAL_UART_IRQHandler+0xae>
 80028ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d005      	beq.n	8002902 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	f043 0201 	orr.w	r2, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002906:	f003 0304 	and.w	r3, r3, #4
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00b      	beq.n	8002926 <HAL_UART_IRQHandler+0xd2>
 800290e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d005      	beq.n	8002926 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	f043 0202 	orr.w	r2, r3, #2
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00b      	beq.n	800294a <HAL_UART_IRQHandler+0xf6>
 8002932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d005      	beq.n	800294a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002942:	f043 0204 	orr.w	r2, r3, #4
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800294a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d011      	beq.n	800297a <HAL_UART_IRQHandler+0x126>
 8002956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800295a:	f003 0320 	and.w	r3, r3, #32
 800295e:	2b00      	cmp	r3, #0
 8002960:	d105      	bne.n	800296e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d005      	beq.n	800297a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002972:	f043 0208 	orr.w	r2, r3, #8
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 81f2 	beq.w	8002d68 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002988:	f003 0320 	and.w	r3, r3, #32
 800298c:	2b00      	cmp	r3, #0
 800298e:	d008      	beq.n	80029a2 <HAL_UART_IRQHandler+0x14e>
 8002990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002994:	f003 0320 	and.w	r3, r3, #32
 8002998:	2b00      	cmp	r3, #0
 800299a:	d002      	beq.n	80029a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 faee 	bl	8002f7e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	bf14      	ite	ne
 80029b0:	2301      	movne	r3, #1
 80029b2:	2300      	moveq	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d103      	bne.n	80029ce <HAL_UART_IRQHandler+0x17a>
 80029c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d04f      	beq.n	8002a6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f9f8 	bl	8002dc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d041      	beq.n	8002a66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	3314      	adds	r3, #20
 80029e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029f0:	e853 3f00 	ldrex	r3, [r3]
 80029f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80029f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	3314      	adds	r3, #20
 8002a0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002a0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002a12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002a1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002a1e:	e841 2300 	strex	r3, r2, [r1]
 8002a22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002a26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1d9      	bne.n	80029e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d013      	beq.n	8002a5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3a:	4a7e      	ldr	r2, [pc, #504]	; (8002c34 <HAL_UART_IRQHandler+0x3e0>)
 8002a3c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe fc66 	bl	8001314 <HAL_DMA_Abort_IT>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d016      	beq.n	8002a7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a58:	4610      	mov	r0, r2
 8002a5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a5c:	e00e      	b.n	8002a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f99c 	bl	8002d9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a64:	e00a      	b.n	8002a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f998 	bl	8002d9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a6c:	e006      	b.n	8002a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f994 	bl	8002d9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002a7a:	e175      	b.n	8002d68 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a7c:	bf00      	nop
    return;
 8002a7e:	e173      	b.n	8002d68 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	f040 814f 	bne.w	8002d28 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a8e:	f003 0310 	and.w	r3, r3, #16
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 8148 	beq.w	8002d28 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a9c:	f003 0310 	and.w	r3, r3, #16
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 8141 	beq.w	8002d28 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	60bb      	str	r3, [r7, #8]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	60bb      	str	r3, [r7, #8]
 8002aba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 80b6 	beq.w	8002c38 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ad8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 8145 	beq.w	8002d6c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ae6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002aea:	429a      	cmp	r2, r3
 8002aec:	f080 813e 	bcs.w	8002d6c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002af6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	2b20      	cmp	r3, #32
 8002b00:	f000 8088 	beq.w	8002c14 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	330c      	adds	r3, #12
 8002b0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b12:	e853 3f00 	ldrex	r3, [r3]
 8002b16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002b1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	330c      	adds	r3, #12
 8002b2c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002b30:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b38:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002b3c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b40:	e841 2300 	strex	r3, r2, [r1]
 8002b44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002b48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1d9      	bne.n	8002b04 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	3314      	adds	r3, #20
 8002b56:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b5a:	e853 3f00 	ldrex	r3, [r3]
 8002b5e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002b60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b62:	f023 0301 	bic.w	r3, r3, #1
 8002b66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	3314      	adds	r3, #20
 8002b70:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b74:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002b78:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b7a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002b7c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002b80:	e841 2300 	strex	r3, r2, [r1]
 8002b84:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002b86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1e1      	bne.n	8002b50 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	3314      	adds	r3, #20
 8002b92:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b96:	e853 3f00 	ldrex	r3, [r3]
 8002b9a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002b9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ba2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	3314      	adds	r3, #20
 8002bac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002bb0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002bb2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002bb6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002bb8:	e841 2300 	strex	r3, r2, [r1]
 8002bbc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002bbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1e3      	bne.n	8002b8c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	330c      	adds	r3, #12
 8002bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bdc:	e853 3f00 	ldrex	r3, [r3]
 8002be0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002be4:	f023 0310 	bic.w	r3, r3, #16
 8002be8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	330c      	adds	r3, #12
 8002bf2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002bf6:	65ba      	str	r2, [r7, #88]	; 0x58
 8002bf8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bfa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bfc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bfe:	e841 2300 	strex	r3, r2, [r1]
 8002c02:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002c04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1e3      	bne.n	8002bd2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe fb45 	bl	800129e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	4619      	mov	r1, r3
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f8bf 	bl	8002dae <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c30:	e09c      	b.n	8002d6c <HAL_UART_IRQHandler+0x518>
 8002c32:	bf00      	nop
 8002c34:	08002e89 	.word	0x08002e89
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 808e 	beq.w	8002d70 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002c54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 8089 	beq.w	8002d70 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	330c      	adds	r3, #12
 8002c64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c68:	e853 3f00 	ldrex	r3, [r3]
 8002c6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	330c      	adds	r3, #12
 8002c7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002c82:	647a      	str	r2, [r7, #68]	; 0x44
 8002c84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c8a:	e841 2300 	strex	r3, r2, [r1]
 8002c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1e3      	bne.n	8002c5e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	3314      	adds	r3, #20
 8002c9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	e853 3f00 	ldrex	r3, [r3]
 8002ca4:	623b      	str	r3, [r7, #32]
   return(result);
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	f023 0301 	bic.w	r3, r3, #1
 8002cac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	3314      	adds	r3, #20
 8002cb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002cba:	633a      	str	r2, [r7, #48]	; 0x30
 8002cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cc2:	e841 2300 	strex	r3, r2, [r1]
 8002cc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1e3      	bne.n	8002c96 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	330c      	adds	r3, #12
 8002ce2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	e853 3f00 	ldrex	r3, [r3]
 8002cea:	60fb      	str	r3, [r7, #12]
   return(result);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f023 0310 	bic.w	r3, r3, #16
 8002cf2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	330c      	adds	r3, #12
 8002cfc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002d00:	61fa      	str	r2, [r7, #28]
 8002d02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d04:	69b9      	ldr	r1, [r7, #24]
 8002d06:	69fa      	ldr	r2, [r7, #28]
 8002d08:	e841 2300 	strex	r3, r2, [r1]
 8002d0c:	617b      	str	r3, [r7, #20]
   return(result);
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1e3      	bne.n	8002cdc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d1e:	4619      	mov	r1, r3
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f844 	bl	8002dae <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d26:	e023      	b.n	8002d70 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d009      	beq.n	8002d48 <HAL_UART_IRQHandler+0x4f4>
 8002d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f8b5 	bl	8002eb0 <UART_Transmit_IT>
    return;
 8002d46:	e014      	b.n	8002d72 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00e      	beq.n	8002d72 <HAL_UART_IRQHandler+0x51e>
 8002d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d008      	beq.n	8002d72 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f8f4 	bl	8002f4e <UART_EndTransmit_IT>
    return;
 8002d66:	e004      	b.n	8002d72 <HAL_UART_IRQHandler+0x51e>
    return;
 8002d68:	bf00      	nop
 8002d6a:	e002      	b.n	8002d72 <HAL_UART_IRQHandler+0x51e>
      return;
 8002d6c:	bf00      	nop
 8002d6e:	e000      	b.n	8002d72 <HAL_UART_IRQHandler+0x51e>
      return;
 8002d70:	bf00      	nop
  }
}
 8002d72:	37e8      	adds	r7, #232	; 0xe8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr

08002d8a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bc80      	pop	{r7}
 8002d9a:	4770      	bx	lr

08002d9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr

08002dae <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
 8002db6:	460b      	mov	r3, r1
 8002db8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr

08002dc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b095      	sub	sp, #84	; 0x54
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	330c      	adds	r3, #12
 8002dd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd6:	e853 3f00 	ldrex	r3, [r3]
 8002dda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	330c      	adds	r3, #12
 8002dea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dec:	643a      	str	r2, [r7, #64]	; 0x40
 8002dee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002df2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002df4:	e841 2300 	strex	r3, r2, [r1]
 8002df8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1e5      	bne.n	8002dcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	3314      	adds	r3, #20
 8002e06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e08:	6a3b      	ldr	r3, [r7, #32]
 8002e0a:	e853 3f00 	ldrex	r3, [r3]
 8002e0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f023 0301 	bic.w	r3, r3, #1
 8002e16:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	3314      	adds	r3, #20
 8002e1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e28:	e841 2300 	strex	r3, r2, [r1]
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1e5      	bne.n	8002e00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d119      	bne.n	8002e70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	330c      	adds	r3, #12
 8002e42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	e853 3f00 	ldrex	r3, [r3]
 8002e4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	f023 0310 	bic.w	r3, r3, #16
 8002e52:	647b      	str	r3, [r7, #68]	; 0x44
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	330c      	adds	r3, #12
 8002e5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e5c:	61ba      	str	r2, [r7, #24]
 8002e5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e60:	6979      	ldr	r1, [r7, #20]
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	e841 2300 	strex	r3, r2, [r1]
 8002e68:	613b      	str	r3, [r7, #16]
   return(result);
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1e5      	bne.n	8002e3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2220      	movs	r2, #32
 8002e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e7e:	bf00      	nop
 8002e80:	3754      	adds	r7, #84	; 0x54
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr

08002e88 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f7ff ff7a 	bl	8002d9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ea8:	bf00      	nop
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b21      	cmp	r3, #33	; 0x21
 8002ec2:	d13e      	bne.n	8002f42 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ecc:	d114      	bne.n	8002ef8 <UART_Transmit_IT+0x48>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d110      	bne.n	8002ef8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002eea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	1c9a      	adds	r2, r3, #2
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	621a      	str	r2, [r3, #32]
 8002ef6:	e008      	b.n	8002f0a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	1c59      	adds	r1, r3, #1
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6211      	str	r1, [r2, #32]
 8002f02:	781a      	ldrb	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	4619      	mov	r1, r3
 8002f18:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10f      	bne.n	8002f3e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68da      	ldr	r2, [r3, #12]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f2c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68da      	ldr	r2, [r3, #12]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f3c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	e000      	b.n	8002f44 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f42:	2302      	movs	r3, #2
  }
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bc80      	pop	{r7}
 8002f4c:	4770      	bx	lr

08002f4e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b082      	sub	sp, #8
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f64:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2220      	movs	r2, #32
 8002f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7ff ff02 	bl	8002d78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b08c      	sub	sp, #48	; 0x30
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b22      	cmp	r3, #34	; 0x22
 8002f90:	f040 80ae 	bne.w	80030f0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f9c:	d117      	bne.n	8002fce <UART_Receive_IT+0x50>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d113      	bne.n	8002fce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc6:	1c9a      	adds	r2, r3, #2
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	629a      	str	r2, [r3, #40]	; 0x28
 8002fcc:	e026      	b.n	800301c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fe0:	d007      	beq.n	8002ff2 <UART_Receive_IT+0x74>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10a      	bne.n	8003000 <UART_Receive_IT+0x82>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d106      	bne.n	8003000 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffc:	701a      	strb	r2, [r3, #0]
 8002ffe:	e008      	b.n	8003012 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	b2db      	uxtb	r3, r3
 8003008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800300c:	b2da      	uxtb	r2, r3
 800300e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003010:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003016:	1c5a      	adds	r2, r3, #1
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003020:	b29b      	uxth	r3, r3
 8003022:	3b01      	subs	r3, #1
 8003024:	b29b      	uxth	r3, r3
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	4619      	mov	r1, r3
 800302a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800302c:	2b00      	cmp	r3, #0
 800302e:	d15d      	bne.n	80030ec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0220 	bic.w	r2, r2, #32
 800303e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800304e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695a      	ldr	r2, [r3, #20]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0201 	bic.w	r2, r2, #1
 800305e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003072:	2b01      	cmp	r3, #1
 8003074:	d135      	bne.n	80030e2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	330c      	adds	r3, #12
 8003082:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	e853 3f00 	ldrex	r3, [r3]
 800308a:	613b      	str	r3, [r7, #16]
   return(result);
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	f023 0310 	bic.w	r3, r3, #16
 8003092:	627b      	str	r3, [r7, #36]	; 0x24
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	330c      	adds	r3, #12
 800309a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800309c:	623a      	str	r2, [r7, #32]
 800309e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a0:	69f9      	ldr	r1, [r7, #28]
 80030a2:	6a3a      	ldr	r2, [r7, #32]
 80030a4:	e841 2300 	strex	r3, r2, [r1]
 80030a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1e5      	bne.n	800307c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0310 	and.w	r3, r3, #16
 80030ba:	2b10      	cmp	r3, #16
 80030bc:	d10a      	bne.n	80030d4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030be:	2300      	movs	r3, #0
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80030d8:	4619      	mov	r1, r3
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7ff fe67 	bl	8002dae <HAL_UARTEx_RxEventCallback>
 80030e0:	e002      	b.n	80030e8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7ff fe51 	bl	8002d8a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80030e8:	2300      	movs	r3, #0
 80030ea:	e002      	b.n	80030f2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80030ec:	2300      	movs	r3, #0
 80030ee:	e000      	b.n	80030f2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80030f0:	2302      	movs	r3, #2
  }
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3730      	adds	r7, #48	; 0x30
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
	...

080030fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	431a      	orrs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	4313      	orrs	r3, r2
 800312a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003136:	f023 030c 	bic.w	r3, r3, #12
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6812      	ldr	r2, [r2, #0]
 800313e:	68b9      	ldr	r1, [r7, #8]
 8003140:	430b      	orrs	r3, r1
 8003142:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699a      	ldr	r2, [r3, #24]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a2c      	ldr	r2, [pc, #176]	; (8003210 <UART_SetConfig+0x114>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d103      	bne.n	800316c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003164:	f7fe fec8 	bl	8001ef8 <HAL_RCC_GetPCLK2Freq>
 8003168:	60f8      	str	r0, [r7, #12]
 800316a:	e002      	b.n	8003172 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800316c:	f7fe feb0 	bl	8001ed0 <HAL_RCC_GetPCLK1Freq>
 8003170:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	4613      	mov	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	009a      	lsls	r2, r3, #2
 800317c:	441a      	add	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	fbb2 f3f3 	udiv	r3, r2, r3
 8003188:	4a22      	ldr	r2, [pc, #136]	; (8003214 <UART_SetConfig+0x118>)
 800318a:	fba2 2303 	umull	r2, r3, r2, r3
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	0119      	lsls	r1, r3, #4
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	009a      	lsls	r2, r3, #2
 800319c:	441a      	add	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80031a8:	4b1a      	ldr	r3, [pc, #104]	; (8003214 <UART_SetConfig+0x118>)
 80031aa:	fba3 0302 	umull	r0, r3, r3, r2
 80031ae:	095b      	lsrs	r3, r3, #5
 80031b0:	2064      	movs	r0, #100	; 0x64
 80031b2:	fb00 f303 	mul.w	r3, r0, r3
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	3332      	adds	r3, #50	; 0x32
 80031bc:	4a15      	ldr	r2, [pc, #84]	; (8003214 <UART_SetConfig+0x118>)
 80031be:	fba2 2303 	umull	r2, r3, r2, r3
 80031c2:	095b      	lsrs	r3, r3, #5
 80031c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031c8:	4419      	add	r1, r3
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	4613      	mov	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	009a      	lsls	r2, r3, #2
 80031d4:	441a      	add	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80031e0:	4b0c      	ldr	r3, [pc, #48]	; (8003214 <UART_SetConfig+0x118>)
 80031e2:	fba3 0302 	umull	r0, r3, r3, r2
 80031e6:	095b      	lsrs	r3, r3, #5
 80031e8:	2064      	movs	r0, #100	; 0x64
 80031ea:	fb00 f303 	mul.w	r3, r0, r3
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	3332      	adds	r3, #50	; 0x32
 80031f4:	4a07      	ldr	r2, [pc, #28]	; (8003214 <UART_SetConfig+0x118>)
 80031f6:	fba2 2303 	umull	r2, r3, r2, r3
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	f003 020f 	and.w	r2, r3, #15
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	440a      	add	r2, r1
 8003206:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003208:	bf00      	nop
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40013800 	.word	0x40013800
 8003214:	51eb851f 	.word	0x51eb851f

08003218 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800321c:	4904      	ldr	r1, [pc, #16]	; (8003230 <MX_FATFS_Init+0x18>)
 800321e:	4805      	ldr	r0, [pc, #20]	; (8003234 <MX_FATFS_Init+0x1c>)
 8003220:	f003 ff16 	bl	8007050 <FATFS_LinkDriver>
 8003224:	4603      	mov	r3, r0
 8003226:	461a      	mov	r2, r3
 8003228:	4b03      	ldr	r3, [pc, #12]	; (8003238 <MX_FATFS_Init+0x20>)
 800322a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800322c:	bf00      	nop
 800322e:	bd80      	pop	{r7, pc}
 8003230:	2000214c 	.word	0x2000214c
 8003234:	20000010 	.word	0x20000010
 8003238:	20002148 	.word	0x20002148

0800323c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003240:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003242:	4618      	mov	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	bc80      	pop	{r7}
 8003248:	4770      	bx	lr

0800324a <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b082      	sub	sp, #8
 800324e:	af00      	add	r7, sp, #0
 8003250:	4603      	mov	r3, r0
 8003252:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
    return SD_disk_initialize(pdrv);
 8003254:	79fb      	ldrb	r3, [r7, #7]
 8003256:	4618      	mov	r0, r3
 8003258:	f7fd f92a 	bl	80004b0 <SD_disk_initialize>
 800325c:	4603      	mov	r3, r0
 800325e:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8003260:	4618      	mov	r0, r3
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
    return SD_disk_status(pdrv);
 8003272:	79fb      	ldrb	r3, [r7, #7]
 8003274:	4618      	mov	r0, r3
 8003276:	f7fd fa01 	bl	800067c <SD_disk_status>
 800327a:	4603      	mov	r3, r0
 800327c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800327e:	4618      	mov	r0, r3
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b084      	sub	sp, #16
 800328a:	af00      	add	r7, sp, #0
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
 8003290:	603b      	str	r3, [r7, #0]
 8003292:	4603      	mov	r3, r0
 8003294:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 8003296:	7bf8      	ldrb	r0, [r7, #15]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	68b9      	ldr	r1, [r7, #8]
 800329e:	f7fd fa01 	bl	80006a4 <SD_disk_read>
 80032a2:	4603      	mov	r3, r0
 80032a4:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b084      	sub	sp, #16
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
 80032b8:	603b      	str	r3, [r7, #0]
 80032ba:	4603      	mov	r3, r0
 80032bc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 80032be:	7bf8      	ldrb	r0, [r7, #15]
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	68b9      	ldr	r1, [r7, #8]
 80032c6:	f7fd fa57 	bl	8000778 <SD_disk_write>
 80032ca:	4603      	mov	r3, r0
 80032cc:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b082      	sub	sp, #8
 80032da:	af00      	add	r7, sp, #0
 80032dc:	4603      	mov	r3, r0
 80032de:	603a      	str	r2, [r7, #0]
 80032e0:	71fb      	strb	r3, [r7, #7]
 80032e2:	460b      	mov	r3, r1
 80032e4:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 80032e6:	79fb      	ldrb	r3, [r7, #7]
 80032e8:	79b9      	ldrb	r1, [r7, #6]
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fd fac7 	bl	8000880 <SD_disk_ioctl>
 80032f2:	4603      	mov	r3, r0
 80032f4:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
	...

08003300 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	4603      	mov	r3, r0
 8003308:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800330a:	79fb      	ldrb	r3, [r7, #7]
 800330c:	4a08      	ldr	r2, [pc, #32]	; (8003330 <disk_status+0x30>)
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	79fa      	ldrb	r2, [r7, #7]
 8003318:	4905      	ldr	r1, [pc, #20]	; (8003330 <disk_status+0x30>)
 800331a:	440a      	add	r2, r1
 800331c:	7a12      	ldrb	r2, [r2, #8]
 800331e:	4610      	mov	r0, r2
 8003320:	4798      	blx	r3
 8003322:	4603      	mov	r3, r0
 8003324:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003326:	7bfb      	ldrb	r3, [r7, #15]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	20002370 	.word	0x20002370

08003334 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	4603      	mov	r3, r0
 800333c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800333e:	2300      	movs	r3, #0
 8003340:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8003342:	79fb      	ldrb	r3, [r7, #7]
 8003344:	4a0d      	ldr	r2, [pc, #52]	; (800337c <disk_initialize+0x48>)
 8003346:	5cd3      	ldrb	r3, [r2, r3]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d111      	bne.n	8003370 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800334c:	79fb      	ldrb	r3, [r7, #7]
 800334e:	4a0b      	ldr	r2, [pc, #44]	; (800337c <disk_initialize+0x48>)
 8003350:	2101      	movs	r1, #1
 8003352:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003354:	79fb      	ldrb	r3, [r7, #7]
 8003356:	4a09      	ldr	r2, [pc, #36]	; (800337c <disk_initialize+0x48>)
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	79fa      	ldrb	r2, [r7, #7]
 8003362:	4906      	ldr	r1, [pc, #24]	; (800337c <disk_initialize+0x48>)
 8003364:	440a      	add	r2, r1
 8003366:	7a12      	ldrb	r2, [r2, #8]
 8003368:	4610      	mov	r0, r2
 800336a:	4798      	blx	r3
 800336c:	4603      	mov	r3, r0
 800336e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003370:	7bfb      	ldrb	r3, [r7, #15]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	20002370 	.word	0x20002370

08003380 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003380:	b590      	push	{r4, r7, lr}
 8003382:	b087      	sub	sp, #28
 8003384:	af00      	add	r7, sp, #0
 8003386:	60b9      	str	r1, [r7, #8]
 8003388:	607a      	str	r2, [r7, #4]
 800338a:	603b      	str	r3, [r7, #0]
 800338c:	4603      	mov	r3, r0
 800338e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003390:	7bfb      	ldrb	r3, [r7, #15]
 8003392:	4a0a      	ldr	r2, [pc, #40]	; (80033bc <disk_read+0x3c>)
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	689c      	ldr	r4, [r3, #8]
 800339c:	7bfb      	ldrb	r3, [r7, #15]
 800339e:	4a07      	ldr	r2, [pc, #28]	; (80033bc <disk_read+0x3c>)
 80033a0:	4413      	add	r3, r2
 80033a2:	7a18      	ldrb	r0, [r3, #8]
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	68b9      	ldr	r1, [r7, #8]
 80033aa:	47a0      	blx	r4
 80033ac:	4603      	mov	r3, r0
 80033ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80033b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	371c      	adds	r7, #28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd90      	pop	{r4, r7, pc}
 80033ba:	bf00      	nop
 80033bc:	20002370 	.word	0x20002370

080033c0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80033c0:	b590      	push	{r4, r7, lr}
 80033c2:	b087      	sub	sp, #28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60b9      	str	r1, [r7, #8]
 80033c8:	607a      	str	r2, [r7, #4]
 80033ca:	603b      	str	r3, [r7, #0]
 80033cc:	4603      	mov	r3, r0
 80033ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
 80033d2:	4a0a      	ldr	r2, [pc, #40]	; (80033fc <disk_write+0x3c>)
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4413      	add	r3, r2
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	68dc      	ldr	r4, [r3, #12]
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
 80033de:	4a07      	ldr	r2, [pc, #28]	; (80033fc <disk_write+0x3c>)
 80033e0:	4413      	add	r3, r2
 80033e2:	7a18      	ldrb	r0, [r3, #8]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	47a0      	blx	r4
 80033ec:	4603      	mov	r3, r0
 80033ee:	75fb      	strb	r3, [r7, #23]
  return res;
 80033f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	371c      	adds	r7, #28
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd90      	pop	{r4, r7, pc}
 80033fa:	bf00      	nop
 80033fc:	20002370 	.word	0x20002370

08003400 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	4603      	mov	r3, r0
 8003408:	603a      	str	r2, [r7, #0]
 800340a:	71fb      	strb	r3, [r7, #7]
 800340c:	460b      	mov	r3, r1
 800340e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	4a09      	ldr	r2, [pc, #36]	; (8003438 <disk_ioctl+0x38>)
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	79fa      	ldrb	r2, [r7, #7]
 800341e:	4906      	ldr	r1, [pc, #24]	; (8003438 <disk_ioctl+0x38>)
 8003420:	440a      	add	r2, r1
 8003422:	7a10      	ldrb	r0, [r2, #8]
 8003424:	79b9      	ldrb	r1, [r7, #6]
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	4798      	blx	r3
 800342a:	4603      	mov	r3, r0
 800342c:	73fb      	strb	r3, [r7, #15]
  return res;
 800342e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	20002370 	.word	0x20002370

0800343c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800343c:	b480      	push	{r7}
 800343e:	b087      	sub	sp, #28
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8003450:	e007      	b.n	8003462 <mem_cpy+0x26>
		*d++ = *s++;
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	1c53      	adds	r3, r2, #1
 8003456:	613b      	str	r3, [r7, #16]
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	1c59      	adds	r1, r3, #1
 800345c:	6179      	str	r1, [r7, #20]
 800345e:	7812      	ldrb	r2, [r2, #0]
 8003460:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	1e5a      	subs	r2, r3, #1
 8003466:	607a      	str	r2, [r7, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1f2      	bne.n	8003452 <mem_cpy+0x16>
}
 800346c:	bf00      	nop
 800346e:	bf00      	nop
 8003470:	371c      	adds	r7, #28
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr

08003478 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003478:	b480      	push	{r7}
 800347a:	b087      	sub	sp, #28
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8003488:	e005      	b.n	8003496 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	617a      	str	r2, [r7, #20]
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	1e5a      	subs	r2, r3, #1
 800349a:	607a      	str	r2, [r7, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1f4      	bne.n	800348a <mem_set+0x12>
}
 80034a0:	bf00      	nop
 80034a2:	bf00      	nop
 80034a4:	371c      	adds	r7, #28
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr

080034ac <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80034ac:	b480      	push	{r7}
 80034ae:	b089      	sub	sp, #36	; 0x24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	61fb      	str	r3, [r7, #28]
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80034c0:	2300      	movs	r3, #0
 80034c2:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80034c4:	bf00      	nop
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	1e5a      	subs	r2, r3, #1
 80034ca:	607a      	str	r2, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00d      	beq.n	80034ec <mem_cmp+0x40>
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	1c5a      	adds	r2, r3, #1
 80034d4:	61fa      	str	r2, [r7, #28]
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	4619      	mov	r1, r3
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	1c5a      	adds	r2, r3, #1
 80034de:	61ba      	str	r2, [r7, #24]
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	1acb      	subs	r3, r1, r3
 80034e4:	617b      	str	r3, [r7, #20]
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0ec      	beq.n	80034c6 <mem_cmp+0x1a>
	return r;
 80034ec:	697b      	ldr	r3, [r7, #20]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3724      	adds	r7, #36	; 0x24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bc80      	pop	{r7}
 80034f6:	4770      	bx	lr

080034f8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003502:	e002      	b.n	800350a <chk_chr+0x12>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3301      	adds	r3, #1
 8003508:	607b      	str	r3, [r7, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d005      	beq.n	800351e <chk_chr+0x26>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	461a      	mov	r2, r3
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	4293      	cmp	r3, r2
 800351c:	d1f2      	bne.n	8003504 <chk_chr+0xc>
	return *str;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	781b      	ldrb	r3, [r3, #0]
}
 8003522:	4618      	mov	r0, r3
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr

0800352c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003536:	2300      	movs	r3, #0
 8003538:	60bb      	str	r3, [r7, #8]
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	e03b      	b.n	80035b8 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 8003540:	4931      	ldr	r1, [pc, #196]	; (8003608 <chk_lock+0xdc>)
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	4613      	mov	r3, r2
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	4413      	add	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	440b      	add	r3, r1
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d02c      	beq.n	80035ae <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8003554:	492c      	ldr	r1, [pc, #176]	; (8003608 <chk_lock+0xdc>)
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	4613      	mov	r3, r2
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	4413      	add	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	d120      	bne.n	80035b2 <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8003570:	4925      	ldr	r1, [pc, #148]	; (8003608 <chk_lock+0xdc>)
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	4613      	mov	r3, r2
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	4413      	add	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	3304      	adds	r3, #4
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003588:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800358a:	429a      	cmp	r2, r3
 800358c:	d111      	bne.n	80035b2 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 800358e:	491e      	ldr	r1, [pc, #120]	; (8003608 <chk_lock+0xdc>)
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4613      	mov	r3, r2
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	4413      	add	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	3308      	adds	r3, #8
 800359e:	881a      	ldrh	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035a6:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d102      	bne.n	80035b2 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 80035ac:	e007      	b.n	80035be <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 80035ae:	2301      	movs	r3, #1
 80035b0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	3301      	adds	r3, #1
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d9c0      	bls.n	8003540 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d109      	bne.n	80035d8 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d102      	bne.n	80035d0 <chk_lock+0xa4>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d101      	bne.n	80035d4 <chk_lock+0xa8>
 80035d0:	2300      	movs	r3, #0
 80035d2:	e013      	b.n	80035fc <chk_lock+0xd0>
 80035d4:	2312      	movs	r3, #18
 80035d6:	e011      	b.n	80035fc <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10b      	bne.n	80035f6 <chk_lock+0xca>
 80035de:	490a      	ldr	r1, [pc, #40]	; (8003608 <chk_lock+0xdc>)
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	4613      	mov	r3, r2
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	4413      	add	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	440b      	add	r3, r1
 80035ec:	330a      	adds	r3, #10
 80035ee:	881b      	ldrh	r3, [r3, #0]
 80035f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035f4:	d101      	bne.n	80035fa <chk_lock+0xce>
 80035f6:	2310      	movs	r3, #16
 80035f8:	e000      	b.n	80035fc <chk_lock+0xd0>
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	bc80      	pop	{r7}
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	20002158 	.word	0x20002158

0800360c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003612:	2300      	movs	r3, #0
 8003614:	607b      	str	r3, [r7, #4]
 8003616:	e002      	b.n	800361e <enq_lock+0x12>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3301      	adds	r3, #1
 800361c:	607b      	str	r3, [r7, #4]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d809      	bhi.n	8003638 <enq_lock+0x2c>
 8003624:	490a      	ldr	r1, [pc, #40]	; (8003650 <enq_lock+0x44>)
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	4613      	mov	r3, r2
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	4413      	add	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1ef      	bne.n	8003618 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b02      	cmp	r3, #2
 800363c:	bf14      	ite	ne
 800363e:	2301      	movne	r3, #1
 8003640:	2300      	moveq	r3, #0
 8003642:	b2db      	uxtb	r3, r3
}
 8003644:	4618      	mov	r0, r3
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	bc80      	pop	{r7}
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	20002158 	.word	0x20002158

08003654 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800365e:	2300      	movs	r3, #0
 8003660:	60fb      	str	r3, [r7, #12]
 8003662:	e02e      	b.n	80036c2 <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8003664:	4958      	ldr	r1, [pc, #352]	; (80037c8 <inc_lock+0x174>)
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4613      	mov	r3, r2
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	4413      	add	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d11d      	bne.n	80036bc <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8003680:	4951      	ldr	r1, [pc, #324]	; (80037c8 <inc_lock+0x174>)
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	4613      	mov	r3, r2
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	4413      	add	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	3304      	adds	r3, #4
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003698:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 800369a:	429a      	cmp	r2, r3
 800369c:	d10e      	bne.n	80036bc <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 800369e:	494a      	ldr	r1, [pc, #296]	; (80037c8 <inc_lock+0x174>)
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	4613      	mov	r3, r2
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	4413      	add	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	440b      	add	r3, r1
 80036ac:	3308      	adds	r3, #8
 80036ae:	881a      	ldrh	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036b6:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d006      	beq.n	80036ca <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	3301      	adds	r3, #1
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d9cd      	bls.n	8003664 <inc_lock+0x10>
 80036c8:	e000      	b.n	80036cc <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 80036ca:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d148      	bne.n	8003764 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80036d2:	2300      	movs	r3, #0
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	e002      	b.n	80036de <inc_lock+0x8a>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	3301      	adds	r3, #1
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d809      	bhi.n	80036f8 <inc_lock+0xa4>
 80036e4:	4938      	ldr	r1, [pc, #224]	; (80037c8 <inc_lock+0x174>)
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	4613      	mov	r3, r2
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	4413      	add	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1ef      	bne.n	80036d8 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d101      	bne.n	8003702 <inc_lock+0xae>
 80036fe:	2300      	movs	r3, #0
 8003700:	e05d      	b.n	80037be <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003708:	6819      	ldr	r1, [r3, #0]
 800370a:	482f      	ldr	r0, [pc, #188]	; (80037c8 <inc_lock+0x174>)
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	4613      	mov	r3, r2
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	4413      	add	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4403      	add	r3, r0
 8003718:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003720:	6899      	ldr	r1, [r3, #8]
 8003722:	4829      	ldr	r0, [pc, #164]	; (80037c8 <inc_lock+0x174>)
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	4613      	mov	r3, r2
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	4413      	add	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4403      	add	r3, r0
 8003730:	3304      	adds	r3, #4
 8003732:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800373a:	88d8      	ldrh	r0, [r3, #6]
 800373c:	4922      	ldr	r1, [pc, #136]	; (80037c8 <inc_lock+0x174>)
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	4613      	mov	r3, r2
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	4413      	add	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	3308      	adds	r3, #8
 800374c:	4602      	mov	r2, r0
 800374e:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8003750:	491d      	ldr	r1, [pc, #116]	; (80037c8 <inc_lock+0x174>)
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	4613      	mov	r3, r2
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	4413      	add	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	330a      	adds	r3, #10
 8003760:	2200      	movs	r2, #0
 8003762:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00c      	beq.n	8003784 <inc_lock+0x130>
 800376a:	4917      	ldr	r1, [pc, #92]	; (80037c8 <inc_lock+0x174>)
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	4613      	mov	r3, r2
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	4413      	add	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	440b      	add	r3, r1
 8003778:	330a      	adds	r3, #10
 800377a:	881b      	ldrh	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <inc_lock+0x130>
 8003780:	2300      	movs	r3, #0
 8003782:	e01c      	b.n	80037be <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10b      	bne.n	80037a2 <inc_lock+0x14e>
 800378a:	490f      	ldr	r1, [pc, #60]	; (80037c8 <inc_lock+0x174>)
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	4613      	mov	r3, r2
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	4413      	add	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	330a      	adds	r3, #10
 800379a:	881b      	ldrh	r3, [r3, #0]
 800379c:	3301      	adds	r3, #1
 800379e:	b299      	uxth	r1, r3
 80037a0:	e001      	b.n	80037a6 <inc_lock+0x152>
 80037a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037a6:	4808      	ldr	r0, [pc, #32]	; (80037c8 <inc_lock+0x174>)
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	4613      	mov	r3, r2
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	4413      	add	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4403      	add	r3, r0
 80037b4:	330a      	adds	r3, #10
 80037b6:	460a      	mov	r2, r1
 80037b8:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	3301      	adds	r3, #1
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bc80      	pop	{r7}
 80037c6:	4770      	bx	lr
 80037c8:	20002158 	.word	0x20002158

080037cc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	607b      	str	r3, [r7, #4]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d82e      	bhi.n	800383e <dec_lock+0x72>
		n = Files[i].ctr;
 80037e0:	491b      	ldr	r1, [pc, #108]	; (8003850 <dec_lock+0x84>)
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	4413      	add	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	330a      	adds	r3, #10
 80037f0:	881b      	ldrh	r3, [r3, #0]
 80037f2:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80037f4:	89fb      	ldrh	r3, [r7, #14]
 80037f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037fa:	d101      	bne.n	8003800 <dec_lock+0x34>
 80037fc:	2300      	movs	r3, #0
 80037fe:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8003800:	89fb      	ldrh	r3, [r7, #14]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d002      	beq.n	800380c <dec_lock+0x40>
 8003806:	89fb      	ldrh	r3, [r7, #14]
 8003808:	3b01      	subs	r3, #1
 800380a:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800380c:	4910      	ldr	r1, [pc, #64]	; (8003850 <dec_lock+0x84>)
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	4613      	mov	r3, r2
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	4413      	add	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	330a      	adds	r3, #10
 800381c:	89fa      	ldrh	r2, [r7, #14]
 800381e:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003820:	89fb      	ldrh	r3, [r7, #14]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d108      	bne.n	8003838 <dec_lock+0x6c>
 8003826:	490a      	ldr	r1, [pc, #40]	; (8003850 <dec_lock+0x84>)
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	4613      	mov	r3, r2
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	4413      	add	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	440b      	add	r3, r1
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003838:	2300      	movs	r3, #0
 800383a:	737b      	strb	r3, [r7, #13]
 800383c:	e001      	b.n	8003842 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800383e:	2302      	movs	r3, #2
 8003840:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003842:	7b7b      	ldrb	r3, [r7, #13]
}
 8003844:	4618      	mov	r0, r3
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	bc80      	pop	{r7}
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	20002158 	.word	0x20002158

08003854 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800385c:	2300      	movs	r3, #0
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	e016      	b.n	8003890 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003862:	4910      	ldr	r1, [pc, #64]	; (80038a4 <clear_lock+0x50>)
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	4613      	mov	r3, r2
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	4413      	add	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	440b      	add	r3, r1
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	429a      	cmp	r2, r3
 8003876:	d108      	bne.n	800388a <clear_lock+0x36>
 8003878:	490a      	ldr	r1, [pc, #40]	; (80038a4 <clear_lock+0x50>)
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	4613      	mov	r3, r2
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	4413      	add	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	2200      	movs	r2, #0
 8003888:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	3301      	adds	r3, #1
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d9e5      	bls.n	8003862 <clear_lock+0xe>
	}
}
 8003896:	bf00      	nop
 8003898:	bf00      	nop
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	bc80      	pop	{r7}
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	20002158 	.word	0x20002158

080038a8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80038b0:	2300      	movs	r3, #0
 80038b2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038ba:	791b      	ldrb	r3, [r3, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d040      	beq.n	8003942 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038d0:	7858      	ldrb	r0, [r3, #1]
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	2301      	movs	r3, #1
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	f7ff fd72 	bl	80033c0 <disk_write>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d002      	beq.n	80038e8 <sync_window+0x40>
			res = FR_DISK_ERR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	73fb      	strb	r3, [r7, #15]
 80038e6:	e02c      	b.n	8003942 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038ee:	2200      	movs	r2, #0
 80038f0:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	1ad2      	subs	r2, r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	429a      	cmp	r2, r3
 8003908:	d21b      	bcs.n	8003942 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003910:	78db      	ldrb	r3, [r3, #3]
 8003912:	613b      	str	r3, [r7, #16]
 8003914:	e012      	b.n	800393c <sync_window+0x94>
					wsect += fs->fsize;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	4413      	add	r3, r2
 8003922:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800392a:	7858      	ldrb	r0, [r3, #1]
 800392c:	6879      	ldr	r1, [r7, #4]
 800392e:	2301      	movs	r3, #1
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	f7ff fd45 	bl	80033c0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	3b01      	subs	r3, #1
 800393a:	613b      	str	r3, [r7, #16]
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d8e9      	bhi.n	8003916 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8003942:	7bfb      	ldrb	r3, [r7, #15]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003956:	2300      	movs	r3, #0
 8003958:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	429a      	cmp	r2, r3
 8003966:	d01e      	beq.n	80039a6 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7ff ff9d 	bl	80038a8 <sync_window>
 800396e:	4603      	mov	r3, r0
 8003970:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003972:	7bfb      	ldrb	r3, [r7, #15]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d116      	bne.n	80039a6 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800397e:	7858      	ldrb	r0, [r3, #1]
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	2301      	movs	r3, #1
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	f7ff fcfb 	bl	8003380 <disk_read>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d004      	beq.n	800399a <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003990:	f04f 33ff 	mov.w	r3, #4294967295
 8003994:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003996:	2301      	movs	r3, #1
 8003998:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039a0:	461a      	mov	r2, r3
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 80039a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f7ff ff75 	bl	80038a8 <sync_window>
 80039be:	4603      	mov	r3, r0
 80039c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80039c2:	7bfb      	ldrb	r3, [r7, #15]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f040 80ad 	bne.w	8003b24 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	2b03      	cmp	r3, #3
 80039d4:	f040 8098 	bne.w	8003b08 <sync_fs+0x158>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039de:	795b      	ldrb	r3, [r3, #5]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	f040 8091 	bne.w	8003b08 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039ee:	895b      	ldrh	r3, [r3, #10]
 80039f0:	461a      	mov	r2, r3
 80039f2:	2100      	movs	r1, #0
 80039f4:	f7ff fd40 	bl	8003478 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2255      	movs	r2, #85	; 0x55
 80039fc:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	22aa      	movs	r2, #170	; 0xaa
 8003a04:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2252      	movs	r2, #82	; 0x52
 8003a0c:	701a      	strb	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2252      	movs	r2, #82	; 0x52
 8003a12:	705a      	strb	r2, [r3, #1]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2261      	movs	r2, #97	; 0x61
 8003a18:	709a      	strb	r2, [r3, #2]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2241      	movs	r2, #65	; 0x41
 8003a1e:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2272      	movs	r2, #114	; 0x72
 8003a24:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2272      	movs	r2, #114	; 0x72
 8003a2c:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2241      	movs	r2, #65	; 0x41
 8003a34:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2261      	movs	r2, #97	; 0x61
 8003a3c:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	0a1b      	lsrs	r3, r3, #8
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	0c1b      	lsrs	r3, r3, #16
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	0e1b      	lsrs	r3, r3, #24
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	0a1b      	lsrs	r3, r3, #8
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	0c1b      	lsrs	r3, r3, #16
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	0e1b      	lsrs	r3, r3, #24
 8003acc:	b2da      	uxtb	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	3301      	adds	r3, #1
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ae4:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aec:	7858      	ldrb	r0, [r3, #1]
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af8:	2301      	movs	r3, #1
 8003afa:	f7ff fc61 	bl	80033c0 <disk_write>
			fs->fsi_flag = 0;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b04:	2200      	movs	r2, #0
 8003b06:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b0e:	785b      	ldrb	r3, [r3, #1]
 8003b10:	2200      	movs	r2, #0
 8003b12:	2100      	movs	r1, #0
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff fc73 	bl	8003400 <disk_ioctl>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <sync_fs+0x174>
			res = FR_DISK_ERR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
 8003b36:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	3b02      	subs	r3, #2
 8003b3c:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	3b02      	subs	r3, #2
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d301      	bcc.n	8003b52 <clust2sect+0x24>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	e00c      	b.n	8003b6c <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b58:	789b      	ldrb	r3, [r3, #2]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	fb03 f202 	mul.w	r2, r3, r2
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6a:	4413      	add	r3, r2
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bc80      	pop	{r7}
 8003b74:	4770      	bx	lr

08003b76 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b086      	sub	sp, #24
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
 8003b7e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d906      	bls.n	8003b94 <get_fat+0x1e>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d302      	bcc.n	8003b9a <get_fat+0x24>
		val = 1;	/* Internal error */
 8003b94:	2301      	movs	r3, #1
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	e0e4      	b.n	8003d64 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b9e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	2b03      	cmp	r3, #3
 8003baa:	f000 8098 	beq.w	8003cde <get_fat+0x168>
 8003bae:	2b03      	cmp	r3, #3
 8003bb0:	f300 80ce 	bgt.w	8003d50 <get_fat+0x1da>
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d002      	beq.n	8003bbe <get_fat+0x48>
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d05f      	beq.n	8003c7c <get_fat+0x106>
 8003bbc:	e0c8      	b.n	8003d50 <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	085b      	lsrs	r3, r3, #1
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	4413      	add	r3, r2
 8003bca:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bd2:	6a1a      	ldr	r2, [r3, #32]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bda:	895b      	ldrh	r3, [r3, #10]
 8003bdc:	4619      	mov	r1, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	fbb3 f3f1 	udiv	r3, r3, r1
 8003be4:	4413      	add	r3, r2
 8003be6:	4619      	mov	r1, r3
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f7ff feaf 	bl	800394c <move_window>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f040 80b0 	bne.w	8003d56 <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	60fa      	str	r2, [r7, #12]
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003c02:	8952      	ldrh	r2, [r2, #10]
 8003c04:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c08:	fb01 f202 	mul.w	r2, r1, r2
 8003c0c:	1a9b      	subs	r3, r3, r2
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	5cd3      	ldrb	r3, [r2, r3]
 8003c12:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c1a:	6a1a      	ldr	r2, [r3, #32]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c22:	895b      	ldrh	r3, [r3, #10]
 8003c24:	4619      	mov	r1, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c2c:	4413      	add	r3, r2
 8003c2e:	4619      	mov	r1, r3
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7ff fe8b 	bl	800394c <move_window>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f040 808e 	bne.w	8003d5a <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c44:	895b      	ldrh	r3, [r3, #10]
 8003c46:	461a      	mov	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c4e:	fb01 f202 	mul.w	r2, r1, r2
 8003c52:	1a9b      	subs	r3, r3, r2
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	5cd3      	ldrb	r3, [r2, r3]
 8003c58:	021b      	lsls	r3, r3, #8
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d002      	beq.n	8003c72 <get_fat+0xfc>
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	091b      	lsrs	r3, r3, #4
 8003c70:	e002      	b.n	8003c78 <get_fat+0x102>
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c78:	617b      	str	r3, [r7, #20]
			break;
 8003c7a:	e073      	b.n	8003d64 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c82:	6a1a      	ldr	r2, [r3, #32]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c8a:	895b      	ldrh	r3, [r3, #10]
 8003c8c:	085b      	lsrs	r3, r3, #1
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	4619      	mov	r1, r3
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c98:	4413      	add	r3, r2
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7ff fe55 	bl	800394c <move_window>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d15a      	bne.n	8003d5e <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003cb2:	8952      	ldrh	r2, [r2, #10]
 8003cb4:	fbb3 f1f2 	udiv	r1, r3, r2
 8003cb8:	fb01 f202 	mul.w	r2, r1, r2
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	021b      	lsls	r3, r3, #8
 8003ccc:	b21a      	sxth	r2, r3
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	b21b      	sxth	r3, r3
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	b21b      	sxth	r3, r3
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	617b      	str	r3, [r7, #20]
			break;
 8003cdc:	e042      	b.n	8003d64 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ce4:	6a1a      	ldr	r2, [r3, #32]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cec:	895b      	ldrh	r3, [r3, #10]
 8003cee:	089b      	lsrs	r3, r3, #2
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cfa:	4413      	add	r3, r2
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7ff fe24 	bl	800394c <move_window>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d12b      	bne.n	8003d62 <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d14:	8952      	ldrh	r2, [r2, #10]
 8003d16:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d1a:	fb01 f202 	mul.w	r2, r1, r2
 8003d1e:	1a9b      	subs	r3, r3, r2
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	4413      	add	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	3303      	adds	r3, #3
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	061a      	lsls	r2, r3, #24
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	3302      	adds	r3, #2
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	041b      	lsls	r3, r3, #16
 8003d36:	4313      	orrs	r3, r2
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	3201      	adds	r2, #1
 8003d3c:	7812      	ldrb	r2, [r2, #0]
 8003d3e:	0212      	lsls	r2, r2, #8
 8003d40:	4313      	orrs	r3, r2
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	7812      	ldrb	r2, [r2, #0]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003d4c:	617b      	str	r3, [r7, #20]
			break;
 8003d4e:	e009      	b.n	8003d64 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 8003d50:	2301      	movs	r3, #1
 8003d52:	617b      	str	r3, [r7, #20]
 8003d54:	e006      	b.n	8003d64 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003d56:	bf00      	nop
 8003d58:	e004      	b.n	8003d64 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003d5a:	bf00      	nop
 8003d5c:	e002      	b.n	8003d64 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003d5e:	bf00      	nop
 8003d60:	e000      	b.n	8003d64 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003d62:	bf00      	nop
		}
	}

	return val;
 8003d64:	697b      	ldr	r3, [r7, #20]
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3718      	adds	r7, #24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b088      	sub	sp, #32
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d906      	bls.n	8003d8e <put_fat+0x20>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d302      	bcc.n	8003d94 <put_fat+0x26>
		res = FR_INT_ERR;
 8003d8e:	2302      	movs	r3, #2
 8003d90:	77fb      	strb	r3, [r7, #31]
 8003d92:	e13a      	b.n	800400a <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2b03      	cmp	r3, #3
 8003d9e:	f000 80d0 	beq.w	8003f42 <put_fat+0x1d4>
 8003da2:	2b03      	cmp	r3, #3
 8003da4:	f300 8127 	bgt.w	8003ff6 <put_fat+0x288>
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d003      	beq.n	8003db4 <put_fat+0x46>
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	f000 808f 	beq.w	8003ed0 <put_fat+0x162>
 8003db2:	e120      	b.n	8003ff6 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	617b      	str	r3, [r7, #20]
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	085b      	lsrs	r3, r3, #1
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dc8:	6a1a      	ldr	r2, [r3, #32]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dd0:	895b      	ldrh	r3, [r3, #10]
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dda:	4413      	add	r3, r2
 8003ddc:	4619      	mov	r1, r3
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f7ff fdb4 	bl	800394c <move_window>
 8003de4:	4603      	mov	r3, r0
 8003de6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003de8:	7ffb      	ldrb	r3, [r7, #31]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f040 8106 	bne.w	8003ffc <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	617a      	str	r2, [r7, #20]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003dfc:	8952      	ldrh	r2, [r2, #10]
 8003dfe:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e02:	fb01 f202 	mul.w	r2, r1, r2
 8003e06:	1a9b      	subs	r3, r3, r2
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00d      	beq.n	8003e34 <put_fat+0xc6>
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	b25b      	sxtb	r3, r3
 8003e1e:	f003 030f 	and.w	r3, r3, #15
 8003e22:	b25a      	sxtb	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	b25b      	sxtb	r3, r3
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	b25b      	sxtb	r3, r3
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	e001      	b.n	8003e38 <put_fat+0xca>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e42:	2201      	movs	r2, #1
 8003e44:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e4c:	6a1a      	ldr	r2, [r3, #32]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e54:	895b      	ldrh	r3, [r3, #10]
 8003e56:	4619      	mov	r1, r3
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e5e:	4413      	add	r3, r2
 8003e60:	4619      	mov	r1, r3
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f7ff fd72 	bl	800394c <move_window>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003e6c:	7ffb      	ldrb	r3, [r7, #31]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f040 80c6 	bne.w	8004000 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e7a:	895b      	ldrh	r3, [r3, #10]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e84:	fb01 f202 	mul.w	r2, r1, r2
 8003e88:	1a9b      	subs	r3, r3, r2
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <put_fat+0x134>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	091b      	lsrs	r3, r3, #4
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	e00e      	b.n	8003ec0 <put_fat+0x152>
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	b25b      	sxtb	r3, r3
 8003ea8:	f023 030f 	bic.w	r3, r3, #15
 8003eac:	b25a      	sxtb	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	0a1b      	lsrs	r3, r3, #8
 8003eb2:	b25b      	sxtb	r3, r3
 8003eb4:	f003 030f 	and.w	r3, r3, #15
 8003eb8:	b25b      	sxtb	r3, r3
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	b25b      	sxtb	r3, r3
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eca:	2201      	movs	r2, #1
 8003ecc:	711a      	strb	r2, [r3, #4]
			break;
 8003ece:	e09c      	b.n	800400a <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ed6:	6a1a      	ldr	r2, [r3, #32]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ede:	895b      	ldrh	r3, [r3, #10]
 8003ee0:	085b      	lsrs	r3, r3, #1
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	fbb3 f3f1 	udiv	r3, r3, r1
 8003eec:	4413      	add	r3, r2
 8003eee:	4619      	mov	r1, r3
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f7ff fd2b 	bl	800394c <move_window>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003efa:	7ffb      	ldrb	r3, [r7, #31]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f040 8081 	bne.w	8004004 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f0c:	8952      	ldrh	r2, [r2, #10]
 8003f0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f12:	fb01 f202 	mul.w	r2, r1, r2
 8003f16:	1a9b      	subs	r3, r3, r2
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	701a      	strb	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	0a1b      	lsrs	r3, r3, #8
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	3301      	adds	r3, #1
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	711a      	strb	r2, [r3, #4]
			break;
 8003f40:	e063      	b.n	800400a <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f48:	6a1a      	ldr	r2, [r3, #32]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f50:	895b      	ldrh	r3, [r3, #10]
 8003f52:	089b      	lsrs	r3, r3, #2
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	4619      	mov	r1, r3
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f5e:	4413      	add	r3, r2
 8003f60:	4619      	mov	r1, r3
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f7ff fcf2 	bl	800394c <move_window>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003f6c:	7ffb      	ldrb	r3, [r7, #31]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d14a      	bne.n	8004008 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f7c:	8952      	ldrh	r2, [r2, #10]
 8003f7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f82:	fb01 f202 	mul.w	r2, r1, r2
 8003f86:	1a9b      	subs	r3, r3, r2
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	3303      	adds	r3, #3
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	061a      	lsls	r2, r3, #24
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	3302      	adds	r3, #2
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	041b      	lsls	r3, r3, #16
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	3201      	adds	r2, #1
 8003fa4:	7812      	ldrb	r2, [r2, #0]
 8003fa6:	0212      	lsls	r2, r2, #8
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	7812      	ldrb	r2, [r2, #0]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	701a      	strb	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	0a1b      	lsrs	r3, r3, #8
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	b2d2      	uxtb	r2, r2
 8003fd0:	701a      	strb	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	0c1a      	lsrs	r2, r3, #16
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	3302      	adds	r3, #2
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	701a      	strb	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	0e1a      	lsrs	r2, r3, #24
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	3303      	adds	r3, #3
 8003fe6:	b2d2      	uxtb	r2, r2
 8003fe8:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	711a      	strb	r2, [r3, #4]
			break;
 8003ff4:	e009      	b.n	800400a <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	77fb      	strb	r3, [r7, #31]
 8003ffa:	e006      	b.n	800400a <put_fat+0x29c>
			if (res != FR_OK) break;
 8003ffc:	bf00      	nop
 8003ffe:	e004      	b.n	800400a <put_fat+0x29c>
			if (res != FR_OK) break;
 8004000:	bf00      	nop
 8004002:	e002      	b.n	800400a <put_fat+0x29c>
			if (res != FR_OK) break;
 8004004:	bf00      	nop
 8004006:	e000      	b.n	800400a <put_fat+0x29c>
			if (res != FR_OK) break;
 8004008:	bf00      	nop
		}
	}

	return res;
 800400a:	7ffb      	ldrb	r3, [r7, #31]
}
 800400c:	4618      	mov	r0, r3
 800400e:	3720      	adds	r7, #32
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d906      	bls.n	8004032 <remove_chain+0x1e>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	429a      	cmp	r2, r3
 8004030:	d302      	bcc.n	8004038 <remove_chain+0x24>
		res = FR_INT_ERR;
 8004032:	2302      	movs	r3, #2
 8004034:	73fb      	strb	r3, [r7, #15]
 8004036:	e049      	b.n	80040cc <remove_chain+0xb8>

	} else {
		res = FR_OK;
 8004038:	2300      	movs	r3, #0
 800403a:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800403c:	e03b      	b.n	80040b6 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800403e:	6839      	ldr	r1, [r7, #0]
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7ff fd98 	bl	8003b76 <get_fat>
 8004046:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d03b      	beq.n	80040c6 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d102      	bne.n	800405a <remove_chain+0x46>
 8004054:	2302      	movs	r3, #2
 8004056:	73fb      	strb	r3, [r7, #15]
 8004058:	e038      	b.n	80040cc <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004060:	d102      	bne.n	8004068 <remove_chain+0x54>
 8004062:	2301      	movs	r3, #1
 8004064:	73fb      	strb	r3, [r7, #15]
 8004066:	e031      	b.n	80040cc <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8004068:	2200      	movs	r2, #0
 800406a:	6839      	ldr	r1, [r7, #0]
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f7ff fe7e 	bl	8003d6e <put_fat>
 8004072:	4603      	mov	r3, r0
 8004074:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004076:	7bfb      	ldrb	r3, [r7, #15]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d126      	bne.n	80040ca <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004088:	d013      	beq.n	80040b2 <remove_chain+0x9e>
				fs->free_clust++;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	3301      	adds	r3, #1
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800409a:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040a2:	795b      	ldrb	r3, [r3, #5]
 80040a4:	f043 0301 	orr.w	r3, r3, #1
 80040a8:	b2da      	uxtb	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040b0:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d3bc      	bcc.n	800403e <remove_chain+0x2a>
 80040c4:	e002      	b.n	80040cc <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 80040c6:	bf00      	nop
 80040c8:	e000      	b.n	80040cc <remove_chain+0xb8>
			if (res != FR_OK) break;
 80040ca:	bf00      	nop
		}
	}

	return res;
 80040cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b086      	sub	sp, #24
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
 80040de:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d111      	bne.n	800410a <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d006      	beq.n	8004104 <create_chain+0x2e>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	429a      	cmp	r2, r3
 8004102:	d31d      	bcc.n	8004140 <create_chain+0x6a>
 8004104:	2301      	movs	r3, #1
 8004106:	613b      	str	r3, [r7, #16]
 8004108:	e01a      	b.n	8004140 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800410a:	6839      	ldr	r1, [r7, #0]
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f7ff fd32 	bl	8003b76 <get_fat>
 8004112:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d801      	bhi.n	800411e <create_chain+0x48>
 800411a:	2301      	movs	r3, #1
 800411c:	e07f      	b.n	800421e <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004124:	d101      	bne.n	800412a <create_chain+0x54>
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	e079      	b.n	800421e <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	429a      	cmp	r2, r3
 8004136:	d201      	bcs.n	800413c <create_chain+0x66>
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	e070      	b.n	800421e <create_chain+0x148>
		scl = clst;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	3301      	adds	r3, #1
 8004148:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	429a      	cmp	r2, r3
 8004156:	d307      	bcc.n	8004168 <create_chain+0x92>
			ncl = 2;
 8004158:	2302      	movs	r3, #2
 800415a:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	429a      	cmp	r2, r3
 8004162:	d901      	bls.n	8004168 <create_chain+0x92>
 8004164:	2300      	movs	r3, #0
 8004166:	e05a      	b.n	800421e <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8004168:	6979      	ldr	r1, [r7, #20]
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7ff fd03 	bl	8003b76 <get_fat>
 8004170:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00e      	beq.n	8004196 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417e:	d002      	beq.n	8004186 <create_chain+0xb0>
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d101      	bne.n	800418a <create_chain+0xb4>
			return cs;
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	e049      	b.n	800421e <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	429a      	cmp	r2, r3
 8004190:	d1d8      	bne.n	8004144 <create_chain+0x6e>
 8004192:	2300      	movs	r3, #0
 8004194:	e043      	b.n	800421e <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8004196:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8004198:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800419c:	6979      	ldr	r1, [r7, #20]
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7ff fde5 	bl	8003d6e <put_fat>
 80041a4:	4603      	mov	r3, r0
 80041a6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d109      	bne.n	80041c2 <create_chain+0xec>
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d006      	beq.n	80041c2 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	6839      	ldr	r1, [r7, #0]
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f7ff fdd8 	bl	8003d6e <put_fat>
 80041be:	4603      	mov	r3, r0
 80041c0:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 80041c2:	7bfb      	ldrb	r3, [r7, #15]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d121      	bne.n	800420c <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ce:	461a      	mov	r2, r3
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e0:	d01c      	beq.n	800421c <create_chain+0x146>
			fs->free_clust--;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	3b01      	subs	r3, #1
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041f2:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041fa:	795b      	ldrb	r3, [r3, #5]
 80041fc:	f043 0301 	orr.w	r3, r3, #1
 8004200:	b2da      	uxtb	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004208:	715a      	strb	r2, [r3, #5]
 800420a:	e007      	b.n	800421c <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800420c:	7bfb      	ldrb	r3, [r7, #15]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d102      	bne.n	8004218 <create_chain+0x142>
 8004212:	f04f 33ff 	mov.w	r3, #4294967295
 8004216:	e000      	b.n	800421a <create_chain+0x144>
 8004218:	2301      	movs	r3, #1
 800421a:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800421c:	697b      	ldr	r3, [r7, #20]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3718      	adds	r7, #24
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8004226:	b480      	push	{r7}
 8004228:	b087      	sub	sp, #28
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004238:	3304      	adds	r3, #4
 800423a:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004248:	895b      	ldrh	r3, [r3, #10]
 800424a:	461a      	mov	r2, r3
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004258:	6812      	ldr	r2, [r2, #0]
 800425a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800425e:	7892      	ldrb	r2, [r2, #2]
 8004260:	fbb3 f3f2 	udiv	r3, r3, r2
 8004264:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1d1a      	adds	r2, r3, #4
 800426a:	613a      	str	r2, [r7, #16]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <clmt_clust+0x54>
 8004276:	2300      	movs	r3, #0
 8004278:	e010      	b.n	800429c <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	429a      	cmp	r2, r3
 8004280:	d307      	bcc.n	8004292 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	617b      	str	r3, [r7, #20]
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	3304      	adds	r3, #4
 800428e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004290:	e7e9      	b.n	8004266 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8004292:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	4413      	add	r3, r2
}
 800429c:	4618      	mov	r0, r3
 800429e:	371c      	adds	r7, #28
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bc80      	pop	{r7}
 80042a4:	4770      	bx	lr

080042a6 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b086      	sub	sp, #24
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
 80042ae:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ba:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d009      	beq.n	80042e0 <dir_sdi+0x3a>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d301      	bcc.n	80042e4 <dir_sdi+0x3e>
		return FR_INT_ERR;
 80042e0:	2302      	movs	r3, #2
 80042e2:	e0aa      	b.n	800443a <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d110      	bne.n	800430c <dir_sdi+0x66>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b03      	cmp	r3, #3
 80042fa:	d107      	bne.n	800430c <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430a:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d115      	bne.n	800433e <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800431e:	891b      	ldrh	r3, [r3, #8]
 8004320:	461a      	mov	r2, r3
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	4293      	cmp	r3, r2
 8004326:	d301      	bcc.n	800432c <dir_sdi+0x86>
			return FR_INT_ERR;
 8004328:	2302      	movs	r3, #2
 800432a:	e086      	b.n	800443a <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	613b      	str	r3, [r7, #16]
 800433c:	e043      	b.n	80043c6 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800434a:	895b      	ldrh	r3, [r3, #10]
 800434c:	095b      	lsrs	r3, r3, #5
 800434e:	b29b      	uxth	r3, r3
 8004350:	461a      	mov	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800435e:	789b      	ldrb	r3, [r3, #2]
 8004360:	fb02 f303 	mul.w	r3, r2, r3
 8004364:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8004366:	e021      	b.n	80043ac <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6979      	ldr	r1, [r7, #20]
 8004372:	4618      	mov	r0, r3
 8004374:	f7ff fbff 	bl	8003b76 <get_fat>
 8004378:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004380:	d101      	bne.n	8004386 <dir_sdi+0xe0>
 8004382:	2301      	movs	r3, #1
 8004384:	e059      	b.n	800443a <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d909      	bls.n	80043a0 <dir_sdi+0xfa>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	429a      	cmp	r2, r3
 800439e:	d301      	bcc.n	80043a4 <dir_sdi+0xfe>
				return FR_INT_ERR;
 80043a0:	2302      	movs	r3, #2
 80043a2:	e04a      	b.n	800443a <dir_sdi+0x194>
			idx -= ic;
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d2d9      	bcs.n	8004368 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6979      	ldr	r1, [r7, #20]
 80043be:	4618      	mov	r0, r3
 80043c0:	f7ff fbb5 	bl	8003b2e <clust2sect>
 80043c4:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043cc:	461a      	mov	r2, r3
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <dir_sdi+0x136>
 80043d8:	2302      	movs	r3, #2
 80043da:	e02e      	b.n	800443a <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043e8:	895b      	ldrh	r3, [r3, #10]
 80043ea:	095b      	lsrs	r3, r3, #5
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	461a      	mov	r2, r3
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	4413      	add	r3, r2
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004400:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4618      	mov	r0, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004418:	895b      	ldrh	r3, [r3, #10]
 800441a:	095b      	lsrs	r3, r3, #5
 800441c:	b29b      	uxth	r3, r3
 800441e:	461a      	mov	r2, r3
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	fbb3 f1f2 	udiv	r1, r3, r2
 8004426:	fb01 f202 	mul.w	r2, r1, r2
 800442a:	1a9b      	subs	r3, r3, r2
 800442c:	015b      	lsls	r3, r3, #5
 800442e:	4403      	add	r3, r0
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004436:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3718      	adds	r7, #24
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004442:	b590      	push	{r4, r7, lr}
 8004444:	b087      	sub	sp, #28
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
 800444a:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004452:	88db      	ldrh	r3, [r3, #6]
 8004454:	3301      	adds	r3, #1
 8004456:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	b29b      	uxth	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d005      	beq.n	800446c <dir_next+0x2a>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <dir_next+0x2e>
		return FR_NO_FILE;
 800446c:	2304      	movs	r3, #4
 800446e:	e12e      	b.n	80046ce <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800447c:	895b      	ldrh	r3, [r3, #10]
 800447e:	095b      	lsrs	r3, r3, #5
 8004480:	b29b      	uxth	r3, r3
 8004482:	461a      	mov	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	fbb3 f1f2 	udiv	r1, r3, r2
 800448a:	fb01 f202 	mul.w	r2, r1, r2
 800448e:	1a9b      	subs	r3, r3, r2
 8004490:	2b00      	cmp	r3, #0
 8004492:	f040 80fa 	bne.w	800468a <dir_next+0x248>
		dp->sect++;					/* Next sector */
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	3301      	adds	r3, #1
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044a6:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10d      	bne.n	80044d0 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044c0:	891b      	ldrh	r3, [r3, #8]
 80044c2:	461a      	mov	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	4293      	cmp	r3, r2
 80044c8:	f0c0 80df 	bcc.w	800468a <dir_next+0x248>
				return FR_NO_FILE;
 80044cc:	2304      	movs	r3, #4
 80044ce:	e0fe      	b.n	80046ce <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044dc:	895b      	ldrh	r3, [r3, #10]
 80044de:	095b      	lsrs	r3, r3, #5
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	461a      	mov	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044f0:	6812      	ldr	r2, [r2, #0]
 80044f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044f6:	7892      	ldrb	r2, [r2, #2]
 80044f8:	3a01      	subs	r2, #1
 80044fa:	4013      	ands	r3, r2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f040 80c4 	bne.w	800468a <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	4619      	mov	r1, r3
 8004514:	4610      	mov	r0, r2
 8004516:	f7ff fb2e 	bl	8003b76 <get_fat>
 800451a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d801      	bhi.n	8004526 <dir_next+0xe4>
 8004522:	2302      	movs	r3, #2
 8004524:	e0d3      	b.n	80046ce <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800452c:	d101      	bne.n	8004532 <dir_next+0xf0>
 800452e:	2301      	movs	r3, #1
 8004530:	e0cd      	b.n	80046ce <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	429a      	cmp	r2, r3
 8004544:	f0c0 808e 	bcc.w	8004664 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <dir_next+0x110>
 800454e:	2304      	movs	r3, #4
 8004550:	e0bd      	b.n	80046ce <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	4619      	mov	r1, r3
 8004564:	4610      	mov	r0, r2
 8004566:	f7ff fdb6 	bl	80040d6 <create_chain>
 800456a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <dir_next+0x134>
 8004572:	2307      	movs	r3, #7
 8004574:	e0ab      	b.n	80046ce <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d101      	bne.n	8004580 <dir_next+0x13e>
 800457c:	2302      	movs	r3, #2
 800457e:	e0a6      	b.n	80046ce <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004586:	d101      	bne.n	800458c <dir_next+0x14a>
 8004588:	2301      	movs	r3, #1
 800458a:	e0a0      	b.n	80046ce <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4618      	mov	r0, r3
 8004596:	f7ff f987 	bl	80038a8 <sync_window>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <dir_next+0x162>
 80045a0:	2301      	movs	r3, #1
 80045a2:	e094      	b.n	80046ce <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4618      	mov	r0, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ba:	895b      	ldrh	r3, [r3, #10]
 80045bc:	461a      	mov	r2, r3
 80045be:	2100      	movs	r1, #0
 80045c0:	f7fe ff5a 	bl	8003478 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045d2:	681c      	ldr	r4, [r3, #0]
 80045d4:	6979      	ldr	r1, [r7, #20]
 80045d6:	4610      	mov	r0, r2
 80045d8:	f7ff faa9 	bl	8003b2e <clust2sect>
 80045dc:	4603      	mov	r3, r0
 80045de:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 80045e2:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80045e4:	2300      	movs	r3, #0
 80045e6:	613b      	str	r3, [r7, #16]
 80045e8:	e021      	b.n	800462e <dir_next+0x1ec>
						dp->fs->wflag = 1;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045f6:	2201      	movs	r2, #1
 80045f8:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4618      	mov	r0, r3
 8004604:	f7ff f950 	bl	80038a8 <sync_window>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <dir_next+0x1d0>
 800460e:	2301      	movs	r3, #1
 8004610:	e05d      	b.n	80046ce <dir_next+0x28c>
						dp->fs->winsect++;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800461e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004620:	3201      	adds	r2, #1
 8004622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004626:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	3301      	adds	r3, #1
 800462c:	613b      	str	r3, [r7, #16]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800463a:	789b      	ldrb	r3, [r3, #2]
 800463c:	461a      	mov	r2, r3
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	4293      	cmp	r3, r2
 8004642:	d3d2      	bcc.n	80045ea <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004650:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1acb      	subs	r3, r1, r3
 800465e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004662:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800466a:	461a      	mov	r2, r3
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6979      	ldr	r1, [r7, #20]
 800467a:	4618      	mov	r0, r3
 800467c:	f7ff fa57 	bl	8003b2e <clust2sect>
 8004680:	4602      	mov	r2, r0
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004688:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	b29a      	uxth	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004694:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4618      	mov	r0, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ac:	895b      	ldrh	r3, [r3, #10]
 80046ae:	095b      	lsrs	r3, r3, #5
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	461a      	mov	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80046ba:	fb01 f202 	mul.w	r2, r1, r2
 80046be:	1a9b      	subs	r3, r3, r2
 80046c0:	015b      	lsls	r3, r3, #5
 80046c2:	4403      	add	r3, r0
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046ca:	6153      	str	r3, [r2, #20]

	return FR_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	371c      	adds	r7, #28
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd90      	pop	{r4, r7, pc}

080046d6 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b084      	sub	sp, #16
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
 80046de:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 80046e0:	2100      	movs	r1, #0
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7ff fddf 	bl	80042a6 <dir_sdi>
 80046e8:	4603      	mov	r3, r0
 80046ea:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80046ec:	7bfb      	ldrb	r3, [r7, #15]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d135      	bne.n	800475e <dir_alloc+0x88>
		n = 0;
 80046f2:	2300      	movs	r3, #0
 80046f4:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	4619      	mov	r1, r3
 8004708:	4610      	mov	r0, r2
 800470a:	f7ff f91f 	bl	800394c <move_window>
 800470e:	4603      	mov	r3, r0
 8004710:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004712:	7bfb      	ldrb	r3, [r7, #15]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d121      	bne.n	800475c <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	2be5      	cmp	r3, #229	; 0xe5
 8004724:	d006      	beq.n	8004734 <dir_alloc+0x5e>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d107      	bne.n	8004744 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	3301      	adds	r3, #1
 8004738:	60bb      	str	r3, [r7, #8]
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	429a      	cmp	r2, r3
 8004740:	d102      	bne.n	8004748 <dir_alloc+0x72>
 8004742:	e00c      	b.n	800475e <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004744:	2300      	movs	r3, #0
 8004746:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8004748:	2101      	movs	r1, #1
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7ff fe79 	bl	8004442 <dir_next>
 8004750:	4603      	mov	r3, r0
 8004752:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8004754:	7bfb      	ldrb	r3, [r7, #15]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d0cd      	beq.n	80046f6 <dir_alloc+0x20>
 800475a:	e000      	b.n	800475e <dir_alloc+0x88>
			if (res != FR_OK) break;
 800475c:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800475e:	7bfb      	ldrb	r3, [r7, #15]
 8004760:	2b04      	cmp	r3, #4
 8004762:	d101      	bne.n	8004768 <dir_alloc+0x92>
 8004764:	2307      	movs	r3, #7
 8004766:	73fb      	strb	r3, [r7, #15]
	return res;
 8004768:	7bfb      	ldrb	r3, [r7, #15]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8004772:	b480      	push	{r7}
 8004774:	b085      	sub	sp, #20
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
 800477a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	331b      	adds	r3, #27
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	021b      	lsls	r3, r3, #8
 8004784:	b21a      	sxth	r2, r3
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	331a      	adds	r3, #26
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	b21b      	sxth	r3, r3
 800478e:	4313      	orrs	r3, r2
 8004790:	b21b      	sxth	r3, r3
 8004792:	b29b      	uxth	r3, r3
 8004794:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	2b03      	cmp	r3, #3
 80047a0:	d10f      	bne.n	80047c2 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	3315      	adds	r3, #21
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	021b      	lsls	r3, r3, #8
 80047aa:	b21a      	sxth	r2, r3
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	3314      	adds	r3, #20
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	b21b      	sxth	r3, r3
 80047b4:	4313      	orrs	r3, r2
 80047b6:	b21b      	sxth	r3, r3
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	041b      	lsls	r3, r3, #16
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	4313      	orrs	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]

	return cl;
 80047c2:	68fb      	ldr	r3, [r7, #12]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bc80      	pop	{r7}
 80047cc:	4770      	bx	lr

080047ce <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b083      	sub	sp, #12
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
 80047d6:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	331a      	adds	r3, #26
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	701a      	strb	r2, [r3, #0]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	0a1b      	lsrs	r3, r3, #8
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	331b      	adds	r3, #27
 80047ee:	b2d2      	uxtb	r2, r2
 80047f0:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	0c1a      	lsrs	r2, r3, #16
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	3314      	adds	r3, #20
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	701a      	strb	r2, [r3, #0]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	0c1b      	lsrs	r3, r3, #16
 8004802:	b29b      	uxth	r3, r3
 8004804:	0a1b      	lsrs	r3, r3, #8
 8004806:	b29a      	uxth	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3315      	adds	r3, #21
 800480c:	b2d2      	uxtb	r2, r2
 800480e:	701a      	strb	r2, [r3, #0]
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	bc80      	pop	{r7}
 8004818:	4770      	bx	lr
	...

0800481c <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800482e:	1e5a      	subs	r2, r3, #1
 8004830:	4613      	mov	r3, r2
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	4413      	add	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800483c:	2300      	movs	r3, #0
 800483e:	613b      	str	r3, [r7, #16]
 8004840:	2301      	movs	r3, #1
 8004842:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8004844:	4a2b      	ldr	r2, [pc, #172]	; (80048f4 <cmp_lfn+0xd8>)
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	4413      	add	r3, r2
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	3301      	adds	r3, #1
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	4413      	add	r3, r2
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	021b      	lsls	r3, r3, #8
 8004856:	b21a      	sxth	r2, r3
 8004858:	4926      	ldr	r1, [pc, #152]	; (80048f4 <cmp_lfn+0xd8>)
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	440b      	add	r3, r1
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	4619      	mov	r1, r3
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	440b      	add	r3, r1
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	b21b      	sxth	r3, r3
 800486a:	4313      	orrs	r3, r2
 800486c:	b21b      	sxth	r3, r3
 800486e:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8004870:	89fb      	ldrh	r3, [r7, #14]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d019      	beq.n	80048aa <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8004876:	89bb      	ldrh	r3, [r7, #12]
 8004878:	4618      	mov	r0, r3
 800487a:	f002 fc33 	bl	80070e4 <ff_wtoupper>
 800487e:	4603      	mov	r3, r0
 8004880:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2bfe      	cmp	r3, #254	; 0xfe
 8004886:	d80e      	bhi.n	80048a6 <cmp_lfn+0x8a>
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	1c5a      	adds	r2, r3, #1
 800488c:	617a      	str	r2, [r7, #20]
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	4413      	add	r3, r2
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	4618      	mov	r0, r3
 8004898:	f002 fc24 	bl	80070e4 <ff_wtoupper>
 800489c:	4603      	mov	r3, r0
 800489e:	461a      	mov	r2, r3
 80048a0:	89fb      	ldrh	r3, [r7, #14]
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d008      	beq.n	80048b8 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 80048a6:	2300      	movs	r3, #0
 80048a8:	e01f      	b.n	80048ea <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 80048aa:	89bb      	ldrh	r3, [r7, #12]
 80048ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d001      	beq.n	80048b8 <cmp_lfn+0x9c>
 80048b4:	2300      	movs	r3, #0
 80048b6:	e018      	b.n	80048ea <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	3301      	adds	r3, #1
 80048bc:	613b      	str	r3, [r7, #16]
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	2b0c      	cmp	r3, #12
 80048c2:	d9bf      	bls.n	8004844 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00b      	beq.n	80048e8 <cmp_lfn+0xcc>
 80048d0:	89fb      	ldrh	r3, [r7, #14]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d008      	beq.n	80048e8 <cmp_lfn+0xcc>
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	4413      	add	r3, r2
 80048de:	881b      	ldrh	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d001      	beq.n	80048e8 <cmp_lfn+0xcc>
		return 0;
 80048e4:	2300      	movs	r3, #0
 80048e6:	e000      	b.n	80048ea <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 80048e8:	2301      	movs	r3, #1
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3718      	adds	r7, #24
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	080072c8 	.word	0x080072c8

080048f8 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b089      	sub	sp, #36	; 0x24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	4611      	mov	r1, r2
 8004904:	461a      	mov	r2, r3
 8004906:	460b      	mov	r3, r1
 8004908:	71fb      	strb	r3, [r7, #7]
 800490a:	4613      	mov	r3, r2
 800490c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	330d      	adds	r3, #13
 8004912:	79ba      	ldrb	r2, [r7, #6]
 8004914:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	330b      	adds	r3, #11
 800491a:	220f      	movs	r2, #15
 800491c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	330c      	adds	r3, #12
 8004922:	2200      	movs	r2, #0
 8004924:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	331a      	adds	r3, #26
 800492a:	2200      	movs	r2, #0
 800492c:	701a      	strb	r2, [r3, #0]
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	331b      	adds	r3, #27
 8004932:	2200      	movs	r2, #0
 8004934:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8004936:	79fb      	ldrb	r3, [r7, #7]
 8004938:	1e5a      	subs	r2, r3, #1
 800493a:	4613      	mov	r3, r2
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	4413      	add	r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4413      	add	r3, r2
 8004944:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8004946:	2300      	movs	r3, #0
 8004948:	82fb      	strh	r3, [r7, #22]
 800494a:	2300      	movs	r3, #0
 800494c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800494e:	8afb      	ldrh	r3, [r7, #22]
 8004950:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004954:	4293      	cmp	r3, r2
 8004956:	d007      	beq.n	8004968 <fit_lfn+0x70>
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	1c5a      	adds	r2, r3, #1
 800495c:	61fa      	str	r2, [r7, #28]
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	4413      	add	r3, r2
 8004964:	881b      	ldrh	r3, [r3, #0]
 8004966:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8004968:	4a1c      	ldr	r2, [pc, #112]	; (80049dc <fit_lfn+0xe4>)
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	4413      	add	r3, r2
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	461a      	mov	r2, r3
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	4413      	add	r3, r2
 8004976:	8afa      	ldrh	r2, [r7, #22]
 8004978:	b2d2      	uxtb	r2, r2
 800497a:	701a      	strb	r2, [r3, #0]
 800497c:	8afb      	ldrh	r3, [r7, #22]
 800497e:	0a1b      	lsrs	r3, r3, #8
 8004980:	b299      	uxth	r1, r3
 8004982:	4a16      	ldr	r2, [pc, #88]	; (80049dc <fit_lfn+0xe4>)
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	4413      	add	r3, r2
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	3301      	adds	r3, #1
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	4413      	add	r3, r2
 8004990:	b2ca      	uxtb	r2, r1
 8004992:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8004994:	8afb      	ldrh	r3, [r7, #22]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d102      	bne.n	80049a0 <fit_lfn+0xa8>
 800499a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800499e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	3301      	adds	r3, #1
 80049a4:	61bb      	str	r3, [r7, #24]
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	2b0c      	cmp	r3, #12
 80049aa:	d9d0      	bls.n	800494e <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 80049ac:	8afb      	ldrh	r3, [r7, #22]
 80049ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d006      	beq.n	80049c4 <fit_lfn+0xcc>
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	4413      	add	r3, r2
 80049be:	881b      	ldrh	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d103      	bne.n	80049cc <fit_lfn+0xd4>
 80049c4:	79fb      	ldrb	r3, [r7, #7]
 80049c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049ca:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	79fa      	ldrb	r2, [r7, #7]
 80049d0:	701a      	strb	r2, [r3, #0]
}
 80049d2:	bf00      	nop
 80049d4:	3724      	adds	r7, #36	; 0x24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bc80      	pop	{r7}
 80049da:	4770      	bx	lr
 80049dc:	080072c8 	.word	0x080072c8

080049e0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b08c      	sub	sp, #48	; 0x30
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
 80049ec:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80049ee:	220b      	movs	r2, #11
 80049f0:	68b9      	ldr	r1, [r7, #8]
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f7fe fd22 	bl	800343c <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	2b05      	cmp	r3, #5
 80049fc:	d92b      	bls.n	8004a56 <gen_numname+0x76>
		sr = seq;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8004a02:	e022      	b.n	8004a4a <gen_numname+0x6a>
			wc = *lfn++;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	1c9a      	adds	r2, r3, #2
 8004a08:	607a      	str	r2, [r7, #4]
 8004a0a:	881b      	ldrh	r3, [r3, #0]
 8004a0c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8004a0e:	2300      	movs	r3, #0
 8004a10:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a12:	e017      	b.n	8004a44 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	005a      	lsls	r2, r3, #1
 8004a18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	4413      	add	r3, r2
 8004a20:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8004a22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a24:	085b      	lsrs	r3, r3, #1
 8004a26:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d005      	beq.n	8004a3e <gen_numname+0x5e>
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8004a38:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8004a3c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8004a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a40:	3301      	adds	r3, #1
 8004a42:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a46:	2b0f      	cmp	r3, #15
 8004a48:	d9e4      	bls.n	8004a14 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	881b      	ldrh	r3, [r3, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1d8      	bne.n	8004a04 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8004a56:	2307      	movs	r3, #7
 8004a58:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	f003 030f 	and.w	r3, r3, #15
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	3330      	adds	r3, #48	; 0x30
 8004a66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8004a6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a6e:	2b39      	cmp	r3, #57	; 0x39
 8004a70:	d904      	bls.n	8004a7c <gen_numname+0x9c>
 8004a72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a76:	3307      	adds	r3, #7
 8004a78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8004a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7e:	1e5a      	subs	r2, r3, #1
 8004a80:	62ba      	str	r2, [r7, #40]	; 0x28
 8004a82:	3330      	adds	r3, #48	; 0x30
 8004a84:	443b      	add	r3, r7
 8004a86:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004a8a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	091b      	lsrs	r3, r3, #4
 8004a92:	603b      	str	r3, [r7, #0]
	} while (seq);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1df      	bne.n	8004a5a <gen_numname+0x7a>
	ns[i] = '~';
 8004a9a:	f107 0214 	add.w	r2, r7, #20
 8004a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa0:	4413      	add	r3, r2
 8004aa2:	227e      	movs	r2, #126	; 0x7e
 8004aa4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aaa:	e002      	b.n	8004ab2 <gen_numname+0xd2>
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	3301      	adds	r3, #1
 8004ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d205      	bcs.n	8004ac6 <gen_numname+0xe6>
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	4413      	add	r3, r2
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	2b20      	cmp	r3, #32
 8004ac4:	d1f2      	bne.n	8004aac <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac8:	2b07      	cmp	r3, #7
 8004aca:	d807      	bhi.n	8004adc <gen_numname+0xfc>
 8004acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	62ba      	str	r2, [r7, #40]	; 0x28
 8004ad2:	3330      	adds	r3, #48	; 0x30
 8004ad4:	443b      	add	r3, r7
 8004ad6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8004ada:	e000      	b.n	8004ade <gen_numname+0xfe>
 8004adc:	2120      	movs	r1, #32
 8004ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae0:	1c5a      	adds	r2, r3, #1
 8004ae2:	627a      	str	r2, [r7, #36]	; 0x24
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	460a      	mov	r2, r1
 8004aea:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	2b07      	cmp	r3, #7
 8004af0:	d9e9      	bls.n	8004ac6 <gen_numname+0xe6>
}
 8004af2:	bf00      	nop
 8004af4:	bf00      	nop
 8004af6:	3730      	adds	r7, #48	; 0x30
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8004b04:	2300      	movs	r3, #0
 8004b06:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8004b08:	230b      	movs	r3, #11
 8004b0a:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8004b0c:	7bfb      	ldrb	r3, [r7, #15]
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	0852      	lsrs	r2, r2, #1
 8004b12:	01db      	lsls	r3, r3, #7
 8004b14:	4313      	orrs	r3, r2
 8004b16:	b2da      	uxtb	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	1c59      	adds	r1, r3, #1
 8004b1c:	6079      	str	r1, [r7, #4]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	4413      	add	r3, r2
 8004b22:	73fb      	strb	r3, [r7, #15]
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	3b01      	subs	r3, #1
 8004b28:	60bb      	str	r3, [r7, #8]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1ed      	bne.n	8004b0c <sum_sfn+0x10>
	return sum;
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bc80      	pop	{r7}
 8004b3a:	4770      	bx	lr

08004b3c <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004b44:	2100      	movs	r1, #0
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7ff fbad 	bl	80042a6 <dir_sdi>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004b50:	7dfb      	ldrb	r3, [r7, #23]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d001      	beq.n	8004b5a <dir_find+0x1e>
 8004b56:	7dfb      	ldrb	r3, [r7, #23]
 8004b58:	e0b8      	b.n	8004ccc <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004b5a:	23ff      	movs	r3, #255	; 0xff
 8004b5c:	753b      	strb	r3, [r7, #20]
 8004b5e:	7d3b      	ldrb	r3, [r7, #20]
 8004b60:	757b      	strb	r3, [r7, #21]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b6c:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	4619      	mov	r1, r3
 8004b80:	4610      	mov	r0, r2
 8004b82:	f7fe fee3 	bl	800394c <move_window>
 8004b86:	4603      	mov	r3, r0
 8004b88:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004b8a:	7dfb      	ldrb	r3, [r7, #23]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f040 8097 	bne.w	8004cc0 <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004ba2:	7dbb      	ldrb	r3, [r7, #22]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d102      	bne.n	8004bae <dir_find+0x72>
 8004ba8:	2304      	movs	r3, #4
 8004baa:	75fb      	strb	r3, [r7, #23]
 8004bac:	e08d      	b.n	8004cca <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	330b      	adds	r3, #11
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bb8:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8004bba:	7dbb      	ldrb	r3, [r7, #22]
 8004bbc:	2be5      	cmp	r3, #229	; 0xe5
 8004bbe:	d007      	beq.n	8004bd0 <dir_find+0x94>
 8004bc0:	7bfb      	ldrb	r3, [r7, #15]
 8004bc2:	f003 0308 	and.w	r3, r3, #8
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00b      	beq.n	8004be2 <dir_find+0xa6>
 8004bca:	7bfb      	ldrb	r3, [r7, #15]
 8004bcc:	2b0f      	cmp	r3, #15
 8004bce:	d008      	beq.n	8004be2 <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004bd0:	23ff      	movs	r3, #255	; 0xff
 8004bd2:	757b      	strb	r3, [r7, #21]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bde:	849a      	strh	r2, [r3, #36]	; 0x24
 8004be0:	e063      	b.n	8004caa <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8004be2:	7bfb      	ldrb	r3, [r7, #15]
 8004be4:	2b0f      	cmp	r3, #15
 8004be6:	d137      	bne.n	8004c58 <dir_find+0x11c>
				if (dp->lfn) {
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d05a      	beq.n	8004caa <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8004bf4:	7dbb      	ldrb	r3, [r7, #22]
 8004bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d010      	beq.n	8004c20 <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	7b5b      	ldrb	r3, [r3, #13]
 8004c02:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8004c04:	7dbb      	ldrb	r3, [r7, #22]
 8004c06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c0a:	75bb      	strb	r3, [r7, #22]
 8004c0c:	7dbb      	ldrb	r3, [r7, #22]
 8004c0e:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c16:	88da      	ldrh	r2, [r3, #6]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c1e:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8004c20:	7dba      	ldrb	r2, [r7, #22]
 8004c22:	7d7b      	ldrb	r3, [r7, #21]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d114      	bne.n	8004c52 <dir_find+0x116>
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	330d      	adds	r3, #13
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	7d3a      	ldrb	r2, [r7, #20]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d10e      	bne.n	8004c52 <dir_find+0x116>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	6939      	ldr	r1, [r7, #16]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7ff fdec 	bl	800481c <cmp_lfn>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d003      	beq.n	8004c52 <dir_find+0x116>
 8004c4a:	7d7b      	ldrb	r3, [r7, #21]
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	e000      	b.n	8004c54 <dir_find+0x118>
 8004c52:	23ff      	movs	r3, #255	; 0xff
 8004c54:	757b      	strb	r3, [r7, #21]
 8004c56:	e028      	b.n	8004caa <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8004c58:	7d7b      	ldrb	r3, [r7, #21]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d107      	bne.n	8004c6e <dir_find+0x132>
 8004c5e:	6938      	ldr	r0, [r7, #16]
 8004c60:	f7ff ff4c 	bl	8004afc <sum_sfn>
 8004c64:	4603      	mov	r3, r0
 8004c66:	461a      	mov	r2, r3
 8004c68:	7d3b      	ldrb	r3, [r7, #20]
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d02a      	beq.n	8004cc4 <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	330b      	adds	r3, #11
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10b      	bne.n	8004c9a <dir_find+0x15e>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	220b      	movs	r2, #11
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	6938      	ldr	r0, [r7, #16]
 8004c90:	f7fe fc0c 	bl	80034ac <mem_cmp>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d016      	beq.n	8004cc8 <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004c9a:	23ff      	movs	r3, #255	; 0xff
 8004c9c:	757b      	strb	r3, [r7, #21]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ca4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ca8:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8004caa:	2100      	movs	r1, #0
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f7ff fbc8 	bl	8004442 <dir_next>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004cb6:	7dfb      	ldrb	r3, [r7, #23]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f43f af58 	beq.w	8004b6e <dir_find+0x32>
 8004cbe:	e004      	b.n	8004cca <dir_find+0x18e>
		if (res != FR_OK) break;
 8004cc0:	bf00      	nop
 8004cc2:	e002      	b.n	8004cca <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8004cc4:	bf00      	nop
 8004cc6:	e000      	b.n	8004cca <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8004cc8:	bf00      	nop

	return res;
 8004cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3718      	adds	r7, #24
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b08c      	sub	sp, #48	; 0x30
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	623b      	str	r3, [r7, #32]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8004cf0:	f107 030c 	add.w	r3, r7, #12
 8004cf4:	220c      	movs	r2, #12
 8004cf6:	6a39      	ldr	r1, [r7, #32]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7fe fb9f 	bl	800343c <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8004cfe:	7dfb      	ldrb	r3, [r7, #23]
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d03b      	beq.n	8004d80 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	330b      	adds	r3, #11
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	701a      	strb	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d16:	461a      	mov	r2, r3
 8004d18:	2300      	movs	r3, #0
 8004d1a:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d20:	e013      	b.n	8004d4a <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8004d22:	f107 010c 	add.w	r1, r7, #12
 8004d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d28:	69fa      	ldr	r2, [r7, #28]
 8004d2a:	6a38      	ldr	r0, [r7, #32]
 8004d2c:	f7ff fe58 	bl	80049e0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f7ff ff03 	bl	8004b3c <dir_find>
 8004d36:	4603      	mov	r3, r0
 8004d38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8004d3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d106      	bne.n	8004d52 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8004d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d46:	3301      	adds	r3, #1
 8004d48:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4c:	2b63      	cmp	r3, #99	; 0x63
 8004d4e:	d9e8      	bls.n	8004d22 <dir_register+0x4e>
 8004d50:	e000      	b.n	8004d54 <dir_register+0x80>
			if (res != FR_OK) break;
 8004d52:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8004d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d56:	2b64      	cmp	r3, #100	; 0x64
 8004d58:	d101      	bne.n	8004d5e <dir_register+0x8a>
 8004d5a:	2307      	movs	r3, #7
 8004d5c:	e0d8      	b.n	8004f10 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8004d5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d002      	beq.n	8004d6c <dir_register+0x98>
 8004d66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d6a:	e0d1      	b.n	8004f10 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	330b      	adds	r3, #11
 8004d70:	7dfa      	ldrb	r2, [r7, #23]
 8004d72:	701a      	strb	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8004d80:	7dfb      	ldrb	r3, [r7, #23]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d014      	beq.n	8004db4 <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d8e:	e002      	b.n	8004d96 <dir_register+0xc2>
 8004d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d92:	3301      	adds	r3, #1
 8004d94:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	69fa      	ldr	r2, [r7, #28]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	881b      	ldrh	r3, [r3, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1f5      	bne.n	8004d90 <dir_register+0xbc>
		nent = (n + 25) / 13;
 8004da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da6:	3319      	adds	r3, #25
 8004da8:	4a5b      	ldr	r2, [pc, #364]	; (8004f18 <dir_register+0x244>)
 8004daa:	fba2 2303 	umull	r2, r3, r2, r3
 8004dae:	089b      	lsrs	r3, r3, #2
 8004db0:	627b      	str	r3, [r7, #36]	; 0x24
 8004db2:	e001      	b.n	8004db8 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8004db4:	2301      	movs	r3, #1
 8004db6:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8004db8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7ff fc8b 	bl	80046d6 <dir_alloc>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8004dc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d15b      	bne.n	8004e86 <dir_register+0x1b2>
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d055      	beq.n	8004e86 <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004de0:	88db      	ldrh	r3, [r3, #6]
 8004de2:	461a      	mov	r2, r3
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	4619      	mov	r1, r3
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7ff fa5b 	bl	80042a6 <dir_sdi>
 8004df0:	4603      	mov	r3, r0
 8004df2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004df6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d143      	bne.n	8004e86 <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7ff fe78 	bl	8004afc <sum_sfn>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	4619      	mov	r1, r3
 8004e22:	4610      	mov	r0, r2
 8004e24:	f7fe fd92 	bl	800394c <move_window>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8004e2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d126      	bne.n	8004e84 <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e3c:	6a18      	ldr	r0, [r3, #32]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e44:	6959      	ldr	r1, [r3, #20]
 8004e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	7efb      	ldrb	r3, [r7, #27]
 8004e4c:	f7ff fd54 	bl	80048f8 <fit_lfn>
				dp->fs->wflag = 1;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8004e60:	2100      	movs	r1, #0
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7ff faed 	bl	8004442 <dir_next>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8004e6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d107      	bne.n	8004e86 <dir_register+0x1b2>
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1c6      	bne.n	8004e10 <dir_register+0x13c>
 8004e82:	e000      	b.n	8004e86 <dir_register+0x1b2>
				if (res != FR_OK) break;
 8004e84:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8004e86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d13e      	bne.n	8004f0c <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	f7fe fd53 	bl	800394c <move_window>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004eac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d12b      	bne.n	8004f0c <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7fe fad9 	bl	8003478 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ecc:	6958      	ldr	r0, [r3, #20]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	220b      	movs	r2, #11
 8004ed8:	4619      	mov	r1, r3
 8004eda:	f7fe faaf 	bl	800343c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	330b      	adds	r3, #11
 8004ee8:	781a      	ldrb	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	330c      	adds	r3, #12
 8004ef4:	f002 0218 	and.w	r2, r2, #24
 8004ef8:	b2d2      	uxtb	r2, r2
 8004efa:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f08:	2201      	movs	r2, #1
 8004f0a:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8004f0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3730      	adds	r7, #48	; 0x30
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	4ec4ec4f 	.word	0x4ec4ec4f

08004f1c <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b08a      	sub	sp, #40	; 0x28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	613b      	str	r3, [r7, #16]
 8004f2c:	e002      	b.n	8004f34 <create_name+0x18>
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	3301      	adds	r3, #1
 8004f32:	613b      	str	r3, [r7, #16]
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	2b2f      	cmp	r3, #47	; 0x2f
 8004f3a:	d0f8      	beq.n	8004f2e <create_name+0x12>
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	2b5c      	cmp	r3, #92	; 0x5c
 8004f42:	d0f4      	beq.n	8004f2e <create_name+0x12>
	lfn = dp->lfn;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	617b      	str	r3, [r7, #20]
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	1c5a      	adds	r2, r3, #1
 8004f5a:	61ba      	str	r2, [r7, #24]
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	4413      	add	r3, r2
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8004f64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f66:	2b1f      	cmp	r3, #31
 8004f68:	d92f      	bls.n	8004fca <create_name+0xae>
 8004f6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f6c:	2b2f      	cmp	r3, #47	; 0x2f
 8004f6e:	d02c      	beq.n	8004fca <create_name+0xae>
 8004f70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f72:	2b5c      	cmp	r3, #92	; 0x5c
 8004f74:	d029      	beq.n	8004fca <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	2bfe      	cmp	r3, #254	; 0xfe
 8004f7a:	d901      	bls.n	8004f80 <create_name+0x64>
			return FR_INVALID_NAME;
 8004f7c:	2306      	movs	r3, #6
 8004f7e:	e186      	b.n	800528e <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 8004f80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8004f86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f88:	2101      	movs	r1, #1
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f002 f870 	bl	8007070 <ff_convert>
 8004f90:	4603      	mov	r3, r0
 8004f92:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8004f94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <create_name+0x82>
 8004f9a:	2306      	movs	r3, #6
 8004f9c:	e177      	b.n	800528e <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8004f9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fa0:	2b7f      	cmp	r3, #127	; 0x7f
 8004fa2:	d809      	bhi.n	8004fb8 <create_name+0x9c>
 8004fa4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	488e      	ldr	r0, [pc, #568]	; (80051e4 <create_name+0x2c8>)
 8004faa:	f7fe faa5 	bl	80034f8 <chk_chr>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d001      	beq.n	8004fb8 <create_name+0x9c>
			return FR_INVALID_NAME;
 8004fb4:	2306      	movs	r3, #6
 8004fb6:	e16a      	b.n	800528e <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	617a      	str	r2, [r7, #20]
 8004fbe:	005b      	lsls	r3, r3, #1
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004fc6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8004fc8:	e7c5      	b.n	8004f56 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	441a      	add	r2, r3
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8004fd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fd6:	2b1f      	cmp	r3, #31
 8004fd8:	d801      	bhi.n	8004fde <create_name+0xc2>
 8004fda:	2304      	movs	r3, #4
 8004fdc:	e000      	b.n	8004fe0 <create_name+0xc4>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8004fe4:	e011      	b.n	800500a <create_name+0xee>
		w = lfn[di - 1];
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004fec:	3b01      	subs	r3, #1
 8004fee:	005b      	lsls	r3, r3, #1
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8004ff8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ffa:	2b20      	cmp	r3, #32
 8004ffc:	d002      	beq.n	8005004 <create_name+0xe8>
 8004ffe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005000:	2b2e      	cmp	r3, #46	; 0x2e
 8005002:	d106      	bne.n	8005012 <create_name+0xf6>
		di--;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	3b01      	subs	r3, #1
 8005008:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1ea      	bne.n	8004fe6 <create_name+0xca>
 8005010:	e000      	b.n	8005014 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 8005012:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <create_name+0x102>
 800501a:	2306      	movs	r3, #6
 800501c:	e137      	b.n	800528e <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	4413      	add	r3, r2
 8005026:	2200      	movs	r2, #0
 8005028:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	220b      	movs	r2, #11
 8005034:	2120      	movs	r1, #32
 8005036:	4618      	mov	r0, r3
 8005038:	f7fe fa1e 	bl	8003478 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800503c:	2300      	movs	r3, #0
 800503e:	61bb      	str	r3, [r7, #24]
 8005040:	e002      	b.n	8005048 <create_name+0x12c>
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	3301      	adds	r3, #1
 8005046:	61bb      	str	r3, [r7, #24]
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	4413      	add	r3, r2
 8005050:	881b      	ldrh	r3, [r3, #0]
 8005052:	2b20      	cmp	r3, #32
 8005054:	d0f5      	beq.n	8005042 <create_name+0x126>
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4413      	add	r3, r2
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	2b2e      	cmp	r3, #46	; 0x2e
 8005062:	d0ee      	beq.n	8005042 <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d009      	beq.n	800507e <create_name+0x162>
 800506a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800506e:	f043 0303 	orr.w	r3, r3, #3
 8005072:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005076:	e002      	b.n	800507e <create_name+0x162>
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	3b01      	subs	r3, #1
 800507c:	617b      	str	r3, [r7, #20]
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d009      	beq.n	8005098 <create_name+0x17c>
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800508a:	3b01      	subs	r3, #1
 800508c:	005b      	lsls	r3, r3, #1
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	4413      	add	r3, r2
 8005092:	881b      	ldrh	r3, [r3, #0]
 8005094:	2b2e      	cmp	r3, #46	; 0x2e
 8005096:	d1ef      	bne.n	8005078 <create_name+0x15c>

	b = i = 0; ni = 8;
 8005098:	2300      	movs	r3, #0
 800509a:	623b      	str	r3, [r7, #32]
 800509c:	2300      	movs	r3, #0
 800509e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80050a2:	2308      	movs	r3, #8
 80050a4:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	1c5a      	adds	r2, r3, #1
 80050aa:	61ba      	str	r2, [r7, #24]
 80050ac:	005b      	lsls	r3, r3, #1
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	4413      	add	r3, r2
 80050b2:	881b      	ldrh	r3, [r3, #0]
 80050b4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80050b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f000 8091 	beq.w	80051e0 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80050be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050c0:	2b20      	cmp	r3, #32
 80050c2:	d006      	beq.n	80050d2 <create_name+0x1b6>
 80050c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050c6:	2b2e      	cmp	r3, #46	; 0x2e
 80050c8:	d10a      	bne.n	80050e0 <create_name+0x1c4>
 80050ca:	69ba      	ldr	r2, [r7, #24]
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d006      	beq.n	80050e0 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 80050d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050d6:	f043 0303 	orr.w	r3, r3, #3
 80050da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80050de:	e07e      	b.n	80051de <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80050e0:	6a3a      	ldr	r2, [r7, #32]
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d203      	bcs.n	80050f0 <create_name+0x1d4>
 80050e8:	69ba      	ldr	r2, [r7, #24]
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d123      	bne.n	8005138 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	2b0b      	cmp	r3, #11
 80050f4:	d106      	bne.n	8005104 <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 80050f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050fa:	f043 0303 	orr.w	r3, r3, #3
 80050fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005102:	e076      	b.n	80051f2 <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	429a      	cmp	r2, r3
 800510a:	d005      	beq.n	8005118 <create_name+0x1fc>
 800510c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005110:	f043 0303 	orr.w	r3, r3, #3
 8005114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	429a      	cmp	r2, r3
 800511e:	d867      	bhi.n	80051f0 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	61bb      	str	r3, [r7, #24]
 8005124:	2308      	movs	r3, #8
 8005126:	623b      	str	r3, [r7, #32]
 8005128:	230b      	movs	r3, #11
 800512a:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800512c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005136:	e052      	b.n	80051de <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005138:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800513a:	2b7f      	cmp	r3, #127	; 0x7f
 800513c:	d914      	bls.n	8005168 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800513e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005140:	2100      	movs	r1, #0
 8005142:	4618      	mov	r0, r3
 8005144:	f001 ff94 	bl	8007070 <ff_convert>
 8005148:	4603      	mov	r3, r0
 800514a:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800514c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800514e:	2b00      	cmp	r3, #0
 8005150:	d004      	beq.n	800515c <create_name+0x240>
 8005152:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005154:	3b80      	subs	r3, #128	; 0x80
 8005156:	4a24      	ldr	r2, [pc, #144]	; (80051e8 <create_name+0x2cc>)
 8005158:	5cd3      	ldrb	r3, [r2, r3]
 800515a:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800515c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005160:	f043 0302 	orr.w	r3, r3, #2
 8005164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005168:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800516a:	2b00      	cmp	r3, #0
 800516c:	d007      	beq.n	800517e <create_name+0x262>
 800516e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005170:	4619      	mov	r1, r3
 8005172:	481e      	ldr	r0, [pc, #120]	; (80051ec <create_name+0x2d0>)
 8005174:	f7fe f9c0 	bl	80034f8 <chk_chr>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d008      	beq.n	8005190 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800517e:	235f      	movs	r3, #95	; 0x5f
 8005180:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005182:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005186:	f043 0303 	orr.w	r3, r3, #3
 800518a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800518e:	e01b      	b.n	80051c8 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005190:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005192:	2b40      	cmp	r3, #64	; 0x40
 8005194:	d909      	bls.n	80051aa <create_name+0x28e>
 8005196:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005198:	2b5a      	cmp	r3, #90	; 0x5a
 800519a:	d806      	bhi.n	80051aa <create_name+0x28e>
					b |= 2;
 800519c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80051a0:	f043 0302 	orr.w	r3, r3, #2
 80051a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80051a8:	e00e      	b.n	80051c8 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80051aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80051ac:	2b60      	cmp	r3, #96	; 0x60
 80051ae:	d90b      	bls.n	80051c8 <create_name+0x2ac>
 80051b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80051b2:	2b7a      	cmp	r3, #122	; 0x7a
 80051b4:	d808      	bhi.n	80051c8 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 80051b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80051ba:	f043 0301 	orr.w	r3, r3, #1
 80051be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80051c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80051c4:	3b20      	subs	r3, #32
 80051c6:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051ce:	699a      	ldr	r2, [r3, #24]
 80051d0:	6a3b      	ldr	r3, [r7, #32]
 80051d2:	1c59      	adds	r1, r3, #1
 80051d4:	6239      	str	r1, [r7, #32]
 80051d6:	4413      	add	r3, r2
 80051d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80051da:	b2d2      	uxtb	r2, r2
 80051dc:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 80051de:	e762      	b.n	80050a6 <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 80051e0:	bf00      	nop
 80051e2:	e006      	b.n	80051f2 <create_name+0x2d6>
 80051e4:	080071d4 	.word	0x080071d4
 80051e8:	08007248 	.word	0x08007248
 80051ec:	080071e0 	.word	0x080071e0
			if (si > di) break;			/* No extension */
 80051f0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	2be5      	cmp	r3, #229	; 0xe5
 80051fe:	d105      	bne.n	800520c <create_name+0x2f0>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	2205      	movs	r2, #5
 800520a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	2b08      	cmp	r3, #8
 8005210:	d104      	bne.n	800521c <create_name+0x300>
 8005212:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800521c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005220:	f003 030c 	and.w	r3, r3, #12
 8005224:	2b0c      	cmp	r3, #12
 8005226:	d005      	beq.n	8005234 <create_name+0x318>
 8005228:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800522c:	f003 0303 	and.w	r3, r3, #3
 8005230:	2b03      	cmp	r3, #3
 8005232:	d105      	bne.n	8005240 <create_name+0x324>
		cf |= NS_LFN;
 8005234:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005238:	f043 0302 	orr.w	r3, r3, #2
 800523c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005240:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d117      	bne.n	800527c <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800524c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005250:	f003 0303 	and.w	r3, r3, #3
 8005254:	2b01      	cmp	r3, #1
 8005256:	d105      	bne.n	8005264 <create_name+0x348>
 8005258:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800525c:	f043 0310 	orr.w	r3, r3, #16
 8005260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005264:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005268:	f003 030c 	and.w	r3, r3, #12
 800526c:	2b04      	cmp	r3, #4
 800526e:	d105      	bne.n	800527c <create_name+0x360>
 8005270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005274:	f043 0308 	orr.w	r3, r3, #8
 8005278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	330b      	adds	r3, #11
 8005286:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800528a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800528c:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800528e:	4618      	mov	r0, r3
 8005290:	3728      	adds	r7, #40	; 0x28
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop

08005298 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	2b2f      	cmp	r3, #47	; 0x2f
 80052a8:	d003      	beq.n	80052b2 <follow_path+0x1a>
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	2b5c      	cmp	r3, #92	; 0x5c
 80052b0:	d102      	bne.n	80052b8 <follow_path+0x20>
		path++;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	3301      	adds	r3, #1
 80052b6:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052be:	461a      	mov	r2, r3
 80052c0:	2300      	movs	r3, #0
 80052c2:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	2b1f      	cmp	r3, #31
 80052ca:	d80c      	bhi.n	80052e6 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 80052cc:	2100      	movs	r1, #0
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f7fe ffe9 	bl	80042a6 <dir_sdi>
 80052d4:	4603      	mov	r3, r0
 80052d6:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052de:	461a      	mov	r2, r3
 80052e0:	2300      	movs	r3, #0
 80052e2:	6153      	str	r3, [r2, #20]
 80052e4:	e049      	b.n	800537a <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80052e6:	463b      	mov	r3, r7
 80052e8:	4619      	mov	r1, r3
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7ff fe16 	bl	8004f1c <create_name>
 80052f0:	4603      	mov	r3, r0
 80052f2:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80052f4:	7bfb      	ldrb	r3, [r7, #15]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d13a      	bne.n	8005370 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7ff fc1e 	bl	8004b3c <dir_find>
 8005300:	4603      	mov	r3, r0
 8005302:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	7adb      	ldrb	r3, [r3, #11]
 800530e:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8005310:	7bfb      	ldrb	r3, [r7, #15]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00a      	beq.n	800532c <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005316:	7bfb      	ldrb	r3, [r7, #15]
 8005318:	2b04      	cmp	r3, #4
 800531a:	d12b      	bne.n	8005374 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800531c:	7bbb      	ldrb	r3, [r7, #14]
 800531e:	f003 0304 	and.w	r3, r3, #4
 8005322:	2b00      	cmp	r3, #0
 8005324:	d126      	bne.n	8005374 <follow_path+0xdc>
 8005326:	2305      	movs	r3, #5
 8005328:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800532a:	e023      	b.n	8005374 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800532c:	7bbb      	ldrb	r3, [r7, #14]
 800532e:	f003 0304 	and.w	r3, r3, #4
 8005332:	2b00      	cmp	r3, #0
 8005334:	d120      	bne.n	8005378 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	330b      	adds	r3, #11
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	f003 0310 	and.w	r3, r3, #16
 800534a:	2b00      	cmp	r3, #0
 800534c:	d102      	bne.n	8005354 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 800534e:	2305      	movs	r3, #5
 8005350:	73fb      	strb	r3, [r7, #15]
 8005352:	e012      	b.n	800537a <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68b9      	ldr	r1, [r7, #8]
 800535e:	4618      	mov	r0, r3
 8005360:	f7ff fa07 	bl	8004772 <ld_clust>
 8005364:	4602      	mov	r2, r0
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800536c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800536e:	e7ba      	b.n	80052e6 <follow_path+0x4e>
			if (res != FR_OK) break;
 8005370:	bf00      	nop
 8005372:	e002      	b.n	800537a <follow_path+0xe2>
				break;
 8005374:	bf00      	nop
 8005376:	e000      	b.n	800537a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005378:	bf00      	nop
		}
	}

	return res;
 800537a:	7bfb      	ldrb	r3, [r7, #15]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005384:	b480      	push	{r7}
 8005386:	b087      	sub	sp, #28
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800538c:	f04f 33ff 	mov.w	r3, #4294967295
 8005390:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d031      	beq.n	80053fe <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	617b      	str	r3, [r7, #20]
 80053a0:	e002      	b.n	80053a8 <get_ldnumber+0x24>
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	3301      	adds	r3, #1
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	2b1f      	cmp	r3, #31
 80053ae:	d903      	bls.n	80053b8 <get_ldnumber+0x34>
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	2b3a      	cmp	r3, #58	; 0x3a
 80053b6:	d1f4      	bne.n	80053a2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	2b3a      	cmp	r3, #58	; 0x3a
 80053be:	d11c      	bne.n	80053fa <get_ldnumber+0x76>
			tp = *path;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	1c5a      	adds	r2, r3, #1
 80053ca:	60fa      	str	r2, [r7, #12]
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	3b30      	subs	r3, #48	; 0x30
 80053d0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	2b09      	cmp	r3, #9
 80053d6:	d80e      	bhi.n	80053f6 <get_ldnumber+0x72>
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d10a      	bne.n	80053f6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d107      	bne.n	80053f6 <get_ldnumber+0x72>
					vol = (int)i;
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	3301      	adds	r3, #1
 80053ee:	617b      	str	r3, [r7, #20]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	e002      	b.n	8005400 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80053fa:	2300      	movs	r3, #0
 80053fc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80053fe:	693b      	ldr	r3, [r7, #16]
}
 8005400:	4618      	mov	r0, r3
 8005402:	371c      	adds	r7, #28
 8005404:	46bd      	mov	sp, r7
 8005406:	bc80      	pop	{r7}
 8005408:	4770      	bx	lr
	...

0800540c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800541c:	2200      	movs	r2, #0
 800541e:	711a      	strb	r2, [r3, #4]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005426:	461a      	mov	r2, r3
 8005428:	f04f 33ff 	mov.w	r3, #4294967295
 800542c:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800542e:	6839      	ldr	r1, [r7, #0]
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7fe fa8b 	bl	800394c <move_window>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d001      	beq.n	8005440 <check_fs+0x34>
		return 3;
 800543c:	2303      	movs	r3, #3
 800543e:	e04a      	b.n	80054d6 <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005446:	3301      	adds	r3, #1
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	021b      	lsls	r3, r3, #8
 800544c:	b21a      	sxth	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8005454:	b21b      	sxth	r3, r3
 8005456:	4313      	orrs	r3, r2
 8005458:	b21b      	sxth	r3, r3
 800545a:	4a21      	ldr	r2, [pc, #132]	; (80054e0 <check_fs+0xd4>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d001      	beq.n	8005464 <check_fs+0x58>
		return 2;
 8005460:	2302      	movs	r3, #2
 8005462:	e038      	b.n	80054d6 <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	3336      	adds	r3, #54	; 0x36
 8005468:	3303      	adds	r3, #3
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	061a      	lsls	r2, r3, #24
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	3336      	adds	r3, #54	; 0x36
 8005472:	3302      	adds	r3, #2
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	041b      	lsls	r3, r3, #16
 8005478:	4313      	orrs	r3, r2
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	3236      	adds	r2, #54	; 0x36
 800547e:	3201      	adds	r2, #1
 8005480:	7812      	ldrb	r2, [r2, #0]
 8005482:	0212      	lsls	r2, r2, #8
 8005484:	4313      	orrs	r3, r2
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800548c:	4313      	orrs	r3, r2
 800548e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005492:	4a14      	ldr	r2, [pc, #80]	; (80054e4 <check_fs+0xd8>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d101      	bne.n	800549c <check_fs+0x90>
		return 0;
 8005498:	2300      	movs	r3, #0
 800549a:	e01c      	b.n	80054d6 <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	3352      	adds	r3, #82	; 0x52
 80054a0:	3303      	adds	r3, #3
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	061a      	lsls	r2, r3, #24
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	3352      	adds	r3, #82	; 0x52
 80054aa:	3302      	adds	r3, #2
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	041b      	lsls	r3, r3, #16
 80054b0:	4313      	orrs	r3, r2
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	3252      	adds	r2, #82	; 0x52
 80054b6:	3201      	adds	r2, #1
 80054b8:	7812      	ldrb	r2, [r2, #0]
 80054ba:	0212      	lsls	r2, r2, #8
 80054bc:	4313      	orrs	r3, r2
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 80054c4:	4313      	orrs	r3, r2
 80054c6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80054ca:	4a06      	ldr	r2, [pc, #24]	; (80054e4 <check_fs+0xd8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d101      	bne.n	80054d4 <check_fs+0xc8>
		return 0;
 80054d0:	2300      	movs	r3, #0
 80054d2:	e000      	b.n	80054d6 <check_fs+0xca>

	return 1;
 80054d4:	2301      	movs	r3, #1
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	ffffaa55 	.word	0xffffaa55
 80054e4:	00544146 	.word	0x00544146

080054e8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b096      	sub	sp, #88	; 0x58
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	4613      	mov	r3, r2
 80054f4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80054fc:	68b8      	ldr	r0, [r7, #8]
 80054fe:	f7ff ff41 	bl	8005384 <get_ldnumber>
 8005502:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005506:	2b00      	cmp	r3, #0
 8005508:	da01      	bge.n	800550e <find_volume+0x26>
 800550a:	230b      	movs	r3, #11
 800550c:	e311      	b.n	8005b32 <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800550e:	4a98      	ldr	r2, [pc, #608]	; (8005770 <find_volume+0x288>)
 8005510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005516:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <find_volume+0x3a>
 800551e:	230c      	movs	r3, #12
 8005520:	e307      	b.n	8005b32 <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005526:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8005528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d01c      	beq.n	800556e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800553a:	785b      	ldrb	r3, [r3, #1]
 800553c:	4618      	mov	r0, r3
 800553e:	f7fd fedf 	bl	8003300 <disk_status>
 8005542:	4603      	mov	r3, r0
 8005544:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005548:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10c      	bne.n	800556e <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8005554:	79fb      	ldrb	r3, [r7, #7]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d007      	beq.n	800556a <find_volume+0x82>
 800555a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800555e:	f003 0304 	and.w	r3, r3, #4
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005566:	230a      	movs	r3, #10
 8005568:	e2e3      	b.n	8005b32 <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 800556a:	2300      	movs	r3, #0
 800556c:	e2e1      	b.n	8005b32 <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800556e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005574:	2200      	movs	r2, #0
 8005576:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800557a:	b2da      	uxtb	r2, r3
 800557c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005582:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800558a:	785b      	ldrb	r3, [r3, #1]
 800558c:	4618      	mov	r0, r3
 800558e:	f7fd fed1 	bl	8003334 <disk_initialize>
 8005592:	4603      	mov	r3, r0
 8005594:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8005598:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d001      	beq.n	80055a8 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80055a4:	2303      	movs	r3, #3
 80055a6:	e2c4      	b.n	8005b32 <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80055a8:	79fb      	ldrb	r3, [r7, #7]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d007      	beq.n	80055be <find_volume+0xd6>
 80055ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80055b2:	f003 0304 	and.w	r3, r3, #4
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 80055ba:	230a      	movs	r3, #10
 80055bc:	e2b9      	b.n	8005b32 <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 80055be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055c4:	7858      	ldrb	r0, [r3, #1]
 80055c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055cc:	330a      	adds	r3, #10
 80055ce:	461a      	mov	r2, r3
 80055d0:	2102      	movs	r1, #2
 80055d2:	f7fd ff15 	bl	8003400 <disk_ioctl>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10d      	bne.n	80055f8 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 80055dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055e2:	895b      	ldrh	r3, [r3, #10]
 80055e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055e8:	d306      	bcc.n	80055f8 <find_volume+0x110>
 80055ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055f0:	895b      	ldrh	r3, [r3, #10]
 80055f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f6:	d901      	bls.n	80055fc <find_volume+0x114>
 80055f8:	2301      	movs	r3, #1
 80055fa:	e29a      	b.n	8005b32 <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80055fc:	2300      	movs	r3, #0
 80055fe:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8005600:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005602:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005604:	f7ff ff02 	bl	800540c <check_fs>
 8005608:	4603      	mov	r3, r0
 800560a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800560e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005612:	2b01      	cmp	r3, #1
 8005614:	d153      	bne.n	80056be <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005616:	2300      	movs	r3, #0
 8005618:	643b      	str	r3, [r7, #64]	; 0x40
 800561a:	e028      	b.n	800566e <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800561c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800561e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005620:	011b      	lsls	r3, r3, #4
 8005622:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005626:	4413      	add	r3, r2
 8005628:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800562a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562c:	3304      	adds	r3, #4
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d012      	beq.n	800565a <find_volume+0x172>
 8005634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005636:	330b      	adds	r3, #11
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	061a      	lsls	r2, r3, #24
 800563c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563e:	330a      	adds	r3, #10
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	041b      	lsls	r3, r3, #16
 8005644:	4313      	orrs	r3, r2
 8005646:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005648:	3209      	adds	r2, #9
 800564a:	7812      	ldrb	r2, [r2, #0]
 800564c:	0212      	lsls	r2, r2, #8
 800564e:	4313      	orrs	r3, r2
 8005650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005652:	3208      	adds	r2, #8
 8005654:	7812      	ldrb	r2, [r2, #0]
 8005656:	431a      	orrs	r2, r3
 8005658:	e000      	b.n	800565c <find_volume+0x174>
 800565a:	2200      	movs	r2, #0
 800565c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	3358      	adds	r3, #88	; 0x58
 8005662:	443b      	add	r3, r7
 8005664:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800566a:	3301      	adds	r3, #1
 800566c:	643b      	str	r3, [r7, #64]	; 0x40
 800566e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005670:	2b03      	cmp	r3, #3
 8005672:	d9d3      	bls.n	800561c <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8005674:	2300      	movs	r3, #0
 8005676:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800567a:	2b00      	cmp	r3, #0
 800567c:	d002      	beq.n	8005684 <find_volume+0x19c>
 800567e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005680:	3b01      	subs	r3, #1
 8005682:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8005684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	3358      	adds	r3, #88	; 0x58
 800568a:	443b      	add	r3, r7
 800568c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005690:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8005692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005694:	2b00      	cmp	r3, #0
 8005696:	d005      	beq.n	80056a4 <find_volume+0x1bc>
 8005698:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800569a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800569c:	f7ff feb6 	bl	800540c <check_fs>
 80056a0:	4603      	mov	r3, r0
 80056a2:	e000      	b.n	80056a6 <find_volume+0x1be>
 80056a4:	2302      	movs	r3, #2
 80056a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80056aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d005      	beq.n	80056be <find_volume+0x1d6>
 80056b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056b4:	3301      	adds	r3, #1
 80056b6:	643b      	str	r3, [r7, #64]	; 0x40
 80056b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056ba:	2b03      	cmp	r3, #3
 80056bc:	d9e2      	bls.n	8005684 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80056be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80056c2:	2b03      	cmp	r3, #3
 80056c4:	d101      	bne.n	80056ca <find_volume+0x1e2>
 80056c6:	2301      	movs	r3, #1
 80056c8:	e233      	b.n	8005b32 <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80056ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <find_volume+0x1ee>
 80056d2:	230d      	movs	r3, #13
 80056d4:	e22d      	b.n	8005b32 <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80056d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d8:	7b1b      	ldrb	r3, [r3, #12]
 80056da:	021b      	lsls	r3, r3, #8
 80056dc:	b21a      	sxth	r2, r3
 80056de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e0:	7adb      	ldrb	r3, [r3, #11]
 80056e2:	b21b      	sxth	r3, r3
 80056e4:	4313      	orrs	r3, r2
 80056e6:	b21a      	sxth	r2, r3
 80056e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056ee:	895b      	ldrh	r3, [r3, #10]
 80056f0:	b21b      	sxth	r3, r3
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d001      	beq.n	80056fa <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 80056f6:	230d      	movs	r3, #13
 80056f8:	e21b      	b.n	8005b32 <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80056fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fc:	7ddb      	ldrb	r3, [r3, #23]
 80056fe:	021b      	lsls	r3, r3, #8
 8005700:	b21a      	sxth	r2, r3
 8005702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005704:	7d9b      	ldrb	r3, [r3, #22]
 8005706:	b21b      	sxth	r3, r3
 8005708:	4313      	orrs	r3, r2
 800570a:	b21b      	sxth	r3, r3
 800570c:	b29b      	uxth	r3, r3
 800570e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8005710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005712:	2b00      	cmp	r3, #0
 8005714:	d112      	bne.n	800573c <find_volume+0x254>
 8005716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005718:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800571c:	061a      	lsls	r2, r3, #24
 800571e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005720:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005724:	041b      	lsls	r3, r3, #16
 8005726:	4313      	orrs	r3, r2
 8005728:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800572a:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800572e:	0212      	lsls	r2, r2, #8
 8005730:	4313      	orrs	r3, r2
 8005732:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005734:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8005738:	4313      	orrs	r3, r2
 800573a:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800573c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005742:	461a      	mov	r2, r3
 8005744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005746:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8005748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574a:	7c1a      	ldrb	r2, [r3, #16]
 800574c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005752:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8005754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800575a:	78db      	ldrb	r3, [r3, #3]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d009      	beq.n	8005774 <find_volume+0x28c>
 8005760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005766:	78db      	ldrb	r3, [r3, #3]
 8005768:	2b02      	cmp	r3, #2
 800576a:	d003      	beq.n	8005774 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 800576c:	230d      	movs	r3, #13
 800576e:	e1e0      	b.n	8005b32 <find_volume+0x64a>
 8005770:	20002150 	.word	0x20002150
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8005774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800577a:	78db      	ldrb	r3, [r3, #3]
 800577c:	461a      	mov	r2, r3
 800577e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005780:	fb02 f303 	mul.w	r3, r2, r3
 8005784:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8005786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005788:	7b5a      	ldrb	r2, [r3, #13]
 800578a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005790:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8005792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005798:	789b      	ldrb	r3, [r3, #2]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00c      	beq.n	80057b8 <find_volume+0x2d0>
 800579e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057a4:	789b      	ldrb	r3, [r3, #2]
 80057a6:	461a      	mov	r2, r3
 80057a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057ae:	789b      	ldrb	r3, [r3, #2]
 80057b0:	3b01      	subs	r3, #1
 80057b2:	4013      	ands	r3, r2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 80057b8:	230d      	movs	r3, #13
 80057ba:	e1ba      	b.n	8005b32 <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80057bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057be:	7c9b      	ldrb	r3, [r3, #18]
 80057c0:	021b      	lsls	r3, r3, #8
 80057c2:	b21a      	sxth	r2, r3
 80057c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c6:	7c5b      	ldrb	r3, [r3, #17]
 80057c8:	b21b      	sxth	r3, r3
 80057ca:	4313      	orrs	r3, r2
 80057cc:	b21b      	sxth	r3, r3
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057d6:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80057d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057de:	891b      	ldrh	r3, [r3, #8]
 80057e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80057e6:	8952      	ldrh	r2, [r2, #10]
 80057e8:	0952      	lsrs	r2, r2, #5
 80057ea:	b292      	uxth	r2, r2
 80057ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80057f0:	fb01 f202 	mul.w	r2, r1, r2
 80057f4:	1a9b      	subs	r3, r3, r2
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d001      	beq.n	8005800 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 80057fc:	230d      	movs	r3, #13
 80057fe:	e198      	b.n	8005b32 <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8005800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005802:	7d1b      	ldrb	r3, [r3, #20]
 8005804:	021b      	lsls	r3, r3, #8
 8005806:	b21a      	sxth	r2, r3
 8005808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580a:	7cdb      	ldrb	r3, [r3, #19]
 800580c:	b21b      	sxth	r3, r3
 800580e:	4313      	orrs	r3, r2
 8005810:	b21b      	sxth	r3, r3
 8005812:	b29b      	uxth	r3, r3
 8005814:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8005816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005818:	2b00      	cmp	r3, #0
 800581a:	d112      	bne.n	8005842 <find_volume+0x35a>
 800581c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005822:	061a      	lsls	r2, r3, #24
 8005824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005826:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800582a:	041b      	lsls	r3, r3, #16
 800582c:	4313      	orrs	r3, r2
 800582e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005830:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8005834:	0212      	lsls	r2, r2, #8
 8005836:	4313      	orrs	r3, r2
 8005838:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800583a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800583e:	4313      	orrs	r3, r2
 8005840:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8005842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005844:	7bdb      	ldrb	r3, [r3, #15]
 8005846:	021b      	lsls	r3, r3, #8
 8005848:	b21a      	sxth	r2, r3
 800584a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584c:	7b9b      	ldrb	r3, [r3, #14]
 800584e:	b21b      	sxth	r3, r3
 8005850:	4313      	orrs	r3, r2
 8005852:	b21b      	sxth	r3, r3
 8005854:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8005856:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005858:	2b00      	cmp	r3, #0
 800585a:	d101      	bne.n	8005860 <find_volume+0x378>
 800585c:	230d      	movs	r3, #13
 800585e:	e168      	b.n	8005b32 <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8005860:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005864:	4413      	add	r3, r2
 8005866:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005868:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800586c:	8911      	ldrh	r1, [r2, #8]
 800586e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005870:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005874:	8952      	ldrh	r2, [r2, #10]
 8005876:	0952      	lsrs	r2, r2, #5
 8005878:	b292      	uxth	r2, r2
 800587a:	fbb1 f2f2 	udiv	r2, r1, r2
 800587e:	b292      	uxth	r2, r2
 8005880:	4413      	add	r3, r2
 8005882:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005884:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005888:	429a      	cmp	r2, r3
 800588a:	d201      	bcs.n	8005890 <find_volume+0x3a8>
 800588c:	230d      	movs	r3, #13
 800588e:	e150      	b.n	8005b32 <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8005890:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005898:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800589c:	7892      	ldrb	r2, [r2, #2]
 800589e:	fbb3 f3f2 	udiv	r3, r3, r2
 80058a2:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80058a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <find_volume+0x3c6>
 80058aa:	230d      	movs	r3, #13
 80058ac:	e141      	b.n	8005b32 <find_volume+0x64a>
	fmt = FS_FAT12;
 80058ae:	2301      	movs	r3, #1
 80058b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	f640 72f5 	movw	r2, #4085	; 0xff5
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d902      	bls.n	80058c4 <find_volume+0x3dc>
 80058be:	2302      	movs	r3, #2
 80058c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d902      	bls.n	80058d4 <find_volume+0x3ec>
 80058ce:	2303      	movs	r3, #3
 80058d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	3302      	adds	r3, #2
 80058d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80058de:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 80058e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058e6:	461a      	mov	r2, r3
 80058e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058ea:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80058ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80058ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058f0:	4413      	add	r3, r2
 80058f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80058f8:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 80058fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80058fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fe:	4413      	add	r3, r2
 8005900:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005902:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005906:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 8005908:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800590c:	2b03      	cmp	r3, #3
 800590e:	d124      	bne.n	800595a <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8005910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005916:	891b      	ldrh	r3, [r3, #8]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d001      	beq.n	8005920 <find_volume+0x438>
 800591c:	230d      	movs	r3, #13
 800591e:	e108      	b.n	8005b32 <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8005920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005922:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005926:	061a      	lsls	r2, r3, #24
 8005928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800592e:	041b      	lsls	r3, r3, #16
 8005930:	4313      	orrs	r3, r2
 8005932:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005934:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8005938:	0212      	lsls	r2, r2, #8
 800593a:	4313      	orrs	r3, r2
 800593c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800593e:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8005942:	4313      	orrs	r3, r2
 8005944:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005946:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800594a:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800594c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	647b      	str	r3, [r7, #68]	; 0x44
 8005958:	e02b      	b.n	80059b2 <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800595a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005960:	891b      	ldrh	r3, [r3, #8]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <find_volume+0x482>
 8005966:	230d      	movs	r3, #13
 8005968:	e0e3      	b.n	8005b32 <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800596a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005970:	6a1a      	ldr	r2, [r3, #32]
 8005972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005974:	4413      	add	r3, r2
 8005976:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005978:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800597c:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800597e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005982:	2b02      	cmp	r3, #2
 8005984:	d105      	bne.n	8005992 <find_volume+0x4aa>
 8005986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	e00e      	b.n	80059b0 <find_volume+0x4c8>
 8005992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005994:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005998:	695a      	ldr	r2, [r3, #20]
 800599a:	4613      	mov	r3, r2
 800599c:	005b      	lsls	r3, r3, #1
 800599e:	4413      	add	r3, r2
 80059a0:	085a      	lsrs	r2, r3, #1
 80059a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80059b0:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80059b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059b8:	699a      	ldr	r2, [r3, #24]
 80059ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059c0:	895b      	ldrh	r3, [r3, #10]
 80059c2:	4619      	mov	r1, r3
 80059c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059c6:	440b      	add	r3, r1
 80059c8:	3b01      	subs	r3, #1
 80059ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80059cc:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80059d0:	8949      	ldrh	r1, [r1, #10]
 80059d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d201      	bcs.n	80059de <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 80059da:	230d      	movs	r3, #13
 80059dc:	e0a9      	b.n	8005b32 <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80059de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059e4:	461a      	mov	r2, r3
 80059e6:	f04f 33ff 	mov.w	r3, #4294967295
 80059ea:	6113      	str	r3, [r2, #16]
 80059ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80059fa:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80059fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a02:	2280      	movs	r2, #128	; 0x80
 8005a04:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8005a06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a0a:	2b03      	cmp	r3, #3
 8005a0c:	d17a      	bne.n	8005b04 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8005a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a10:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005a14:	021b      	lsls	r3, r3, #8
 8005a16:	b21a      	sxth	r2, r3
 8005a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a1e:	b21b      	sxth	r3, r3
 8005a20:	4313      	orrs	r3, r2
 8005a22:	b21b      	sxth	r3, r3
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d16d      	bne.n	8005b04 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 8005a28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a30:	f7fd ff8c 	bl	800394c <move_window>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d164      	bne.n	8005b04 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 8005a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a40:	2200      	movs	r2, #0
 8005a42:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a46:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8005a4a:	021b      	lsls	r3, r3, #8
 8005a4c:	b21a      	sxth	r2, r3
 8005a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a50:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8005a54:	b21b      	sxth	r3, r3
 8005a56:	4313      	orrs	r3, r2
 8005a58:	b21b      	sxth	r3, r3
 8005a5a:	4a38      	ldr	r2, [pc, #224]	; (8005b3c <find_volume+0x654>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d151      	bne.n	8005b04 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8005a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a62:	78db      	ldrb	r3, [r3, #3]
 8005a64:	061a      	lsls	r2, r3, #24
 8005a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a68:	789b      	ldrb	r3, [r3, #2]
 8005a6a:	041b      	lsls	r3, r3, #16
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a70:	7852      	ldrb	r2, [r2, #1]
 8005a72:	0212      	lsls	r2, r2, #8
 8005a74:	4313      	orrs	r3, r2
 8005a76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a78:	7812      	ldrb	r2, [r2, #0]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	4a30      	ldr	r2, [pc, #192]	; (8005b40 <find_volume+0x658>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d140      	bne.n	8005b04 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8005a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a84:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8005a88:	061a      	lsls	r2, r3, #24
 8005a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8c:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8005a90:	041b      	lsls	r3, r3, #16
 8005a92:	4313      	orrs	r3, r2
 8005a94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a96:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8005a9a:	0212      	lsls	r2, r2, #8
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005aa0:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	4a27      	ldr	r2, [pc, #156]	; (8005b44 <find_volume+0x65c>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d12b      	bne.n	8005b04 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8005aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aae:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8005ab2:	061a      	lsls	r2, r3, #24
 8005ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab6:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8005aba:	041b      	lsls	r3, r3, #16
 8005abc:	4313      	orrs	r3, r2
 8005abe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ac0:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8005ac4:	0212      	lsls	r2, r2, #8
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005aca:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ad2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005ad6:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8005ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ada:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8005ade:	061a      	lsls	r2, r3, #24
 8005ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae2:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8005ae6:	041b      	lsls	r3, r3, #16
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005aec:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8005af0:	0212      	lsls	r2, r2, #8
 8005af2:	4313      	orrs	r3, r2
 8005af4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005af6:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8005afa:	4313      	orrs	r3, r2
 8005afc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005afe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005b02:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8005b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b10:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8005b12:	4b0d      	ldr	r3, [pc, #52]	; (8005b48 <find_volume+0x660>)
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	3301      	adds	r3, #1
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	4b0b      	ldr	r3, [pc, #44]	; (8005b48 <find_volume+0x660>)
 8005b1c:	801a      	strh	r2, [r3, #0]
 8005b1e:	4b0a      	ldr	r3, [pc, #40]	; (8005b48 <find_volume+0x660>)
 8005b20:	881a      	ldrh	r2, [r3, #0]
 8005b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b28:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8005b2a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005b2c:	f7fd fe92 	bl	8003854 <clear_lock>
#endif

	return FR_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3758      	adds	r7, #88	; 0x58
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	ffffaa55 	.word	0xffffaa55
 8005b40:	41615252 	.word	0x41615252
 8005b44:	61417272 	.word	0x61417272
 8005b48:	20002154 	.word	0x20002154

08005b4c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d02a      	beq.n	8005bb4 <validate+0x68>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d024      	beq.n	8005bb4 <validate+0x68>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d01b      	beq.n	8005bb4 <validate+0x68>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b88:	88da      	ldrh	r2, [r3, #6]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b90:	889b      	ldrh	r3, [r3, #4]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d10e      	bne.n	8005bb4 <validate+0x68>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ba2:	785b      	ldrb	r3, [r3, #1]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fd fbab 	bl	8003300 <disk_status>
 8005baa:	4603      	mov	r3, r0
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d001      	beq.n	8005bb8 <validate+0x6c>
		return FR_INVALID_OBJECT;
 8005bb4:	2309      	movs	r3, #9
 8005bb6:	e000      	b.n	8005bba <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
	...

08005bc4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b088      	sub	sp, #32
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8005bd6:	f107 0310 	add.w	r3, r7, #16
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7ff fbd2 	bl	8005384 <get_ldnumber>
 8005be0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	da01      	bge.n	8005bec <f_mount+0x28>
 8005be8:	230b      	movs	r3, #11
 8005bea:	e02f      	b.n	8005c4c <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005bec:	4a19      	ldr	r2, [pc, #100]	; (8005c54 <f_mount+0x90>)
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bf4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d007      	beq.n	8005c0c <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8005bfc:	69b8      	ldr	r0, [r7, #24]
 8005bfe:	f7fd fe29 	bl	8003854 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c08:	2200      	movs	r2, #0
 8005c0a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d004      	beq.n	8005c1c <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c18:	2200      	movs	r2, #0
 8005c1a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	490d      	ldr	r1, [pc, #52]	; (8005c54 <f_mount+0x90>)
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <f_mount+0x6e>
 8005c2c:	79fb      	ldrb	r3, [r7, #7]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d001      	beq.n	8005c36 <f_mount+0x72>
 8005c32:	2300      	movs	r3, #0
 8005c34:	e00a      	b.n	8005c4c <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8005c36:	f107 0108 	add.w	r1, r7, #8
 8005c3a:	f107 030c 	add.w	r3, r7, #12
 8005c3e:	2200      	movs	r2, #0
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7ff fc51 	bl	80054e8 <find_volume>
 8005c46:	4603      	mov	r3, r0
 8005c48:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3720      	adds	r7, #32
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	20002150 	.word	0x20002150

08005c58 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c66:	f843 0c4c 	str.w	r0, [r3, #-76]
 8005c6a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c6e:	f843 1c50 	str.w	r1, [r3, #-80]
 8005c72:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c76:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8005c7a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c7e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <f_open+0x32>
 8005c86:	2309      	movs	r3, #9
 8005c88:	e2f7      	b.n	800627a <f_open+0x622>
	fp->fs = 0;			/* Clear file object */
 8005c8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c8e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c96:	461a      	mov	r2, r3
 8005c98:	2300      	movs	r3, #0
 8005c9a:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8005c9c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005ca6:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005caa:	f003 031f 	and.w	r3, r3, #31
 8005cae:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8005cb2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005cb6:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005cba:	f023 0301 	bic.w	r3, r3, #1
 8005cbe:	b2da      	uxtb	r2, r3
 8005cc0:	f107 0118 	add.w	r1, r7, #24
 8005cc4:	3910      	subs	r1, #16
 8005cc6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005cca:	3b18      	subs	r3, #24
 8005ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7ff fc09 	bl	80054e8 <find_volume>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005cdc:	f102 0217 	add.w	r2, r2, #23
 8005ce0:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8005ce2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005ce6:	f103 0317 	add.w	r3, r3, #23
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f040 82bf 	bne.w	8006270 <f_open+0x618>
		INIT_BUF(dj);
 8005cf2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	f107 0318 	add.w	r3, r7, #24
 8005cfc:	3b04      	subs	r3, #4
 8005cfe:	f8c2 3fe0 	str.w	r3, [r2, #4064]	; 0xfe0
 8005d02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005d06:	461a      	mov	r2, r3
 8005d08:	4bd4      	ldr	r3, [pc, #848]	; (800605c <f_open+0x404>)
 8005d0a:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 8005d0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005d12:	f853 2c50 	ldr.w	r2, [r3, #-80]
 8005d16:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005d1a:	3b18      	subs	r3, #24
 8005d1c:	4611      	mov	r1, r2
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7ff faba 	bl	8005298 <follow_path>
 8005d24:	4603      	mov	r3, r0
 8005d26:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005d2a:	f102 0217 	add.w	r2, r2, #23
 8005d2e:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8005d30:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005d34:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 8005d38:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005d3c:	f102 0210 	add.w	r2, r2, #16
 8005d40:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005d42:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005d46:	f103 0317 	add.w	r3, r3, #23
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d126      	bne.n	8005d9e <f_open+0x146>
			if (!dir)	/* Default directory itself */
 8005d50:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005d54:	f103 0310 	add.w	r3, r3, #16
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d106      	bne.n	8005d6c <f_open+0x114>
				res = FR_INVALID_NAME;
 8005d5e:	2306      	movs	r3, #6
 8005d60:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005d64:	f102 0217 	add.w	r2, r2, #23
 8005d68:	7013      	strb	r3, [r2, #0]
 8005d6a:	e018      	b.n	8005d9e <f_open+0x146>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005d6c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005d70:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005d74:	f023 0301 	bic.w	r3, r3, #1
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	bf14      	ite	ne
 8005d7c:	2301      	movne	r3, #1
 8005d7e:	2300      	moveq	r3, #0
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	461a      	mov	r2, r3
 8005d84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005d88:	3b18      	subs	r3, #24
 8005d8a:	4611      	mov	r1, r2
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7fd fbcd 	bl	800352c <chk_lock>
 8005d92:	4603      	mov	r3, r0
 8005d94:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005d98:	f102 0217 	add.w	r2, r2, #23
 8005d9c:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005d9e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005da2:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005da6:	f003 031c 	and.w	r3, r3, #28
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f000 813c 	beq.w	8006028 <f_open+0x3d0>
			if (res != FR_OK) {					/* No file, create new */
 8005db0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005db4:	f103 0317 	add.w	r3, r3, #23
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d02e      	beq.n	8005e1c <f_open+0x1c4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8005dbe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005dc2:	f103 0317 	add.w	r3, r3, #23
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	2b04      	cmp	r3, #4
 8005dca:	d112      	bne.n	8005df2 <f_open+0x19a>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005dcc:	f7fd fc1e 	bl	800360c <enq_lock>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d007      	beq.n	8005de6 <f_open+0x18e>
 8005dd6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005dda:	3b18      	subs	r3, #24
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7fe ff79 	bl	8004cd4 <dir_register>
 8005de2:	4603      	mov	r3, r0
 8005de4:	e000      	b.n	8005de8 <f_open+0x190>
 8005de6:	2312      	movs	r3, #18
 8005de8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005dec:	f102 0217 	add.w	r2, r2, #23
 8005df0:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005df2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005df6:	461a      	mov	r2, r3
 8005df8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005dfc:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005e00:	f043 0308 	orr.w	r3, r3, #8
 8005e04:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 8005e08:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005e0c:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 8005e10:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005e14:	f102 0210 	add.w	r2, r2, #16
 8005e18:	6013      	str	r3, [r2, #0]
 8005e1a:	e01f      	b.n	8005e5c <f_open+0x204>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005e1c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005e20:	f103 0310 	add.w	r3, r3, #16
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	330b      	adds	r3, #11
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	f003 0311 	and.w	r3, r3, #17
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d006      	beq.n	8005e40 <f_open+0x1e8>
					res = FR_DENIED;
 8005e32:	2307      	movs	r3, #7
 8005e34:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005e38:	f102 0217 	add.w	r2, r2, #23
 8005e3c:	7013      	strb	r3, [r2, #0]
 8005e3e:	e00d      	b.n	8005e5c <f_open+0x204>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8005e40:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005e44:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005e48:	f003 0304 	and.w	r3, r3, #4
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d005      	beq.n	8005e5c <f_open+0x204>
						res = FR_EXIST;
 8005e50:	2308      	movs	r3, #8
 8005e52:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005e56:	f102 0217 	add.w	r2, r2, #23
 8005e5a:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005e5c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005e60:	f103 0317 	add.w	r3, r3, #23
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f040 8113 	bne.w	8006092 <f_open+0x43a>
 8005e6c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005e70:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005e74:	f003 0308 	and.w	r3, r3, #8
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 810a 	beq.w	8006092 <f_open+0x43a>
				dw = GET_FATTIME();				/* Created time */
 8005e7e:	f7fd f9dd 	bl	800323c <get_fattime>
 8005e82:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005e86:	f103 030c 	add.w	r3, r3, #12
 8005e8a:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8005e8c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005e90:	f103 0310 	add.w	r3, r3, #16
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	330e      	adds	r3, #14
 8005e98:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005e9c:	f102 020c 	add.w	r2, r2, #12
 8005ea0:	6812      	ldr	r2, [r2, #0]
 8005ea2:	b2d2      	uxtb	r2, r2
 8005ea4:	701a      	strb	r2, [r3, #0]
 8005ea6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005eaa:	f103 030c 	add.w	r3, r3, #12
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	0a1b      	lsrs	r3, r3, #8
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005eba:	f103 0310 	add.w	r3, r3, #16
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	330f      	adds	r3, #15
 8005ec2:	b2d2      	uxtb	r2, r2
 8005ec4:	701a      	strb	r2, [r3, #0]
 8005ec6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005eca:	f103 030c 	add.w	r3, r3, #12
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	0c1a      	lsrs	r2, r3, #16
 8005ed2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005ed6:	f103 0310 	add.w	r3, r3, #16
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	3310      	adds	r3, #16
 8005ede:	b2d2      	uxtb	r2, r2
 8005ee0:	701a      	strb	r2, [r3, #0]
 8005ee2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005ee6:	f103 030c 	add.w	r3, r3, #12
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	0e1a      	lsrs	r2, r3, #24
 8005eee:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005ef2:	f103 0310 	add.w	r3, r3, #16
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	3311      	adds	r3, #17
 8005efa:	b2d2      	uxtb	r2, r2
 8005efc:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8005efe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005f02:	f103 0310 	add.w	r3, r3, #16
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	330b      	adds	r3, #11
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8005f0e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005f12:	f103 0310 	add.w	r3, r3, #16
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	331c      	adds	r3, #28
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	701a      	strb	r2, [r3, #0]
 8005f1e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005f22:	f103 0310 	add.w	r3, r3, #16
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	331d      	adds	r3, #29
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	701a      	strb	r2, [r3, #0]
 8005f2e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005f32:	f103 0310 	add.w	r3, r3, #16
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	331e      	adds	r3, #30
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	701a      	strb	r2, [r3, #0]
 8005f3e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005f42:	f103 0310 	add.w	r3, r3, #16
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	331f      	adds	r3, #31
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8005f4e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005f52:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8005f56:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005f5a:	f102 0210 	add.w	r2, r2, #16
 8005f5e:	6811      	ldr	r1, [r2, #0]
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fe fc06 	bl	8004772 <ld_clust>
 8005f66:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005f6a:	f103 0308 	add.w	r3, r3, #8
 8005f6e:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8005f70:	2100      	movs	r1, #0
 8005f72:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005f76:	f103 0310 	add.w	r3, r3, #16
 8005f7a:	6818      	ldr	r0, [r3, #0]
 8005f7c:	f7fe fc27 	bl	80047ce <st_clust>
				dj.fs->wflag = 1;
 8005f80:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005f84:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8005f88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8005f90:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005f94:	f103 0308 	add.w	r3, r3, #8
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d079      	beq.n	8006092 <f_open+0x43a>
					dw = dj.fs->winsect;
 8005f9e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005fa2:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8005fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fac:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005fb0:	f102 020c 	add.w	r2, r2, #12
 8005fb4:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8005fb6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005fba:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8005fbe:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005fc2:	f102 0208 	add.w	r2, r2, #8
 8005fc6:	6811      	ldr	r1, [r2, #0]
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7fe f823 	bl	8004014 <remove_chain>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005fd4:	f102 0217 	add.w	r2, r2, #23
 8005fd8:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8005fda:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005fde:	f103 0317 	add.w	r3, r3, #23
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d154      	bne.n	8006092 <f_open+0x43a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8005fe8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005fec:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	; 0xfc8
 8005ff0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005ff4:	f103 0308 	add.w	r3, r3, #8
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006000:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 8006002:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006006:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800600a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800600e:	f102 020c 	add.w	r2, r2, #12
 8006012:	6811      	ldr	r1, [r2, #0]
 8006014:	4618      	mov	r0, r3
 8006016:	f7fd fc99 	bl	800394c <move_window>
 800601a:	4603      	mov	r3, r0
 800601c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006020:	f102 0217 	add.w	r2, r2, #23
 8006024:	7013      	strb	r3, [r2, #0]
 8006026:	e034      	b.n	8006092 <f_open+0x43a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8006028:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800602c:	f103 0317 	add.w	r3, r3, #23
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d12d      	bne.n	8006092 <f_open+0x43a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8006036:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800603a:	f103 0310 	add.w	r3, r3, #16
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	330b      	adds	r3, #11
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	f003 0310 	and.w	r3, r3, #16
 8006048:	2b00      	cmp	r3, #0
 800604a:	d009      	beq.n	8006060 <f_open+0x408>
					res = FR_NO_FILE;
 800604c:	2304      	movs	r3, #4
 800604e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006052:	f102 0217 	add.w	r2, r2, #23
 8006056:	7013      	strb	r3, [r2, #0]
 8006058:	e01b      	b.n	8006092 <f_open+0x43a>
 800605a:	bf00      	nop
 800605c:	20002170 	.word	0x20002170
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8006060:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006064:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006068:	f003 0302 	and.w	r3, r3, #2
 800606c:	2b00      	cmp	r3, #0
 800606e:	d010      	beq.n	8006092 <f_open+0x43a>
 8006070:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006074:	f103 0310 	add.w	r3, r3, #16
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	330b      	adds	r3, #11
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	2b00      	cmp	r3, #0
 8006084:	d005      	beq.n	8006092 <f_open+0x43a>
						res = FR_DENIED;
 8006086:	2307      	movs	r3, #7
 8006088:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800608c:	f102 0217 	add.w	r2, r2, #23
 8006090:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8006092:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006096:	f103 0317 	add.w	r3, r3, #23
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d157      	bne.n	8006150 <f_open+0x4f8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80060a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80060a4:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80060a8:	f003 0308 	and.w	r3, r3, #8
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00a      	beq.n	80060c6 <f_open+0x46e>
				mode |= FA__WRITTEN;
 80060b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80060b4:	461a      	mov	r2, r3
 80060b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80060ba:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80060be:	f043 0320 	orr.w	r3, r3, #32
 80060c2:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80060c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80060ca:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 80060ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80060d8:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80060dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80060e0:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 80060e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80060e6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80060ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ee:	461a      	mov	r2, r3
 80060f0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80060f4:	f103 0310 	add.w	r3, r3, #16
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80060fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006100:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006104:	f023 0301 	bic.w	r3, r3, #1
 8006108:	2b00      	cmp	r3, #0
 800610a:	bf14      	ite	ne
 800610c:	2301      	movne	r3, #1
 800610e:	2300      	moveq	r3, #0
 8006110:	b2db      	uxtb	r3, r3
 8006112:	461a      	mov	r2, r3
 8006114:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006118:	3b18      	subs	r3, #24
 800611a:	4611      	mov	r1, r2
 800611c:	4618      	mov	r0, r3
 800611e:	f7fd fa99 	bl	8003654 <inc_lock>
 8006122:	4602      	mov	r2, r0
 8006124:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006128:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800612c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006130:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8006132:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006136:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800613a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800613e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006140:	2b00      	cmp	r3, #0
 8006142:	d105      	bne.n	8006150 <f_open+0x4f8>
 8006144:	2302      	movs	r3, #2
 8006146:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800614a:	f102 0217 	add.w	r2, r2, #23
 800614e:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8006150:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006154:	f103 0317 	add.w	r3, r3, #23
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	f040 8088 	bne.w	8006270 <f_open+0x618>
			fp->flag = mode;					/* File access mode */
 8006160:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006164:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800616c:	461a      	mov	r2, r3
 800616e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006172:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006176:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 8006178:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800617c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006184:	2200      	movs	r2, #0
 8006186:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8006188:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800618c:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8006190:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006194:	f102 0210 	add.w	r2, r2, #16
 8006198:	6811      	ldr	r1, [r2, #0]
 800619a:	4618      	mov	r0, r3
 800619c:	f7fe fae9 	bl	8004772 <ld_clust>
 80061a0:	4602      	mov	r2, r0
 80061a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80061a6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80061aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061ae:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80061b0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80061b4:	f103 0310 	add.w	r3, r3, #16
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	331f      	adds	r3, #31
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	061a      	lsls	r2, r3, #24
 80061c0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80061c4:	f103 0310 	add.w	r3, r3, #16
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	331e      	adds	r3, #30
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	041b      	lsls	r3, r3, #16
 80061d0:	4313      	orrs	r3, r2
 80061d2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80061d6:	f102 0210 	add.w	r2, r2, #16
 80061da:	6812      	ldr	r2, [r2, #0]
 80061dc:	321d      	adds	r2, #29
 80061de:	7812      	ldrb	r2, [r2, #0]
 80061e0:	0212      	lsls	r2, r2, #8
 80061e2:	4313      	orrs	r3, r2
 80061e4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80061e8:	f102 0210 	add.w	r2, r2, #16
 80061ec:	6812      	ldr	r2, [r2, #0]
 80061ee:	321c      	adds	r2, #28
 80061f0:	7812      	ldrb	r2, [r2, #0]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80061f8:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80061fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006200:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 8006202:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006206:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800620a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800620e:	461a      	mov	r2, r3
 8006210:	2300      	movs	r3, #0
 8006212:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 8006214:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006218:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800621c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006220:	461a      	mov	r2, r3
 8006222:	2300      	movs	r3, #0
 8006224:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8006226:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800622a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800622e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006232:	461a      	mov	r2, r3
 8006234:	2300      	movs	r3, #0
 8006236:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8006238:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800623c:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8006240:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006244:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8006248:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800624c:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 800624e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006252:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006260:	88da      	ldrh	r2, [r3, #6]
 8006262:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006266:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800626a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800626e:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8006270:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006274:	f103 0317 	add.w	r3, r3, #23
 8006278:	781b      	ldrb	r3, [r3, #0]
}
 800627a:	4618      	mov	r0, r3
 800627c:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8006280:	3718      	adds	r7, #24
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop

08006288 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b08a      	sub	sp, #40	; 0x28
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]
 8006294:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	2200      	movs	r2, #0
 800629e:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f7ff fc53 	bl	8005b4c <validate>
 80062a6:	4603      	mov	r3, r0
 80062a8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80062aa:	7dfb      	ldrb	r3, [r7, #23]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <f_write+0x2c>
 80062b0:	7dfb      	ldrb	r3, [r7, #23]
 80062b2:	e21e      	b.n	80066f2 <f_write+0x46a>
	if (fp->err)							/* Check error */
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062ba:	79db      	ldrb	r3, [r3, #7]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d004      	beq.n	80062ca <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062c6:	79db      	ldrb	r3, [r3, #7]
 80062c8:	e213      	b.n	80066f2 <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062d0:	799b      	ldrb	r3, [r3, #6]
 80062d2:	f003 0302 	and.w	r3, r3, #2
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d101      	bne.n	80062de <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 80062da:	2307      	movs	r3, #7
 80062dc:	e209      	b.n	80066f2 <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062e4:	689a      	ldr	r2, [r3, #8]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	441a      	add	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	f080 81d9 	bcs.w	80066aa <f_write+0x422>
 80062f8:	2300      	movs	r3, #0
 80062fa:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80062fc:	e1d5      	b.n	80066aa <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800630c:	6812      	ldr	r2, [r2, #0]
 800630e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006312:	8952      	ldrh	r2, [r2, #10]
 8006314:	fbb3 f1f2 	udiv	r1, r3, r2
 8006318:	fb01 f202 	mul.w	r2, r1, r2
 800631c:	1a9b      	subs	r3, r3, r2
 800631e:	2b00      	cmp	r3, #0
 8006320:	f040 8169 	bne.w	80065f6 <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006332:	6812      	ldr	r2, [r2, #0]
 8006334:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006338:	8952      	ldrh	r2, [r2, #10]
 800633a:	fbb3 f3f2 	udiv	r3, r3, r2
 800633e:	b2da      	uxtb	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800634c:	789b      	ldrb	r3, [r3, #2]
 800634e:	3b01      	subs	r3, #1
 8006350:	b2db      	uxtb	r3, r3
 8006352:	4013      	ands	r3, r2
 8006354:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8006356:	7dbb      	ldrb	r3, [r7, #22]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d15f      	bne.n	800641c <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d111      	bne.n	800638c <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8006372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006374:	2b00      	cmp	r3, #0
 8006376:	d126      	bne.n	80063c6 <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2100      	movs	r1, #0
 8006382:	4618      	mov	r0, r3
 8006384:	f7fd fea7 	bl	80040d6 <create_chain>
 8006388:	6278      	str	r0, [r7, #36]	; 0x24
 800638a:	e01c      	b.n	80063c6 <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006394:	2b00      	cmp	r3, #0
 8006396:	d009      	beq.n	80063ac <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	4619      	mov	r1, r3
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f7fd ff3f 	bl	8004226 <clmt_clust>
 80063a8:	6278      	str	r0, [r7, #36]	; 0x24
 80063aa:	e00c      	b.n	80063c6 <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063ba:	695b      	ldr	r3, [r3, #20]
 80063bc:	4619      	mov	r1, r3
 80063be:	4610      	mov	r0, r2
 80063c0:	f7fd fe89 	bl	80040d6 <create_chain>
 80063c4:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80063c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 8173 	beq.w	80066b4 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80063ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d106      	bne.n	80063e2 <f_write+0x15a>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063da:	2202      	movs	r2, #2
 80063dc:	71da      	strb	r2, [r3, #7]
 80063de:	2302      	movs	r3, #2
 80063e0:	e187      	b.n	80066f2 <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e8:	d106      	bne.n	80063f8 <f_write+0x170>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063f0:	2201      	movs	r2, #1
 80063f2:	71da      	strb	r2, [r3, #7]
 80063f4:	2301      	movs	r3, #1
 80063f6:	e17c      	b.n	80066f2 <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063fe:	461a      	mov	r2, r3
 8006400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006402:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d105      	bne.n	800641c <f_write+0x194>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006416:	461a      	mov	r2, r3
 8006418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641a:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006422:	799b      	ldrb	r3, [r3, #6]
 8006424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006428:	2b00      	cmp	r3, #0
 800642a:	d023      	beq.n	8006474 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006438:	7858      	ldrb	r0, [r3, #1]
 800643a:	68f9      	ldr	r1, [r7, #12]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006442:	699a      	ldr	r2, [r3, #24]
 8006444:	2301      	movs	r3, #1
 8006446:	f7fc ffbb 	bl	80033c0 <disk_write>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d006      	beq.n	800645e <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006456:	2201      	movs	r2, #1
 8006458:	71da      	strb	r2, [r3, #7]
 800645a:	2301      	movs	r3, #1
 800645c:	e149      	b.n	80066f2 <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006464:	799b      	ldrb	r3, [r3, #6]
 8006466:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800646a:	b2da      	uxtb	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006472:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	4619      	mov	r1, r3
 8006486:	4610      	mov	r0, r2
 8006488:	f7fd fb51 	bl	8003b2e <clust2sect>
 800648c:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d106      	bne.n	80064a2 <f_write+0x21a>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800649a:	2202      	movs	r2, #2
 800649c:	71da      	strb	r2, [r3, #7]
 800649e:	2302      	movs	r3, #2
 80064a0:	e127      	b.n	80066f2 <f_write+0x46a>
			sect += csect;
 80064a2:	7dbb      	ldrb	r3, [r7, #22]
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	4413      	add	r3, r2
 80064a8:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064b6:	895b      	ldrh	r3, [r3, #10]
 80064b8:	461a      	mov	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80064c0:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d069      	beq.n	800659c <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80064c8:	7dba      	ldrb	r2, [r7, #22]
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	4413      	add	r3, r2
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80064d4:	6812      	ldr	r2, [r2, #0]
 80064d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80064da:	7892      	ldrb	r2, [r2, #2]
 80064dc:	4293      	cmp	r3, r2
 80064de:	d90a      	bls.n	80064f6 <f_write+0x26e>
					cc = fp->fs->csize - csect;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064ec:	789b      	ldrb	r3, [r3, #2]
 80064ee:	461a      	mov	r2, r3
 80064f0:	7dbb      	ldrb	r3, [r7, #22]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006502:	7858      	ldrb	r0, [r3, #1]
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	69b9      	ldr	r1, [r7, #24]
 800650a:	f7fc ff59 	bl	80033c0 <disk_write>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d006      	beq.n	8006522 <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800651a:	2201      	movs	r2, #1
 800651c:	71da      	strb	r2, [r3, #7]
 800651e:	2301      	movs	r3, #1
 8006520:	e0e7      	b.n	80066f2 <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006528:	699a      	ldr	r2, [r3, #24]
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	69fa      	ldr	r2, [r7, #28]
 8006530:	429a      	cmp	r2, r3
 8006532:	d926      	bls.n	8006582 <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800653c:	699a      	ldr	r2, [r3, #24]
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006548:	6812      	ldr	r2, [r2, #0]
 800654a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800654e:	8952      	ldrh	r2, [r2, #10]
 8006550:	fb02 f303 	mul.w	r3, r2, r3
 8006554:	69ba      	ldr	r2, [r7, #24]
 8006556:	18d1      	adds	r1, r2, r3
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006564:	895b      	ldrh	r3, [r3, #10]
 8006566:	461a      	mov	r2, r3
 8006568:	f7fc ff68 	bl	800343c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006572:	799b      	ldrb	r3, [r3, #6]
 8006574:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006578:	b2da      	uxtb	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006580:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800658e:	895b      	ldrh	r3, [r3, #10]
 8006590:	461a      	mov	r2, r3
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	fb02 f303 	mul.w	r3, r2, r3
 8006598:	623b      	str	r3, [r7, #32]
				continue;
 800659a:	e06e      	b.n	800667a <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d01f      	beq.n	80065ea <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065b0:	689a      	ldr	r2, [r3, #8]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d215      	bcs.n	80065ea <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065ca:	7858      	ldrb	r0, [r3, #1]
 80065cc:	68f9      	ldr	r1, [r7, #12]
 80065ce:	2301      	movs	r3, #1
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	f7fc fed5 	bl	8003380 <disk_read>
 80065d6:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d006      	beq.n	80065ea <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065e2:	2201      	movs	r2, #1
 80065e4:	71da      	strb	r2, [r3, #7]
 80065e6:	2301      	movs	r3, #1
 80065e8:	e083      	b.n	80066f2 <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065f0:	461a      	mov	r2, r3
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006602:	895b      	ldrh	r3, [r3, #10]
 8006604:	4618      	mov	r0, r3
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006614:	6812      	ldr	r2, [r2, #0]
 8006616:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800661a:	8952      	ldrh	r2, [r2, #10]
 800661c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006620:	fb01 f202 	mul.w	r2, r1, r2
 8006624:	1a9b      	subs	r3, r3, r2
 8006626:	1ac3      	subs	r3, r0, r3
 8006628:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800662a:	6a3a      	ldr	r2, [r7, #32]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	429a      	cmp	r2, r3
 8006630:	d901      	bls.n	8006636 <f_write+0x3ae>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006644:	6812      	ldr	r2, [r2, #0]
 8006646:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800664a:	8952      	ldrh	r2, [r2, #10]
 800664c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006650:	fb01 f202 	mul.w	r2, r1, r2
 8006654:	1a9b      	subs	r3, r3, r2
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	4413      	add	r3, r2
 800665a:	6a3a      	ldr	r2, [r7, #32]
 800665c:	69b9      	ldr	r1, [r7, #24]
 800665e:	4618      	mov	r0, r3
 8006660:	f7fc feec 	bl	800343c <mem_cpy>
		fp->flag |= FA__DIRTY;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800666a:	799b      	ldrb	r3, [r3, #6]
 800666c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006670:	b2da      	uxtb	r2, r3
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006678:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800667a:	69ba      	ldr	r2, [r7, #24]
 800667c:	6a3b      	ldr	r3, [r7, #32]
 800667e:	4413      	add	r3, r2
 8006680:	61bb      	str	r3, [r7, #24]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006688:	689a      	ldr	r2, [r3, #8]
 800668a:	6a3b      	ldr	r3, [r7, #32]
 800668c:	4413      	add	r3, r2
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006694:	6093      	str	r3, [r2, #8]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	6a3b      	ldr	r3, [r7, #32]
 800669c:	441a      	add	r2, r3
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	601a      	str	r2, [r3, #0]
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	6a3b      	ldr	r3, [r7, #32]
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f47f ae26 	bne.w	80062fe <f_write+0x76>
 80066b2:	e000      	b.n	80066b6 <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80066b4:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066bc:	689a      	ldr	r2, [r3, #8]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d907      	bls.n	80066da <f_write+0x452>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80066d8:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066e0:	799b      	ldrb	r3, [r3, #6]
 80066e2:	f043 0320 	orr.w	r3, r3, #32
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066ee:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3728      	adds	r7, #40	; 0x28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b086      	sub	sp, #24
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f7ff fa22 	bl	8005b4c <validate>
 8006708:	4603      	mov	r3, r0
 800670a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800670c:	7dfb      	ldrb	r3, [r7, #23]
 800670e:	2b00      	cmp	r3, #0
 8006710:	f040 80bc 	bne.w	800688c <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800671a:	799b      	ldrb	r3, [r3, #6]
 800671c:	f003 0320 	and.w	r3, r3, #32
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 80b3 	beq.w	800688c <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800672c:	799b      	ldrb	r3, [r3, #6]
 800672e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006732:	2b00      	cmp	r3, #0
 8006734:	d01e      	beq.n	8006774 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006742:	7858      	ldrb	r0, [r3, #1]
 8006744:	6879      	ldr	r1, [r7, #4]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800674c:	699a      	ldr	r2, [r3, #24]
 800674e:	2301      	movs	r3, #1
 8006750:	f7fc fe36 	bl	80033c0 <disk_write>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800675a:	2301      	movs	r3, #1
 800675c:	e097      	b.n	800688e <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006764:	799b      	ldrb	r3, [r3, #6]
 8006766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800676a:	b2da      	uxtb	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006772:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006782:	69db      	ldr	r3, [r3, #28]
 8006784:	4619      	mov	r1, r3
 8006786:	4610      	mov	r0, r2
 8006788:	f7fd f8e0 	bl	800394c <move_window>
 800678c:	4603      	mov	r3, r0
 800678e:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8006790:	7dfb      	ldrb	r3, [r7, #23]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d17a      	bne.n	800688c <f_sync+0x192>
				dir = fp->dir_ptr;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	330b      	adds	r3, #11
 80067a4:	781a      	ldrb	r2, [r3, #0]
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	330b      	adds	r3, #11
 80067aa:	f042 0220 	orr.w	r2, r2, #32
 80067ae:	b2d2      	uxtb	r2, r2
 80067b0:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067b8:	68da      	ldr	r2, [r3, #12]
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	331c      	adds	r3, #28
 80067be:	b2d2      	uxtb	r2, r2
 80067c0:	701a      	strb	r2, [r3, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	0a1b      	lsrs	r3, r3, #8
 80067ce:	b29a      	uxth	r2, r3
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	331d      	adds	r3, #29
 80067d4:	b2d2      	uxtb	r2, r2
 80067d6:	701a      	strb	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	0c1a      	lsrs	r2, r3, #16
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	331e      	adds	r3, #30
 80067e6:	b2d2      	uxtb	r2, r2
 80067e8:	701a      	strb	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	0e1a      	lsrs	r2, r3, #24
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	331f      	adds	r3, #31
 80067f8:	b2d2      	uxtb	r2, r2
 80067fa:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	4619      	mov	r1, r3
 8006806:	6938      	ldr	r0, [r7, #16]
 8006808:	f7fd ffe1 	bl	80047ce <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800680c:	f7fc fd16 	bl	800323c <get_fattime>
 8006810:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	3316      	adds	r3, #22
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	b2d2      	uxtb	r2, r2
 800681a:	701a      	strb	r2, [r3, #0]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	b29b      	uxth	r3, r3
 8006820:	0a1b      	lsrs	r3, r3, #8
 8006822:	b29a      	uxth	r2, r3
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	3317      	adds	r3, #23
 8006828:	b2d2      	uxtb	r2, r2
 800682a:	701a      	strb	r2, [r3, #0]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	0c1a      	lsrs	r2, r3, #16
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	3318      	adds	r3, #24
 8006834:	b2d2      	uxtb	r2, r2
 8006836:	701a      	strb	r2, [r3, #0]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	0e1a      	lsrs	r2, r3, #24
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	3319      	adds	r3, #25
 8006840:	b2d2      	uxtb	r2, r2
 8006842:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	3312      	adds	r3, #18
 8006848:	2200      	movs	r2, #0
 800684a:	701a      	strb	r2, [r3, #0]
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	3313      	adds	r3, #19
 8006850:	2200      	movs	r2, #0
 8006852:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800685a:	799b      	ldrb	r3, [r3, #6]
 800685c:	f023 0320 	bic.w	r3, r3, #32
 8006860:	b2da      	uxtb	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006868:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006876:	2201      	movs	r2, #1
 8006878:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4618      	mov	r0, r3
 8006884:	f7fd f894 	bl	80039b0 <sync_fs>
 8006888:	4603      	mov	r3, r0
 800688a:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800688c:	7dfb      	ldrb	r3, [r7, #23]
}
 800688e:	4618      	mov	r0, r3
 8006890:	3718      	adds	r7, #24
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b084      	sub	sp, #16
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f7ff ff2b 	bl	80066fa <f_sync>
 80068a4:	4603      	mov	r3, r0
 80068a6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80068a8:	7bfb      	ldrb	r3, [r7, #15]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d119      	bne.n	80068e2 <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f7ff f94c 	bl	8005b4c <validate>
 80068b4:	4603      	mov	r3, r0
 80068b6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80068b8:	7bfb      	ldrb	r3, [r7, #15]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d111      	bne.n	80068e2 <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7fc ff80 	bl	80037cc <dec_lock>
 80068cc:	4603      	mov	r3, r0
 80068ce:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80068d0:	7bfb      	ldrb	r3, [r7, #15]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d105      	bne.n	80068e2 <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068dc:	461a      	mov	r2, r3
 80068de:	2300      	movs	r3, #0
 80068e0:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80068e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b090      	sub	sp, #64	; 0x40
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f7ff f928 	bl	8005b4c <validate>
 80068fc:	4603      	mov	r3, r0
 80068fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006902:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006906:	2b00      	cmp	r3, #0
 8006908:	d002      	beq.n	8006910 <f_lseek+0x24>
 800690a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800690e:	e2da      	b.n	8006ec6 <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006916:	79db      	ldrb	r3, [r3, #7]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d004      	beq.n	8006926 <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006922:	79db      	ldrb	r3, [r3, #7]
 8006924:	e2cf      	b.n	8006ec6 <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800692c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692e:	2b00      	cmp	r3, #0
 8006930:	f000 8124 	beq.w	8006b7c <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693a:	d16c      	bne.n	8006a16 <f_lseek+0x12a>
			tbl = fp->cltbl;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006944:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8006946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006948:	1d1a      	adds	r2, r3, #4
 800694a:	627a      	str	r2, [r7, #36]	; 0x24
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	617b      	str	r3, [r7, #20]
 8006950:	2302      	movs	r3, #2
 8006952:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800695e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006960:	2b00      	cmp	r3, #0
 8006962:	d046      	beq.n	80069f2 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8006964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006966:	613b      	str	r3, [r7, #16]
 8006968:	2300      	movs	r3, #0
 800696a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800696c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696e:	3302      	adds	r3, #2
 8006970:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8006972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006974:	60fb      	str	r3, [r7, #12]
 8006976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006978:	3301      	adds	r3, #1
 800697a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006986:	4618      	mov	r0, r3
 8006988:	f7fd f8f5 	bl	8003b76 <get_fat>
 800698c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800698e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006990:	2b01      	cmp	r3, #1
 8006992:	d806      	bhi.n	80069a2 <f_lseek+0xb6>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800699a:	2202      	movs	r2, #2
 800699c:	71da      	strb	r2, [r3, #7]
 800699e:	2302      	movs	r3, #2
 80069a0:	e291      	b.n	8006ec6 <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80069a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a8:	d106      	bne.n	80069b8 <f_lseek+0xcc>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069b0:	2201      	movs	r2, #1
 80069b2:	71da      	strb	r2, [r3, #7]
 80069b4:	2301      	movs	r3, #1
 80069b6:	e286      	b.n	8006ec6 <f_lseek+0x5da>
					} while (cl == pcl + 1);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	3301      	adds	r3, #1
 80069bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069be:	429a      	cmp	r2, r3
 80069c0:	d0d7      	beq.n	8006972 <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80069c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d809      	bhi.n	80069de <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 80069ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069cc:	1d1a      	adds	r2, r3, #4
 80069ce:	627a      	str	r2, [r7, #36]	; 0x24
 80069d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069d2:	601a      	str	r2, [r3, #0]
 80069d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d6:	1d1a      	adds	r2, r3, #4
 80069d8:	627a      	str	r2, [r7, #36]	; 0x24
 80069da:	693a      	ldr	r2, [r7, #16]
 80069dc:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069ea:	695b      	ldr	r3, [r3, #20]
 80069ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d3b8      	bcc.n	8006964 <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069fc:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 80069fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d803      	bhi.n	8006a0e <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 8006a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a08:	2200      	movs	r2, #0
 8006a0a:	601a      	str	r2, [r3, #0]
 8006a0c:	e259      	b.n	8006ec2 <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8006a0e:	2311      	movs	r3, #17
 8006a10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006a14:	e255      	b.n	8006ec2 <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	683a      	ldr	r2, [r7, #0]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d904      	bls.n	8006a2e <f_lseek+0x142>
				ofs = fp->fsize;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a34:	461a      	mov	r2, r3
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	6093      	str	r3, [r2, #8]
			if (ofs) {
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f000 8240 	beq.w	8006ec2 <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	3b01      	subs	r3, #1
 8006a46:	4619      	mov	r1, r3
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f7fd fbec 	bl	8004226 <clmt_clust>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a56:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a66:	695b      	ldr	r3, [r3, #20]
 8006a68:	4619      	mov	r1, r3
 8006a6a:	4610      	mov	r0, r2
 8006a6c:	f7fd f85f 	bl	8003b2e <clust2sect>
 8006a70:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d106      	bne.n	8006a86 <f_lseek+0x19a>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a7e:	2202      	movs	r2, #2
 8006a80:	71da      	strb	r2, [r3, #7]
 8006a82:	2302      	movs	r3, #2
 8006a84:	e21f      	b.n	8006ec6 <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006a90:	6812      	ldr	r2, [r2, #0]
 8006a92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006a96:	8952      	ldrh	r2, [r2, #10]
 8006a98:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006aa2:	6812      	ldr	r2, [r2, #0]
 8006aa4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006aa8:	7892      	ldrb	r2, [r2, #2]
 8006aaa:	3a01      	subs	r2, #1
 8006aac:	4013      	ands	r3, r2
 8006aae:	69ba      	ldr	r2, [r7, #24]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006ac2:	6812      	ldr	r2, [r2, #0]
 8006ac4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006ac8:	8952      	ldrh	r2, [r2, #10]
 8006aca:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ace:	fb01 f202 	mul.w	r2, r1, r2
 8006ad2:	1a9b      	subs	r3, r3, r2
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f000 81f4 	beq.w	8006ec2 <f_lseek+0x5d6>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	69ba      	ldr	r2, [r7, #24]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	f000 81ec 	beq.w	8006ec2 <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006af0:	799b      	ldrb	r3, [r3, #6]
 8006af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d023      	beq.n	8006b42 <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b06:	7858      	ldrb	r0, [r3, #1]
 8006b08:	6879      	ldr	r1, [r7, #4]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b10:	699a      	ldr	r2, [r3, #24]
 8006b12:	2301      	movs	r3, #1
 8006b14:	f7fc fc54 	bl	80033c0 <disk_write>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d006      	beq.n	8006b2c <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b24:	2201      	movs	r2, #1
 8006b26:	71da      	strb	r2, [r3, #7]
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e1cc      	b.n	8006ec6 <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b32:	799b      	ldrb	r3, [r3, #6]
 8006b34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b38:	b2da      	uxtb	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b40:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b4e:	7858      	ldrb	r0, [r3, #1]
 8006b50:	6879      	ldr	r1, [r7, #4]
 8006b52:	2301      	movs	r3, #1
 8006b54:	69ba      	ldr	r2, [r7, #24]
 8006b56:	f7fc fc13 	bl	8003380 <disk_read>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d006      	beq.n	8006b6e <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b66:	2201      	movs	r2, #1
 8006b68:	71da      	strb	r2, [r3, #7]
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e1ab      	b.n	8006ec6 <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b74:	461a      	mov	r2, r3
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	6193      	str	r3, [r2, #24]
 8006b7a:	e1a2      	b.n	8006ec2 <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d90c      	bls.n	8006ba4 <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b90:	799b      	ldrb	r3, [r3, #6]
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d104      	bne.n	8006ba4 <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	637b      	str	r3, [r7, #52]	; 0x34
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bb8:	461a      	mov	r2, r3
 8006bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bbc:	6093      	str	r3, [r2, #8]
		if (ofs) {
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f000 8100 	beq.w	8006dc6 <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bd2:	789b      	ldrb	r3, [r3, #2]
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006be2:	895b      	ldrh	r3, [r3, #10]
 8006be4:	fb02 f303 	mul.w	r3, r2, r3
 8006be8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8006bea:	6a3b      	ldr	r3, [r7, #32]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d021      	beq.n	8006c34 <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	1e5a      	subs	r2, r3, #1
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	fbb2 f2f3 	udiv	r2, r2, r3
 8006bfa:	6a3b      	ldr	r3, [r7, #32]
 8006bfc:	1e59      	subs	r1, r3, #1
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d315      	bcc.n	8006c34 <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8006c08:	6a3b      	ldr	r3, [r7, #32]
 8006c0a:	1e5a      	subs	r2, r3, #1
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	425b      	negs	r3, r3
 8006c10:	4013      	ands	r3, r2
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006c18:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	683a      	ldr	r2, [r7, #0]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c2e:	695b      	ldr	r3, [r3, #20]
 8006c30:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c32:	e031      	b.n	8006c98 <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8006c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d123      	bne.n	8006c8c <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7fd fa41 	bl	80040d6 <create_chain>
 8006c54:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8006c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d106      	bne.n	8006c6a <f_lseek+0x37e>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c62:	2202      	movs	r2, #2
 8006c64:	71da      	strb	r2, [r3, #7]
 8006c66:	2302      	movs	r3, #2
 8006c68:	e12d      	b.n	8006ec6 <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c70:	d106      	bne.n	8006c80 <f_lseek+0x394>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c78:	2201      	movs	r2, #1
 8006c7a:	71da      	strb	r2, [r3, #7]
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e122      	b.n	8006ec6 <f_lseek+0x5da>
					fp->sclust = clst;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c86:	461a      	mov	r2, r3
 8006c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8a:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c92:	461a      	mov	r2, r3
 8006c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c96:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 8006c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f000 8093 	beq.w	8006dc6 <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 8006ca0:	e052      	b.n	8006d48 <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ca8:	799b      	ldrb	r3, [r3, #6]
 8006caa:	f003 0302 	and.w	r3, r3, #2
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00e      	beq.n	8006cd0 <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f7fd fa0a 	bl	80040d6 <create_chain>
 8006cc2:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8006cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d10b      	bne.n	8006ce2 <f_lseek+0x3f6>
							ofs = bcs; break;
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	603b      	str	r3, [r7, #0]
 8006cce:	e03f      	b.n	8006d50 <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7fc ff4b 	bl	8003b76 <get_fat>
 8006ce0:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce8:	d106      	bne.n	8006cf8 <f_lseek+0x40c>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	71da      	strb	r2, [r3, #7]
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e0e6      	b.n	8006ec6 <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8006cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d909      	bls.n	8006d12 <f_lseek+0x426>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d0a:	695b      	ldr	r3, [r3, #20]
 8006d0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d306      	bcc.n	8006d20 <f_lseek+0x434>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d18:	2202      	movs	r2, #2
 8006d1a:	71da      	strb	r2, [r3, #7]
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	e0d2      	b.n	8006ec6 <f_lseek+0x5da>
					fp->clust = clst;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d26:	461a      	mov	r2, r3
 8006d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2a:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d32:	689a      	ldr	r2, [r3, #8]
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	4413      	add	r3, r2
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006d3e:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 8006d40:	683a      	ldr	r2, [r7, #0]
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8006d48:	683a      	ldr	r2, [r7, #0]
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d8a8      	bhi.n	8006ca2 <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d56:	689a      	ldr	r2, [r3, #8]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006d62:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d70:	895b      	ldrh	r3, [r3, #10]
 8006d72:	461a      	mov	r2, r3
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d7a:	fb01 f202 	mul.w	r2, r1, r2
 8006d7e:	1a9b      	subs	r3, r3, r2
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d020      	beq.n	8006dc6 <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7fc fecd 	bl	8003b2e <clust2sect>
 8006d94:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8006d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d106      	bne.n	8006daa <f_lseek+0x4be>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006da2:	2202      	movs	r2, #2
 8006da4:	71da      	strb	r2, [r3, #7]
 8006da6:	2302      	movs	r3, #2
 8006da8:	e08d      	b.n	8006ec6 <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006db6:	895b      	ldrh	r3, [r3, #10]
 8006db8:	461a      	mov	r2, r3
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006dc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dc2:	4413      	add	r3, r2
 8006dc4:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006dd4:	6812      	ldr	r2, [r2, #0]
 8006dd6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006dda:	8952      	ldrh	r2, [r2, #10]
 8006ddc:	fbb3 f1f2 	udiv	r1, r3, r2
 8006de0:	fb01 f202 	mul.w	r2, r1, r2
 8006de4:	1a9b      	subs	r3, r3, r2
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d04e      	beq.n	8006e88 <f_lseek+0x59c>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d047      	beq.n	8006e88 <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dfe:	799b      	ldrb	r3, [r3, #6]
 8006e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d023      	beq.n	8006e50 <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e14:	7858      	ldrb	r0, [r3, #1]
 8006e16:	6879      	ldr	r1, [r7, #4]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e1e:	699a      	ldr	r2, [r3, #24]
 8006e20:	2301      	movs	r3, #1
 8006e22:	f7fc facd 	bl	80033c0 <disk_write>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d006      	beq.n	8006e3a <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e32:	2201      	movs	r2, #1
 8006e34:	71da      	strb	r2, [r3, #7]
 8006e36:	2301      	movs	r3, #1
 8006e38:	e045      	b.n	8006ec6 <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e40:	799b      	ldrb	r3, [r3, #6]
 8006e42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e46:	b2da      	uxtb	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e4e:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e5c:	7858      	ldrb	r0, [r3, #1]
 8006e5e:	6879      	ldr	r1, [r7, #4]
 8006e60:	2301      	movs	r3, #1
 8006e62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e64:	f7fc fa8c 	bl	8003380 <disk_read>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d006      	beq.n	8006e7c <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e74:	2201      	movs	r2, #1
 8006e76:	71da      	strb	r2, [r3, #7]
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e024      	b.n	8006ec6 <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e82:	461a      	mov	r2, r3
 8006e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e86:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e8e:	689a      	ldr	r2, [r3, #8]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d912      	bls.n	8006ec2 <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006eaa:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eb2:	799b      	ldrb	r3, [r3, #6]
 8006eb4:	f043 0320 	orr.w	r3, r3, #32
 8006eb8:	b2da      	uxtb	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ec0:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8006ec2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3740      	adds	r7, #64	; 0x40
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b084      	sub	sp, #16
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8006eda:	78fb      	ldrb	r3, [r7, #3]
 8006edc:	2b0a      	cmp	r3, #10
 8006ede:	d103      	bne.n	8006ee8 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8006ee0:	210d      	movs	r1, #13
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f7ff fff3 	bl	8006ece <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	db25      	blt.n	8006f40 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	1c5a      	adds	r2, r3, #1
 8006ef8:	60fa      	str	r2, [r7, #12]
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	4413      	add	r3, r2
 8006efe:	78fa      	ldrb	r2, [r7, #3]
 8006f00:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2b3c      	cmp	r3, #60	; 0x3c
 8006f06:	dd12      	ble.n	8006f2e <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6818      	ldr	r0, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f103 010c 	add.w	r1, r3, #12
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	f107 0308 	add.w	r3, r7, #8
 8006f18:	f7ff f9b6 	bl	8006288 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d101      	bne.n	8006f28 <putc_bfd+0x5a>
 8006f24:	2300      	movs	r3, #0
 8006f26:	e001      	b.n	8006f2c <putc_bfd+0x5e>
 8006f28:	f04f 33ff 	mov.w	r3, #4294967295
 8006f2c:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	1c5a      	adds	r2, r3, #1
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	609a      	str	r2, [r3, #8]
 8006f3e:	e000      	b.n	8006f42 <putc_bfd+0x74>
	if (i < 0) return;
 8006f40:	bf00      	nop
}
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8006f48:	b590      	push	{r4, r7, lr}
 8006f4a:	b097      	sub	sp, #92	; 0x5c
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8006f56:	2300      	movs	r3, #0
 8006f58:	613b      	str	r3, [r7, #16]
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 8006f5e:	e009      	b.n	8006f74 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	1c5a      	adds	r2, r3, #1
 8006f64:	607a      	str	r2, [r7, #4]
 8006f66:	781a      	ldrb	r2, [r3, #0]
 8006f68:	f107 030c 	add.w	r3, r7, #12
 8006f6c:	4611      	mov	r1, r2
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f7ff ffad 	bl	8006ece <putc_bfd>
	while (*str)			/* Put the string */
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1f1      	bne.n	8006f60 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	db15      	blt.n	8006fae <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8006f82:	68f8      	ldr	r0, [r7, #12]
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	461c      	mov	r4, r3
 8006f88:	f107 0208 	add.w	r2, r7, #8
 8006f8c:	f107 030c 	add.w	r3, r7, #12
 8006f90:	f103 010c 	add.w	r1, r3, #12
 8006f94:	4613      	mov	r3, r2
 8006f96:	4622      	mov	r2, r4
 8006f98:	f7ff f976 	bl	8006288 <f_write>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d105      	bne.n	8006fae <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d101      	bne.n	8006fae <f_puts+0x66>
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	e001      	b.n	8006fb2 <f_puts+0x6a>
	return EOF;
 8006fae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	375c      	adds	r7, #92	; 0x5c
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd90      	pop	{r4, r7, pc}
	...

08006fbc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b087      	sub	sp, #28
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8006fd2:	4b1e      	ldr	r3, [pc, #120]	; (800704c <FATFS_LinkDriverEx+0x90>)
 8006fd4:	7a5b      	ldrb	r3, [r3, #9]
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d831      	bhi.n	8007040 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006fdc:	4b1b      	ldr	r3, [pc, #108]	; (800704c <FATFS_LinkDriverEx+0x90>)
 8006fde:	7a5b      	ldrb	r3, [r3, #9]
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	4b19      	ldr	r3, [pc, #100]	; (800704c <FATFS_LinkDriverEx+0x90>)
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8006fea:	4b18      	ldr	r3, [pc, #96]	; (800704c <FATFS_LinkDriverEx+0x90>)
 8006fec:	7a5b      	ldrb	r3, [r3, #9]
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	4a16      	ldr	r2, [pc, #88]	; (800704c <FATFS_LinkDriverEx+0x90>)
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	4413      	add	r3, r2
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8006ffa:	4b14      	ldr	r3, [pc, #80]	; (800704c <FATFS_LinkDriverEx+0x90>)
 8006ffc:	7a5b      	ldrb	r3, [r3, #9]
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	461a      	mov	r2, r3
 8007002:	4b12      	ldr	r3, [pc, #72]	; (800704c <FATFS_LinkDriverEx+0x90>)
 8007004:	4413      	add	r3, r2
 8007006:	79fa      	ldrb	r2, [r7, #7]
 8007008:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800700a:	4b10      	ldr	r3, [pc, #64]	; (800704c <FATFS_LinkDriverEx+0x90>)
 800700c:	7a5b      	ldrb	r3, [r3, #9]
 800700e:	b2db      	uxtb	r3, r3
 8007010:	1c5a      	adds	r2, r3, #1
 8007012:	b2d1      	uxtb	r1, r2
 8007014:	4a0d      	ldr	r2, [pc, #52]	; (800704c <FATFS_LinkDriverEx+0x90>)
 8007016:	7251      	strb	r1, [r2, #9]
 8007018:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800701a:	7dbb      	ldrb	r3, [r7, #22]
 800701c:	3330      	adds	r3, #48	; 0x30
 800701e:	b2da      	uxtb	r2, r3
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	3301      	adds	r3, #1
 8007028:	223a      	movs	r2, #58	; 0x3a
 800702a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	3302      	adds	r3, #2
 8007030:	222f      	movs	r2, #47	; 0x2f
 8007032:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	3303      	adds	r3, #3
 8007038:	2200      	movs	r2, #0
 800703a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800703c:	2300      	movs	r3, #0
 800703e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8007040:	7dfb      	ldrb	r3, [r7, #23]
}
 8007042:	4618      	mov	r0, r3
 8007044:	371c      	adds	r7, #28
 8007046:	46bd      	mov	sp, r7
 8007048:	bc80      	pop	{r7}
 800704a:	4770      	bx	lr
 800704c:	20002370 	.word	0x20002370

08007050 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800705a:	2200      	movs	r2, #0
 800705c:	6839      	ldr	r1, [r7, #0]
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f7ff ffac 	bl	8006fbc <FATFS_LinkDriverEx>
 8007064:	4603      	mov	r3, r0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3708      	adds	r7, #8
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
	...

08007070 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	4603      	mov	r3, r0
 8007078:	6039      	str	r1, [r7, #0]
 800707a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800707c:	88fb      	ldrh	r3, [r7, #6]
 800707e:	2b7f      	cmp	r3, #127	; 0x7f
 8007080:	d802      	bhi.n	8007088 <ff_convert+0x18>
		c = chr;
 8007082:	88fb      	ldrh	r3, [r7, #6]
 8007084:	81fb      	strh	r3, [r7, #14]
 8007086:	e025      	b.n	80070d4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00b      	beq.n	80070a6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800708e:	88fb      	ldrh	r3, [r7, #6]
 8007090:	2bff      	cmp	r3, #255	; 0xff
 8007092:	d805      	bhi.n	80070a0 <ff_convert+0x30>
 8007094:	88fb      	ldrh	r3, [r7, #6]
 8007096:	3b80      	subs	r3, #128	; 0x80
 8007098:	4a11      	ldr	r2, [pc, #68]	; (80070e0 <ff_convert+0x70>)
 800709a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800709e:	e000      	b.n	80070a2 <ff_convert+0x32>
 80070a0:	2300      	movs	r3, #0
 80070a2:	81fb      	strh	r3, [r7, #14]
 80070a4:	e016      	b.n	80070d4 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 80070a6:	2300      	movs	r3, #0
 80070a8:	81fb      	strh	r3, [r7, #14]
 80070aa:	e009      	b.n	80070c0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80070ac:	89fb      	ldrh	r3, [r7, #14]
 80070ae:	4a0c      	ldr	r2, [pc, #48]	; (80070e0 <ff_convert+0x70>)
 80070b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070b4:	88fa      	ldrh	r2, [r7, #6]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d006      	beq.n	80070c8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80070ba:	89fb      	ldrh	r3, [r7, #14]
 80070bc:	3301      	adds	r3, #1
 80070be:	81fb      	strh	r3, [r7, #14]
 80070c0:	89fb      	ldrh	r3, [r7, #14]
 80070c2:	2b7f      	cmp	r3, #127	; 0x7f
 80070c4:	d9f2      	bls.n	80070ac <ff_convert+0x3c>
 80070c6:	e000      	b.n	80070ca <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80070c8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80070ca:	89fb      	ldrh	r3, [r7, #14]
 80070cc:	3380      	adds	r3, #128	; 0x80
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80070d4:	89fb      	ldrh	r3, [r7, #14]
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3714      	adds	r7, #20
 80070da:	46bd      	mov	sp, r7
 80070dc:	bc80      	pop	{r7}
 80070de:	4770      	bx	lr
 80070e0:	080072d8 	.word	0x080072d8

080070e4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	4603      	mov	r3, r0
 80070ec:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80070ee:	2300      	movs	r3, #0
 80070f0:	60fb      	str	r3, [r7, #12]
 80070f2:	e002      	b.n	80070fa <ff_wtoupper+0x16>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	3301      	adds	r3, #1
 80070f8:	60fb      	str	r3, [r7, #12]
 80070fa:	4a0f      	ldr	r2, [pc, #60]	; (8007138 <ff_wtoupper+0x54>)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d006      	beq.n	8007114 <ff_wtoupper+0x30>
 8007106:	4a0c      	ldr	r2, [pc, #48]	; (8007138 <ff_wtoupper+0x54>)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800710e:	88fa      	ldrh	r2, [r7, #6]
 8007110:	429a      	cmp	r2, r3
 8007112:	d1ef      	bne.n	80070f4 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8007114:	4a08      	ldr	r2, [pc, #32]	; (8007138 <ff_wtoupper+0x54>)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d004      	beq.n	800712a <ff_wtoupper+0x46>
 8007120:	4a06      	ldr	r2, [pc, #24]	; (800713c <ff_wtoupper+0x58>)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007128:	e000      	b.n	800712c <ff_wtoupper+0x48>
 800712a:	88fb      	ldrh	r3, [r7, #6]
}
 800712c:	4618      	mov	r0, r3
 800712e:	3714      	adds	r7, #20
 8007130:	46bd      	mov	sp, r7
 8007132:	bc80      	pop	{r7}
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	080073d8 	.word	0x080073d8
 800713c:	080075b8 	.word	0x080075b8

08007140 <memset>:
 8007140:	4603      	mov	r3, r0
 8007142:	4402      	add	r2, r0
 8007144:	4293      	cmp	r3, r2
 8007146:	d100      	bne.n	800714a <memset+0xa>
 8007148:	4770      	bx	lr
 800714a:	f803 1b01 	strb.w	r1, [r3], #1
 800714e:	e7f9      	b.n	8007144 <memset+0x4>

08007150 <__libc_init_array>:
 8007150:	b570      	push	{r4, r5, r6, lr}
 8007152:	2600      	movs	r6, #0
 8007154:	4d0c      	ldr	r5, [pc, #48]	; (8007188 <__libc_init_array+0x38>)
 8007156:	4c0d      	ldr	r4, [pc, #52]	; (800718c <__libc_init_array+0x3c>)
 8007158:	1b64      	subs	r4, r4, r5
 800715a:	10a4      	asrs	r4, r4, #2
 800715c:	42a6      	cmp	r6, r4
 800715e:	d109      	bne.n	8007174 <__libc_init_array+0x24>
 8007160:	f000 f81a 	bl	8007198 <_init>
 8007164:	2600      	movs	r6, #0
 8007166:	4d0a      	ldr	r5, [pc, #40]	; (8007190 <__libc_init_array+0x40>)
 8007168:	4c0a      	ldr	r4, [pc, #40]	; (8007194 <__libc_init_array+0x44>)
 800716a:	1b64      	subs	r4, r4, r5
 800716c:	10a4      	asrs	r4, r4, #2
 800716e:	42a6      	cmp	r6, r4
 8007170:	d105      	bne.n	800717e <__libc_init_array+0x2e>
 8007172:	bd70      	pop	{r4, r5, r6, pc}
 8007174:	f855 3b04 	ldr.w	r3, [r5], #4
 8007178:	4798      	blx	r3
 800717a:	3601      	adds	r6, #1
 800717c:	e7ee      	b.n	800715c <__libc_init_array+0xc>
 800717e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007182:	4798      	blx	r3
 8007184:	3601      	adds	r6, #1
 8007186:	e7f2      	b.n	800716e <__libc_init_array+0x1e>
 8007188:	08007798 	.word	0x08007798
 800718c:	08007798 	.word	0x08007798
 8007190:	08007798 	.word	0x08007798
 8007194:	0800779c 	.word	0x0800779c

08007198 <_init>:
 8007198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719a:	bf00      	nop
 800719c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800719e:	bc08      	pop	{r3}
 80071a0:	469e      	mov	lr, r3
 80071a2:	4770      	bx	lr

080071a4 <_fini>:
 80071a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071a6:	bf00      	nop
 80071a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071aa:	bc08      	pop	{r3}
 80071ac:	469e      	mov	lr, r3
 80071ae:	4770      	bx	lr


GNSS_SD_CARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000964c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e30  08009758  08009758  00019758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c588  0800c588  0002057c  2**0
                  CONTENTS
  4 .ARM          00000000  0800c588  0800c588  0002057c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c588  0800c588  0002057c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c588  0800c588  0001c588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c58c  0800c58c  0001c58c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000057c  20000000  0800c590  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000027b8  2000057c  0800cb0c  0002057c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002d34  0800cb0c  00022d34  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002057c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000205a5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011b05  00000000  00000000  000205e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f20  00000000  00000000  000320ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001078  00000000  00000000  00035010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cd9  00000000  00000000  00036088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018ee6  00000000  00000000  00036d61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001732e  00000000  00000000  0004fc47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087b8c  00000000  00000000  00066f75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000045d0  00000000  00000000  000eeb04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000f30d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000057c 	.word	0x2000057c
 8000128:	00000000 	.word	0x00000000
 800012c:	08009740 	.word	0x08009740

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000580 	.word	0x20000580
 8000148:	08009740 	.word	0x08009740

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_frsub>:
 8000988:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800098c:	e002      	b.n	8000994 <__addsf3>
 800098e:	bf00      	nop

08000990 <__aeabi_fsub>:
 8000990:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000994 <__addsf3>:
 8000994:	0042      	lsls	r2, r0, #1
 8000996:	bf1f      	itttt	ne
 8000998:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800099c:	ea92 0f03 	teqne	r2, r3
 80009a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a8:	d06a      	beq.n	8000a80 <__addsf3+0xec>
 80009aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b2:	bfc1      	itttt	gt
 80009b4:	18d2      	addgt	r2, r2, r3
 80009b6:	4041      	eorgt	r1, r0
 80009b8:	4048      	eorgt	r0, r1
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	bfb8      	it	lt
 80009be:	425b      	neglt	r3, r3
 80009c0:	2b19      	cmp	r3, #25
 80009c2:	bf88      	it	hi
 80009c4:	4770      	bxhi	lr
 80009c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d2:	bf18      	it	ne
 80009d4:	4240      	negne	r0, r0
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e2:	bf18      	it	ne
 80009e4:	4249      	negne	r1, r1
 80009e6:	ea92 0f03 	teq	r2, r3
 80009ea:	d03f      	beq.n	8000a6c <__addsf3+0xd8>
 80009ec:	f1a2 0201 	sub.w	r2, r2, #1
 80009f0:	fa41 fc03 	asr.w	ip, r1, r3
 80009f4:	eb10 000c 	adds.w	r0, r0, ip
 80009f8:	f1c3 0320 	rsb	r3, r3, #32
 80009fc:	fa01 f103 	lsl.w	r1, r1, r3
 8000a00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a04:	d502      	bpl.n	8000a0c <__addsf3+0x78>
 8000a06:	4249      	negs	r1, r1
 8000a08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a10:	d313      	bcc.n	8000a3a <__addsf3+0xa6>
 8000a12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a16:	d306      	bcc.n	8000a26 <__addsf3+0x92>
 8000a18:	0840      	lsrs	r0, r0, #1
 8000a1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a1e:	f102 0201 	add.w	r2, r2, #1
 8000a22:	2afe      	cmp	r2, #254	; 0xfe
 8000a24:	d251      	bcs.n	8000aca <__addsf3+0x136>
 8000a26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a2e:	bf08      	it	eq
 8000a30:	f020 0001 	biceq.w	r0, r0, #1
 8000a34:	ea40 0003 	orr.w	r0, r0, r3
 8000a38:	4770      	bx	lr
 8000a3a:	0049      	lsls	r1, r1, #1
 8000a3c:	eb40 0000 	adc.w	r0, r0, r0
 8000a40:	3a01      	subs	r2, #1
 8000a42:	bf28      	it	cs
 8000a44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a48:	d2ed      	bcs.n	8000a26 <__addsf3+0x92>
 8000a4a:	fab0 fc80 	clz	ip, r0
 8000a4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a52:	ebb2 020c 	subs.w	r2, r2, ip
 8000a56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5a:	bfaa      	itet	ge
 8000a5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a60:	4252      	neglt	r2, r2
 8000a62:	4318      	orrge	r0, r3
 8000a64:	bfbc      	itt	lt
 8000a66:	40d0      	lsrlt	r0, r2
 8000a68:	4318      	orrlt	r0, r3
 8000a6a:	4770      	bx	lr
 8000a6c:	f092 0f00 	teq	r2, #0
 8000a70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a74:	bf06      	itte	eq
 8000a76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7a:	3201      	addeq	r2, #1
 8000a7c:	3b01      	subne	r3, #1
 8000a7e:	e7b5      	b.n	80009ec <__addsf3+0x58>
 8000a80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8e:	d021      	beq.n	8000ad4 <__addsf3+0x140>
 8000a90:	ea92 0f03 	teq	r2, r3
 8000a94:	d004      	beq.n	8000aa0 <__addsf3+0x10c>
 8000a96:	f092 0f00 	teq	r2, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	4608      	moveq	r0, r1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea90 0f01 	teq	r0, r1
 8000aa4:	bf1c      	itt	ne
 8000aa6:	2000      	movne	r0, #0
 8000aa8:	4770      	bxne	lr
 8000aaa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aae:	d104      	bne.n	8000aba <__addsf3+0x126>
 8000ab0:	0040      	lsls	r0, r0, #1
 8000ab2:	bf28      	it	cs
 8000ab4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ab8:	4770      	bx	lr
 8000aba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000abe:	bf3c      	itt	cc
 8000ac0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bxcc	lr
 8000ac6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ace:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad2:	4770      	bx	lr
 8000ad4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ad8:	bf16      	itet	ne
 8000ada:	4608      	movne	r0, r1
 8000adc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae0:	4601      	movne	r1, r0
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	bf06      	itte	eq
 8000ae6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aea:	ea90 0f01 	teqeq	r0, r1
 8000aee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_ui2f>:
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	e004      	b.n	8000b04 <__aeabi_i2f+0x8>
 8000afa:	bf00      	nop

08000afc <__aeabi_i2f>:
 8000afc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b00:	bf48      	it	mi
 8000b02:	4240      	negmi	r0, r0
 8000b04:	ea5f 0c00 	movs.w	ip, r0
 8000b08:	bf08      	it	eq
 8000b0a:	4770      	bxeq	lr
 8000b0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b10:	4601      	mov	r1, r0
 8000b12:	f04f 0000 	mov.w	r0, #0
 8000b16:	e01c      	b.n	8000b52 <__aeabi_l2f+0x2a>

08000b18 <__aeabi_ul2f>:
 8000b18:	ea50 0201 	orrs.w	r2, r0, r1
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e00a      	b.n	8000b3c <__aeabi_l2f+0x14>
 8000b26:	bf00      	nop

08000b28 <__aeabi_l2f>:
 8000b28:	ea50 0201 	orrs.w	r2, r0, r1
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__aeabi_l2f+0x14>
 8000b36:	4240      	negs	r0, r0
 8000b38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b3c:	ea5f 0c01 	movs.w	ip, r1
 8000b40:	bf02      	ittt	eq
 8000b42:	4684      	moveq	ip, r0
 8000b44:	4601      	moveq	r1, r0
 8000b46:	2000      	moveq	r0, #0
 8000b48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b4c:	bf08      	it	eq
 8000b4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b56:	fabc f28c 	clz	r2, ip
 8000b5a:	3a08      	subs	r2, #8
 8000b5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b60:	db10      	blt.n	8000b84 <__aeabi_l2f+0x5c>
 8000b62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b66:	4463      	add	r3, ip
 8000b68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b6c:	f1c2 0220 	rsb	r2, r2, #32
 8000b70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b74:	fa20 f202 	lsr.w	r2, r0, r2
 8000b78:	eb43 0002 	adc.w	r0, r3, r2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f102 0220 	add.w	r2, r2, #32
 8000b88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8c:	f1c2 0220 	rsb	r2, r2, #32
 8000b90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b94:	fa21 f202 	lsr.w	r2, r1, r2
 8000b98:	eb43 0002 	adc.w	r0, r3, r2
 8000b9c:	bf08      	it	eq
 8000b9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba2:	4770      	bx	lr

08000ba4 <__aeabi_f2uiz>:
 8000ba4:	0042      	lsls	r2, r0, #1
 8000ba6:	d20e      	bcs.n	8000bc6 <__aeabi_f2uiz+0x22>
 8000ba8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000bac:	d30b      	bcc.n	8000bc6 <__aeabi_f2uiz+0x22>
 8000bae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000bb2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000bb6:	d409      	bmi.n	8000bcc <__aeabi_f2uiz+0x28>
 8000bb8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000bbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc0:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr
 8000bcc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000bd0:	d101      	bne.n	8000bd6 <__aeabi_f2uiz+0x32>
 8000bd2:	0242      	lsls	r2, r0, #9
 8000bd4:	d102      	bne.n	8000bdc <__aeabi_f2uiz+0x38>
 8000bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8000bda:	4770      	bx	lr
 8000bdc:	f04f 0000 	mov.w	r0, #0
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <initDisplay>:
				.minutoStr[0] = '0',	.minutoStr[1] = '0',
				.segundoStr[0] = '0',	.segundoStr[1] = '0'}};
UART_HandleTypeDef huart1;


void initDisplay(displayConfig *disp){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

	if(disp->configurado != NONE){
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d02b      	beq.n	8000c4c <initDisplay+0x68>
		SSD1306_Init();
 8000bf4:	f001 f9e0 	bl	8001fb8 <SSD1306_Init>
		if(disp->configurado == VELOCIDADE){
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d112      	bne.n	8000c26 <initDisplay+0x42>
			SSD1306_GotoXY (0,0);
 8000c00:	2100      	movs	r1, #0
 8000c02:	2000      	movs	r0, #0
 8000c04:	f001 fb40 	bl	8002288 <SSD1306_GotoXY>
			SSD1306_Puts ("Velocidade", &Font_11x18, 1);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	4912      	ldr	r1, [pc, #72]	; (8000c54 <initDisplay+0x70>)
 8000c0c:	4812      	ldr	r0, [pc, #72]	; (8000c58 <initDisplay+0x74>)
 8000c0e:	f001 fbd1 	bl	80023b4 <SSD1306_Puts>
			SSD1306_GotoXY (80, 36);
 8000c12:	2124      	movs	r1, #36	; 0x24
 8000c14:	2050      	movs	r0, #80	; 0x50
 8000c16:	f001 fb37 	bl	8002288 <SSD1306_GotoXY>
			SSD1306_Puts ("km/h", &Font_11x18, 1);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	490d      	ldr	r1, [pc, #52]	; (8000c54 <initDisplay+0x70>)
 8000c1e:	480f      	ldr	r0, [pc, #60]	; (8000c5c <initDisplay+0x78>)
 8000c20:	f001 fbc8 	bl	80023b4 <SSD1306_Puts>
 8000c24:	e010      	b.n	8000c48 <initDisplay+0x64>

		}else if(disp->configurado == INFO){
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d00c      	beq.n	8000c48 <initDisplay+0x64>

		}else if(disp->configurado == HORA){
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b03      	cmp	r3, #3
 8000c34:	d108      	bne.n	8000c48 <initDisplay+0x64>
			SSD1306_GotoXY (0,0);
 8000c36:	2100      	movs	r1, #0
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f001 fb25 	bl	8002288 <SSD1306_GotoXY>
			SSD1306_Puts ("Hora", &Font_11x18, 1);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	4904      	ldr	r1, [pc, #16]	; (8000c54 <initDisplay+0x70>)
 8000c42:	4807      	ldr	r0, [pc, #28]	; (8000c60 <initDisplay+0x7c>)
 8000c44:	f001 fbb6 	bl	80023b4 <SSD1306_Puts>
		}
		SSD1306_UpdateScreen();
 8000c48:	f001 fa7a 	bl	8002140 <SSD1306_UpdateScreen>
	}
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	2000054c 	.word	0x2000054c
 8000c58:	08009758 	.word	0x08009758
 8000c5c:	08009764 	.word	0x08009764
 8000c60:	0800976c 	.word	0x0800976c

08000c64 <updateDisplay>:

void updateDisplay(displayConfig *disp, GNSS *gn){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
	if(disp->configurado == VELOCIDADE){
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d104      	bne.n	8000c80 <updateDisplay+0x1c>
		updateDisplayVelocidade(disp, gn);
 8000c76:	6839      	ldr	r1, [r7, #0]
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f000 f883 	bl	8000d84 <updateDisplayVelocidade>
	}else if(disp->configurado == INFO){

	}else if(disp->configurado == HORA){
		updateDisplayHora(disp, gn);
	}
}
 8000c7e:	e00b      	b.n	8000c98 <updateDisplay+0x34>
	}else if(disp->configurado == INFO){
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d007      	beq.n	8000c98 <updateDisplay+0x34>
	}else if(disp->configurado == HORA){
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b03      	cmp	r3, #3
 8000c8e:	d103      	bne.n	8000c98 <updateDisplay+0x34>
		updateDisplayHora(disp, gn);
 8000c90:	6839      	ldr	r1, [r7, #0]
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f000 f824 	bl	8000ce0 <updateDisplayHora>
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <updateDisplayNumeroSatelites>:

void updateDisplayNumeroSatelites(displayConfig *disp, GNSS *gn){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
	SSD1306_GotoXY (113, 0);
 8000caa:	2100      	movs	r1, #0
 8000cac:	2071      	movs	r0, #113	; 0x71
 8000cae:	f001 faeb 	bl	8002288 <SSD1306_GotoXY>
	SSD1306_Putc(gn->numeroSatelitesStr[0], &Font_7x10, 1);
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	f893 353c 	ldrb.w	r3, [r3, #1340]	; 0x53c
 8000cb8:	2201      	movs	r2, #1
 8000cba:	4908      	ldr	r1, [pc, #32]	; (8000cdc <updateDisplayNumeroSatelites+0x3c>)
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f001 faf9 	bl	80022b4 <SSD1306_Putc>
	SSD1306_Putc(gn->numeroSatelitesStr[1], &Font_7x10, 1);
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	f893 353d 	ldrb.w	r3, [r3, #1341]	; 0x53d
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4904      	ldr	r1, [pc, #16]	; (8000cdc <updateDisplayNumeroSatelites+0x3c>)
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f001 faf1 	bl	80022b4 <SSD1306_Putc>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000544 	.word	0x20000544

08000ce0 <updateDisplayHora>:

void updateDisplayHora(displayConfig *disp, GNSS *gn){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]

	updateDisplayNumeroSatelites(disp, gn);
 8000cea:	6839      	ldr	r1, [r7, #0]
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff ffd7 	bl	8000ca0 <updateDisplayNumeroSatelites>

	SSD1306_GotoXY (0, 30);
 8000cf2:	211e      	movs	r1, #30
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f001 fac7 	bl	8002288 <SSD1306_GotoXY>
	SSD1306_Putc(gn->data.horaUTCStr[0], &Font_16x26, 1);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	f893 352c 	ldrb.w	r3, [r3, #1324]	; 0x52c
 8000d00:	2201      	movs	r2, #1
 8000d02:	491e      	ldr	r1, [pc, #120]	; (8000d7c <updateDisplayHora+0x9c>)
 8000d04:	4618      	mov	r0, r3
 8000d06:	f001 fad5 	bl	80022b4 <SSD1306_Putc>
	SSD1306_Putc(gn->data.horaUTCStr[1], &Font_16x26, 1);
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	f893 352d 	ldrb.w	r3, [r3, #1325]	; 0x52d
 8000d10:	2201      	movs	r2, #1
 8000d12:	491a      	ldr	r1, [pc, #104]	; (8000d7c <updateDisplayHora+0x9c>)
 8000d14:	4618      	mov	r0, r3
 8000d16:	f001 facd 	bl	80022b4 <SSD1306_Putc>
	SSD1306_Putc(':', &Font_11x18, 1);
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	4918      	ldr	r1, [pc, #96]	; (8000d80 <updateDisplayHora+0xa0>)
 8000d1e:	203a      	movs	r0, #58	; 0x3a
 8000d20:	f001 fac8 	bl	80022b4 <SSD1306_Putc>
	SSD1306_Putc(gn->data.minutoStr[0], &Font_16x26, 1);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	f893 3530 	ldrb.w	r3, [r3, #1328]	; 0x530
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	4913      	ldr	r1, [pc, #76]	; (8000d7c <updateDisplayHora+0x9c>)
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f001 fac0 	bl	80022b4 <SSD1306_Putc>
	SSD1306_Putc(gn->data.minutoStr[1], &Font_16x26, 1);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	f893 3531 	ldrb.w	r3, [r3, #1329]	; 0x531
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	490f      	ldr	r1, [pc, #60]	; (8000d7c <updateDisplayHora+0x9c>)
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f001 fab8 	bl	80022b4 <SSD1306_Putc>
	SSD1306_Putc(':', &Font_11x18, 1);
 8000d44:	2201      	movs	r2, #1
 8000d46:	490e      	ldr	r1, [pc, #56]	; (8000d80 <updateDisplayHora+0xa0>)
 8000d48:	203a      	movs	r0, #58	; 0x3a
 8000d4a:	f001 fab3 	bl	80022b4 <SSD1306_Putc>
	SSD1306_Putc(gn->data.segundoStr[0], &Font_16x26, 1);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	f893 3532 	ldrb.w	r3, [r3, #1330]	; 0x532
 8000d54:	2201      	movs	r2, #1
 8000d56:	4909      	ldr	r1, [pc, #36]	; (8000d7c <updateDisplayHora+0x9c>)
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f001 faab 	bl	80022b4 <SSD1306_Putc>
	SSD1306_Putc(gn->data.segundoStr[1], &Font_16x26, 1);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	f893 3533 	ldrb.w	r3, [r3, #1331]	; 0x533
 8000d64:	2201      	movs	r2, #1
 8000d66:	4905      	ldr	r1, [pc, #20]	; (8000d7c <updateDisplayHora+0x9c>)
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f001 faa3 	bl	80022b4 <SSD1306_Putc>
	SSD1306_UpdateScreen();
 8000d6e:	f001 f9e7 	bl	8002140 <SSD1306_UpdateScreen>
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000554 	.word	0x20000554
 8000d80:	2000054c 	.word	0x2000054c

08000d84 <updateDisplayVelocidade>:




void updateDisplayVelocidade(displayConfig *disp, GNSS *gn){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
	char _snum[4];

	updateDisplayNumeroSatelites(disp, gn);
 8000d8e:	6839      	ldr	r1, [r7, #0]
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f7ff ff85 	bl	8000ca0 <updateDisplayNumeroSatelites>
	itoa(gn->velocidade.velocidade8bits, _snum, 10);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	f893 351c 	ldrb.w	r3, [r3, #1308]	; 0x51c
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f107 030c 	add.w	r3, r7, #12
 8000da2:	220a      	movs	r2, #10
 8000da4:	4619      	mov	r1, r3
 8000da6:	f008 fc5b 	bl	8009660 <itoa>
	SSD1306_GotoXY (25, 30);
 8000daa:	211e      	movs	r1, #30
 8000dac:	2019      	movs	r0, #25
 8000dae:	f001 fa6b 	bl	8002288 <SSD1306_GotoXY>
	if(gn->velocidade.velocidade8bits < 10) {// 1 DIGIT
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	f893 351c 	ldrb.w	r3, [r3, #1308]	; 0x51c
 8000db8:	2b09      	cmp	r3, #9
 8000dba:	d808      	bhi.n	8000dce <updateDisplayVelocidade+0x4a>

		_snum[3] = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	73fb      	strb	r3, [r7, #15]
		_snum[2] = _snum[0];
 8000dc0:	7b3b      	ldrb	r3, [r7, #12]
 8000dc2:	73bb      	strb	r3, [r7, #14]
		_snum[1] = ' ';
 8000dc4:	2320      	movs	r3, #32
 8000dc6:	737b      	strb	r3, [r7, #13]
		_snum[0] = ' ';
 8000dc8:	2320      	movs	r3, #32
 8000dca:	733b      	strb	r3, [r7, #12]
 8000dcc:	e015      	b.n	8000dfa <updateDisplayVelocidade+0x76>

	}
	else if (gn->velocidade.velocidade8bits < 100 ) {// 2 DIGITS
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	f893 351c 	ldrb.w	r3, [r3, #1308]	; 0x51c
 8000dd4:	2b63      	cmp	r3, #99	; 0x63
 8000dd6:	d808      	bhi.n	8000dea <updateDisplayVelocidade+0x66>
		_snum[3] = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	73fb      	strb	r3, [r7, #15]
		_snum[2] = _snum[1];
 8000ddc:	7b7b      	ldrb	r3, [r7, #13]
 8000dde:	73bb      	strb	r3, [r7, #14]
		_snum[1] = _snum[0];
 8000de0:	7b3b      	ldrb	r3, [r7, #12]
 8000de2:	737b      	strb	r3, [r7, #13]
		_snum[0] = ' ';
 8000de4:	2320      	movs	r3, #32
 8000de6:	733b      	strb	r3, [r7, #12]
 8000de8:	e007      	b.n	8000dfa <updateDisplayVelocidade+0x76>

	}
	else if (gn->velocidade.velocidade8bits < 1000 ) {// 3 DIGITS
		_snum[3] = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	73fb      	strb	r3, [r7, #15]
		_snum[2] = _snum[2];
 8000dee:	7bbb      	ldrb	r3, [r7, #14]
 8000df0:	73bb      	strb	r3, [r7, #14]
		_snum[1] = _snum[1];
 8000df2:	7b7b      	ldrb	r3, [r7, #13]
 8000df4:	737b      	strb	r3, [r7, #13]
		_snum[0] = _snum[0];
 8000df6:	7b3b      	ldrb	r3, [r7, #12]
 8000df8:	733b      	strb	r3, [r7, #12]
	}
	else {
		SSD1306_GotoXY (30, 30);  // 4 DIGIS
	}

	SSD1306_Puts (_snum, &Font_16x26, 1);
 8000dfa:	f107 030c 	add.w	r3, r7, #12
 8000dfe:	2201      	movs	r2, #1
 8000e00:	4904      	ldr	r1, [pc, #16]	; (8000e14 <updateDisplayVelocidade+0x90>)
 8000e02:	4618      	mov	r0, r3
 8000e04:	f001 fad6 	bl	80023b4 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8000e08:	f001 f99a 	bl	8002140 <SSD1306_UpdateScreen>

}
 8000e0c:	bf00      	nop
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000554 	.word	0x20000554

08000e18 <converte4Bytes2float>:

float converte4Bytes2float(uint8_t *str){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]

	if(*(str+1) == '.'){//x.xx
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3301      	adds	r3, #1
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b2e      	cmp	r3, #46	; 0x2e
 8000e28:	d125      	bne.n	8000e76 <converte4Bytes2float+0x5e>
		return (((*(str+3)-'0')+10*((*(str+2)-'0'))+100*((*(str)-'0')))/100.0);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3303      	adds	r3, #3
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3302      	adds	r3, #2
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000e3e:	4613      	mov	r3, r2
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	4413      	add	r3, r2
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	18ca      	adds	r2, r1, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	3b30      	subs	r3, #48	; 0x30
 8000e4e:	2164      	movs	r1, #100	; 0x64
 8000e50:	fb01 f303 	mul.w	r3, r1, r3
 8000e54:	4413      	add	r3, r2
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff faca 	bl	80003f0 <__aeabi_i2d>
 8000e5c:	f04f 0200 	mov.w	r2, #0
 8000e60:	4b29      	ldr	r3, [pc, #164]	; (8000f08 <converte4Bytes2float+0xf0>)
 8000e62:	f7ff fc59 	bl	8000718 <__aeabi_ddiv>
 8000e66:	4602      	mov	r2, r0
 8000e68:	460b      	mov	r3, r1
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f7ff fd3b 	bl	80008e8 <__aeabi_d2f>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e044      	b.n	8000f00 <converte4Bytes2float+0xe8>
	}else if(*(str+2) == '.'){//xx.x
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3302      	adds	r3, #2
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b2e      	cmp	r3, #46	; 0x2e
 8000e7e:	d125      	bne.n	8000ecc <converte4Bytes2float+0xb4>
		return (((*(str+3)-'0')+10*((*(str+1)-'0'))+100*((*(str)-'0')))/10.0);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3303      	adds	r3, #3
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000e94:	4613      	mov	r3, r2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	4413      	add	r3, r2
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	18ca      	adds	r2, r1, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	3b30      	subs	r3, #48	; 0x30
 8000ea4:	2164      	movs	r1, #100	; 0x64
 8000ea6:	fb01 f303 	mul.w	r3, r1, r3
 8000eaa:	4413      	add	r3, r2
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fa9f 	bl	80003f0 <__aeabi_i2d>
 8000eb2:	f04f 0200 	mov.w	r2, #0
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <converte4Bytes2float+0xf4>)
 8000eb8:	f7ff fc2e 	bl	8000718 <__aeabi_ddiv>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f7ff fd10 	bl	80008e8 <__aeabi_d2f>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	e019      	b.n	8000f00 <converte4Bytes2float+0xe8>
	}else{//xxx.
		return (((*(str+2)-'0')+10*((*(str+1)-'0'))+100*((*(str)-'0'))));
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3302      	adds	r3, #2
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	4413      	add	r3, r2
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	18ca      	adds	r2, r1, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	3b30      	subs	r3, #48	; 0x30
 8000ef0:	2164      	movs	r1, #100	; 0x64
 8000ef2:	fb01 f303 	mul.w	r3, r1, r3
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fdff 	bl	8000afc <__aeabi_i2f>
 8000efe:	4603      	mov	r3, r0
	}
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40590000 	.word	0x40590000
 8000f0c:	40240000 	.word	0x40240000

08000f10 <GravaNMEASDCard>:

}


// 30min logando gera um arquivo de 61KB
void GravaNMEASDCard(uint8_t *str, GNSS *gn){
 8000f10:	b590      	push	{r4, r7, lr}
 8000f12:	b089      	sub	sp, #36	; 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
	static FATFS fs;
	static FIL fil;
	uint8_t aux = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	77fb      	strb	r3, [r7, #31]
	char nomeArquivo[] = {"dd_mm_yyyy.nmea"};
 8000f1e:	4b38      	ldr	r3, [pc, #224]	; (8001000 <GravaNMEASDCard+0xf0>)
 8000f20:	f107 0408 	add.w	r4, r7, #8
 8000f24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	uint8_t *paux = str;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	61bb      	str	r3, [r7, #24]

	while(*str != 0x0d){
 8000f2e:	e008      	b.n	8000f42 <GravaNMEASDCard+0x32>
		str++;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3301      	adds	r3, #1
 8000f34:	607b      	str	r3, [r7, #4]
		aux++;
 8000f36:	7ffb      	ldrb	r3, [r7, #31]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	77fb      	strb	r3, [r7, #31]
		if(aux >= 100)return;
 8000f3c:	7ffb      	ldrb	r3, [r7, #31]
 8000f3e:	2b63      	cmp	r3, #99	; 0x63
 8000f40:	d859      	bhi.n	8000ff6 <GravaNMEASDCard+0xe6>
	while(*str != 0x0d){
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	2b0d      	cmp	r3, #13
 8000f48:	d1f2      	bne.n	8000f30 <GravaNMEASDCard+0x20>
	}
	str++;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	607b      	str	r3, [r7, #4]
	*str = 0;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2200      	movs	r2, #0
 8000f54:	701a      	strb	r2, [r3, #0]

	if(gn->data.diaStr[0] >= '0' && gn->data.diaStr[1] > '0' && gn->data.diaStr[0] <= '3' && gn->data.diaStr[1] <= '9'){// verifica se o dia é valido
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	f893 3534 	ldrb.w	r3, [r3, #1332]	; 0x534
 8000f5c:	2b2f      	cmp	r3, #47	; 0x2f
 8000f5e:	d94b      	bls.n	8000ff8 <GravaNMEASDCard+0xe8>
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	f893 3535 	ldrb.w	r3, [r3, #1333]	; 0x535
 8000f66:	2b30      	cmp	r3, #48	; 0x30
 8000f68:	d946      	bls.n	8000ff8 <GravaNMEASDCard+0xe8>
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	f893 3534 	ldrb.w	r3, [r3, #1332]	; 0x534
 8000f70:	2b33      	cmp	r3, #51	; 0x33
 8000f72:	d841      	bhi.n	8000ff8 <GravaNMEASDCard+0xe8>
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	f893 3535 	ldrb.w	r3, [r3, #1333]	; 0x535
 8000f7a:	2b39      	cmp	r3, #57	; 0x39
 8000f7c:	d83c      	bhi.n	8000ff8 <GravaNMEASDCard+0xe8>

		nomeArquivo[0] = gn->data.diaStr[0];
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	f893 3534 	ldrb.w	r3, [r3, #1332]	; 0x534
 8000f84:	723b      	strb	r3, [r7, #8]
		nomeArquivo[1] = gn->data.diaStr[1];
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	f893 3535 	ldrb.w	r3, [r3, #1333]	; 0x535
 8000f8c:	727b      	strb	r3, [r7, #9]

		nomeArquivo[3] = gn->data.mesStr[0];
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	f893 3536 	ldrb.w	r3, [r3, #1334]	; 0x536
 8000f94:	72fb      	strb	r3, [r7, #11]
		nomeArquivo[4] = gn->data.mesStr[1];
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	f893 3537 	ldrb.w	r3, [r3, #1335]	; 0x537
 8000f9c:	733b      	strb	r3, [r7, #12]

		nomeArquivo[6] = gn->data.anoStr[0];
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8000fa4:	73bb      	strb	r3, [r7, #14]
		nomeArquivo[7] = gn->data.anoStr[1];
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	f893 3539 	ldrb.w	r3, [r3, #1337]	; 0x539
 8000fac:	73fb      	strb	r3, [r7, #15]
		nomeArquivo[8] = gn->data.anoStr[2];
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	f893 353a 	ldrb.w	r3, [r3, #1338]	; 0x53a
 8000fb4:	743b      	strb	r3, [r7, #16]
		nomeArquivo[9] = gn->data.anoStr[3];
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	f893 353b 	ldrb.w	r3, [r3, #1339]	; 0x53b
 8000fbc:	747b      	strb	r3, [r7, #17]


		f_mount(&fs, "", 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	4910      	ldr	r1, [pc, #64]	; (8001004 <GravaNMEASDCard+0xf4>)
 8000fc2:	4811      	ldr	r0, [pc, #68]	; (8001008 <GravaNMEASDCard+0xf8>)
 8000fc4:	f007 f876 	bl	80080b4 <f_mount>
		f_open(&fil, &nomeArquivo, FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8000fc8:	f107 0308 	add.w	r3, r7, #8
 8000fcc:	2213      	movs	r2, #19
 8000fce:	4619      	mov	r1, r3
 8000fd0:	480e      	ldr	r0, [pc, #56]	; (800100c <GravaNMEASDCard+0xfc>)
 8000fd2:	f007 f8b9 	bl	8008148 <f_open>
		f_lseek(&fil, f_size(&fil));
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	; (800100c <GravaNMEASDCard+0xfc>)
 8000fd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	480a      	ldr	r0, [pc, #40]	; (800100c <GravaNMEASDCard+0xfc>)
 8000fe2:	f007 fefb 	bl	8008ddc <f_lseek>
		f_puts(paux, &fil);
 8000fe6:	4909      	ldr	r1, [pc, #36]	; (800100c <GravaNMEASDCard+0xfc>)
 8000fe8:	69b8      	ldr	r0, [r7, #24]
 8000fea:	f008 fa25 	bl	8009438 <f_puts>
		f_close(&fil);
 8000fee:	4807      	ldr	r0, [pc, #28]	; (800100c <GravaNMEASDCard+0xfc>)
 8000ff0:	f007 fec9 	bl	8008d86 <f_close>
 8000ff4:	e000      	b.n	8000ff8 <GravaNMEASDCard+0xe8>
		if(aux >= 100)return;
 8000ff6:	bf00      	nop
	}




}
 8000ff8:	3724      	adds	r7, #36	; 0x24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd90      	pop	{r4, r7, pc}
 8000ffe:	bf00      	nop
 8001000:	08009778 	.word	0x08009778
 8001004:	08009774 	.word	0x08009774
 8001008:	200005e4 	.word	0x200005e4
 800100c:	20001614 	.word	0x20001614

08001010 <decodeNMEA>:

void decodeNMEA(uint8_t *str, GNSS *gn){
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
	uint8_t *p;
	uint8_t contVirgulas = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	72fb      	strb	r3, [r7, #11]
//GNRMC
//GNVTG OK -> velocidade
//GNGLL
//GPGSA
//BDGSV
	if(str[0] == '$'){
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b24      	cmp	r3, #36	; 0x24
 8001024:	f040 815a 	bne.w	80012dc <decodeNMEA+0x2cc>
		GravaNMEASDCard(str,gn);
 8001028:	6839      	ldr	r1, [r7, #0]
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ff70 	bl	8000f10 <GravaNMEASDCard>
		if(str[1] == 'G'){//G
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3301      	adds	r3, #1
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b47      	cmp	r3, #71	; 0x47
 8001038:	f040 8150 	bne.w	80012dc <decodeNMEA+0x2cc>
			if(str[2] == 'N'){//GN
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3302      	adds	r3, #2
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b4e      	cmp	r3, #78	; 0x4e
 8001044:	f040 814a 	bne.w	80012dc <decodeNMEA+0x2cc>
				if(str[3] == 'V'){//GNV
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3303      	adds	r3, #3
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b56      	cmp	r3, #86	; 0x56
 8001050:	d154      	bne.n	80010fc <decodeNMEA+0xec>
					if(str[4] == 'T'){//GNVT
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3304      	adds	r3, #4
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b54      	cmp	r3, #84	; 0x54
 800105a:	f040 813f 	bne.w	80012dc <decodeNMEA+0x2cc>
						if(str[5] == 'G'){//GNVTG
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3305      	adds	r3, #5
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b47      	cmp	r3, #71	; 0x47
 8001066:	f040 8139 	bne.w	80012dc <decodeNMEA+0x2cc>
							if(str[6] == ','){//GNVTG
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3306      	adds	r3, #6
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b2c      	cmp	r3, #44	; 0x2c
 8001072:	f040 8133 	bne.w	80012dc <decodeNMEA+0x2cc>
								p = &str[7];
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3307      	adds	r3, #7
 800107a:	60fb      	str	r3, [r7, #12]
								while(contVirgulas < 6){// velocidade
 800107c:	e009      	b.n	8001092 <decodeNMEA+0x82>
									if(*p == ','){
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b2c      	cmp	r3, #44	; 0x2c
 8001084:	d102      	bne.n	800108c <decodeNMEA+0x7c>
										contVirgulas++;
 8001086:	7afb      	ldrb	r3, [r7, #11]
 8001088:	3301      	adds	r3, #1
 800108a:	72fb      	strb	r3, [r7, #11]
									}
									p++;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	3301      	adds	r3, #1
 8001090:	60fb      	str	r3, [r7, #12]
								while(contVirgulas < 6){// velocidade
 8001092:	7afb      	ldrb	r3, [r7, #11]
 8001094:	2b05      	cmp	r3, #5
 8001096:	d9f2      	bls.n	800107e <decodeNMEA+0x6e>
								}
								gn->velocidade.velocidadeSTR[0] = *p++;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	1c5a      	adds	r2, r3, #1
 800109c:	60fa      	str	r2, [r7, #12]
 800109e:	781a      	ldrb	r2, [r3, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	f883 251d 	strb.w	r2, [r3, #1309]	; 0x51d
								gn->velocidade.velocidadeSTR[1] = *p++;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	1c5a      	adds	r2, r3, #1
 80010aa:	60fa      	str	r2, [r7, #12]
 80010ac:	781a      	ldrb	r2, [r3, #0]
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	f883 251e 	strb.w	r2, [r3, #1310]	; 0x51e
								gn->velocidade.velocidadeSTR[2] = *p++;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	1c5a      	adds	r2, r3, #1
 80010b8:	60fa      	str	r2, [r7, #12]
 80010ba:	781a      	ldrb	r2, [r3, #0]
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	f883 251f 	strb.w	r2, [r3, #1311]	; 0x51f
								gn->velocidade.velocidadeSTR[3] = *p++;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	1c5a      	adds	r2, r3, #1
 80010c6:	60fa      	str	r2, [r7, #12]
 80010c8:	781a      	ldrb	r2, [r3, #0]
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	f883 2520 	strb.w	r2, [r3, #1312]	; 0x520
								gn->velocidade.velocidadeFloat = converte4Bytes2float(gn->velocidade.velocidadeSTR);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	f203 531d 	addw	r3, r3, #1309	; 0x51d
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fe9e 	bl	8000e18 <converte4Bytes2float>
 80010dc:	4602      	mov	r2, r0
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
								gn->velocidade.velocidade8bits = (uint8_t)gn->velocidade.velocidadeFloat;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fd5a 	bl	8000ba4 <__aeabi_f2uiz>
 80010f0:	4603      	mov	r3, r0
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c
 80010fa:	e0ef      	b.n	80012dc <decodeNMEA+0x2cc>


							}
						}
					}
				}else if(str[3] == 'Z'){//GNZ
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3303      	adds	r3, #3
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b5a      	cmp	r3, #90	; 0x5a
 8001104:	f040 808d 	bne.w	8001222 <decodeNMEA+0x212>
					if(str[4] == 'D'){//GNZD
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3304      	adds	r3, #4
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b44      	cmp	r3, #68	; 0x44
 8001110:	f040 80e4 	bne.w	80012dc <decodeNMEA+0x2cc>
						if(str[5] == 'A'){//GNZDA
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3305      	adds	r3, #5
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b41      	cmp	r3, #65	; 0x41
 800111c:	f040 80de 	bne.w	80012dc <decodeNMEA+0x2cc>
							if(str[6] == ','){//GNZDA
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3306      	adds	r3, #6
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b2c      	cmp	r3, #44	; 0x2c
 8001128:	f040 80d8 	bne.w	80012dc <decodeNMEA+0x2cc>
								p = &str[7];
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3307      	adds	r3, #7
 8001130:	60fb      	str	r3, [r7, #12]

								gn->data.horaUTCStr[0] = *p++;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	1c5a      	adds	r2, r3, #1
 8001136:	60fa      	str	r2, [r7, #12]
 8001138:	781a      	ldrb	r2, [r3, #0]
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	f883 252c 	strb.w	r2, [r3, #1324]	; 0x52c
								gn->data.horaUTCStr[1] = *p++;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	1c5a      	adds	r2, r3, #1
 8001144:	60fa      	str	r2, [r7, #12]
 8001146:	781a      	ldrb	r2, [r3, #0]
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	f883 252d 	strb.w	r2, [r3, #1325]	; 0x52d
								gn->data.minutoStr[0] = *p++;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	1c5a      	adds	r2, r3, #1
 8001152:	60fa      	str	r2, [r7, #12]
 8001154:	781a      	ldrb	r2, [r3, #0]
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	f883 2530 	strb.w	r2, [r3, #1328]	; 0x530
								gn->data.minutoStr[1] = *p++;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	1c5a      	adds	r2, r3, #1
 8001160:	60fa      	str	r2, [r7, #12]
 8001162:	781a      	ldrb	r2, [r3, #0]
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	f883 2531 	strb.w	r2, [r3, #1329]	; 0x531
								gn->data.segundoStr[0] = *p++;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	1c5a      	adds	r2, r3, #1
 800116e:	60fa      	str	r2, [r7, #12]
 8001170:	781a      	ldrb	r2, [r3, #0]
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	f883 2532 	strb.w	r2, [r3, #1330]	; 0x532
								gn->data.segundoStr[1] = *p++;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	1c5a      	adds	r2, r3, #1
 800117c:	60fa      	str	r2, [r7, #12]
 800117e:	781a      	ldrb	r2, [r3, #0]
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	f883 2533 	strb.w	r2, [r3, #1331]	; 0x533
								p++;//.
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	3301      	adds	r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
								p++;//s
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	3301      	adds	r3, #1
 8001190:	60fb      	str	r3, [r7, #12]
								p++;//s
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	3301      	adds	r3, #1
 8001196:	60fb      	str	r3, [r7, #12]
								p++;//s
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	3301      	adds	r3, #1
 800119c:	60fb      	str	r3, [r7, #12]
								p++;//,
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	3301      	adds	r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
								gn->data.diaStr[0] = *p++;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	60fa      	str	r2, [r7, #12]
 80011aa:	781a      	ldrb	r2, [r3, #0]
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	f883 2534 	strb.w	r2, [r3, #1332]	; 0x534
								gn->data.diaStr[1] = *p++;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	1c5a      	adds	r2, r3, #1
 80011b6:	60fa      	str	r2, [r7, #12]
 80011b8:	781a      	ldrb	r2, [r3, #0]
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	f883 2535 	strb.w	r2, [r3, #1333]	; 0x535
								p++;//,
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	3301      	adds	r3, #1
 80011c4:	60fb      	str	r3, [r7, #12]
								gn->data.mesStr[0] = *p++;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	1c5a      	adds	r2, r3, #1
 80011ca:	60fa      	str	r2, [r7, #12]
 80011cc:	781a      	ldrb	r2, [r3, #0]
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	f883 2536 	strb.w	r2, [r3, #1334]	; 0x536
								gn->data.mesStr[1] = *p++;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	1c5a      	adds	r2, r3, #1
 80011d8:	60fa      	str	r2, [r7, #12]
 80011da:	781a      	ldrb	r2, [r3, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	f883 2537 	strb.w	r2, [r3, #1335]	; 0x537
								p++;//,
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	3301      	adds	r3, #1
 80011e6:	60fb      	str	r3, [r7, #12]
								gn->data.anoStr[0] = *p++;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	1c5a      	adds	r2, r3, #1
 80011ec:	60fa      	str	r2, [r7, #12]
 80011ee:	781a      	ldrb	r2, [r3, #0]
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	f883 2538 	strb.w	r2, [r3, #1336]	; 0x538
								gn->data.anoStr[1] = *p++;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	1c5a      	adds	r2, r3, #1
 80011fa:	60fa      	str	r2, [r7, #12]
 80011fc:	781a      	ldrb	r2, [r3, #0]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	f883 2539 	strb.w	r2, [r3, #1337]	; 0x539
								gn->data.anoStr[2] = *p++;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	1c5a      	adds	r2, r3, #1
 8001208:	60fa      	str	r2, [r7, #12]
 800120a:	781a      	ldrb	r2, [r3, #0]
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	f883 253a 	strb.w	r2, [r3, #1338]	; 0x53a
								gn->data.anoStr[3] = *p++;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	1c5a      	adds	r2, r3, #1
 8001216:	60fa      	str	r2, [r7, #12]
 8001218:	781a      	ldrb	r2, [r3, #0]
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	f883 253b 	strb.w	r2, [r3, #1339]	; 0x53b
 8001220:	e05c      	b.n	80012dc <decodeNMEA+0x2cc>

							}
						}
					}
				}else if(str[3] == 'G'){//GNG
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	3303      	adds	r3, #3
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b47      	cmp	r3, #71	; 0x47
 800122a:	d157      	bne.n	80012dc <decodeNMEA+0x2cc>
					if(str[4] == 'G'){//GNGG
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3304      	adds	r3, #4
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b47      	cmp	r3, #71	; 0x47
 8001234:	d152      	bne.n	80012dc <decodeNMEA+0x2cc>
						if(str[5] == 'A'){//GNGGA
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3305      	adds	r3, #5
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b41      	cmp	r3, #65	; 0x41
 800123e:	d14d      	bne.n	80012dc <decodeNMEA+0x2cc>
							if(str[6] == ','){//GNGGA
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3306      	adds	r3, #6
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b2c      	cmp	r3, #44	; 0x2c
 8001248:	d148      	bne.n	80012dc <decodeNMEA+0x2cc>
								p = &str[7];
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3307      	adds	r3, #7
 800124e:	60fb      	str	r3, [r7, #12]
								gn->data.horaUTCStr[0] = *p++;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	1c5a      	adds	r2, r3, #1
 8001254:	60fa      	str	r2, [r7, #12]
 8001256:	781a      	ldrb	r2, [r3, #0]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	f883 252c 	strb.w	r2, [r3, #1324]	; 0x52c
								gn->data.horaUTCStr[1] = *p++;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	1c5a      	adds	r2, r3, #1
 8001262:	60fa      	str	r2, [r7, #12]
 8001264:	781a      	ldrb	r2, [r3, #0]
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	f883 252d 	strb.w	r2, [r3, #1325]	; 0x52d
								gn->data.minutoStr[0] = *p++;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	1c5a      	adds	r2, r3, #1
 8001270:	60fa      	str	r2, [r7, #12]
 8001272:	781a      	ldrb	r2, [r3, #0]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	f883 2530 	strb.w	r2, [r3, #1328]	; 0x530
								gn->data.minutoStr[1] = *p++;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	1c5a      	adds	r2, r3, #1
 800127e:	60fa      	str	r2, [r7, #12]
 8001280:	781a      	ldrb	r2, [r3, #0]
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	f883 2531 	strb.w	r2, [r3, #1329]	; 0x531
								gn->data.segundoStr[0] = *p++;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	1c5a      	adds	r2, r3, #1
 800128c:	60fa      	str	r2, [r7, #12]
 800128e:	781a      	ldrb	r2, [r3, #0]
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	f883 2532 	strb.w	r2, [r3, #1330]	; 0x532
								gn->data.segundoStr[1] = *p++;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	1c5a      	adds	r2, r3, #1
 800129a:	60fa      	str	r2, [r7, #12]
 800129c:	781a      	ldrb	r2, [r3, #0]
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	f883 2533 	strb.w	r2, [r3, #1331]	; 0x533

								while(contVirgulas < 6){// numero de satelites
 80012a4:	e009      	b.n	80012ba <decodeNMEA+0x2aa>
									if(*p == ','){
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b2c      	cmp	r3, #44	; 0x2c
 80012ac:	d102      	bne.n	80012b4 <decodeNMEA+0x2a4>
										contVirgulas++;
 80012ae:	7afb      	ldrb	r3, [r7, #11]
 80012b0:	3301      	adds	r3, #1
 80012b2:	72fb      	strb	r3, [r7, #11]
									}
									p++;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	3301      	adds	r3, #1
 80012b8:	60fb      	str	r3, [r7, #12]
								while(contVirgulas < 6){// numero de satelites
 80012ba:	7afb      	ldrb	r3, [r7, #11]
 80012bc:	2b05      	cmp	r3, #5
 80012be:	d9f2      	bls.n	80012a6 <decodeNMEA+0x296>
								}
								gn->numeroSatelitesStr[0] = *p++;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	60fa      	str	r2, [r7, #12]
 80012c6:	781a      	ldrb	r2, [r3, #0]
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	f883 253c 	strb.w	r2, [r3, #1340]	; 0x53c
								gn->numeroSatelitesStr[1] = *p++;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	1c5a      	adds	r2, r3, #1
 80012d2:	60fa      	str	r2, [r7, #12]
 80012d4:	781a      	ldrb	r2, [r3, #0]
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	f883 253d 	strb.w	r2, [r3, #1341]	; 0x53d
					}
				}
			}
		}
	}
	str[0] = 0;// ja foi lido
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]


}
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80012ec:	b590      	push	{r4, r7, lr}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]

	HAL_UART_Receive_IT(&huart1, gnss.temp, 1);
 80012f4:	2201      	movs	r2, #1
 80012f6:	4921      	ldr	r1, [pc, #132]	; (800137c <HAL_UART_RxCpltCallback+0x90>)
 80012f8:	4821      	ldr	r0, [pc, #132]	; (8001380 <HAL_UART_RxCpltCallback+0x94>)
 80012fa:	f003 fcd4 	bl	8004ca6 <HAL_UART_Receive_IT>
	gnss.RxDataSerial[gnss.indy][gnss.indx] = gnss.temp[0];
 80012fe:	4b21      	ldr	r3, [pc, #132]	; (8001384 <HAL_UART_RxCpltCallback+0x98>)
 8001300:	f893 3517 	ldrb.w	r3, [r3, #1303]	; 0x517
 8001304:	461c      	mov	r4, r3
 8001306:	4b1f      	ldr	r3, [pc, #124]	; (8001384 <HAL_UART_RxCpltCallback+0x98>)
 8001308:	f893 3516 	ldrb.w	r3, [r3, #1302]	; 0x516
 800130c:	4618      	mov	r0, r3
 800130e:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <HAL_UART_RxCpltCallback+0x98>)
 8001310:	f893 1514 	ldrb.w	r1, [r3, #1300]	; 0x514
 8001314:	4a1b      	ldr	r2, [pc, #108]	; (8001384 <HAL_UART_RxCpltCallback+0x98>)
 8001316:	2364      	movs	r3, #100	; 0x64
 8001318:	fb04 f303 	mul.w	r3, r4, r3
 800131c:	4413      	add	r3, r2
 800131e:	4403      	add	r3, r0
 8001320:	460a      	mov	r2, r1
 8001322:	701a      	strb	r2, [r3, #0]
	gnss.indx++;
 8001324:	4b17      	ldr	r3, [pc, #92]	; (8001384 <HAL_UART_RxCpltCallback+0x98>)
 8001326:	f893 3516 	ldrb.w	r3, [r3, #1302]	; 0x516
 800132a:	3301      	adds	r3, #1
 800132c:	b2da      	uxtb	r2, r3
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <HAL_UART_RxCpltCallback+0x98>)
 8001330:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516

	if (gnss.indx >= 100 || gnss.temp[0] == '\n'){
 8001334:	4b13      	ldr	r3, [pc, #76]	; (8001384 <HAL_UART_RxCpltCallback+0x98>)
 8001336:	f893 3516 	ldrb.w	r3, [r3, #1302]	; 0x516
 800133a:	2b63      	cmp	r3, #99	; 0x63
 800133c:	d804      	bhi.n	8001348 <HAL_UART_RxCpltCallback+0x5c>
 800133e:	4b11      	ldr	r3, [pc, #68]	; (8001384 <HAL_UART_RxCpltCallback+0x98>)
 8001340:	f893 3514 	ldrb.w	r3, [r3, #1300]	; 0x514
 8001344:	2b0a      	cmp	r3, #10
 8001346:	d114      	bne.n	8001372 <HAL_UART_RxCpltCallback+0x86>
		//decodeNMEA(&gnss.RxDataSerial[gnss.indy][0], &gnss);

		gnss.indx = 0;
 8001348:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <HAL_UART_RxCpltCallback+0x98>)
 800134a:	2200      	movs	r2, #0
 800134c:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
		gnss.indy++;
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <HAL_UART_RxCpltCallback+0x98>)
 8001352:	f893 3517 	ldrb.w	r3, [r3, #1303]	; 0x517
 8001356:	3301      	adds	r3, #1
 8001358:	b2da      	uxtb	r2, r3
 800135a:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <HAL_UART_RxCpltCallback+0x98>)
 800135c:	f883 2517 	strb.w	r2, [r3, #1303]	; 0x517
		if(gnss.indy >= 13)gnss.indy = 0;
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <HAL_UART_RxCpltCallback+0x98>)
 8001362:	f893 3517 	ldrb.w	r3, [r3, #1303]	; 0x517
 8001366:	2b0c      	cmp	r3, #12
 8001368:	d903      	bls.n	8001372 <HAL_UART_RxCpltCallback+0x86>
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_UART_RxCpltCallback+0x98>)
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2517 	strb.w	r2, [r3, #1303]	; 0x517
	}

}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	bd90      	pop	{r4, r7, pc}
 800137a:	bf00      	nop
 800137c:	20000514 	.word	0x20000514
 8001380:	2000059c 	.word	0x2000059c
 8001384:	20000000 	.word	0x20000000

08001388 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	2110      	movs	r1, #16
 8001390:	4803      	ldr	r0, [pc, #12]	; (80013a0 <SELECT+0x18>)
 8001392:	f001 fe1b 	bl	8002fcc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001396:	2001      	movs	r0, #1
 8001398:	f001 fab0 	bl	80028fc <HAL_Delay>
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40010800 	.word	0x40010800

080013a4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80013a8:	2201      	movs	r2, #1
 80013aa:	2110      	movs	r1, #16
 80013ac:	4803      	ldr	r0, [pc, #12]	; (80013bc <DESELECT+0x18>)
 80013ae:	f001 fe0d 	bl	8002fcc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80013b2:	2001      	movs	r0, #1
 80013b4:	f001 faa2 	bl	80028fc <HAL_Delay>
}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40010800 	.word	0x40010800

080013c0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80013ca:	bf00      	nop
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <SPI_TxByte+0x30>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d1f8      	bne.n	80013cc <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80013da:	1df9      	adds	r1, r7, #7
 80013dc:	2364      	movs	r3, #100	; 0x64
 80013de:	2201      	movs	r2, #1
 80013e0:	4803      	ldr	r0, [pc, #12]	; (80013f0 <SPI_TxByte+0x30>)
 80013e2:	f003 f869 	bl	80044b8 <HAL_SPI_Transmit>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	2000269c 	.word	0x2000269c

080013f4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001400:	bf00      	nop
 8001402:	4b08      	ldr	r3, [pc, #32]	; (8001424 <SPI_TxBuffer+0x30>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b02      	cmp	r3, #2
 800140e:	d1f8      	bne.n	8001402 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001410:	887a      	ldrh	r2, [r7, #2]
 8001412:	2364      	movs	r3, #100	; 0x64
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	4803      	ldr	r0, [pc, #12]	; (8001424 <SPI_TxBuffer+0x30>)
 8001418:	f003 f84e 	bl	80044b8 <HAL_SPI_Transmit>
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	2000269c 	.word	0x2000269c

08001428 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800142e:	23ff      	movs	r3, #255	; 0xff
 8001430:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001432:	bf00      	nop
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <SPI_RxByte+0x34>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b02      	cmp	r3, #2
 8001440:	d1f8      	bne.n	8001434 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001442:	1dba      	adds	r2, r7, #6
 8001444:	1df9      	adds	r1, r7, #7
 8001446:	2364      	movs	r3, #100	; 0x64
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	2301      	movs	r3, #1
 800144c:	4803      	ldr	r0, [pc, #12]	; (800145c <SPI_RxByte+0x34>)
 800144e:	f003 f977 	bl	8004740 <HAL_SPI_TransmitReceive>

	return data;
 8001452:	79bb      	ldrb	r3, [r7, #6]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	2000269c 	.word	0x2000269c

08001460 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001468:	f7ff ffde 	bl	8001428 <SPI_RxByte>
 800146c:	4603      	mov	r3, r0
 800146e:	461a      	mov	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	701a      	strb	r2, [r3, #0]
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001482:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <SD_ReadyWait+0x30>)
 8001484:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001488:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800148a:	f7ff ffcd 	bl	8001428 <SPI_RxByte>
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	2bff      	cmp	r3, #255	; 0xff
 8001496:	d003      	beq.n	80014a0 <SD_ReadyWait+0x24>
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <SD_ReadyWait+0x30>)
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1f4      	bne.n	800148a <SD_ReadyWait+0xe>

	return res;
 80014a0:	79fb      	ldrb	r3, [r7, #7]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20002642 	.word	0x20002642

080014b0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80014b6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80014ba:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80014bc:	f7ff ff72 	bl	80013a4 <DESELECT>
	for(int i = 0; i < 10; i++)
 80014c0:	2300      	movs	r3, #0
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	e005      	b.n	80014d2 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80014c6:	20ff      	movs	r0, #255	; 0xff
 80014c8:	f7ff ff7a 	bl	80013c0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	3301      	adds	r3, #1
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	2b09      	cmp	r3, #9
 80014d6:	ddf6      	ble.n	80014c6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80014d8:	f7ff ff56 	bl	8001388 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80014dc:	2340      	movs	r3, #64	; 0x40
 80014de:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80014f0:	2395      	movs	r3, #149	; 0x95
 80014f2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80014f4:	463b      	mov	r3, r7
 80014f6:	2106      	movs	r1, #6
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff7b 	bl	80013f4 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80014fe:	e002      	b.n	8001506 <SD_PowerOn+0x56>
	{
		cnt--;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	3b01      	subs	r3, #1
 8001504:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001506:	f7ff ff8f 	bl	8001428 <SPI_RxByte>
 800150a:	4603      	mov	r3, r0
 800150c:	2b01      	cmp	r3, #1
 800150e:	d002      	beq.n	8001516 <SD_PowerOn+0x66>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f4      	bne.n	8001500 <SD_PowerOn+0x50>
	}

	DESELECT();
 8001516:	f7ff ff45 	bl	80013a4 <DESELECT>
	SPI_TxByte(0XFF);
 800151a:	20ff      	movs	r0, #255	; 0xff
 800151c:	f7ff ff50 	bl	80013c0 <SPI_TxByte>

	PowerFlag = 1;
 8001520:	4b03      	ldr	r3, [pc, #12]	; (8001530 <SD_PowerOn+0x80>)
 8001522:	2201      	movs	r2, #1
 8001524:	701a      	strb	r2, [r3, #0]
}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20002645 	.word	0x20002645

08001534 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001538:	4b03      	ldr	r3, [pc, #12]	; (8001548 <SD_PowerOff+0x14>)
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	20002645 	.word	0x20002645

0800154c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001550:	4b02      	ldr	r3, [pc, #8]	; (800155c <SD_CheckPower+0x10>)
 8001552:	781b      	ldrb	r3, [r3, #0]
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	20002645 	.word	0x20002645

08001560 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800156a:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <SD_RxDataBlock+0x58>)
 800156c:	22c8      	movs	r2, #200	; 0xc8
 800156e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001570:	f7ff ff5a 	bl	8001428 <SPI_RxByte>
 8001574:	4603      	mov	r3, r0
 8001576:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001578:	7bfb      	ldrb	r3, [r7, #15]
 800157a:	2bff      	cmp	r3, #255	; 0xff
 800157c:	d103      	bne.n	8001586 <SD_RxDataBlock+0x26>
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <SD_RxDataBlock+0x58>)
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f4      	bne.n	8001570 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	2bfe      	cmp	r3, #254	; 0xfe
 800158a:	d001      	beq.n	8001590 <SD_RxDataBlock+0x30>
 800158c:	2300      	movs	r3, #0
 800158e:	e00f      	b.n	80015b0 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	1c5a      	adds	r2, r3, #1
 8001594:	607a      	str	r2, [r7, #4]
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff ff62 	bl	8001460 <SPI_RxBytePtr>
	} while(len--);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	1e5a      	subs	r2, r3, #1
 80015a0:	603a      	str	r2, [r7, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f4      	bne.n	8001590 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80015a6:	f7ff ff3f 	bl	8001428 <SPI_RxByte>
	SPI_RxByte();
 80015aa:	f7ff ff3d 	bl	8001428 <SPI_RxByte>

	return TRUE;
 80015ae:	2301      	movs	r3, #1
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20002640 	.word	0x20002640

080015bc <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80015cc:	f7ff ff56 	bl	800147c <SD_ReadyWait>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2bff      	cmp	r3, #255	; 0xff
 80015d4:	d001      	beq.n	80015da <SD_TxDataBlock+0x1e>
 80015d6:	2300      	movs	r3, #0
 80015d8:	e02f      	b.n	800163a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80015da:	78fb      	ldrb	r3, [r7, #3]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff feef 	bl	80013c0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80015e2:	78fb      	ldrb	r3, [r7, #3]
 80015e4:	2bfd      	cmp	r3, #253	; 0xfd
 80015e6:	d020      	beq.n	800162a <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80015e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff ff01 	bl	80013f4 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80015f2:	f7ff ff19 	bl	8001428 <SPI_RxByte>
		SPI_RxByte();
 80015f6:	f7ff ff17 	bl	8001428 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80015fa:	e00b      	b.n	8001614 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80015fc:	f7ff ff14 	bl	8001428 <SPI_RxByte>
 8001600:	4603      	mov	r3, r0
 8001602:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	f003 031f 	and.w	r3, r3, #31
 800160a:	2b05      	cmp	r3, #5
 800160c:	d006      	beq.n	800161c <SD_TxDataBlock+0x60>
			i++;
 800160e:	7bbb      	ldrb	r3, [r7, #14]
 8001610:	3301      	adds	r3, #1
 8001612:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001614:	7bbb      	ldrb	r3, [r7, #14]
 8001616:	2b40      	cmp	r3, #64	; 0x40
 8001618:	d9f0      	bls.n	80015fc <SD_TxDataBlock+0x40>
 800161a:	e000      	b.n	800161e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800161c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800161e:	bf00      	nop
 8001620:	f7ff ff02 	bl	8001428 <SPI_RxByte>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0fa      	beq.n	8001620 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	f003 031f 	and.w	r3, r3, #31
 8001630:	2b05      	cmp	r3, #5
 8001632:	d101      	bne.n	8001638 <SD_TxDataBlock+0x7c>
 8001634:	2301      	movs	r3, #1
 8001636:	e000      	b.n	800163a <SD_TxDataBlock+0x7e>

	return FALSE;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b084      	sub	sp, #16
 8001646:	af00      	add	r7, sp, #0
 8001648:	4603      	mov	r3, r0
 800164a:	6039      	str	r1, [r7, #0]
 800164c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800164e:	f7ff ff15 	bl	800147c <SD_ReadyWait>
 8001652:	4603      	mov	r3, r0
 8001654:	2bff      	cmp	r3, #255	; 0xff
 8001656:	d001      	beq.n	800165c <SD_SendCmd+0x1a>
 8001658:	23ff      	movs	r3, #255	; 0xff
 800165a:	e042      	b.n	80016e2 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff feae 	bl	80013c0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	0e1b      	lsrs	r3, r3, #24
 8001668:	b2db      	uxtb	r3, r3
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fea8 	bl	80013c0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	0c1b      	lsrs	r3, r3, #16
 8001674:	b2db      	uxtb	r3, r3
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fea2 	bl	80013c0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	0a1b      	lsrs	r3, r3, #8
 8001680:	b2db      	uxtb	r3, r3
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fe9c 	bl	80013c0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	b2db      	uxtb	r3, r3
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fe97 	bl	80013c0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	2b40      	cmp	r3, #64	; 0x40
 8001696:	d102      	bne.n	800169e <SD_SendCmd+0x5c>
 8001698:	2395      	movs	r3, #149	; 0x95
 800169a:	73fb      	strb	r3, [r7, #15]
 800169c:	e007      	b.n	80016ae <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	2b48      	cmp	r3, #72	; 0x48
 80016a2:	d102      	bne.n	80016aa <SD_SendCmd+0x68>
 80016a4:	2387      	movs	r3, #135	; 0x87
 80016a6:	73fb      	strb	r3, [r7, #15]
 80016a8:	e001      	b.n	80016ae <SD_SendCmd+0x6c>
	else crc = 1;
 80016aa:	2301      	movs	r3, #1
 80016ac:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff fe85 	bl	80013c0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	2b4c      	cmp	r3, #76	; 0x4c
 80016ba:	d101      	bne.n	80016c0 <SD_SendCmd+0x7e>
 80016bc:	f7ff feb4 	bl	8001428 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80016c0:	230a      	movs	r3, #10
 80016c2:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80016c4:	f7ff feb0 	bl	8001428 <SPI_RxByte>
 80016c8:	4603      	mov	r3, r0
 80016ca:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80016cc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	da05      	bge.n	80016e0 <SD_SendCmd+0x9e>
 80016d4:	7bbb      	ldrb	r3, [r7, #14]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	73bb      	strb	r3, [r7, #14]
 80016da:	7bbb      	ldrb	r3, [r7, #14]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1f1      	bne.n	80016c4 <SD_SendCmd+0x82>

	return res;
 80016e0:	7b7b      	ldrb	r3, [r7, #13]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80016ec:	b590      	push	{r4, r7, lr}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <SD_disk_initialize+0x14>
 80016fc:	2301      	movs	r3, #1
 80016fe:	e0d1      	b.n	80018a4 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001700:	4b6a      	ldr	r3, [pc, #424]	; (80018ac <SD_disk_initialize+0x1c0>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	b2db      	uxtb	r3, r3
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <SD_disk_initialize+0x2a>
 800170e:	4b67      	ldr	r3, [pc, #412]	; (80018ac <SD_disk_initialize+0x1c0>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	b2db      	uxtb	r3, r3
 8001714:	e0c6      	b.n	80018a4 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8001716:	f7ff fecb 	bl	80014b0 <SD_PowerOn>

	/* slave select */
	SELECT();
 800171a:	f7ff fe35 	bl	8001388 <SELECT>

	/* check disk type */
	type = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001722:	2100      	movs	r1, #0
 8001724:	2040      	movs	r0, #64	; 0x40
 8001726:	f7ff ff8c 	bl	8001642 <SD_SendCmd>
 800172a:	4603      	mov	r3, r0
 800172c:	2b01      	cmp	r3, #1
 800172e:	f040 80a1 	bne.w	8001874 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001732:	4b5f      	ldr	r3, [pc, #380]	; (80018b0 <SD_disk_initialize+0x1c4>)
 8001734:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001738:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800173a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800173e:	2048      	movs	r0, #72	; 0x48
 8001740:	f7ff ff7f 	bl	8001642 <SD_SendCmd>
 8001744:	4603      	mov	r3, r0
 8001746:	2b01      	cmp	r3, #1
 8001748:	d155      	bne.n	80017f6 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800174a:	2300      	movs	r3, #0
 800174c:	73fb      	strb	r3, [r7, #15]
 800174e:	e00c      	b.n	800176a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001750:	7bfc      	ldrb	r4, [r7, #15]
 8001752:	f7ff fe69 	bl	8001428 <SPI_RxByte>
 8001756:	4603      	mov	r3, r0
 8001758:	461a      	mov	r2, r3
 800175a:	f104 0310 	add.w	r3, r4, #16
 800175e:	443b      	add	r3, r7
 8001760:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	3301      	adds	r3, #1
 8001768:	73fb      	strb	r3, [r7, #15]
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	2b03      	cmp	r3, #3
 800176e:	d9ef      	bls.n	8001750 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001770:	7abb      	ldrb	r3, [r7, #10]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d17e      	bne.n	8001874 <SD_disk_initialize+0x188>
 8001776:	7afb      	ldrb	r3, [r7, #11]
 8001778:	2baa      	cmp	r3, #170	; 0xaa
 800177a:	d17b      	bne.n	8001874 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800177c:	2100      	movs	r1, #0
 800177e:	2077      	movs	r0, #119	; 0x77
 8001780:	f7ff ff5f 	bl	8001642 <SD_SendCmd>
 8001784:	4603      	mov	r3, r0
 8001786:	2b01      	cmp	r3, #1
 8001788:	d807      	bhi.n	800179a <SD_disk_initialize+0xae>
 800178a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800178e:	2069      	movs	r0, #105	; 0x69
 8001790:	f7ff ff57 	bl	8001642 <SD_SendCmd>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d004      	beq.n	80017a4 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800179a:	4b45      	ldr	r3, [pc, #276]	; (80018b0 <SD_disk_initialize+0x1c4>)
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1ec      	bne.n	800177c <SD_disk_initialize+0x90>
 80017a2:	e000      	b.n	80017a6 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80017a4:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80017a6:	4b42      	ldr	r3, [pc, #264]	; (80018b0 <SD_disk_initialize+0x1c4>)
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d062      	beq.n	8001874 <SD_disk_initialize+0x188>
 80017ae:	2100      	movs	r1, #0
 80017b0:	207a      	movs	r0, #122	; 0x7a
 80017b2:	f7ff ff46 	bl	8001642 <SD_SendCmd>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d15b      	bne.n	8001874 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80017bc:	2300      	movs	r3, #0
 80017be:	73fb      	strb	r3, [r7, #15]
 80017c0:	e00c      	b.n	80017dc <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80017c2:	7bfc      	ldrb	r4, [r7, #15]
 80017c4:	f7ff fe30 	bl	8001428 <SPI_RxByte>
 80017c8:	4603      	mov	r3, r0
 80017ca:	461a      	mov	r2, r3
 80017cc:	f104 0310 	add.w	r3, r4, #16
 80017d0:	443b      	add	r3, r7
 80017d2:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
 80017d8:	3301      	adds	r3, #1
 80017da:	73fb      	strb	r3, [r7, #15]
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d9ef      	bls.n	80017c2 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80017e2:	7a3b      	ldrb	r3, [r7, #8]
 80017e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <SD_disk_initialize+0x104>
 80017ec:	230c      	movs	r3, #12
 80017ee:	e000      	b.n	80017f2 <SD_disk_initialize+0x106>
 80017f0:	2304      	movs	r3, #4
 80017f2:	73bb      	strb	r3, [r7, #14]
 80017f4:	e03e      	b.n	8001874 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80017f6:	2100      	movs	r1, #0
 80017f8:	2077      	movs	r0, #119	; 0x77
 80017fa:	f7ff ff22 	bl	8001642 <SD_SendCmd>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b01      	cmp	r3, #1
 8001802:	d808      	bhi.n	8001816 <SD_disk_initialize+0x12a>
 8001804:	2100      	movs	r1, #0
 8001806:	2069      	movs	r0, #105	; 0x69
 8001808:	f7ff ff1b 	bl	8001642 <SD_SendCmd>
 800180c:	4603      	mov	r3, r0
 800180e:	2b01      	cmp	r3, #1
 8001810:	d801      	bhi.n	8001816 <SD_disk_initialize+0x12a>
 8001812:	2302      	movs	r3, #2
 8001814:	e000      	b.n	8001818 <SD_disk_initialize+0x12c>
 8001816:	2301      	movs	r3, #1
 8001818:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800181a:	7bbb      	ldrb	r3, [r7, #14]
 800181c:	2b02      	cmp	r3, #2
 800181e:	d10e      	bne.n	800183e <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001820:	2100      	movs	r1, #0
 8001822:	2077      	movs	r0, #119	; 0x77
 8001824:	f7ff ff0d 	bl	8001642 <SD_SendCmd>
 8001828:	4603      	mov	r3, r0
 800182a:	2b01      	cmp	r3, #1
 800182c:	d80e      	bhi.n	800184c <SD_disk_initialize+0x160>
 800182e:	2100      	movs	r1, #0
 8001830:	2069      	movs	r0, #105	; 0x69
 8001832:	f7ff ff06 	bl	8001642 <SD_SendCmd>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d107      	bne.n	800184c <SD_disk_initialize+0x160>
 800183c:	e00c      	b.n	8001858 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800183e:	2100      	movs	r1, #0
 8001840:	2041      	movs	r0, #65	; 0x41
 8001842:	f7ff fefe 	bl	8001642 <SD_SendCmd>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d004      	beq.n	8001856 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 800184c:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <SD_disk_initialize+0x1c4>)
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1e2      	bne.n	800181a <SD_disk_initialize+0x12e>
 8001854:	e000      	b.n	8001858 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001856:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001858:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <SD_disk_initialize+0x1c4>)
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d007      	beq.n	8001870 <SD_disk_initialize+0x184>
 8001860:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001864:	2050      	movs	r0, #80	; 0x50
 8001866:	f7ff feec 	bl	8001642 <SD_SendCmd>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <SD_disk_initialize+0x188>
 8001870:	2300      	movs	r3, #0
 8001872:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001874:	4a0f      	ldr	r2, [pc, #60]	; (80018b4 <SD_disk_initialize+0x1c8>)
 8001876:	7bbb      	ldrb	r3, [r7, #14]
 8001878:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800187a:	f7ff fd93 	bl	80013a4 <DESELECT>
	SPI_RxByte();
 800187e:	f7ff fdd3 	bl	8001428 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001882:	7bbb      	ldrb	r3, [r7, #14]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d008      	beq.n	800189a <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001888:	4b08      	ldr	r3, [pc, #32]	; (80018ac <SD_disk_initialize+0x1c0>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	b2db      	uxtb	r3, r3
 800188e:	f023 0301 	bic.w	r3, r3, #1
 8001892:	b2da      	uxtb	r2, r3
 8001894:	4b05      	ldr	r3, [pc, #20]	; (80018ac <SD_disk_initialize+0x1c0>)
 8001896:	701a      	strb	r2, [r3, #0]
 8001898:	e001      	b.n	800189e <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800189a:	f7ff fe4b 	bl	8001534 <SD_PowerOff>
	}

	return Stat;
 800189e:	4b03      	ldr	r3, [pc, #12]	; (80018ac <SD_disk_initialize+0x1c0>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	b2db      	uxtb	r3, r3
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd90      	pop	{r4, r7, pc}
 80018ac:	20000540 	.word	0x20000540
 80018b0:	20002640 	.word	0x20002640
 80018b4:	20002644 	.word	0x20002644

080018b8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <SD_disk_status+0x14>
 80018c8:	2301      	movs	r3, #1
 80018ca:	e002      	b.n	80018d2 <SD_disk_status+0x1a>
	return Stat;
 80018cc:	4b03      	ldr	r3, [pc, #12]	; (80018dc <SD_disk_status+0x24>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	b2db      	uxtb	r3, r3
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr
 80018dc:	20000540 	.word	0x20000540

080018e0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
 80018ea:	603b      	str	r3, [r7, #0]
 80018ec:	4603      	mov	r3, r0
 80018ee:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d102      	bne.n	80018fc <SD_disk_read+0x1c>
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d101      	bne.n	8001900 <SD_disk_read+0x20>
 80018fc:	2304      	movs	r3, #4
 80018fe:	e051      	b.n	80019a4 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001900:	4b2a      	ldr	r3, [pc, #168]	; (80019ac <SD_disk_read+0xcc>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	b2db      	uxtb	r3, r3
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <SD_disk_read+0x32>
 800190e:	2303      	movs	r3, #3
 8001910:	e048      	b.n	80019a4 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001912:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <SD_disk_read+0xd0>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	2b00      	cmp	r3, #0
 800191c:	d102      	bne.n	8001924 <SD_disk_read+0x44>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	025b      	lsls	r3, r3, #9
 8001922:	607b      	str	r3, [r7, #4]

	SELECT();
 8001924:	f7ff fd30 	bl	8001388 <SELECT>

	if (count == 1)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d111      	bne.n	8001952 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	2051      	movs	r0, #81	; 0x51
 8001932:	f7ff fe86 	bl	8001642 <SD_SendCmd>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d129      	bne.n	8001990 <SD_disk_read+0xb0>
 800193c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001940:	68b8      	ldr	r0, [r7, #8]
 8001942:	f7ff fe0d 	bl	8001560 <SD_RxDataBlock>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d021      	beq.n	8001990 <SD_disk_read+0xb0>
 800194c:	2300      	movs	r3, #0
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	e01e      	b.n	8001990 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	2052      	movs	r0, #82	; 0x52
 8001956:	f7ff fe74 	bl	8001642 <SD_SendCmd>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d117      	bne.n	8001990 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001960:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001964:	68b8      	ldr	r0, [r7, #8]
 8001966:	f7ff fdfb 	bl	8001560 <SD_RxDataBlock>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d00a      	beq.n	8001986 <SD_disk_read+0xa6>
				buff += 512;
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001976:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	3b01      	subs	r3, #1
 800197c:	603b      	str	r3, [r7, #0]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1ed      	bne.n	8001960 <SD_disk_read+0x80>
 8001984:	e000      	b.n	8001988 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001986:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001988:	2100      	movs	r1, #0
 800198a:	204c      	movs	r0, #76	; 0x4c
 800198c:	f7ff fe59 	bl	8001642 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001990:	f7ff fd08 	bl	80013a4 <DESELECT>
	SPI_RxByte();
 8001994:	f7ff fd48 	bl	8001428 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	bf14      	ite	ne
 800199e:	2301      	movne	r3, #1
 80019a0:	2300      	moveq	r3, #0
 80019a2:	b2db      	uxtb	r3, r3
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000540 	.word	0x20000540
 80019b0:	20002644 	.word	0x20002644

080019b4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	603b      	str	r3, [r7, #0]
 80019c0:	4603      	mov	r3, r0
 80019c2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d102      	bne.n	80019d0 <SD_disk_write+0x1c>
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <SD_disk_write+0x20>
 80019d0:	2304      	movs	r3, #4
 80019d2:	e06b      	b.n	8001aac <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80019d4:	4b37      	ldr	r3, [pc, #220]	; (8001ab4 <SD_disk_write+0x100>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <SD_disk_write+0x32>
 80019e2:	2303      	movs	r3, #3
 80019e4:	e062      	b.n	8001aac <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80019e6:	4b33      	ldr	r3, [pc, #204]	; (8001ab4 <SD_disk_write+0x100>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <SD_disk_write+0x44>
 80019f4:	2302      	movs	r3, #2
 80019f6:	e059      	b.n	8001aac <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80019f8:	4b2f      	ldr	r3, [pc, #188]	; (8001ab8 <SD_disk_write+0x104>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d102      	bne.n	8001a0a <SD_disk_write+0x56>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	025b      	lsls	r3, r3, #9
 8001a08:	607b      	str	r3, [r7, #4]

	SELECT();
 8001a0a:	f7ff fcbd 	bl	8001388 <SELECT>

	if (count == 1)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d110      	bne.n	8001a36 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	2058      	movs	r0, #88	; 0x58
 8001a18:	f7ff fe13 	bl	8001642 <SD_SendCmd>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d13a      	bne.n	8001a98 <SD_disk_write+0xe4>
 8001a22:	21fe      	movs	r1, #254	; 0xfe
 8001a24:	68b8      	ldr	r0, [r7, #8]
 8001a26:	f7ff fdc9 	bl	80015bc <SD_TxDataBlock>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d033      	beq.n	8001a98 <SD_disk_write+0xe4>
			count = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	603b      	str	r3, [r7, #0]
 8001a34:	e030      	b.n	8001a98 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001a36:	4b20      	ldr	r3, [pc, #128]	; (8001ab8 <SD_disk_write+0x104>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d007      	beq.n	8001a52 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001a42:	2100      	movs	r1, #0
 8001a44:	2077      	movs	r0, #119	; 0x77
 8001a46:	f7ff fdfc 	bl	8001642 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001a4a:	6839      	ldr	r1, [r7, #0]
 8001a4c:	2057      	movs	r0, #87	; 0x57
 8001a4e:	f7ff fdf8 	bl	8001642 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	2059      	movs	r0, #89	; 0x59
 8001a56:	f7ff fdf4 	bl	8001642 <SD_SendCmd>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d11b      	bne.n	8001a98 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001a60:	21fc      	movs	r1, #252	; 0xfc
 8001a62:	68b8      	ldr	r0, [r7, #8]
 8001a64:	f7ff fdaa 	bl	80015bc <SD_TxDataBlock>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d00a      	beq.n	8001a84 <SD_disk_write+0xd0>
				buff += 512;
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001a74:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1ee      	bne.n	8001a60 <SD_disk_write+0xac>
 8001a82:	e000      	b.n	8001a86 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001a84:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001a86:	21fd      	movs	r1, #253	; 0xfd
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f7ff fd97 	bl	80015bc <SD_TxDataBlock>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <SD_disk_write+0xe4>
			{
				count = 1;
 8001a94:	2301      	movs	r3, #1
 8001a96:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001a98:	f7ff fc84 	bl	80013a4 <DESELECT>
	SPI_RxByte();
 8001a9c:	f7ff fcc4 	bl	8001428 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	bf14      	ite	ne
 8001aa6:	2301      	movne	r3, #1
 8001aa8:	2300      	moveq	r3, #0
 8001aaa:	b2db      	uxtb	r3, r3
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20000540 	.word	0x20000540
 8001ab8:	20002644 	.word	0x20002644

08001abc <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001abc:	b590      	push	{r4, r7, lr}
 8001abe:	b08b      	sub	sp, #44	; 0x2c
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	603a      	str	r2, [r7, #0]
 8001ac6:	71fb      	strb	r3, [r7, #7]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <SD_disk_ioctl+0x1e>
 8001ad6:	2304      	movs	r3, #4
 8001ad8:	e115      	b.n	8001d06 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001ae0:	79bb      	ldrb	r3, [r7, #6]
 8001ae2:	2b05      	cmp	r3, #5
 8001ae4:	d124      	bne.n	8001b30 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d012      	beq.n	8001b14 <SD_disk_ioctl+0x58>
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	dc1a      	bgt.n	8001b28 <SD_disk_ioctl+0x6c>
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d002      	beq.n	8001afc <SD_disk_ioctl+0x40>
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d006      	beq.n	8001b08 <SD_disk_ioctl+0x4c>
 8001afa:	e015      	b.n	8001b28 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001afc:	f7ff fd1a 	bl	8001534 <SD_PowerOff>
			res = RES_OK;
 8001b00:	2300      	movs	r3, #0
 8001b02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001b06:	e0fc      	b.n	8001d02 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001b08:	f7ff fcd2 	bl	80014b0 <SD_PowerOn>
			res = RES_OK;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001b12:	e0f6      	b.n	8001d02 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001b14:	6a3b      	ldr	r3, [r7, #32]
 8001b16:	1c5c      	adds	r4, r3, #1
 8001b18:	f7ff fd18 	bl	800154c <SD_CheckPower>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001b20:	2300      	movs	r3, #0
 8001b22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001b26:	e0ec      	b.n	8001d02 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001b28:	2304      	movs	r3, #4
 8001b2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b2e:	e0e8      	b.n	8001d02 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001b30:	4b77      	ldr	r3, [pc, #476]	; (8001d10 <SD_disk_ioctl+0x254>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <SD_disk_ioctl+0x86>
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e0e1      	b.n	8001d06 <SD_disk_ioctl+0x24a>

		SELECT();
 8001b42:	f7ff fc21 	bl	8001388 <SELECT>

		switch (ctrl)
 8001b46:	79bb      	ldrb	r3, [r7, #6]
 8001b48:	2b0d      	cmp	r3, #13
 8001b4a:	f200 80cb 	bhi.w	8001ce4 <SD_disk_ioctl+0x228>
 8001b4e:	a201      	add	r2, pc, #4	; (adr r2, 8001b54 <SD_disk_ioctl+0x98>)
 8001b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b54:	08001c4f 	.word	0x08001c4f
 8001b58:	08001b8d 	.word	0x08001b8d
 8001b5c:	08001c3f 	.word	0x08001c3f
 8001b60:	08001ce5 	.word	0x08001ce5
 8001b64:	08001ce5 	.word	0x08001ce5
 8001b68:	08001ce5 	.word	0x08001ce5
 8001b6c:	08001ce5 	.word	0x08001ce5
 8001b70:	08001ce5 	.word	0x08001ce5
 8001b74:	08001ce5 	.word	0x08001ce5
 8001b78:	08001ce5 	.word	0x08001ce5
 8001b7c:	08001ce5 	.word	0x08001ce5
 8001b80:	08001c61 	.word	0x08001c61
 8001b84:	08001c85 	.word	0x08001c85
 8001b88:	08001ca9 	.word	0x08001ca9
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	2049      	movs	r0, #73	; 0x49
 8001b90:	f7ff fd57 	bl	8001642 <SD_SendCmd>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f040 80a8 	bne.w	8001cec <SD_disk_ioctl+0x230>
 8001b9c:	f107 030c 	add.w	r3, r7, #12
 8001ba0:	2110      	movs	r1, #16
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff fcdc 	bl	8001560 <SD_RxDataBlock>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 809e 	beq.w	8001cec <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001bb0:	7b3b      	ldrb	r3, [r7, #12]
 8001bb2:	099b      	lsrs	r3, r3, #6
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d10e      	bne.n	8001bd8 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001bba:	7d7b      	ldrb	r3, [r7, #21]
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	7d3b      	ldrb	r3, [r7, #20]
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	021b      	lsls	r3, r3, #8
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	4413      	add	r3, r2
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	3301      	adds	r3, #1
 8001bcc:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001bce:	8bfb      	ldrh	r3, [r7, #30]
 8001bd0:	029a      	lsls	r2, r3, #10
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	e02e      	b.n	8001c36 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001bd8:	7c7b      	ldrb	r3, [r7, #17]
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	7dbb      	ldrb	r3, [r7, #22]
 8001be2:	09db      	lsrs	r3, r3, #7
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	4413      	add	r3, r2
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	7d7b      	ldrb	r3, [r7, #21]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	f003 0306 	and.w	r3, r3, #6
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	4413      	add	r3, r2
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	3302      	adds	r3, #2
 8001bfc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001c00:	7d3b      	ldrb	r3, [r7, #20]
 8001c02:	099b      	lsrs	r3, r3, #6
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	7cfb      	ldrb	r3, [r7, #19]
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	4413      	add	r3, r2
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	7cbb      	ldrb	r3, [r7, #18]
 8001c16:	029b      	lsls	r3, r3, #10
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	4413      	add	r3, r2
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	3301      	adds	r3, #1
 8001c26:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001c28:	8bfa      	ldrh	r2, [r7, #30]
 8001c2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c2e:	3b09      	subs	r3, #9
 8001c30:	409a      	lsls	r2, r3
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001c3c:	e056      	b.n	8001cec <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c44:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001c4c:	e055      	b.n	8001cfa <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001c4e:	f7ff fc15 	bl	800147c <SD_ReadyWait>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2bff      	cmp	r3, #255	; 0xff
 8001c56:	d14b      	bne.n	8001cf0 <SD_disk_ioctl+0x234>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001c5e:	e047      	b.n	8001cf0 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001c60:	2100      	movs	r1, #0
 8001c62:	2049      	movs	r0, #73	; 0x49
 8001c64:	f7ff fced 	bl	8001642 <SD_SendCmd>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d142      	bne.n	8001cf4 <SD_disk_ioctl+0x238>
 8001c6e:	2110      	movs	r1, #16
 8001c70:	6a38      	ldr	r0, [r7, #32]
 8001c72:	f7ff fc75 	bl	8001560 <SD_RxDataBlock>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d03b      	beq.n	8001cf4 <SD_disk_ioctl+0x238>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001c82:	e037      	b.n	8001cf4 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001c84:	2100      	movs	r1, #0
 8001c86:	204a      	movs	r0, #74	; 0x4a
 8001c88:	f7ff fcdb 	bl	8001642 <SD_SendCmd>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d132      	bne.n	8001cf8 <SD_disk_ioctl+0x23c>
 8001c92:	2110      	movs	r1, #16
 8001c94:	6a38      	ldr	r0, [r7, #32]
 8001c96:	f7ff fc63 	bl	8001560 <SD_RxDataBlock>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d02b      	beq.n	8001cf8 <SD_disk_ioctl+0x23c>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001ca6:	e027      	b.n	8001cf8 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001ca8:	2100      	movs	r1, #0
 8001caa:	207a      	movs	r0, #122	; 0x7a
 8001cac:	f7ff fcc9 	bl	8001642 <SD_SendCmd>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d116      	bne.n	8001ce4 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001cbc:	e00b      	b.n	8001cd6 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001cbe:	6a3c      	ldr	r4, [r7, #32]
 8001cc0:	1c63      	adds	r3, r4, #1
 8001cc2:	623b      	str	r3, [r7, #32]
 8001cc4:	f7ff fbb0 	bl	8001428 <SPI_RxByte>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001ccc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001cd6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001cda:	2b03      	cmp	r3, #3
 8001cdc:	d9ef      	bls.n	8001cbe <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001ce4:	2304      	movs	r3, #4
 8001ce6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001cea:	e006      	b.n	8001cfa <SD_disk_ioctl+0x23e>
			break;
 8001cec:	bf00      	nop
 8001cee:	e004      	b.n	8001cfa <SD_disk_ioctl+0x23e>
			break;
 8001cf0:	bf00      	nop
 8001cf2:	e002      	b.n	8001cfa <SD_disk_ioctl+0x23e>
			break;
 8001cf4:	bf00      	nop
 8001cf6:	e000      	b.n	8001cfa <SD_disk_ioctl+0x23e>
			break;
 8001cf8:	bf00      	nop
		}

		DESELECT();
 8001cfa:	f7ff fb53 	bl	80013a4 <DESELECT>
		SPI_RxByte();
 8001cfe:	f7ff fb93 	bl	8001428 <SPI_RxByte>
	}

	return res;
 8001d02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	372c      	adds	r7, #44	; 0x2c
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd90      	pop	{r4, r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000540 	.word	0x20000540

08001d14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d18:	f000 fd8e 	bl	8002838 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d1c:	f000 f83e 	bl	8001d9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d20:	f000 f906 	bl	8001f30 <MX_GPIO_Init>
  MX_FATFS_Init();
 8001d24:	f003 fcf6 	bl	8005714 <MX_FATFS_Init>
  MX_SPI1_Init();
 8001d28:	f000 f8a2 	bl	8001e70 <MX_SPI1_Init>
  MX_I2C1_Init();
 8001d2c:	f000 f872 	bl	8001e14 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001d30:	f000 f8d4 	bl	8001edc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1500);
 8001d34:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001d38:	f000 fde0 	bl	80028fc <HAL_Delay>
  Display.configurado = VELOCIDADE;
 8001d3c:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <main+0x78>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	701a      	strb	r2, [r3, #0]
  initDisplay(&Display);
 8001d42:	4812      	ldr	r0, [pc, #72]	; (8001d8c <main+0x78>)
 8001d44:	f7fe ff4e 	bl	8000be4 <initDisplay>
  HAL_UART_Receive_IT(&huart1, gnss.RxDataSerial, 1);
 8001d48:	2201      	movs	r2, #1
 8001d4a:	4911      	ldr	r1, [pc, #68]	; (8001d90 <main+0x7c>)
 8001d4c:	4811      	ldr	r0, [pc, #68]	; (8001d94 <main+0x80>)
 8001d4e:	f002 ffaa 	bl	8004ca6 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){

	  if(gnss.indy == 0){
 8001d52:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <main+0x7c>)
 8001d54:	f893 3517 	ldrb.w	r3, [r3, #1303]	; 0x517
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d104      	bne.n	8001d66 <main+0x52>
		  decodeNMEA(&gnss.RxDataSerial[13][0], &gnss);
 8001d5c:	490c      	ldr	r1, [pc, #48]	; (8001d90 <main+0x7c>)
 8001d5e:	480e      	ldr	r0, [pc, #56]	; (8001d98 <main+0x84>)
 8001d60:	f7ff f956 	bl	8001010 <decodeNMEA>
 8001d64:	e00c      	b.n	8001d80 <main+0x6c>
		  //gnss.velocidade.velocidade8bits = 10;//debug

	  }else{
		  decodeNMEA(&gnss.RxDataSerial[gnss.indy-1][0], &gnss);
 8001d66:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <main+0x7c>)
 8001d68:	f893 3517 	ldrb.w	r3, [r3, #1303]	; 0x517
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	2264      	movs	r2, #100	; 0x64
 8001d70:	fb02 f303 	mul.w	r3, r2, r3
 8001d74:	4a06      	ldr	r2, [pc, #24]	; (8001d90 <main+0x7c>)
 8001d76:	4413      	add	r3, r2
 8001d78:	4905      	ldr	r1, [pc, #20]	; (8001d90 <main+0x7c>)
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff f948 	bl	8001010 <decodeNMEA>
		  //gnss.velocidade.velocidade8bits = gnss.indy-1;//debug

	  }

	  updateDisplay(&Display,&gnss);
 8001d80:	4903      	ldr	r1, [pc, #12]	; (8001d90 <main+0x7c>)
 8001d82:	4802      	ldr	r0, [pc, #8]	; (8001d8c <main+0x78>)
 8001d84:	f7fe ff6e 	bl	8000c64 <updateDisplay>
	  if(gnss.indy == 0){
 8001d88:	e7e3      	b.n	8001d52 <main+0x3e>
 8001d8a:	bf00      	nop
 8001d8c:	20000598 	.word	0x20000598
 8001d90:	20000000 	.word	0x20000000
 8001d94:	2000059c 	.word	0x2000059c
 8001d98:	20000514 	.word	0x20000514

08001d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b090      	sub	sp, #64	; 0x40
 8001da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001da2:	f107 0318 	add.w	r3, r7, #24
 8001da6:	2228      	movs	r2, #40	; 0x28
 8001da8:	2100      	movs	r1, #0
 8001daa:	4618      	mov	r0, r3
 8001dac:	f007 fc9c 	bl	80096e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001db0:	1d3b      	adds	r3, r7, #4
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	60da      	str	r2, [r3, #12]
 8001dbc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dc6:	2310      	movs	r3, #16
 8001dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dce:	f107 0318 	add.w	r3, r7, #24
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f001 fedc 	bl	8003b90 <HAL_RCC_OscConfig>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001dde:	f000 f8e5 	bl	8001fac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001de2:	230f      	movs	r3, #15
 8001de4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001de6:	2300      	movs	r3, #0
 8001de8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dee:	2300      	movs	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001df6:	1d3b      	adds	r3, r7, #4
 8001df8:	2100      	movs	r1, #0
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f002 f94a 	bl	8004094 <HAL_RCC_ClockConfig>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001e06:	f000 f8d1 	bl	8001fac <Error_Handler>
  }
}
 8001e0a:	bf00      	nop
 8001e0c:	3740      	adds	r7, #64	; 0x40
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e18:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <MX_I2C1_Init+0x50>)
 8001e1a:	4a13      	ldr	r2, [pc, #76]	; (8001e68 <MX_I2C1_Init+0x54>)
 8001e1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001e1e:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <MX_I2C1_Init+0x50>)
 8001e20:	4a12      	ldr	r2, [pc, #72]	; (8001e6c <MX_I2C1_Init+0x58>)
 8001e22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e24:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <MX_I2C1_Init+0x50>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <MX_I2C1_Init+0x50>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <MX_I2C1_Init+0x50>)
 8001e32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e38:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <MX_I2C1_Init+0x50>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e3e:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <MX_I2C1_Init+0x50>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e44:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <MX_I2C1_Init+0x50>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e4a:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <MX_I2C1_Init+0x50>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e50:	4804      	ldr	r0, [pc, #16]	; (8001e64 <MX_I2C1_Init+0x50>)
 8001e52:	f001 f8d3 	bl	8002ffc <HAL_I2C_Init>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e5c:	f000 f8a6 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e60:	bf00      	nop
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20002648 	.word	0x20002648
 8001e68:	40005400 	.word	0x40005400
 8001e6c:	00061a80 	.word	0x00061a80

08001e70 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e74:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <MX_SPI1_Init+0x64>)
 8001e76:	4a18      	ldr	r2, [pc, #96]	; (8001ed8 <MX_SPI1_Init+0x68>)
 8001e78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e7a:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <MX_SPI1_Init+0x64>)
 8001e7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e82:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <MX_SPI1_Init+0x64>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e88:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <MX_SPI1_Init+0x64>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e8e:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <MX_SPI1_Init+0x64>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e94:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <MX_SPI1_Init+0x64>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <MX_SPI1_Init+0x64>)
 8001e9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ea0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ea2:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <MX_SPI1_Init+0x64>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ea8:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <MX_SPI1_Init+0x64>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001eae:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <MX_SPI1_Init+0x64>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001eb4:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <MX_SPI1_Init+0x64>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <MX_SPI1_Init+0x64>)
 8001ebc:	220a      	movs	r2, #10
 8001ebe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ec0:	4804      	ldr	r0, [pc, #16]	; (8001ed4 <MX_SPI1_Init+0x64>)
 8001ec2:	f002 fa75 	bl	80043b0 <HAL_SPI_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ecc:	f000 f86e 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ed0:	bf00      	nop
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	2000269c 	.word	0x2000269c
 8001ed8:	40013000 	.word	0x40013000

08001edc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ee0:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <MX_USART1_UART_Init+0x4c>)
 8001ee2:	4a12      	ldr	r2, [pc, #72]	; (8001f2c <MX_USART1_UART_Init+0x50>)
 8001ee4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001ee6:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <MX_USART1_UART_Init+0x4c>)
 8001ee8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001eec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001eee:	4b0e      	ldr	r3, [pc, #56]	; (8001f28 <MX_USART1_UART_Init+0x4c>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <MX_USART1_UART_Init+0x4c>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001efa:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <MX_USART1_UART_Init+0x4c>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f00:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <MX_USART1_UART_Init+0x4c>)
 8001f02:	220c      	movs	r2, #12
 8001f04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f06:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <MX_USART1_UART_Init+0x4c>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f0c:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <MX_USART1_UART_Init+0x4c>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f12:	4805      	ldr	r0, [pc, #20]	; (8001f28 <MX_USART1_UART_Init+0x4c>)
 8001f14:	f002 fe77 	bl	8004c06 <HAL_UART_Init>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f1e:	f000 f845 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	2000059c 	.word	0x2000059c
 8001f2c:	40013800 	.word	0x40013800

08001f30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f36:	f107 0308 	add.w	r3, r7, #8
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	605a      	str	r2, [r3, #4]
 8001f40:	609a      	str	r2, [r3, #8]
 8001f42:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f44:	4b17      	ldr	r3, [pc, #92]	; (8001fa4 <MX_GPIO_Init+0x74>)
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	4a16      	ldr	r2, [pc, #88]	; (8001fa4 <MX_GPIO_Init+0x74>)
 8001f4a:	f043 0304 	orr.w	r3, r3, #4
 8001f4e:	6193      	str	r3, [r2, #24]
 8001f50:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <MX_GPIO_Init+0x74>)
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	607b      	str	r3, [r7, #4]
 8001f5a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5c:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <MX_GPIO_Init+0x74>)
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	4a10      	ldr	r2, [pc, #64]	; (8001fa4 <MX_GPIO_Init+0x74>)
 8001f62:	f043 0308 	orr.w	r3, r3, #8
 8001f66:	6193      	str	r3, [r2, #24]
 8001f68:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <MX_GPIO_Init+0x74>)
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	f003 0308 	and.w	r3, r3, #8
 8001f70:	603b      	str	r3, [r7, #0]
 8001f72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001f74:	2201      	movs	r2, #1
 8001f76:	2110      	movs	r1, #16
 8001f78:	480b      	ldr	r0, [pc, #44]	; (8001fa8 <MX_GPIO_Init+0x78>)
 8001f7a:	f001 f827 	bl	8002fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f7e:	2310      	movs	r3, #16
 8001f80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f82:	2301      	movs	r3, #1
 8001f84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8e:	f107 0308 	add.w	r3, r7, #8
 8001f92:	4619      	mov	r1, r3
 8001f94:	4804      	ldr	r0, [pc, #16]	; (8001fa8 <MX_GPIO_Init+0x78>)
 8001f96:	f000 fe95 	bl	8002cc4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f9a:	bf00      	nop
 8001f9c:	3718      	adds	r7, #24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40010800 	.word	0x40010800

08001fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fb0:	b672      	cpsid	i
}
 8001fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fb4:	e7fe      	b.n	8001fb4 <Error_Handler+0x8>
	...

08001fb8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001fbe:	f000 fa1f 	bl	8002400 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001fc2:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	2178      	movs	r1, #120	; 0x78
 8001fca:	485b      	ldr	r0, [pc, #364]	; (8002138 <SSD1306_Init+0x180>)
 8001fcc:	f001 fa58 	bl	8003480 <HAL_I2C_IsDeviceReady>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	e0a9      	b.n	800212e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001fda:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001fde:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001fe0:	e002      	b.n	8001fe8 <SSD1306_Init+0x30>
		p--;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f9      	bne.n	8001fe2 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001fee:	22ae      	movs	r2, #174	; 0xae
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	2078      	movs	r0, #120	; 0x78
 8001ff4:	f000 fa7e 	bl	80024f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001ff8:	2220      	movs	r2, #32
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	2078      	movs	r0, #120	; 0x78
 8001ffe:	f000 fa79 	bl	80024f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002002:	2210      	movs	r2, #16
 8002004:	2100      	movs	r1, #0
 8002006:	2078      	movs	r0, #120	; 0x78
 8002008:	f000 fa74 	bl	80024f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800200c:	22b0      	movs	r2, #176	; 0xb0
 800200e:	2100      	movs	r1, #0
 8002010:	2078      	movs	r0, #120	; 0x78
 8002012:	f000 fa6f 	bl	80024f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002016:	22c8      	movs	r2, #200	; 0xc8
 8002018:	2100      	movs	r1, #0
 800201a:	2078      	movs	r0, #120	; 0x78
 800201c:	f000 fa6a 	bl	80024f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002020:	2200      	movs	r2, #0
 8002022:	2100      	movs	r1, #0
 8002024:	2078      	movs	r0, #120	; 0x78
 8002026:	f000 fa65 	bl	80024f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800202a:	2210      	movs	r2, #16
 800202c:	2100      	movs	r1, #0
 800202e:	2078      	movs	r0, #120	; 0x78
 8002030:	f000 fa60 	bl	80024f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002034:	2240      	movs	r2, #64	; 0x40
 8002036:	2100      	movs	r1, #0
 8002038:	2078      	movs	r0, #120	; 0x78
 800203a:	f000 fa5b 	bl	80024f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800203e:	2281      	movs	r2, #129	; 0x81
 8002040:	2100      	movs	r1, #0
 8002042:	2078      	movs	r0, #120	; 0x78
 8002044:	f000 fa56 	bl	80024f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002048:	22ff      	movs	r2, #255	; 0xff
 800204a:	2100      	movs	r1, #0
 800204c:	2078      	movs	r0, #120	; 0x78
 800204e:	f000 fa51 	bl	80024f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002052:	22a1      	movs	r2, #161	; 0xa1
 8002054:	2100      	movs	r1, #0
 8002056:	2078      	movs	r0, #120	; 0x78
 8002058:	f000 fa4c 	bl	80024f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800205c:	22a6      	movs	r2, #166	; 0xa6
 800205e:	2100      	movs	r1, #0
 8002060:	2078      	movs	r0, #120	; 0x78
 8002062:	f000 fa47 	bl	80024f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002066:	22a8      	movs	r2, #168	; 0xa8
 8002068:	2100      	movs	r1, #0
 800206a:	2078      	movs	r0, #120	; 0x78
 800206c:	f000 fa42 	bl	80024f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002070:	223f      	movs	r2, #63	; 0x3f
 8002072:	2100      	movs	r1, #0
 8002074:	2078      	movs	r0, #120	; 0x78
 8002076:	f000 fa3d 	bl	80024f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800207a:	22a4      	movs	r2, #164	; 0xa4
 800207c:	2100      	movs	r1, #0
 800207e:	2078      	movs	r0, #120	; 0x78
 8002080:	f000 fa38 	bl	80024f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002084:	22d3      	movs	r2, #211	; 0xd3
 8002086:	2100      	movs	r1, #0
 8002088:	2078      	movs	r0, #120	; 0x78
 800208a:	f000 fa33 	bl	80024f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800208e:	2200      	movs	r2, #0
 8002090:	2100      	movs	r1, #0
 8002092:	2078      	movs	r0, #120	; 0x78
 8002094:	f000 fa2e 	bl	80024f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002098:	22d5      	movs	r2, #213	; 0xd5
 800209a:	2100      	movs	r1, #0
 800209c:	2078      	movs	r0, #120	; 0x78
 800209e:	f000 fa29 	bl	80024f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80020a2:	22f0      	movs	r2, #240	; 0xf0
 80020a4:	2100      	movs	r1, #0
 80020a6:	2078      	movs	r0, #120	; 0x78
 80020a8:	f000 fa24 	bl	80024f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80020ac:	22d9      	movs	r2, #217	; 0xd9
 80020ae:	2100      	movs	r1, #0
 80020b0:	2078      	movs	r0, #120	; 0x78
 80020b2:	f000 fa1f 	bl	80024f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80020b6:	2222      	movs	r2, #34	; 0x22
 80020b8:	2100      	movs	r1, #0
 80020ba:	2078      	movs	r0, #120	; 0x78
 80020bc:	f000 fa1a 	bl	80024f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80020c0:	22da      	movs	r2, #218	; 0xda
 80020c2:	2100      	movs	r1, #0
 80020c4:	2078      	movs	r0, #120	; 0x78
 80020c6:	f000 fa15 	bl	80024f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80020ca:	2212      	movs	r2, #18
 80020cc:	2100      	movs	r1, #0
 80020ce:	2078      	movs	r0, #120	; 0x78
 80020d0:	f000 fa10 	bl	80024f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80020d4:	22db      	movs	r2, #219	; 0xdb
 80020d6:	2100      	movs	r1, #0
 80020d8:	2078      	movs	r0, #120	; 0x78
 80020da:	f000 fa0b 	bl	80024f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80020de:	2220      	movs	r2, #32
 80020e0:	2100      	movs	r1, #0
 80020e2:	2078      	movs	r0, #120	; 0x78
 80020e4:	f000 fa06 	bl	80024f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80020e8:	228d      	movs	r2, #141	; 0x8d
 80020ea:	2100      	movs	r1, #0
 80020ec:	2078      	movs	r0, #120	; 0x78
 80020ee:	f000 fa01 	bl	80024f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80020f2:	2214      	movs	r2, #20
 80020f4:	2100      	movs	r1, #0
 80020f6:	2078      	movs	r0, #120	; 0x78
 80020f8:	f000 f9fc 	bl	80024f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80020fc:	22af      	movs	r2, #175	; 0xaf
 80020fe:	2100      	movs	r1, #0
 8002100:	2078      	movs	r0, #120	; 0x78
 8002102:	f000 f9f7 	bl	80024f4 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002106:	222e      	movs	r2, #46	; 0x2e
 8002108:	2100      	movs	r1, #0
 800210a:	2078      	movs	r0, #120	; 0x78
 800210c:	f000 f9f2 	bl	80024f4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002110:	2000      	movs	r0, #0
 8002112:	f000 f843 	bl	800219c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8002116:	f000 f813 	bl	8002140 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800211a:	4b08      	ldr	r3, [pc, #32]	; (800213c <SSD1306_Init+0x184>)
 800211c:	2200      	movs	r2, #0
 800211e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002120:	4b06      	ldr	r3, [pc, #24]	; (800213c <SSD1306_Init+0x184>)
 8002122:	2200      	movs	r2, #0
 8002124:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002126:	4b05      	ldr	r3, [pc, #20]	; (800213c <SSD1306_Init+0x184>)
 8002128:	2201      	movs	r2, #1
 800212a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 800212c:	2301      	movs	r3, #1
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	20002648 	.word	0x20002648
 800213c:	20002af4 	.word	0x20002af4

08002140 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8002146:	2300      	movs	r3, #0
 8002148:	71fb      	strb	r3, [r7, #7]
 800214a:	e01d      	b.n	8002188 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	3b50      	subs	r3, #80	; 0x50
 8002150:	b2db      	uxtb	r3, r3
 8002152:	461a      	mov	r2, r3
 8002154:	2100      	movs	r1, #0
 8002156:	2078      	movs	r0, #120	; 0x78
 8002158:	f000 f9cc 	bl	80024f4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800215c:	2200      	movs	r2, #0
 800215e:	2100      	movs	r1, #0
 8002160:	2078      	movs	r0, #120	; 0x78
 8002162:	f000 f9c7 	bl	80024f4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002166:	2210      	movs	r2, #16
 8002168:	2100      	movs	r1, #0
 800216a:	2078      	movs	r0, #120	; 0x78
 800216c:	f000 f9c2 	bl	80024f4 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	01db      	lsls	r3, r3, #7
 8002174:	4a08      	ldr	r2, [pc, #32]	; (8002198 <SSD1306_UpdateScreen+0x58>)
 8002176:	441a      	add	r2, r3
 8002178:	2380      	movs	r3, #128	; 0x80
 800217a:	2140      	movs	r1, #64	; 0x40
 800217c:	2078      	movs	r0, #120	; 0x78
 800217e:	f000 f953 	bl	8002428 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	3301      	adds	r3, #1
 8002186:	71fb      	strb	r3, [r7, #7]
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	2b07      	cmp	r3, #7
 800218c:	d9de      	bls.n	800214c <SSD1306_UpdateScreen+0xc>
	}
}
 800218e:	bf00      	nop
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	200026f4 	.word	0x200026f4

0800219c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <SSD1306_Fill+0x14>
 80021ac:	2300      	movs	r3, #0
 80021ae:	e000      	b.n	80021b2 <SSD1306_Fill+0x16>
 80021b0:	23ff      	movs	r3, #255	; 0xff
 80021b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021b6:	4619      	mov	r1, r3
 80021b8:	4803      	ldr	r0, [pc, #12]	; (80021c8 <SSD1306_Fill+0x2c>)
 80021ba:	f007 fa95 	bl	80096e8 <memset>
}
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	200026f4 	.word	0x200026f4

080021cc <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	80fb      	strh	r3, [r7, #6]
 80021d6:	460b      	mov	r3, r1
 80021d8:	80bb      	strh	r3, [r7, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	70fb      	strb	r3, [r7, #3]
	if (
 80021de:	88fb      	ldrh	r3, [r7, #6]
 80021e0:	2b7f      	cmp	r3, #127	; 0x7f
 80021e2:	d848      	bhi.n	8002276 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80021e4:	88bb      	ldrh	r3, [r7, #4]
 80021e6:	2b3f      	cmp	r3, #63	; 0x3f
 80021e8:	d845      	bhi.n	8002276 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80021ea:	4b25      	ldr	r3, [pc, #148]	; (8002280 <SSD1306_DrawPixel+0xb4>)
 80021ec:	791b      	ldrb	r3, [r3, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d006      	beq.n	8002200 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80021f2:	78fb      	ldrb	r3, [r7, #3]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	bf0c      	ite	eq
 80021f8:	2301      	moveq	r3, #1
 80021fa:	2300      	movne	r3, #0
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002200:	78fb      	ldrb	r3, [r7, #3]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d11a      	bne.n	800223c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002206:	88fa      	ldrh	r2, [r7, #6]
 8002208:	88bb      	ldrh	r3, [r7, #4]
 800220a:	08db      	lsrs	r3, r3, #3
 800220c:	b298      	uxth	r0, r3
 800220e:	4603      	mov	r3, r0
 8002210:	01db      	lsls	r3, r3, #7
 8002212:	4413      	add	r3, r2
 8002214:	4a1b      	ldr	r2, [pc, #108]	; (8002284 <SSD1306_DrawPixel+0xb8>)
 8002216:	5cd3      	ldrb	r3, [r2, r3]
 8002218:	b25a      	sxtb	r2, r3
 800221a:	88bb      	ldrh	r3, [r7, #4]
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	2101      	movs	r1, #1
 8002222:	fa01 f303 	lsl.w	r3, r1, r3
 8002226:	b25b      	sxtb	r3, r3
 8002228:	4313      	orrs	r3, r2
 800222a:	b259      	sxtb	r1, r3
 800222c:	88fa      	ldrh	r2, [r7, #6]
 800222e:	4603      	mov	r3, r0
 8002230:	01db      	lsls	r3, r3, #7
 8002232:	4413      	add	r3, r2
 8002234:	b2c9      	uxtb	r1, r1
 8002236:	4a13      	ldr	r2, [pc, #76]	; (8002284 <SSD1306_DrawPixel+0xb8>)
 8002238:	54d1      	strb	r1, [r2, r3]
 800223a:	e01d      	b.n	8002278 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800223c:	88fa      	ldrh	r2, [r7, #6]
 800223e:	88bb      	ldrh	r3, [r7, #4]
 8002240:	08db      	lsrs	r3, r3, #3
 8002242:	b298      	uxth	r0, r3
 8002244:	4603      	mov	r3, r0
 8002246:	01db      	lsls	r3, r3, #7
 8002248:	4413      	add	r3, r2
 800224a:	4a0e      	ldr	r2, [pc, #56]	; (8002284 <SSD1306_DrawPixel+0xb8>)
 800224c:	5cd3      	ldrb	r3, [r2, r3]
 800224e:	b25a      	sxtb	r2, r3
 8002250:	88bb      	ldrh	r3, [r7, #4]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	2101      	movs	r1, #1
 8002258:	fa01 f303 	lsl.w	r3, r1, r3
 800225c:	b25b      	sxtb	r3, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	b25b      	sxtb	r3, r3
 8002262:	4013      	ands	r3, r2
 8002264:	b259      	sxtb	r1, r3
 8002266:	88fa      	ldrh	r2, [r7, #6]
 8002268:	4603      	mov	r3, r0
 800226a:	01db      	lsls	r3, r3, #7
 800226c:	4413      	add	r3, r2
 800226e:	b2c9      	uxtb	r1, r1
 8002270:	4a04      	ldr	r2, [pc, #16]	; (8002284 <SSD1306_DrawPixel+0xb8>)
 8002272:	54d1      	strb	r1, [r2, r3]
 8002274:	e000      	b.n	8002278 <SSD1306_DrawPixel+0xac>
		return;
 8002276:	bf00      	nop
	}
}
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr
 8002280:	20002af4 	.word	0x20002af4
 8002284:	200026f4 	.word	0x200026f4

08002288 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	460a      	mov	r2, r1
 8002292:	80fb      	strh	r3, [r7, #6]
 8002294:	4613      	mov	r3, r2
 8002296:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002298:	4a05      	ldr	r2, [pc, #20]	; (80022b0 <SSD1306_GotoXY+0x28>)
 800229a:	88fb      	ldrh	r3, [r7, #6]
 800229c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800229e:	4a04      	ldr	r2, [pc, #16]	; (80022b0 <SSD1306_GotoXY+0x28>)
 80022a0:	88bb      	ldrh	r3, [r7, #4]
 80022a2:	8053      	strh	r3, [r2, #2]
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bc80      	pop	{r7}
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	20002af4 	.word	0x20002af4

080022b4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	6039      	str	r1, [r7, #0]
 80022be:	71fb      	strb	r3, [r7, #7]
 80022c0:	4613      	mov	r3, r2
 80022c2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80022c4:	4b3a      	ldr	r3, [pc, #232]	; (80023b0 <SSD1306_Putc+0xfc>)
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	461a      	mov	r2, r3
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	4413      	add	r3, r2
	if (
 80022d0:	2b7f      	cmp	r3, #127	; 0x7f
 80022d2:	dc07      	bgt.n	80022e4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80022d4:	4b36      	ldr	r3, [pc, #216]	; (80023b0 <SSD1306_Putc+0xfc>)
 80022d6:	885b      	ldrh	r3, [r3, #2]
 80022d8:	461a      	mov	r2, r3
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	785b      	ldrb	r3, [r3, #1]
 80022de:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80022e0:	2b3f      	cmp	r3, #63	; 0x3f
 80022e2:	dd01      	ble.n	80022e8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	e05e      	b.n	80023a6 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	e04b      	b.n	8002386 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	79fb      	ldrb	r3, [r7, #7]
 80022f4:	3b20      	subs	r3, #32
 80022f6:	6839      	ldr	r1, [r7, #0]
 80022f8:	7849      	ldrb	r1, [r1, #1]
 80022fa:	fb01 f303 	mul.w	r3, r1, r3
 80022fe:	4619      	mov	r1, r3
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	440b      	add	r3, r1
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	4413      	add	r3, r2
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800230c:	2300      	movs	r3, #0
 800230e:	613b      	str	r3, [r7, #16]
 8002310:	e030      	b.n	8002374 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d010      	beq.n	8002344 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002322:	4b23      	ldr	r3, [pc, #140]	; (80023b0 <SSD1306_Putc+0xfc>)
 8002324:	881a      	ldrh	r2, [r3, #0]
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	b29b      	uxth	r3, r3
 800232a:	4413      	add	r3, r2
 800232c:	b298      	uxth	r0, r3
 800232e:	4b20      	ldr	r3, [pc, #128]	; (80023b0 <SSD1306_Putc+0xfc>)
 8002330:	885a      	ldrh	r2, [r3, #2]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	b29b      	uxth	r3, r3
 8002336:	4413      	add	r3, r2
 8002338:	b29b      	uxth	r3, r3
 800233a:	79ba      	ldrb	r2, [r7, #6]
 800233c:	4619      	mov	r1, r3
 800233e:	f7ff ff45 	bl	80021cc <SSD1306_DrawPixel>
 8002342:	e014      	b.n	800236e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002344:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <SSD1306_Putc+0xfc>)
 8002346:	881a      	ldrh	r2, [r3, #0]
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	b29b      	uxth	r3, r3
 800234c:	4413      	add	r3, r2
 800234e:	b298      	uxth	r0, r3
 8002350:	4b17      	ldr	r3, [pc, #92]	; (80023b0 <SSD1306_Putc+0xfc>)
 8002352:	885a      	ldrh	r2, [r3, #2]
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	b29b      	uxth	r3, r3
 8002358:	4413      	add	r3, r2
 800235a:	b299      	uxth	r1, r3
 800235c:	79bb      	ldrb	r3, [r7, #6]
 800235e:	2b00      	cmp	r3, #0
 8002360:	bf0c      	ite	eq
 8002362:	2301      	moveq	r3, #1
 8002364:	2300      	movne	r3, #0
 8002366:	b2db      	uxtb	r3, r3
 8002368:	461a      	mov	r2, r3
 800236a:	f7ff ff2f 	bl	80021cc <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	3301      	adds	r3, #1
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	4293      	cmp	r3, r2
 800237e:	d3c8      	bcc.n	8002312 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	3301      	adds	r3, #1
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	785b      	ldrb	r3, [r3, #1]
 800238a:	461a      	mov	r2, r3
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	4293      	cmp	r3, r2
 8002390:	d3ad      	bcc.n	80022ee <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002392:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <SSD1306_Putc+0xfc>)
 8002394:	881a      	ldrh	r2, [r3, #0]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	b29b      	uxth	r3, r3
 800239c:	4413      	add	r3, r2
 800239e:	b29a      	uxth	r2, r3
 80023a0:	4b03      	ldr	r3, [pc, #12]	; (80023b0 <SSD1306_Putc+0xfc>)
 80023a2:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80023a4:	79fb      	ldrb	r3, [r7, #7]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20002af4 	.word	0x20002af4

080023b4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	4613      	mov	r3, r2
 80023c0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80023c2:	e012      	b.n	80023ea <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	79fa      	ldrb	r2, [r7, #7]
 80023ca:	68b9      	ldr	r1, [r7, #8]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff ff71 	bl	80022b4 <SSD1306_Putc>
 80023d2:	4603      	mov	r3, r0
 80023d4:	461a      	mov	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d002      	beq.n	80023e4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	e008      	b.n	80023f6 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	3301      	adds	r3, #1
 80023e8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1e8      	bne.n	80023c4 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	781b      	ldrb	r3, [r3, #0]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002406:	4b07      	ldr	r3, [pc, #28]	; (8002424 <ssd1306_I2C_Init+0x24>)
 8002408:	607b      	str	r3, [r7, #4]
	while(p>0)
 800240a:	e002      	b.n	8002412 <ssd1306_I2C_Init+0x12>
		p--;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3b01      	subs	r3, #1
 8002410:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1f9      	bne.n	800240c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002418:	bf00      	nop
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr
 8002424:	0003d090 	.word	0x0003d090

08002428 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002428:	b590      	push	{r4, r7, lr}
 800242a:	b0c7      	sub	sp, #284	; 0x11c
 800242c:	af02      	add	r7, sp, #8
 800242e:	4604      	mov	r4, r0
 8002430:	4608      	mov	r0, r1
 8002432:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002436:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800243a:	600a      	str	r2, [r1, #0]
 800243c:	4619      	mov	r1, r3
 800243e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002442:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002446:	4622      	mov	r2, r4
 8002448:	701a      	strb	r2, [r3, #0]
 800244a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800244e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8002452:	4602      	mov	r2, r0
 8002454:	701a      	strb	r2, [r3, #0]
 8002456:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800245a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800245e:	460a      	mov	r2, r1
 8002460:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002462:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002466:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800246a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800246e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8002472:	7812      	ldrb	r2, [r2, #0]
 8002474:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002476:	2300      	movs	r3, #0
 8002478:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800247c:	e015      	b.n	80024aa <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800247e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002482:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002486:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800248a:	6812      	ldr	r2, [r2, #0]
 800248c:	441a      	add	r2, r3
 800248e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002492:	3301      	adds	r3, #1
 8002494:	7811      	ldrb	r1, [r2, #0]
 8002496:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800249a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800249e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80024a0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80024a4:	3301      	adds	r3, #1
 80024a6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80024aa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80024b4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80024b8:	8812      	ldrh	r2, [r2, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d8df      	bhi.n	800247e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80024be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80024c2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	b299      	uxth	r1, r3
 80024ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80024ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	3301      	adds	r3, #1
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	f107 020c 	add.w	r2, r7, #12
 80024dc:	200a      	movs	r0, #10
 80024de:	9000      	str	r0, [sp, #0]
 80024e0:	4803      	ldr	r0, [pc, #12]	; (80024f0 <ssd1306_I2C_WriteMulti+0xc8>)
 80024e2:	f000 fecf 	bl	8003284 <HAL_I2C_Master_Transmit>
}
 80024e6:	bf00      	nop
 80024e8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd90      	pop	{r4, r7, pc}
 80024f0:	20002648 	.word	0x20002648

080024f4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af02      	add	r7, sp, #8
 80024fa:	4603      	mov	r3, r0
 80024fc:	71fb      	strb	r3, [r7, #7]
 80024fe:	460b      	mov	r3, r1
 8002500:	71bb      	strb	r3, [r7, #6]
 8002502:	4613      	mov	r3, r2
 8002504:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002506:	79bb      	ldrb	r3, [r7, #6]
 8002508:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800250a:	797b      	ldrb	r3, [r7, #5]
 800250c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	b299      	uxth	r1, r3
 8002512:	f107 020c 	add.w	r2, r7, #12
 8002516:	230a      	movs	r3, #10
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	2302      	movs	r3, #2
 800251c:	4803      	ldr	r0, [pc, #12]	; (800252c <ssd1306_I2C_Write+0x38>)
 800251e:	f000 feb1 	bl	8003284 <HAL_I2C_Master_Transmit>
}
 8002522:	bf00      	nop
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20002648 	.word	0x20002648

08002530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002536:	4b15      	ldr	r3, [pc, #84]	; (800258c <HAL_MspInit+0x5c>)
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	4a14      	ldr	r2, [pc, #80]	; (800258c <HAL_MspInit+0x5c>)
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	6193      	str	r3, [r2, #24]
 8002542:	4b12      	ldr	r3, [pc, #72]	; (800258c <HAL_MspInit+0x5c>)
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	60bb      	str	r3, [r7, #8]
 800254c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800254e:	4b0f      	ldr	r3, [pc, #60]	; (800258c <HAL_MspInit+0x5c>)
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	4a0e      	ldr	r2, [pc, #56]	; (800258c <HAL_MspInit+0x5c>)
 8002554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002558:	61d3      	str	r3, [r2, #28]
 800255a:	4b0c      	ldr	r3, [pc, #48]	; (800258c <HAL_MspInit+0x5c>)
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002562:	607b      	str	r3, [r7, #4]
 8002564:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002566:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <HAL_MspInit+0x60>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	4a04      	ldr	r2, [pc, #16]	; (8002590 <HAL_MspInit+0x60>)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002582:	bf00      	nop
 8002584:	3714      	adds	r7, #20
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr
 800258c:	40021000 	.word	0x40021000
 8002590:	40010000 	.word	0x40010000

08002594 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800259c:	f107 0310 	add.w	r3, r7, #16
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]
 80025a8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a15      	ldr	r2, [pc, #84]	; (8002604 <HAL_I2C_MspInit+0x70>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d123      	bne.n	80025fc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b4:	4b14      	ldr	r3, [pc, #80]	; (8002608 <HAL_I2C_MspInit+0x74>)
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	4a13      	ldr	r2, [pc, #76]	; (8002608 <HAL_I2C_MspInit+0x74>)
 80025ba:	f043 0308 	orr.w	r3, r3, #8
 80025be:	6193      	str	r3, [r2, #24]
 80025c0:	4b11      	ldr	r3, [pc, #68]	; (8002608 <HAL_I2C_MspInit+0x74>)
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025cc:	23c0      	movs	r3, #192	; 0xc0
 80025ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025d0:	2312      	movs	r3, #18
 80025d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025d4:	2303      	movs	r3, #3
 80025d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d8:	f107 0310 	add.w	r3, r7, #16
 80025dc:	4619      	mov	r1, r3
 80025de:	480b      	ldr	r0, [pc, #44]	; (800260c <HAL_I2C_MspInit+0x78>)
 80025e0:	f000 fb70 	bl	8002cc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025e4:	4b08      	ldr	r3, [pc, #32]	; (8002608 <HAL_I2C_MspInit+0x74>)
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	4a07      	ldr	r2, [pc, #28]	; (8002608 <HAL_I2C_MspInit+0x74>)
 80025ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025ee:	61d3      	str	r3, [r2, #28]
 80025f0:	4b05      	ldr	r3, [pc, #20]	; (8002608 <HAL_I2C_MspInit+0x74>)
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80025fc:	bf00      	nop
 80025fe:	3720      	adds	r7, #32
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40005400 	.word	0x40005400
 8002608:	40021000 	.word	0x40021000
 800260c:	40010c00 	.word	0x40010c00

08002610 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b088      	sub	sp, #32
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002618:	f107 0310 	add.w	r3, r7, #16
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a1b      	ldr	r2, [pc, #108]	; (8002698 <HAL_SPI_MspInit+0x88>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d12f      	bne.n	8002690 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002630:	4b1a      	ldr	r3, [pc, #104]	; (800269c <HAL_SPI_MspInit+0x8c>)
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	4a19      	ldr	r2, [pc, #100]	; (800269c <HAL_SPI_MspInit+0x8c>)
 8002636:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800263a:	6193      	str	r3, [r2, #24]
 800263c:	4b17      	ldr	r3, [pc, #92]	; (800269c <HAL_SPI_MspInit+0x8c>)
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002648:	4b14      	ldr	r3, [pc, #80]	; (800269c <HAL_SPI_MspInit+0x8c>)
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	4a13      	ldr	r2, [pc, #76]	; (800269c <HAL_SPI_MspInit+0x8c>)
 800264e:	f043 0304 	orr.w	r3, r3, #4
 8002652:	6193      	str	r3, [r2, #24]
 8002654:	4b11      	ldr	r3, [pc, #68]	; (800269c <HAL_SPI_MspInit+0x8c>)
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002660:	23a0      	movs	r3, #160	; 0xa0
 8002662:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002664:	2302      	movs	r3, #2
 8002666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002668:	2303      	movs	r3, #3
 800266a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266c:	f107 0310 	add.w	r3, r7, #16
 8002670:	4619      	mov	r1, r3
 8002672:	480b      	ldr	r0, [pc, #44]	; (80026a0 <HAL_SPI_MspInit+0x90>)
 8002674:	f000 fb26 	bl	8002cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002678:	2340      	movs	r3, #64	; 0x40
 800267a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	2300      	movs	r3, #0
 8002682:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002684:	f107 0310 	add.w	r3, r7, #16
 8002688:	4619      	mov	r1, r3
 800268a:	4805      	ldr	r0, [pc, #20]	; (80026a0 <HAL_SPI_MspInit+0x90>)
 800268c:	f000 fb1a 	bl	8002cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002690:	bf00      	nop
 8002692:	3720      	adds	r7, #32
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40013000 	.word	0x40013000
 800269c:	40021000 	.word	0x40021000
 80026a0:	40010800 	.word	0x40010800

080026a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ac:	f107 0310 	add.w	r3, r7, #16
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a20      	ldr	r2, [pc, #128]	; (8002740 <HAL_UART_MspInit+0x9c>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d139      	bne.n	8002738 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026c4:	4b1f      	ldr	r3, [pc, #124]	; (8002744 <HAL_UART_MspInit+0xa0>)
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	4a1e      	ldr	r2, [pc, #120]	; (8002744 <HAL_UART_MspInit+0xa0>)
 80026ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ce:	6193      	str	r3, [r2, #24]
 80026d0:	4b1c      	ldr	r3, [pc, #112]	; (8002744 <HAL_UART_MspInit+0xa0>)
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026dc:	4b19      	ldr	r3, [pc, #100]	; (8002744 <HAL_UART_MspInit+0xa0>)
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	4a18      	ldr	r2, [pc, #96]	; (8002744 <HAL_UART_MspInit+0xa0>)
 80026e2:	f043 0304 	orr.w	r3, r3, #4
 80026e6:	6193      	str	r3, [r2, #24]
 80026e8:	4b16      	ldr	r3, [pc, #88]	; (8002744 <HAL_UART_MspInit+0xa0>)
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fa:	2302      	movs	r3, #2
 80026fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026fe:	2303      	movs	r3, #3
 8002700:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002702:	f107 0310 	add.w	r3, r7, #16
 8002706:	4619      	mov	r1, r3
 8002708:	480f      	ldr	r0, [pc, #60]	; (8002748 <HAL_UART_MspInit+0xa4>)
 800270a:	f000 fadb 	bl	8002cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800270e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002712:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800271c:	f107 0310 	add.w	r3, r7, #16
 8002720:	4619      	mov	r1, r3
 8002722:	4809      	ldr	r0, [pc, #36]	; (8002748 <HAL_UART_MspInit+0xa4>)
 8002724:	f000 face 	bl	8002cc4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002728:	2200      	movs	r2, #0
 800272a:	2100      	movs	r1, #0
 800272c:	2025      	movs	r0, #37	; 0x25
 800272e:	f000 f9e0 	bl	8002af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002732:	2025      	movs	r0, #37	; 0x25
 8002734:	f000 f9f9 	bl	8002b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002738:	bf00      	nop
 800273a:	3720      	adds	r7, #32
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40013800 	.word	0x40013800
 8002744:	40021000 	.word	0x40021000
 8002748:	40010800 	.word	0x40010800

0800274c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002750:	e7fe      	b.n	8002750 <NMI_Handler+0x4>

08002752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002752:	b480      	push	{r7}
 8002754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002756:	e7fe      	b.n	8002756 <HardFault_Handler+0x4>

08002758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800275c:	e7fe      	b.n	800275c <MemManage_Handler+0x4>

0800275e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800275e:	b480      	push	{r7}
 8002760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002762:	e7fe      	b.n	8002762 <BusFault_Handler+0x4>

08002764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002768:	e7fe      	b.n	8002768 <UsageFault_Handler+0x4>

0800276a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800276a:	b480      	push	{r7}
 800276c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr

08002776 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002776:	b480      	push	{r7}
 8002778:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800277a:	bf00      	nop
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr

08002782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002782:	b480      	push	{r7}
 8002784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	46bd      	mov	sp, r7
 800278a:	bc80      	pop	{r7}
 800278c:	4770      	bx	lr
	...

08002790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8002794:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <SysTick_Handler+0x34>)
 8002796:	881b      	ldrh	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <SysTick_Handler+0x18>
		Timer1--;
 800279c:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <SysTick_Handler+0x34>)
 800279e:	881b      	ldrh	r3, [r3, #0]
 80027a0:	3b01      	subs	r3, #1
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	4b07      	ldr	r3, [pc, #28]	; (80027c4 <SysTick_Handler+0x34>)
 80027a6:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 80027a8:	4b07      	ldr	r3, [pc, #28]	; (80027c8 <SysTick_Handler+0x38>)
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <SysTick_Handler+0x2c>
		Timer2--;
 80027b0:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <SysTick_Handler+0x38>)
 80027b2:	881b      	ldrh	r3, [r3, #0]
 80027b4:	3b01      	subs	r3, #1
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	4b03      	ldr	r3, [pc, #12]	; (80027c8 <SysTick_Handler+0x38>)
 80027ba:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027bc:	f000 f882 	bl	80028c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027c0:	bf00      	nop
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20002640 	.word	0x20002640
 80027c8:	20002642 	.word	0x20002642

080027cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80027d0:	4802      	ldr	r0, [pc, #8]	; (80027dc <USART1_IRQHandler+0x10>)
 80027d2:	f002 fa8d 	bl	8004cf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	2000059c 	.word	0x2000059c

080027e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr

080027ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027ec:	f7ff fff8 	bl	80027e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027f0:	480b      	ldr	r0, [pc, #44]	; (8002820 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80027f2:	490c      	ldr	r1, [pc, #48]	; (8002824 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80027f4:	4a0c      	ldr	r2, [pc, #48]	; (8002828 <LoopFillZerobss+0x16>)
  movs r3, #0
 80027f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027f8:	e002      	b.n	8002800 <LoopCopyDataInit>

080027fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027fe:	3304      	adds	r3, #4

08002800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002804:	d3f9      	bcc.n	80027fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002806:	4a09      	ldr	r2, [pc, #36]	; (800282c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002808:	4c09      	ldr	r4, [pc, #36]	; (8002830 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800280a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800280c:	e001      	b.n	8002812 <LoopFillZerobss>

0800280e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800280e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002810:	3204      	adds	r2, #4

08002812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002814:	d3fb      	bcc.n	800280e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002816:	f006 ff6f 	bl	80096f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800281a:	f7ff fa7b 	bl	8001d14 <main>
  bx lr
 800281e:	4770      	bx	lr
  ldr r0, =_sdata
 8002820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002824:	2000057c 	.word	0x2000057c
  ldr r2, =_sidata
 8002828:	0800c590 	.word	0x0800c590
  ldr r2, =_sbss
 800282c:	2000057c 	.word	0x2000057c
  ldr r4, =_ebss
 8002830:	20002d34 	.word	0x20002d34

08002834 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002834:	e7fe      	b.n	8002834 <ADC1_2_IRQHandler>
	...

08002838 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800283c:	4b08      	ldr	r3, [pc, #32]	; (8002860 <HAL_Init+0x28>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a07      	ldr	r2, [pc, #28]	; (8002860 <HAL_Init+0x28>)
 8002842:	f043 0310 	orr.w	r3, r3, #16
 8002846:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002848:	2003      	movs	r0, #3
 800284a:	f000 f947 	bl	8002adc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800284e:	200f      	movs	r0, #15
 8002850:	f000 f808 	bl	8002864 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002854:	f7ff fe6c 	bl	8002530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40022000 	.word	0x40022000

08002864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800286c:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <HAL_InitTick+0x54>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	4b12      	ldr	r3, [pc, #72]	; (80028bc <HAL_InitTick+0x58>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	4619      	mov	r1, r3
 8002876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800287a:	fbb3 f3f1 	udiv	r3, r3, r1
 800287e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002882:	4618      	mov	r0, r3
 8002884:	f000 f95f 	bl	8002b46 <HAL_SYSTICK_Config>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e00e      	b.n	80028b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b0f      	cmp	r3, #15
 8002896:	d80a      	bhi.n	80028ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002898:	2200      	movs	r2, #0
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	f04f 30ff 	mov.w	r0, #4294967295
 80028a0:	f000 f927 	bl	8002af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028a4:	4a06      	ldr	r2, [pc, #24]	; (80028c0 <HAL_InitTick+0x5c>)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
 80028ac:	e000      	b.n	80028b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	2000055c 	.word	0x2000055c
 80028bc:	20000564 	.word	0x20000564
 80028c0:	20000560 	.word	0x20000560

080028c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028c8:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <HAL_IncTick+0x1c>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	461a      	mov	r2, r3
 80028ce:	4b05      	ldr	r3, [pc, #20]	; (80028e4 <HAL_IncTick+0x20>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4413      	add	r3, r2
 80028d4:	4a03      	ldr	r2, [pc, #12]	; (80028e4 <HAL_IncTick+0x20>)
 80028d6:	6013      	str	r3, [r2, #0]
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr
 80028e0:	20000564 	.word	0x20000564
 80028e4:	20002afc 	.word	0x20002afc

080028e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  return uwTick;
 80028ec:	4b02      	ldr	r3, [pc, #8]	; (80028f8 <HAL_GetTick+0x10>)
 80028ee:	681b      	ldr	r3, [r3, #0]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr
 80028f8:	20002afc 	.word	0x20002afc

080028fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002904:	f7ff fff0 	bl	80028e8 <HAL_GetTick>
 8002908:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002914:	d005      	beq.n	8002922 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002916:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <HAL_Delay+0x44>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4413      	add	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002922:	bf00      	nop
 8002924:	f7ff ffe0 	bl	80028e8 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	429a      	cmp	r2, r3
 8002932:	d8f7      	bhi.n	8002924 <HAL_Delay+0x28>
  {
  }
}
 8002934:	bf00      	nop
 8002936:	bf00      	nop
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	20000564 	.word	0x20000564

08002944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002954:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <__NVIC_SetPriorityGrouping+0x44>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002960:	4013      	ands	r3, r2
 8002962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800296c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002976:	4a04      	ldr	r2, [pc, #16]	; (8002988 <__NVIC_SetPriorityGrouping+0x44>)
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	60d3      	str	r3, [r2, #12]
}
 800297c:	bf00      	nop
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	e000ed00 	.word	0xe000ed00

0800298c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002990:	4b04      	ldr	r3, [pc, #16]	; (80029a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	0a1b      	lsrs	r3, r3, #8
 8002996:	f003 0307 	and.w	r3, r3, #7
}
 800299a:	4618      	mov	r0, r3
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	e000ed00 	.word	0xe000ed00

080029a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	db0b      	blt.n	80029d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	f003 021f 	and.w	r2, r3, #31
 80029c0:	4906      	ldr	r1, [pc, #24]	; (80029dc <__NVIC_EnableIRQ+0x34>)
 80029c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c6:	095b      	lsrs	r3, r3, #5
 80029c8:	2001      	movs	r0, #1
 80029ca:	fa00 f202 	lsl.w	r2, r0, r2
 80029ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr
 80029dc:	e000e100 	.word	0xe000e100

080029e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	6039      	str	r1, [r7, #0]
 80029ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	db0a      	blt.n	8002a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	b2da      	uxtb	r2, r3
 80029f8:	490c      	ldr	r1, [pc, #48]	; (8002a2c <__NVIC_SetPriority+0x4c>)
 80029fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fe:	0112      	lsls	r2, r2, #4
 8002a00:	b2d2      	uxtb	r2, r2
 8002a02:	440b      	add	r3, r1
 8002a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a08:	e00a      	b.n	8002a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	4908      	ldr	r1, [pc, #32]	; (8002a30 <__NVIC_SetPriority+0x50>)
 8002a10:	79fb      	ldrb	r3, [r7, #7]
 8002a12:	f003 030f 	and.w	r3, r3, #15
 8002a16:	3b04      	subs	r3, #4
 8002a18:	0112      	lsls	r2, r2, #4
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	761a      	strb	r2, [r3, #24]
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bc80      	pop	{r7}
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	e000e100 	.word	0xe000e100
 8002a30:	e000ed00 	.word	0xe000ed00

08002a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b089      	sub	sp, #36	; 0x24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	f1c3 0307 	rsb	r3, r3, #7
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	bf28      	it	cs
 8002a52:	2304      	movcs	r3, #4
 8002a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	3304      	adds	r3, #4
 8002a5a:	2b06      	cmp	r3, #6
 8002a5c:	d902      	bls.n	8002a64 <NVIC_EncodePriority+0x30>
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	3b03      	subs	r3, #3
 8002a62:	e000      	b.n	8002a66 <NVIC_EncodePriority+0x32>
 8002a64:	2300      	movs	r3, #0
 8002a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a68:	f04f 32ff 	mov.w	r2, #4294967295
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	43da      	mvns	r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	401a      	ands	r2, r3
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	fa01 f303 	lsl.w	r3, r1, r3
 8002a86:	43d9      	mvns	r1, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a8c:	4313      	orrs	r3, r2
         );
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3724      	adds	r7, #36	; 0x24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr

08002a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aa8:	d301      	bcc.n	8002aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e00f      	b.n	8002ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aae:	4a0a      	ldr	r2, [pc, #40]	; (8002ad8 <SysTick_Config+0x40>)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ab6:	210f      	movs	r1, #15
 8002ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8002abc:	f7ff ff90 	bl	80029e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ac0:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <SysTick_Config+0x40>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ac6:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <SysTick_Config+0x40>)
 8002ac8:	2207      	movs	r2, #7
 8002aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	e000e010 	.word	0xe000e010

08002adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7ff ff2d 	bl	8002944 <__NVIC_SetPriorityGrouping>
}
 8002aea:	bf00      	nop
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b086      	sub	sp, #24
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	4603      	mov	r3, r0
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	607a      	str	r2, [r7, #4]
 8002afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b04:	f7ff ff42 	bl	800298c <__NVIC_GetPriorityGrouping>
 8002b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	68b9      	ldr	r1, [r7, #8]
 8002b0e:	6978      	ldr	r0, [r7, #20]
 8002b10:	f7ff ff90 	bl	8002a34 <NVIC_EncodePriority>
 8002b14:	4602      	mov	r2, r0
 8002b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff ff5f 	bl	80029e0 <__NVIC_SetPriority>
}
 8002b22:	bf00      	nop
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b082      	sub	sp, #8
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	4603      	mov	r3, r0
 8002b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff ff35 	bl	80029a8 <__NVIC_EnableIRQ>
}
 8002b3e:	bf00      	nop
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b082      	sub	sp, #8
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7ff ffa2 	bl	8002a98 <SysTick_Config>
 8002b54:	4603      	mov	r3, r0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b085      	sub	sp, #20
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d008      	beq.n	8002b88 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2204      	movs	r2, #4
 8002b7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e020      	b.n	8002bca <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 020e 	bic.w	r2, r2, #14
 8002b96:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0201 	bic.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d005      	beq.n	8002bf8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2204      	movs	r2, #4
 8002bf0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	73fb      	strb	r3, [r7, #15]
 8002bf6:	e051      	b.n	8002c9c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 020e 	bic.w	r2, r2, #14
 8002c06:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0201 	bic.w	r2, r2, #1
 8002c16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a22      	ldr	r2, [pc, #136]	; (8002ca8 <HAL_DMA_Abort_IT+0xd4>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d029      	beq.n	8002c76 <HAL_DMA_Abort_IT+0xa2>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a21      	ldr	r2, [pc, #132]	; (8002cac <HAL_DMA_Abort_IT+0xd8>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d022      	beq.n	8002c72 <HAL_DMA_Abort_IT+0x9e>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a1f      	ldr	r2, [pc, #124]	; (8002cb0 <HAL_DMA_Abort_IT+0xdc>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d01a      	beq.n	8002c6c <HAL_DMA_Abort_IT+0x98>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a1e      	ldr	r2, [pc, #120]	; (8002cb4 <HAL_DMA_Abort_IT+0xe0>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d012      	beq.n	8002c66 <HAL_DMA_Abort_IT+0x92>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a1c      	ldr	r2, [pc, #112]	; (8002cb8 <HAL_DMA_Abort_IT+0xe4>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d00a      	beq.n	8002c60 <HAL_DMA_Abort_IT+0x8c>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a1b      	ldr	r2, [pc, #108]	; (8002cbc <HAL_DMA_Abort_IT+0xe8>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d102      	bne.n	8002c5a <HAL_DMA_Abort_IT+0x86>
 8002c54:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c58:	e00e      	b.n	8002c78 <HAL_DMA_Abort_IT+0xa4>
 8002c5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c5e:	e00b      	b.n	8002c78 <HAL_DMA_Abort_IT+0xa4>
 8002c60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c64:	e008      	b.n	8002c78 <HAL_DMA_Abort_IT+0xa4>
 8002c66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c6a:	e005      	b.n	8002c78 <HAL_DMA_Abort_IT+0xa4>
 8002c6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c70:	e002      	b.n	8002c78 <HAL_DMA_Abort_IT+0xa4>
 8002c72:	2310      	movs	r3, #16
 8002c74:	e000      	b.n	8002c78 <HAL_DMA_Abort_IT+0xa4>
 8002c76:	2301      	movs	r3, #1
 8002c78:	4a11      	ldr	r2, [pc, #68]	; (8002cc0 <HAL_DMA_Abort_IT+0xec>)
 8002c7a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	4798      	blx	r3
    } 
  }
  return status;
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40020008 	.word	0x40020008
 8002cac:	4002001c 	.word	0x4002001c
 8002cb0:	40020030 	.word	0x40020030
 8002cb4:	40020044 	.word	0x40020044
 8002cb8:	40020058 	.word	0x40020058
 8002cbc:	4002006c 	.word	0x4002006c
 8002cc0:	40020000 	.word	0x40020000

08002cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b08b      	sub	sp, #44	; 0x2c
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cd6:	e169      	b.n	8002fac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002cd8:	2201      	movs	r2, #1
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	69fa      	ldr	r2, [r7, #28]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	f040 8158 	bne.w	8002fa6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	4a9a      	ldr	r2, [pc, #616]	; (8002f64 <HAL_GPIO_Init+0x2a0>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d05e      	beq.n	8002dbe <HAL_GPIO_Init+0xfa>
 8002d00:	4a98      	ldr	r2, [pc, #608]	; (8002f64 <HAL_GPIO_Init+0x2a0>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d875      	bhi.n	8002df2 <HAL_GPIO_Init+0x12e>
 8002d06:	4a98      	ldr	r2, [pc, #608]	; (8002f68 <HAL_GPIO_Init+0x2a4>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d058      	beq.n	8002dbe <HAL_GPIO_Init+0xfa>
 8002d0c:	4a96      	ldr	r2, [pc, #600]	; (8002f68 <HAL_GPIO_Init+0x2a4>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d86f      	bhi.n	8002df2 <HAL_GPIO_Init+0x12e>
 8002d12:	4a96      	ldr	r2, [pc, #600]	; (8002f6c <HAL_GPIO_Init+0x2a8>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d052      	beq.n	8002dbe <HAL_GPIO_Init+0xfa>
 8002d18:	4a94      	ldr	r2, [pc, #592]	; (8002f6c <HAL_GPIO_Init+0x2a8>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d869      	bhi.n	8002df2 <HAL_GPIO_Init+0x12e>
 8002d1e:	4a94      	ldr	r2, [pc, #592]	; (8002f70 <HAL_GPIO_Init+0x2ac>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d04c      	beq.n	8002dbe <HAL_GPIO_Init+0xfa>
 8002d24:	4a92      	ldr	r2, [pc, #584]	; (8002f70 <HAL_GPIO_Init+0x2ac>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d863      	bhi.n	8002df2 <HAL_GPIO_Init+0x12e>
 8002d2a:	4a92      	ldr	r2, [pc, #584]	; (8002f74 <HAL_GPIO_Init+0x2b0>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d046      	beq.n	8002dbe <HAL_GPIO_Init+0xfa>
 8002d30:	4a90      	ldr	r2, [pc, #576]	; (8002f74 <HAL_GPIO_Init+0x2b0>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d85d      	bhi.n	8002df2 <HAL_GPIO_Init+0x12e>
 8002d36:	2b12      	cmp	r3, #18
 8002d38:	d82a      	bhi.n	8002d90 <HAL_GPIO_Init+0xcc>
 8002d3a:	2b12      	cmp	r3, #18
 8002d3c:	d859      	bhi.n	8002df2 <HAL_GPIO_Init+0x12e>
 8002d3e:	a201      	add	r2, pc, #4	; (adr r2, 8002d44 <HAL_GPIO_Init+0x80>)
 8002d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d44:	08002dbf 	.word	0x08002dbf
 8002d48:	08002d99 	.word	0x08002d99
 8002d4c:	08002dab 	.word	0x08002dab
 8002d50:	08002ded 	.word	0x08002ded
 8002d54:	08002df3 	.word	0x08002df3
 8002d58:	08002df3 	.word	0x08002df3
 8002d5c:	08002df3 	.word	0x08002df3
 8002d60:	08002df3 	.word	0x08002df3
 8002d64:	08002df3 	.word	0x08002df3
 8002d68:	08002df3 	.word	0x08002df3
 8002d6c:	08002df3 	.word	0x08002df3
 8002d70:	08002df3 	.word	0x08002df3
 8002d74:	08002df3 	.word	0x08002df3
 8002d78:	08002df3 	.word	0x08002df3
 8002d7c:	08002df3 	.word	0x08002df3
 8002d80:	08002df3 	.word	0x08002df3
 8002d84:	08002df3 	.word	0x08002df3
 8002d88:	08002da1 	.word	0x08002da1
 8002d8c:	08002db5 	.word	0x08002db5
 8002d90:	4a79      	ldr	r2, [pc, #484]	; (8002f78 <HAL_GPIO_Init+0x2b4>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d013      	beq.n	8002dbe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d96:	e02c      	b.n	8002df2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	623b      	str	r3, [r7, #32]
          break;
 8002d9e:	e029      	b.n	8002df4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	3304      	adds	r3, #4
 8002da6:	623b      	str	r3, [r7, #32]
          break;
 8002da8:	e024      	b.n	8002df4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	3308      	adds	r3, #8
 8002db0:	623b      	str	r3, [r7, #32]
          break;
 8002db2:	e01f      	b.n	8002df4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	330c      	adds	r3, #12
 8002dba:	623b      	str	r3, [r7, #32]
          break;
 8002dbc:	e01a      	b.n	8002df4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d102      	bne.n	8002dcc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002dc6:	2304      	movs	r3, #4
 8002dc8:	623b      	str	r3, [r7, #32]
          break;
 8002dca:	e013      	b.n	8002df4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d105      	bne.n	8002de0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002dd4:	2308      	movs	r3, #8
 8002dd6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	69fa      	ldr	r2, [r7, #28]
 8002ddc:	611a      	str	r2, [r3, #16]
          break;
 8002dde:	e009      	b.n	8002df4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002de0:	2308      	movs	r3, #8
 8002de2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	69fa      	ldr	r2, [r7, #28]
 8002de8:	615a      	str	r2, [r3, #20]
          break;
 8002dea:	e003      	b.n	8002df4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002dec:	2300      	movs	r3, #0
 8002dee:	623b      	str	r3, [r7, #32]
          break;
 8002df0:	e000      	b.n	8002df4 <HAL_GPIO_Init+0x130>
          break;
 8002df2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	2bff      	cmp	r3, #255	; 0xff
 8002df8:	d801      	bhi.n	8002dfe <HAL_GPIO_Init+0x13a>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	e001      	b.n	8002e02 <HAL_GPIO_Init+0x13e>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	3304      	adds	r3, #4
 8002e02:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	2bff      	cmp	r3, #255	; 0xff
 8002e08:	d802      	bhi.n	8002e10 <HAL_GPIO_Init+0x14c>
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	e002      	b.n	8002e16 <HAL_GPIO_Init+0x152>
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	3b08      	subs	r3, #8
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	210f      	movs	r1, #15
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	fa01 f303 	lsl.w	r3, r1, r3
 8002e24:	43db      	mvns	r3, r3
 8002e26:	401a      	ands	r2, r3
 8002e28:	6a39      	ldr	r1, [r7, #32]
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e30:	431a      	orrs	r2, r3
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 80b1 	beq.w	8002fa6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e44:	4b4d      	ldr	r3, [pc, #308]	; (8002f7c <HAL_GPIO_Init+0x2b8>)
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	4a4c      	ldr	r2, [pc, #304]	; (8002f7c <HAL_GPIO_Init+0x2b8>)
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	6193      	str	r3, [r2, #24]
 8002e50:	4b4a      	ldr	r3, [pc, #296]	; (8002f7c <HAL_GPIO_Init+0x2b8>)
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	60bb      	str	r3, [r7, #8]
 8002e5a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e5c:	4a48      	ldr	r2, [pc, #288]	; (8002f80 <HAL_GPIO_Init+0x2bc>)
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	089b      	lsrs	r3, r3, #2
 8002e62:	3302      	adds	r3, #2
 8002e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e68:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	f003 0303 	and.w	r3, r3, #3
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	220f      	movs	r2, #15
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a40      	ldr	r2, [pc, #256]	; (8002f84 <HAL_GPIO_Init+0x2c0>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d013      	beq.n	8002eb0 <HAL_GPIO_Init+0x1ec>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a3f      	ldr	r2, [pc, #252]	; (8002f88 <HAL_GPIO_Init+0x2c4>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d00d      	beq.n	8002eac <HAL_GPIO_Init+0x1e8>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a3e      	ldr	r2, [pc, #248]	; (8002f8c <HAL_GPIO_Init+0x2c8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d007      	beq.n	8002ea8 <HAL_GPIO_Init+0x1e4>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a3d      	ldr	r2, [pc, #244]	; (8002f90 <HAL_GPIO_Init+0x2cc>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d101      	bne.n	8002ea4 <HAL_GPIO_Init+0x1e0>
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e006      	b.n	8002eb2 <HAL_GPIO_Init+0x1ee>
 8002ea4:	2304      	movs	r3, #4
 8002ea6:	e004      	b.n	8002eb2 <HAL_GPIO_Init+0x1ee>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	e002      	b.n	8002eb2 <HAL_GPIO_Init+0x1ee>
 8002eac:	2301      	movs	r3, #1
 8002eae:	e000      	b.n	8002eb2 <HAL_GPIO_Init+0x1ee>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eb4:	f002 0203 	and.w	r2, r2, #3
 8002eb8:	0092      	lsls	r2, r2, #2
 8002eba:	4093      	lsls	r3, r2
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ec2:	492f      	ldr	r1, [pc, #188]	; (8002f80 <HAL_GPIO_Init+0x2bc>)
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec6:	089b      	lsrs	r3, r3, #2
 8002ec8:	3302      	adds	r3, #2
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d006      	beq.n	8002eea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002edc:	4b2d      	ldr	r3, [pc, #180]	; (8002f94 <HAL_GPIO_Init+0x2d0>)
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	492c      	ldr	r1, [pc, #176]	; (8002f94 <HAL_GPIO_Init+0x2d0>)
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	608b      	str	r3, [r1, #8]
 8002ee8:	e006      	b.n	8002ef8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002eea:	4b2a      	ldr	r3, [pc, #168]	; (8002f94 <HAL_GPIO_Init+0x2d0>)
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	4928      	ldr	r1, [pc, #160]	; (8002f94 <HAL_GPIO_Init+0x2d0>)
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d006      	beq.n	8002f12 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f04:	4b23      	ldr	r3, [pc, #140]	; (8002f94 <HAL_GPIO_Init+0x2d0>)
 8002f06:	68da      	ldr	r2, [r3, #12]
 8002f08:	4922      	ldr	r1, [pc, #136]	; (8002f94 <HAL_GPIO_Init+0x2d0>)
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	60cb      	str	r3, [r1, #12]
 8002f10:	e006      	b.n	8002f20 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f12:	4b20      	ldr	r3, [pc, #128]	; (8002f94 <HAL_GPIO_Init+0x2d0>)
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	491e      	ldr	r1, [pc, #120]	; (8002f94 <HAL_GPIO_Init+0x2d0>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d006      	beq.n	8002f3a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f2c:	4b19      	ldr	r3, [pc, #100]	; (8002f94 <HAL_GPIO_Init+0x2d0>)
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	4918      	ldr	r1, [pc, #96]	; (8002f94 <HAL_GPIO_Init+0x2d0>)
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	604b      	str	r3, [r1, #4]
 8002f38:	e006      	b.n	8002f48 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f3a:	4b16      	ldr	r3, [pc, #88]	; (8002f94 <HAL_GPIO_Init+0x2d0>)
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	43db      	mvns	r3, r3
 8002f42:	4914      	ldr	r1, [pc, #80]	; (8002f94 <HAL_GPIO_Init+0x2d0>)
 8002f44:	4013      	ands	r3, r2
 8002f46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d021      	beq.n	8002f98 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f54:	4b0f      	ldr	r3, [pc, #60]	; (8002f94 <HAL_GPIO_Init+0x2d0>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	490e      	ldr	r1, [pc, #56]	; (8002f94 <HAL_GPIO_Init+0x2d0>)
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	600b      	str	r3, [r1, #0]
 8002f60:	e021      	b.n	8002fa6 <HAL_GPIO_Init+0x2e2>
 8002f62:	bf00      	nop
 8002f64:	10320000 	.word	0x10320000
 8002f68:	10310000 	.word	0x10310000
 8002f6c:	10220000 	.word	0x10220000
 8002f70:	10210000 	.word	0x10210000
 8002f74:	10120000 	.word	0x10120000
 8002f78:	10110000 	.word	0x10110000
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	40010000 	.word	0x40010000
 8002f84:	40010800 	.word	0x40010800
 8002f88:	40010c00 	.word	0x40010c00
 8002f8c:	40011000 	.word	0x40011000
 8002f90:	40011400 	.word	0x40011400
 8002f94:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f98:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <HAL_GPIO_Init+0x304>)
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	4909      	ldr	r1, [pc, #36]	; (8002fc8 <HAL_GPIO_Init+0x304>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	3301      	adds	r3, #1
 8002faa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f47f ae8e 	bne.w	8002cd8 <HAL_GPIO_Init+0x14>
  }
}
 8002fbc:	bf00      	nop
 8002fbe:	bf00      	nop
 8002fc0:	372c      	adds	r7, #44	; 0x2c
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr
 8002fc8:	40010400 	.word	0x40010400

08002fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	807b      	strh	r3, [r7, #2]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fdc:	787b      	ldrb	r3, [r7, #1]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fe2:	887a      	ldrh	r2, [r7, #2]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002fe8:	e003      	b.n	8002ff2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002fea:	887b      	ldrh	r3, [r7, #2]
 8002fec:	041a      	lsls	r2, r3, #16
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	611a      	str	r2, [r3, #16]
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc80      	pop	{r7}
 8002ffa:	4770      	bx	lr

08002ffc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e12b      	b.n	8003266 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d106      	bne.n	8003028 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7ff fab6 	bl	8002594 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2224      	movs	r2, #36	; 0x24
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0201 	bic.w	r2, r2, #1
 800303e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800304e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800305e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003060:	f001 f960 	bl	8004324 <HAL_RCC_GetPCLK1Freq>
 8003064:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	4a81      	ldr	r2, [pc, #516]	; (8003270 <HAL_I2C_Init+0x274>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d807      	bhi.n	8003080 <HAL_I2C_Init+0x84>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4a80      	ldr	r2, [pc, #512]	; (8003274 <HAL_I2C_Init+0x278>)
 8003074:	4293      	cmp	r3, r2
 8003076:	bf94      	ite	ls
 8003078:	2301      	movls	r3, #1
 800307a:	2300      	movhi	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	e006      	b.n	800308e <HAL_I2C_Init+0x92>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4a7d      	ldr	r2, [pc, #500]	; (8003278 <HAL_I2C_Init+0x27c>)
 8003084:	4293      	cmp	r3, r2
 8003086:	bf94      	ite	ls
 8003088:	2301      	movls	r3, #1
 800308a:	2300      	movhi	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e0e7      	b.n	8003266 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	4a78      	ldr	r2, [pc, #480]	; (800327c <HAL_I2C_Init+0x280>)
 800309a:	fba2 2303 	umull	r2, r3, r2, r3
 800309e:	0c9b      	lsrs	r3, r3, #18
 80030a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	4a6a      	ldr	r2, [pc, #424]	; (8003270 <HAL_I2C_Init+0x274>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d802      	bhi.n	80030d0 <HAL_I2C_Init+0xd4>
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	3301      	adds	r3, #1
 80030ce:	e009      	b.n	80030e4 <HAL_I2C_Init+0xe8>
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030d6:	fb02 f303 	mul.w	r3, r2, r3
 80030da:	4a69      	ldr	r2, [pc, #420]	; (8003280 <HAL_I2C_Init+0x284>)
 80030dc:	fba2 2303 	umull	r2, r3, r2, r3
 80030e0:	099b      	lsrs	r3, r3, #6
 80030e2:	3301      	adds	r3, #1
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6812      	ldr	r2, [r2, #0]
 80030e8:	430b      	orrs	r3, r1
 80030ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	495c      	ldr	r1, [pc, #368]	; (8003270 <HAL_I2C_Init+0x274>)
 8003100:	428b      	cmp	r3, r1
 8003102:	d819      	bhi.n	8003138 <HAL_I2C_Init+0x13c>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	1e59      	subs	r1, r3, #1
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003112:	1c59      	adds	r1, r3, #1
 8003114:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003118:	400b      	ands	r3, r1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00a      	beq.n	8003134 <HAL_I2C_Init+0x138>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	1e59      	subs	r1, r3, #1
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	fbb1 f3f3 	udiv	r3, r1, r3
 800312c:	3301      	adds	r3, #1
 800312e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003132:	e051      	b.n	80031d8 <HAL_I2C_Init+0x1dc>
 8003134:	2304      	movs	r3, #4
 8003136:	e04f      	b.n	80031d8 <HAL_I2C_Init+0x1dc>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d111      	bne.n	8003164 <HAL_I2C_Init+0x168>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	1e58      	subs	r0, r3, #1
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6859      	ldr	r1, [r3, #4]
 8003148:	460b      	mov	r3, r1
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	440b      	add	r3, r1
 800314e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003152:	3301      	adds	r3, #1
 8003154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003158:	2b00      	cmp	r3, #0
 800315a:	bf0c      	ite	eq
 800315c:	2301      	moveq	r3, #1
 800315e:	2300      	movne	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	e012      	b.n	800318a <HAL_I2C_Init+0x18e>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	1e58      	subs	r0, r3, #1
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6859      	ldr	r1, [r3, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	0099      	lsls	r1, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	fbb0 f3f3 	udiv	r3, r0, r3
 800317a:	3301      	adds	r3, #1
 800317c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003180:	2b00      	cmp	r3, #0
 8003182:	bf0c      	ite	eq
 8003184:	2301      	moveq	r3, #1
 8003186:	2300      	movne	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_I2C_Init+0x196>
 800318e:	2301      	movs	r3, #1
 8003190:	e022      	b.n	80031d8 <HAL_I2C_Init+0x1dc>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10e      	bne.n	80031b8 <HAL_I2C_Init+0x1bc>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1e58      	subs	r0, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6859      	ldr	r1, [r3, #4]
 80031a2:	460b      	mov	r3, r1
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	440b      	add	r3, r1
 80031a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ac:	3301      	adds	r3, #1
 80031ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031b6:	e00f      	b.n	80031d8 <HAL_I2C_Init+0x1dc>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	1e58      	subs	r0, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6859      	ldr	r1, [r3, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	0099      	lsls	r1, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ce:	3301      	adds	r3, #1
 80031d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	6809      	ldr	r1, [r1, #0]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69da      	ldr	r2, [r3, #28]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003206:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6911      	ldr	r1, [r2, #16]
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	68d2      	ldr	r2, [r2, #12]
 8003212:	4311      	orrs	r1, r2
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6812      	ldr	r2, [r2, #0]
 8003218:	430b      	orrs	r3, r1
 800321a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	695a      	ldr	r2, [r3, #20]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0201 	orr.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2220      	movs	r2, #32
 8003252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	000186a0 	.word	0x000186a0
 8003274:	001e847f 	.word	0x001e847f
 8003278:	003d08ff 	.word	0x003d08ff
 800327c:	431bde83 	.word	0x431bde83
 8003280:	10624dd3 	.word	0x10624dd3

08003284 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b088      	sub	sp, #32
 8003288:	af02      	add	r7, sp, #8
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	607a      	str	r2, [r7, #4]
 800328e:	461a      	mov	r2, r3
 8003290:	460b      	mov	r3, r1
 8003292:	817b      	strh	r3, [r7, #10]
 8003294:	4613      	mov	r3, r2
 8003296:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003298:	f7ff fb26 	bl	80028e8 <HAL_GetTick>
 800329c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b20      	cmp	r3, #32
 80032a8:	f040 80e0 	bne.w	800346c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	2319      	movs	r3, #25
 80032b2:	2201      	movs	r2, #1
 80032b4:	4970      	ldr	r1, [pc, #448]	; (8003478 <HAL_I2C_Master_Transmit+0x1f4>)
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 fa92 	bl	80037e0 <I2C_WaitOnFlagUntilTimeout>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80032c2:	2302      	movs	r3, #2
 80032c4:	e0d3      	b.n	800346e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d101      	bne.n	80032d4 <HAL_I2C_Master_Transmit+0x50>
 80032d0:	2302      	movs	r3, #2
 80032d2:	e0cc      	b.n	800346e <HAL_I2C_Master_Transmit+0x1ea>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d007      	beq.n	80032fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f042 0201 	orr.w	r2, r2, #1
 80032f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003308:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2221      	movs	r2, #33	; 0x21
 800330e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2210      	movs	r2, #16
 8003316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	893a      	ldrh	r2, [r7, #8]
 800332a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003330:	b29a      	uxth	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4a50      	ldr	r2, [pc, #320]	; (800347c <HAL_I2C_Master_Transmit+0x1f8>)
 800333a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800333c:	8979      	ldrh	r1, [r7, #10]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	6a3a      	ldr	r2, [r7, #32]
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 f9ca 	bl	80036dc <I2C_MasterRequestWrite>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e08d      	b.n	800346e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003352:	2300      	movs	r3, #0
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	613b      	str	r3, [r7, #16]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	613b      	str	r3, [r7, #16]
 8003366:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003368:	e066      	b.n	8003438 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	6a39      	ldr	r1, [r7, #32]
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f000 fb50 	bl	8003a14 <I2C_WaitOnTXEFlagUntilTimeout>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00d      	beq.n	8003396 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	2b04      	cmp	r3, #4
 8003380:	d107      	bne.n	8003392 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003390:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e06b      	b.n	800346e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	781a      	ldrb	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	1c5a      	adds	r2, r3, #1
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033be:	3b01      	subs	r3, #1
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d11b      	bne.n	800340c <HAL_I2C_Master_Transmit+0x188>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d017      	beq.n	800340c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	781a      	ldrb	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	1c5a      	adds	r2, r3, #1
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	3b01      	subs	r3, #1
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003404:	3b01      	subs	r3, #1
 8003406:	b29a      	uxth	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	6a39      	ldr	r1, [r7, #32]
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f000 fb47 	bl	8003aa4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00d      	beq.n	8003438 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003420:	2b04      	cmp	r3, #4
 8003422:	d107      	bne.n	8003434 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003432:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e01a      	b.n	800346e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800343c:	2b00      	cmp	r3, #0
 800343e:	d194      	bne.n	800336a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800344e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003468:	2300      	movs	r3, #0
 800346a:	e000      	b.n	800346e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800346c:	2302      	movs	r3, #2
  }
}
 800346e:	4618      	mov	r0, r3
 8003470:	3718      	adds	r7, #24
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	00100002 	.word	0x00100002
 800347c:	ffff0000 	.word	0xffff0000

08003480 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b08a      	sub	sp, #40	; 0x28
 8003484:	af02      	add	r7, sp, #8
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	607a      	str	r2, [r7, #4]
 800348a:	603b      	str	r3, [r7, #0]
 800348c:	460b      	mov	r3, r1
 800348e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003490:	f7ff fa2a 	bl	80028e8 <HAL_GetTick>
 8003494:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003496:	2300      	movs	r3, #0
 8003498:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b20      	cmp	r3, #32
 80034a4:	f040 8111 	bne.w	80036ca <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	2319      	movs	r3, #25
 80034ae:	2201      	movs	r2, #1
 80034b0:	4988      	ldr	r1, [pc, #544]	; (80036d4 <HAL_I2C_IsDeviceReady+0x254>)
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 f994 	bl	80037e0 <I2C_WaitOnFlagUntilTimeout>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80034be:	2302      	movs	r3, #2
 80034c0:	e104      	b.n	80036cc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_I2C_IsDeviceReady+0x50>
 80034cc:	2302      	movs	r3, #2
 80034ce:	e0fd      	b.n	80036cc <HAL_I2C_IsDeviceReady+0x24c>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d007      	beq.n	80034f6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f042 0201 	orr.w	r2, r2, #1
 80034f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003504:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2224      	movs	r2, #36	; 0x24
 800350a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4a70      	ldr	r2, [pc, #448]	; (80036d8 <HAL_I2C_IsDeviceReady+0x258>)
 8003518:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003528:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	2200      	movs	r2, #0
 8003532:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f000 f952 	bl	80037e0 <I2C_WaitOnFlagUntilTimeout>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00d      	beq.n	800355e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003550:	d103      	bne.n	800355a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003558:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e0b6      	b.n	80036cc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800355e:	897b      	ldrh	r3, [r7, #10]
 8003560:	b2db      	uxtb	r3, r3
 8003562:	461a      	mov	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800356c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800356e:	f7ff f9bb 	bl	80028e8 <HAL_GetTick>
 8003572:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b02      	cmp	r3, #2
 8003580:	bf0c      	ite	eq
 8003582:	2301      	moveq	r3, #1
 8003584:	2300      	movne	r3, #0
 8003586:	b2db      	uxtb	r3, r3
 8003588:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003598:	bf0c      	ite	eq
 800359a:	2301      	moveq	r3, #1
 800359c:	2300      	movne	r3, #0
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80035a2:	e025      	b.n	80035f0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035a4:	f7ff f9a0 	bl	80028e8 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d302      	bcc.n	80035ba <HAL_I2C_IsDeviceReady+0x13a>
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d103      	bne.n	80035c2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	22a0      	movs	r2, #160	; 0xa0
 80035be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	bf0c      	ite	eq
 80035d0:	2301      	moveq	r3, #1
 80035d2:	2300      	movne	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e6:	bf0c      	ite	eq
 80035e8:	2301      	moveq	r3, #1
 80035ea:	2300      	movne	r3, #0
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2ba0      	cmp	r3, #160	; 0xa0
 80035fa:	d005      	beq.n	8003608 <HAL_I2C_IsDeviceReady+0x188>
 80035fc:	7dfb      	ldrb	r3, [r7, #23]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d102      	bne.n	8003608 <HAL_I2C_IsDeviceReady+0x188>
 8003602:	7dbb      	ldrb	r3, [r7, #22]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0cd      	beq.n	80035a4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b02      	cmp	r3, #2
 800361c:	d129      	bne.n	8003672 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800362c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800362e:	2300      	movs	r3, #0
 8003630:	613b      	str	r3, [r7, #16]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	613b      	str	r3, [r7, #16]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	613b      	str	r3, [r7, #16]
 8003642:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	2319      	movs	r3, #25
 800364a:	2201      	movs	r2, #1
 800364c:	4921      	ldr	r1, [pc, #132]	; (80036d4 <HAL_I2C_IsDeviceReady+0x254>)
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 f8c6 	bl	80037e0 <I2C_WaitOnFlagUntilTimeout>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e036      	b.n	80036cc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2220      	movs	r2, #32
 8003662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800366e:	2300      	movs	r3, #0
 8003670:	e02c      	b.n	80036cc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003680:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800368a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	2319      	movs	r3, #25
 8003692:	2201      	movs	r2, #1
 8003694:	490f      	ldr	r1, [pc, #60]	; (80036d4 <HAL_I2C_IsDeviceReady+0x254>)
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f000 f8a2 	bl	80037e0 <I2C_WaitOnFlagUntilTimeout>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e012      	b.n	80036cc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	3301      	adds	r3, #1
 80036aa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	f4ff af32 	bcc.w	800351a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2220      	movs	r2, #32
 80036ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e000      	b.n	80036cc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80036ca:	2302      	movs	r3, #2
  }
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3720      	adds	r7, #32
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	00100002 	.word	0x00100002
 80036d8:	ffff0000 	.word	0xffff0000

080036dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b088      	sub	sp, #32
 80036e0:	af02      	add	r7, sp, #8
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	607a      	str	r2, [r7, #4]
 80036e6:	603b      	str	r3, [r7, #0]
 80036e8:	460b      	mov	r3, r1
 80036ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	d006      	beq.n	8003706 <I2C_MasterRequestWrite+0x2a>
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d003      	beq.n	8003706 <I2C_MasterRequestWrite+0x2a>
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003704:	d108      	bne.n	8003718 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	e00b      	b.n	8003730 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371c:	2b12      	cmp	r3, #18
 800371e:	d107      	bne.n	8003730 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800372e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 f84f 	bl	80037e0 <I2C_WaitOnFlagUntilTimeout>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00d      	beq.n	8003764 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003756:	d103      	bne.n	8003760 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800375e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e035      	b.n	80037d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800376c:	d108      	bne.n	8003780 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800376e:	897b      	ldrh	r3, [r7, #10]
 8003770:	b2db      	uxtb	r3, r3
 8003772:	461a      	mov	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800377c:	611a      	str	r2, [r3, #16]
 800377e:	e01b      	b.n	80037b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003780:	897b      	ldrh	r3, [r7, #10]
 8003782:	11db      	asrs	r3, r3, #7
 8003784:	b2db      	uxtb	r3, r3
 8003786:	f003 0306 	and.w	r3, r3, #6
 800378a:	b2db      	uxtb	r3, r3
 800378c:	f063 030f 	orn	r3, r3, #15
 8003790:	b2da      	uxtb	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	490e      	ldr	r1, [pc, #56]	; (80037d8 <I2C_MasterRequestWrite+0xfc>)
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 f898 	bl	80038d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e010      	b.n	80037d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037ae:	897b      	ldrh	r3, [r7, #10]
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	4907      	ldr	r1, [pc, #28]	; (80037dc <I2C_MasterRequestWrite+0x100>)
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f000 f888 	bl	80038d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e000      	b.n	80037d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3718      	adds	r7, #24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	00010008 	.word	0x00010008
 80037dc:	00010002 	.word	0x00010002

080037e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	603b      	str	r3, [r7, #0]
 80037ec:	4613      	mov	r3, r2
 80037ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037f0:	e048      	b.n	8003884 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f8:	d044      	beq.n	8003884 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037fa:	f7ff f875 	bl	80028e8 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	429a      	cmp	r2, r3
 8003808:	d302      	bcc.n	8003810 <I2C_WaitOnFlagUntilTimeout+0x30>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d139      	bne.n	8003884 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	0c1b      	lsrs	r3, r3, #16
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b01      	cmp	r3, #1
 8003818:	d10d      	bne.n	8003836 <I2C_WaitOnFlagUntilTimeout+0x56>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	43da      	mvns	r2, r3
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	4013      	ands	r3, r2
 8003826:	b29b      	uxth	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	bf0c      	ite	eq
 800382c:	2301      	moveq	r3, #1
 800382e:	2300      	movne	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	461a      	mov	r2, r3
 8003834:	e00c      	b.n	8003850 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	43da      	mvns	r2, r3
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	4013      	ands	r3, r2
 8003842:	b29b      	uxth	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	bf0c      	ite	eq
 8003848:	2301      	moveq	r3, #1
 800384a:	2300      	movne	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	461a      	mov	r2, r3
 8003850:	79fb      	ldrb	r3, [r7, #7]
 8003852:	429a      	cmp	r2, r3
 8003854:	d116      	bne.n	8003884 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	f043 0220 	orr.w	r2, r3, #32
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e023      	b.n	80038cc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	0c1b      	lsrs	r3, r3, #16
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b01      	cmp	r3, #1
 800388c:	d10d      	bne.n	80038aa <I2C_WaitOnFlagUntilTimeout+0xca>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	43da      	mvns	r2, r3
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	4013      	ands	r3, r2
 800389a:	b29b      	uxth	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	bf0c      	ite	eq
 80038a0:	2301      	moveq	r3, #1
 80038a2:	2300      	movne	r3, #0
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	461a      	mov	r2, r3
 80038a8:	e00c      	b.n	80038c4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	43da      	mvns	r2, r3
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	4013      	ands	r3, r2
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	bf0c      	ite	eq
 80038bc:	2301      	moveq	r3, #1
 80038be:	2300      	movne	r3, #0
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	461a      	mov	r2, r3
 80038c4:	79fb      	ldrb	r3, [r7, #7]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d093      	beq.n	80037f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
 80038e0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038e2:	e071      	b.n	80039c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038f2:	d123      	bne.n	800393c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003902:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800390c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2220      	movs	r2, #32
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	f043 0204 	orr.w	r2, r3, #4
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e067      	b.n	8003a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003942:	d041      	beq.n	80039c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003944:	f7fe ffd0 	bl	80028e8 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	429a      	cmp	r2, r3
 8003952:	d302      	bcc.n	800395a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d136      	bne.n	80039c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	0c1b      	lsrs	r3, r3, #16
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b01      	cmp	r3, #1
 8003962:	d10c      	bne.n	800397e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	43da      	mvns	r2, r3
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	4013      	ands	r3, r2
 8003970:	b29b      	uxth	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	bf14      	ite	ne
 8003976:	2301      	movne	r3, #1
 8003978:	2300      	moveq	r3, #0
 800397a:	b2db      	uxtb	r3, r3
 800397c:	e00b      	b.n	8003996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	43da      	mvns	r2, r3
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	4013      	ands	r3, r2
 800398a:	b29b      	uxth	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	bf14      	ite	ne
 8003990:	2301      	movne	r3, #1
 8003992:	2300      	moveq	r3, #0
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d016      	beq.n	80039c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2220      	movs	r2, #32
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b4:	f043 0220 	orr.w	r2, r3, #32
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e021      	b.n	8003a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	0c1b      	lsrs	r3, r3, #16
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d10c      	bne.n	80039ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	43da      	mvns	r2, r3
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	4013      	ands	r3, r2
 80039de:	b29b      	uxth	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	bf14      	ite	ne
 80039e4:	2301      	movne	r3, #1
 80039e6:	2300      	moveq	r3, #0
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	e00b      	b.n	8003a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	43da      	mvns	r2, r3
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	4013      	ands	r3, r2
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	bf14      	ite	ne
 80039fe:	2301      	movne	r3, #1
 8003a00:	2300      	moveq	r3, #0
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f47f af6d 	bne.w	80038e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a20:	e034      	b.n	8003a8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 f886 	bl	8003b34 <I2C_IsAcknowledgeFailed>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e034      	b.n	8003a9c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a38:	d028      	beq.n	8003a8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a3a:	f7fe ff55 	bl	80028e8 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d302      	bcc.n	8003a50 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d11d      	bne.n	8003a8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a5a:	2b80      	cmp	r3, #128	; 0x80
 8003a5c:	d016      	beq.n	8003a8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2220      	movs	r2, #32
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a78:	f043 0220 	orr.w	r2, r3, #32
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e007      	b.n	8003a9c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a96:	2b80      	cmp	r3, #128	; 0x80
 8003a98:	d1c3      	bne.n	8003a22 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ab0:	e034      	b.n	8003b1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 f83e 	bl	8003b34 <I2C_IsAcknowledgeFailed>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e034      	b.n	8003b2c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac8:	d028      	beq.n	8003b1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aca:	f7fe ff0d 	bl	80028e8 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d302      	bcc.n	8003ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d11d      	bne.n	8003b1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	f003 0304 	and.w	r3, r3, #4
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d016      	beq.n	8003b1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b08:	f043 0220 	orr.w	r2, r3, #32
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e007      	b.n	8003b2c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d1c3      	bne.n	8003ab2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b4a:	d11b      	bne.n	8003b84 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b54:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b70:	f043 0204 	orr.w	r2, r3, #4
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e000      	b.n	8003b86 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bc80      	pop	{r7}
 8003b8e:	4770      	bx	lr

08003b90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e272      	b.n	8004088 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 8087 	beq.w	8003cbe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bb0:	4b92      	ldr	r3, [pc, #584]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f003 030c 	and.w	r3, r3, #12
 8003bb8:	2b04      	cmp	r3, #4
 8003bba:	d00c      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003bbc:	4b8f      	ldr	r3, [pc, #572]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f003 030c 	and.w	r3, r3, #12
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d112      	bne.n	8003bee <HAL_RCC_OscConfig+0x5e>
 8003bc8:	4b8c      	ldr	r3, [pc, #560]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd4:	d10b      	bne.n	8003bee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd6:	4b89      	ldr	r3, [pc, #548]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d06c      	beq.n	8003cbc <HAL_RCC_OscConfig+0x12c>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d168      	bne.n	8003cbc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e24c      	b.n	8004088 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf6:	d106      	bne.n	8003c06 <HAL_RCC_OscConfig+0x76>
 8003bf8:	4b80      	ldr	r3, [pc, #512]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a7f      	ldr	r2, [pc, #508]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c02:	6013      	str	r3, [r2, #0]
 8003c04:	e02e      	b.n	8003c64 <HAL_RCC_OscConfig+0xd4>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10c      	bne.n	8003c28 <HAL_RCC_OscConfig+0x98>
 8003c0e:	4b7b      	ldr	r3, [pc, #492]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a7a      	ldr	r2, [pc, #488]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003c14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	4b78      	ldr	r3, [pc, #480]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a77      	ldr	r2, [pc, #476]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003c20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	e01d      	b.n	8003c64 <HAL_RCC_OscConfig+0xd4>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c30:	d10c      	bne.n	8003c4c <HAL_RCC_OscConfig+0xbc>
 8003c32:	4b72      	ldr	r3, [pc, #456]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a71      	ldr	r2, [pc, #452]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003c38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	4b6f      	ldr	r3, [pc, #444]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a6e      	ldr	r2, [pc, #440]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	e00b      	b.n	8003c64 <HAL_RCC_OscConfig+0xd4>
 8003c4c:	4b6b      	ldr	r3, [pc, #428]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a6a      	ldr	r2, [pc, #424]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003c52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c56:	6013      	str	r3, [r2, #0]
 8003c58:	4b68      	ldr	r3, [pc, #416]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a67      	ldr	r2, [pc, #412]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003c5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d013      	beq.n	8003c94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6c:	f7fe fe3c 	bl	80028e8 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c74:	f7fe fe38 	bl	80028e8 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b64      	cmp	r3, #100	; 0x64
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e200      	b.n	8004088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c86:	4b5d      	ldr	r3, [pc, #372]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0f0      	beq.n	8003c74 <HAL_RCC_OscConfig+0xe4>
 8003c92:	e014      	b.n	8003cbe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c94:	f7fe fe28 	bl	80028e8 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c9c:	f7fe fe24 	bl	80028e8 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b64      	cmp	r3, #100	; 0x64
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e1ec      	b.n	8004088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cae:	4b53      	ldr	r3, [pc, #332]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1f0      	bne.n	8003c9c <HAL_RCC_OscConfig+0x10c>
 8003cba:	e000      	b.n	8003cbe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d063      	beq.n	8003d92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cca:	4b4c      	ldr	r3, [pc, #304]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f003 030c 	and.w	r3, r3, #12
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00b      	beq.n	8003cee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003cd6:	4b49      	ldr	r3, [pc, #292]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f003 030c 	and.w	r3, r3, #12
 8003cde:	2b08      	cmp	r3, #8
 8003ce0:	d11c      	bne.n	8003d1c <HAL_RCC_OscConfig+0x18c>
 8003ce2:	4b46      	ldr	r3, [pc, #280]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d116      	bne.n	8003d1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cee:	4b43      	ldr	r3, [pc, #268]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d005      	beq.n	8003d06 <HAL_RCC_OscConfig+0x176>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d001      	beq.n	8003d06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e1c0      	b.n	8004088 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d06:	4b3d      	ldr	r3, [pc, #244]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	4939      	ldr	r1, [pc, #228]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d1a:	e03a      	b.n	8003d92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d020      	beq.n	8003d66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d24:	4b36      	ldr	r3, [pc, #216]	; (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003d26:	2201      	movs	r2, #1
 8003d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2a:	f7fe fddd 	bl	80028e8 <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d32:	f7fe fdd9 	bl	80028e8 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e1a1      	b.n	8004088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d44:	4b2d      	ldr	r3, [pc, #180]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0f0      	beq.n	8003d32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d50:	4b2a      	ldr	r3, [pc, #168]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	4927      	ldr	r1, [pc, #156]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	600b      	str	r3, [r1, #0]
 8003d64:	e015      	b.n	8003d92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d66:	4b26      	ldr	r3, [pc, #152]	; (8003e00 <HAL_RCC_OscConfig+0x270>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d6c:	f7fe fdbc 	bl	80028e8 <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d74:	f7fe fdb8 	bl	80028e8 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e180      	b.n	8004088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d86:	4b1d      	ldr	r3, [pc, #116]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1f0      	bne.n	8003d74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d03a      	beq.n	8003e14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d019      	beq.n	8003dda <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003da6:	4b17      	ldr	r3, [pc, #92]	; (8003e04 <HAL_RCC_OscConfig+0x274>)
 8003da8:	2201      	movs	r2, #1
 8003daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dac:	f7fe fd9c 	bl	80028e8 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003db4:	f7fe fd98 	bl	80028e8 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e160      	b.n	8004088 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dc6:	4b0d      	ldr	r3, [pc, #52]	; (8003dfc <HAL_RCC_OscConfig+0x26c>)
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0f0      	beq.n	8003db4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003dd2:	2001      	movs	r0, #1
 8003dd4:	f000 face 	bl	8004374 <RCC_Delay>
 8003dd8:	e01c      	b.n	8003e14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dda:	4b0a      	ldr	r3, [pc, #40]	; (8003e04 <HAL_RCC_OscConfig+0x274>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003de0:	f7fe fd82 	bl	80028e8 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de6:	e00f      	b.n	8003e08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003de8:	f7fe fd7e 	bl	80028e8 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d908      	bls.n	8003e08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e146      	b.n	8004088 <HAL_RCC_OscConfig+0x4f8>
 8003dfa:	bf00      	nop
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	42420000 	.word	0x42420000
 8003e04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e08:	4b92      	ldr	r3, [pc, #584]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1e9      	bne.n	8003de8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 80a6 	beq.w	8003f6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e22:	2300      	movs	r3, #0
 8003e24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e26:	4b8b      	ldr	r3, [pc, #556]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10d      	bne.n	8003e4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e32:	4b88      	ldr	r3, [pc, #544]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	4a87      	ldr	r2, [pc, #540]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e3c:	61d3      	str	r3, [r2, #28]
 8003e3e:	4b85      	ldr	r3, [pc, #532]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e46:	60bb      	str	r3, [r7, #8]
 8003e48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e4e:	4b82      	ldr	r3, [pc, #520]	; (8004058 <HAL_RCC_OscConfig+0x4c8>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d118      	bne.n	8003e8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e5a:	4b7f      	ldr	r3, [pc, #508]	; (8004058 <HAL_RCC_OscConfig+0x4c8>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a7e      	ldr	r2, [pc, #504]	; (8004058 <HAL_RCC_OscConfig+0x4c8>)
 8003e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e66:	f7fe fd3f 	bl	80028e8 <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e6c:	e008      	b.n	8003e80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e6e:	f7fe fd3b 	bl	80028e8 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b64      	cmp	r3, #100	; 0x64
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e103      	b.n	8004088 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e80:	4b75      	ldr	r3, [pc, #468]	; (8004058 <HAL_RCC_OscConfig+0x4c8>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0f0      	beq.n	8003e6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d106      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x312>
 8003e94:	4b6f      	ldr	r3, [pc, #444]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	4a6e      	ldr	r2, [pc, #440]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003e9a:	f043 0301 	orr.w	r3, r3, #1
 8003e9e:	6213      	str	r3, [r2, #32]
 8003ea0:	e02d      	b.n	8003efe <HAL_RCC_OscConfig+0x36e>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10c      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x334>
 8003eaa:	4b6a      	ldr	r3, [pc, #424]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	4a69      	ldr	r2, [pc, #420]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003eb0:	f023 0301 	bic.w	r3, r3, #1
 8003eb4:	6213      	str	r3, [r2, #32]
 8003eb6:	4b67      	ldr	r3, [pc, #412]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	4a66      	ldr	r2, [pc, #408]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003ebc:	f023 0304 	bic.w	r3, r3, #4
 8003ec0:	6213      	str	r3, [r2, #32]
 8003ec2:	e01c      	b.n	8003efe <HAL_RCC_OscConfig+0x36e>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	2b05      	cmp	r3, #5
 8003eca:	d10c      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x356>
 8003ecc:	4b61      	ldr	r3, [pc, #388]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	4a60      	ldr	r2, [pc, #384]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003ed2:	f043 0304 	orr.w	r3, r3, #4
 8003ed6:	6213      	str	r3, [r2, #32]
 8003ed8:	4b5e      	ldr	r3, [pc, #376]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	4a5d      	ldr	r2, [pc, #372]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003ede:	f043 0301 	orr.w	r3, r3, #1
 8003ee2:	6213      	str	r3, [r2, #32]
 8003ee4:	e00b      	b.n	8003efe <HAL_RCC_OscConfig+0x36e>
 8003ee6:	4b5b      	ldr	r3, [pc, #364]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	4a5a      	ldr	r2, [pc, #360]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003eec:	f023 0301 	bic.w	r3, r3, #1
 8003ef0:	6213      	str	r3, [r2, #32]
 8003ef2:	4b58      	ldr	r3, [pc, #352]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	4a57      	ldr	r2, [pc, #348]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003ef8:	f023 0304 	bic.w	r3, r3, #4
 8003efc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d015      	beq.n	8003f32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f06:	f7fe fcef 	bl	80028e8 <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f0c:	e00a      	b.n	8003f24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f0e:	f7fe fceb 	bl	80028e8 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e0b1      	b.n	8004088 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f24:	4b4b      	ldr	r3, [pc, #300]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0ee      	beq.n	8003f0e <HAL_RCC_OscConfig+0x37e>
 8003f30:	e014      	b.n	8003f5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f32:	f7fe fcd9 	bl	80028e8 <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f38:	e00a      	b.n	8003f50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f3a:	f7fe fcd5 	bl	80028e8 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e09b      	b.n	8004088 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f50:	4b40      	ldr	r3, [pc, #256]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1ee      	bne.n	8003f3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f5c:	7dfb      	ldrb	r3, [r7, #23]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d105      	bne.n	8003f6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f62:	4b3c      	ldr	r3, [pc, #240]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	4a3b      	ldr	r2, [pc, #236]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003f68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 8087 	beq.w	8004086 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f78:	4b36      	ldr	r3, [pc, #216]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f003 030c 	and.w	r3, r3, #12
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d061      	beq.n	8004048 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d146      	bne.n	800401a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f8c:	4b33      	ldr	r3, [pc, #204]	; (800405c <HAL_RCC_OscConfig+0x4cc>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f92:	f7fe fca9 	bl	80028e8 <HAL_GetTick>
 8003f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f98:	e008      	b.n	8003fac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f9a:	f7fe fca5 	bl	80028e8 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e06d      	b.n	8004088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fac:	4b29      	ldr	r3, [pc, #164]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1f0      	bne.n	8003f9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc0:	d108      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003fc2:	4b24      	ldr	r3, [pc, #144]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	4921      	ldr	r1, [pc, #132]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fd4:	4b1f      	ldr	r3, [pc, #124]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a19      	ldr	r1, [r3, #32]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	430b      	orrs	r3, r1
 8003fe6:	491b      	ldr	r1, [pc, #108]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fec:	4b1b      	ldr	r3, [pc, #108]	; (800405c <HAL_RCC_OscConfig+0x4cc>)
 8003fee:	2201      	movs	r2, #1
 8003ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff2:	f7fe fc79 	bl	80028e8 <HAL_GetTick>
 8003ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ff8:	e008      	b.n	800400c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ffa:	f7fe fc75 	bl	80028e8 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d901      	bls.n	800400c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e03d      	b.n	8004088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800400c:	4b11      	ldr	r3, [pc, #68]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0f0      	beq.n	8003ffa <HAL_RCC_OscConfig+0x46a>
 8004018:	e035      	b.n	8004086 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800401a:	4b10      	ldr	r3, [pc, #64]	; (800405c <HAL_RCC_OscConfig+0x4cc>)
 800401c:	2200      	movs	r2, #0
 800401e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004020:	f7fe fc62 	bl	80028e8 <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004028:	f7fe fc5e 	bl	80028e8 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e026      	b.n	8004088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800403a:	4b06      	ldr	r3, [pc, #24]	; (8004054 <HAL_RCC_OscConfig+0x4c4>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1f0      	bne.n	8004028 <HAL_RCC_OscConfig+0x498>
 8004046:	e01e      	b.n	8004086 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d107      	bne.n	8004060 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e019      	b.n	8004088 <HAL_RCC_OscConfig+0x4f8>
 8004054:	40021000 	.word	0x40021000
 8004058:	40007000 	.word	0x40007000
 800405c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004060:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <HAL_RCC_OscConfig+0x500>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	429a      	cmp	r2, r3
 8004072:	d106      	bne.n	8004082 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407e:	429a      	cmp	r2, r3
 8004080:	d001      	beq.n	8004086 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e000      	b.n	8004088 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3718      	adds	r7, #24
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40021000 	.word	0x40021000

08004094 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d101      	bne.n	80040a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e0d0      	b.n	800424a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040a8:	4b6a      	ldr	r3, [pc, #424]	; (8004254 <HAL_RCC_ClockConfig+0x1c0>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d910      	bls.n	80040d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b6:	4b67      	ldr	r3, [pc, #412]	; (8004254 <HAL_RCC_ClockConfig+0x1c0>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f023 0207 	bic.w	r2, r3, #7
 80040be:	4965      	ldr	r1, [pc, #404]	; (8004254 <HAL_RCC_ClockConfig+0x1c0>)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c6:	4b63      	ldr	r3, [pc, #396]	; (8004254 <HAL_RCC_ClockConfig+0x1c0>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0307 	and.w	r3, r3, #7
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d001      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e0b8      	b.n	800424a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d020      	beq.n	8004126 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040f0:	4b59      	ldr	r3, [pc, #356]	; (8004258 <HAL_RCC_ClockConfig+0x1c4>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	4a58      	ldr	r2, [pc, #352]	; (8004258 <HAL_RCC_ClockConfig+0x1c4>)
 80040f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80040fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0308 	and.w	r3, r3, #8
 8004104:	2b00      	cmp	r3, #0
 8004106:	d005      	beq.n	8004114 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004108:	4b53      	ldr	r3, [pc, #332]	; (8004258 <HAL_RCC_ClockConfig+0x1c4>)
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	4a52      	ldr	r2, [pc, #328]	; (8004258 <HAL_RCC_ClockConfig+0x1c4>)
 800410e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004112:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004114:	4b50      	ldr	r3, [pc, #320]	; (8004258 <HAL_RCC_ClockConfig+0x1c4>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	494d      	ldr	r1, [pc, #308]	; (8004258 <HAL_RCC_ClockConfig+0x1c4>)
 8004122:	4313      	orrs	r3, r2
 8004124:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d040      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d107      	bne.n	800414a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413a:	4b47      	ldr	r3, [pc, #284]	; (8004258 <HAL_RCC_ClockConfig+0x1c4>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d115      	bne.n	8004172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e07f      	b.n	800424a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2b02      	cmp	r3, #2
 8004150:	d107      	bne.n	8004162 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004152:	4b41      	ldr	r3, [pc, #260]	; (8004258 <HAL_RCC_ClockConfig+0x1c4>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d109      	bne.n	8004172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e073      	b.n	800424a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004162:	4b3d      	ldr	r3, [pc, #244]	; (8004258 <HAL_RCC_ClockConfig+0x1c4>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e06b      	b.n	800424a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004172:	4b39      	ldr	r3, [pc, #228]	; (8004258 <HAL_RCC_ClockConfig+0x1c4>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f023 0203 	bic.w	r2, r3, #3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	4936      	ldr	r1, [pc, #216]	; (8004258 <HAL_RCC_ClockConfig+0x1c4>)
 8004180:	4313      	orrs	r3, r2
 8004182:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004184:	f7fe fbb0 	bl	80028e8 <HAL_GetTick>
 8004188:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800418a:	e00a      	b.n	80041a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800418c:	f7fe fbac 	bl	80028e8 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	f241 3288 	movw	r2, #5000	; 0x1388
 800419a:	4293      	cmp	r3, r2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e053      	b.n	800424a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041a2:	4b2d      	ldr	r3, [pc, #180]	; (8004258 <HAL_RCC_ClockConfig+0x1c4>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f003 020c 	and.w	r2, r3, #12
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d1eb      	bne.n	800418c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041b4:	4b27      	ldr	r3, [pc, #156]	; (8004254 <HAL_RCC_ClockConfig+0x1c0>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0307 	and.w	r3, r3, #7
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d210      	bcs.n	80041e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041c2:	4b24      	ldr	r3, [pc, #144]	; (8004254 <HAL_RCC_ClockConfig+0x1c0>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f023 0207 	bic.w	r2, r3, #7
 80041ca:	4922      	ldr	r1, [pc, #136]	; (8004254 <HAL_RCC_ClockConfig+0x1c0>)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041d2:	4b20      	ldr	r3, [pc, #128]	; (8004254 <HAL_RCC_ClockConfig+0x1c0>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0307 	and.w	r3, r3, #7
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d001      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e032      	b.n	800424a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d008      	beq.n	8004202 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041f0:	4b19      	ldr	r3, [pc, #100]	; (8004258 <HAL_RCC_ClockConfig+0x1c4>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	4916      	ldr	r1, [pc, #88]	; (8004258 <HAL_RCC_ClockConfig+0x1c4>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0308 	and.w	r3, r3, #8
 800420a:	2b00      	cmp	r3, #0
 800420c:	d009      	beq.n	8004222 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800420e:	4b12      	ldr	r3, [pc, #72]	; (8004258 <HAL_RCC_ClockConfig+0x1c4>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	00db      	lsls	r3, r3, #3
 800421c:	490e      	ldr	r1, [pc, #56]	; (8004258 <HAL_RCC_ClockConfig+0x1c4>)
 800421e:	4313      	orrs	r3, r2
 8004220:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004222:	f000 f821 	bl	8004268 <HAL_RCC_GetSysClockFreq>
 8004226:	4602      	mov	r2, r0
 8004228:	4b0b      	ldr	r3, [pc, #44]	; (8004258 <HAL_RCC_ClockConfig+0x1c4>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	091b      	lsrs	r3, r3, #4
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	490a      	ldr	r1, [pc, #40]	; (800425c <HAL_RCC_ClockConfig+0x1c8>)
 8004234:	5ccb      	ldrb	r3, [r1, r3]
 8004236:	fa22 f303 	lsr.w	r3, r2, r3
 800423a:	4a09      	ldr	r2, [pc, #36]	; (8004260 <HAL_RCC_ClockConfig+0x1cc>)
 800423c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800423e:	4b09      	ldr	r3, [pc, #36]	; (8004264 <HAL_RCC_ClockConfig+0x1d0>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f7fe fb0e 	bl	8002864 <HAL_InitTick>

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	40022000 	.word	0x40022000
 8004258:	40021000 	.word	0x40021000
 800425c:	0800bfe4 	.word	0x0800bfe4
 8004260:	2000055c 	.word	0x2000055c
 8004264:	20000560 	.word	0x20000560

08004268 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800426e:	2300      	movs	r3, #0
 8004270:	60fb      	str	r3, [r7, #12]
 8004272:	2300      	movs	r3, #0
 8004274:	60bb      	str	r3, [r7, #8]
 8004276:	2300      	movs	r3, #0
 8004278:	617b      	str	r3, [r7, #20]
 800427a:	2300      	movs	r3, #0
 800427c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800427e:	2300      	movs	r3, #0
 8004280:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004282:	4b1e      	ldr	r3, [pc, #120]	; (80042fc <HAL_RCC_GetSysClockFreq+0x94>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f003 030c 	and.w	r3, r3, #12
 800428e:	2b04      	cmp	r3, #4
 8004290:	d002      	beq.n	8004298 <HAL_RCC_GetSysClockFreq+0x30>
 8004292:	2b08      	cmp	r3, #8
 8004294:	d003      	beq.n	800429e <HAL_RCC_GetSysClockFreq+0x36>
 8004296:	e027      	b.n	80042e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004298:	4b19      	ldr	r3, [pc, #100]	; (8004300 <HAL_RCC_GetSysClockFreq+0x98>)
 800429a:	613b      	str	r3, [r7, #16]
      break;
 800429c:	e027      	b.n	80042ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	0c9b      	lsrs	r3, r3, #18
 80042a2:	f003 030f 	and.w	r3, r3, #15
 80042a6:	4a17      	ldr	r2, [pc, #92]	; (8004304 <HAL_RCC_GetSysClockFreq+0x9c>)
 80042a8:	5cd3      	ldrb	r3, [r2, r3]
 80042aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d010      	beq.n	80042d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042b6:	4b11      	ldr	r3, [pc, #68]	; (80042fc <HAL_RCC_GetSysClockFreq+0x94>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	0c5b      	lsrs	r3, r3, #17
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	4a11      	ldr	r2, [pc, #68]	; (8004308 <HAL_RCC_GetSysClockFreq+0xa0>)
 80042c2:	5cd3      	ldrb	r3, [r2, r3]
 80042c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a0d      	ldr	r2, [pc, #52]	; (8004300 <HAL_RCC_GetSysClockFreq+0x98>)
 80042ca:	fb03 f202 	mul.w	r2, r3, r2
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d4:	617b      	str	r3, [r7, #20]
 80042d6:	e004      	b.n	80042e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a0c      	ldr	r2, [pc, #48]	; (800430c <HAL_RCC_GetSysClockFreq+0xa4>)
 80042dc:	fb02 f303 	mul.w	r3, r2, r3
 80042e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	613b      	str	r3, [r7, #16]
      break;
 80042e6:	e002      	b.n	80042ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80042e8:	4b05      	ldr	r3, [pc, #20]	; (8004300 <HAL_RCC_GetSysClockFreq+0x98>)
 80042ea:	613b      	str	r3, [r7, #16]
      break;
 80042ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042ee:	693b      	ldr	r3, [r7, #16]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	371c      	adds	r7, #28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bc80      	pop	{r7}
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	40021000 	.word	0x40021000
 8004300:	007a1200 	.word	0x007a1200
 8004304:	0800bffc 	.word	0x0800bffc
 8004308:	0800c00c 	.word	0x0800c00c
 800430c:	003d0900 	.word	0x003d0900

08004310 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004314:	4b02      	ldr	r3, [pc, #8]	; (8004320 <HAL_RCC_GetHCLKFreq+0x10>)
 8004316:	681b      	ldr	r3, [r3, #0]
}
 8004318:	4618      	mov	r0, r3
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr
 8004320:	2000055c 	.word	0x2000055c

08004324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004328:	f7ff fff2 	bl	8004310 <HAL_RCC_GetHCLKFreq>
 800432c:	4602      	mov	r2, r0
 800432e:	4b05      	ldr	r3, [pc, #20]	; (8004344 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	0a1b      	lsrs	r3, r3, #8
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	4903      	ldr	r1, [pc, #12]	; (8004348 <HAL_RCC_GetPCLK1Freq+0x24>)
 800433a:	5ccb      	ldrb	r3, [r1, r3]
 800433c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004340:	4618      	mov	r0, r3
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40021000 	.word	0x40021000
 8004348:	0800bff4 	.word	0x0800bff4

0800434c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004350:	f7ff ffde 	bl	8004310 <HAL_RCC_GetHCLKFreq>
 8004354:	4602      	mov	r2, r0
 8004356:	4b05      	ldr	r3, [pc, #20]	; (800436c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	0adb      	lsrs	r3, r3, #11
 800435c:	f003 0307 	and.w	r3, r3, #7
 8004360:	4903      	ldr	r1, [pc, #12]	; (8004370 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004362:	5ccb      	ldrb	r3, [r1, r3]
 8004364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004368:	4618      	mov	r0, r3
 800436a:	bd80      	pop	{r7, pc}
 800436c:	40021000 	.word	0x40021000
 8004370:	0800bff4 	.word	0x0800bff4

08004374 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800437c:	4b0a      	ldr	r3, [pc, #40]	; (80043a8 <RCC_Delay+0x34>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a0a      	ldr	r2, [pc, #40]	; (80043ac <RCC_Delay+0x38>)
 8004382:	fba2 2303 	umull	r2, r3, r2, r3
 8004386:	0a5b      	lsrs	r3, r3, #9
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	fb02 f303 	mul.w	r3, r2, r3
 800438e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004390:	bf00      	nop
  }
  while (Delay --);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	1e5a      	subs	r2, r3, #1
 8004396:	60fa      	str	r2, [r7, #12]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1f9      	bne.n	8004390 <RCC_Delay+0x1c>
}
 800439c:	bf00      	nop
 800439e:	bf00      	nop
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bc80      	pop	{r7}
 80043a6:	4770      	bx	lr
 80043a8:	2000055c 	.word	0x2000055c
 80043ac:	10624dd3 	.word	0x10624dd3

080043b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e076      	b.n	80044b0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d108      	bne.n	80043dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043d2:	d009      	beq.n	80043e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	61da      	str	r2, [r3, #28]
 80043da:	e005      	b.n	80043e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d106      	bne.n	8004408 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f7fe f904 	bl	8002610 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2202      	movs	r2, #2
 800440c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800441e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004430:	431a      	orrs	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800443a:	431a      	orrs	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	431a      	orrs	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	431a      	orrs	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004458:	431a      	orrs	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800446c:	ea42 0103 	orr.w	r1, r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004474:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	0c1a      	lsrs	r2, r3, #16
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f002 0204 	and.w	r2, r2, #4
 800448e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	69da      	ldr	r2, [r3, #28]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800449e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3708      	adds	r7, #8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b088      	sub	sp, #32
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	603b      	str	r3, [r7, #0]
 80044c4:	4613      	mov	r3, r2
 80044c6:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044c8:	f7fe fa0e 	bl	80028e8 <HAL_GetTick>
 80044cc:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80044ce:	88fb      	ldrh	r3, [r7, #6]
 80044d0:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d001      	beq.n	80044e2 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80044de:	2302      	movs	r3, #2
 80044e0:	e12a      	b.n	8004738 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d002      	beq.n	80044ee <HAL_SPI_Transmit+0x36>
 80044e8:	88fb      	ldrh	r3, [r7, #6]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e122      	b.n	8004738 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d101      	bne.n	8004500 <HAL_SPI_Transmit+0x48>
 80044fc:	2302      	movs	r3, #2
 80044fe:	e11b      	b.n	8004738 <HAL_SPI_Transmit+0x280>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2203      	movs	r2, #3
 800450c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	88fa      	ldrh	r2, [r7, #6]
 8004520:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	88fa      	ldrh	r2, [r7, #6]
 8004526:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800454e:	d10f      	bne.n	8004570 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800455e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800456e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457a:	2b40      	cmp	r3, #64	; 0x40
 800457c:	d007      	beq.n	800458e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800458c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004596:	d152      	bne.n	800463e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d002      	beq.n	80045a6 <HAL_SPI_Transmit+0xee>
 80045a0:	8b7b      	ldrh	r3, [r7, #26]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d145      	bne.n	8004632 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045aa:	881a      	ldrh	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b6:	1c9a      	adds	r2, r3, #2
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	3b01      	subs	r3, #1
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045ca:	e032      	b.n	8004632 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d112      	bne.n	8004600 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045de:	881a      	ldrh	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ea:	1c9a      	adds	r2, r3, #2
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	3b01      	subs	r3, #1
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	86da      	strh	r2, [r3, #54]	; 0x36
 80045fe:	e018      	b.n	8004632 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004600:	f7fe f972 	bl	80028e8 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	429a      	cmp	r2, r3
 800460e:	d803      	bhi.n	8004618 <HAL_SPI_Transmit+0x160>
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004616:	d102      	bne.n	800461e <HAL_SPI_Transmit+0x166>
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d109      	bne.n	8004632 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e082      	b.n	8004738 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004636:	b29b      	uxth	r3, r3
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1c7      	bne.n	80045cc <HAL_SPI_Transmit+0x114>
 800463c:	e053      	b.n	80046e6 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d002      	beq.n	800464c <HAL_SPI_Transmit+0x194>
 8004646:	8b7b      	ldrh	r3, [r7, #26]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d147      	bne.n	80046dc <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	330c      	adds	r3, #12
 8004656:	7812      	ldrb	r2, [r2, #0]
 8004658:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465e:	1c5a      	adds	r2, r3, #1
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004668:	b29b      	uxth	r3, r3
 800466a:	3b01      	subs	r3, #1
 800466c:	b29a      	uxth	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004672:	e033      	b.n	80046dc <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b02      	cmp	r3, #2
 8004680:	d113      	bne.n	80046aa <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	330c      	adds	r3, #12
 800468c:	7812      	ldrb	r2, [r2, #0]
 800468e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004694:	1c5a      	adds	r2, r3, #1
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800469e:	b29b      	uxth	r3, r3
 80046a0:	3b01      	subs	r3, #1
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80046a8:	e018      	b.n	80046dc <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046aa:	f7fe f91d 	bl	80028e8 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d803      	bhi.n	80046c2 <HAL_SPI_Transmit+0x20a>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c0:	d102      	bne.n	80046c8 <HAL_SPI_Transmit+0x210>
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d109      	bne.n	80046dc <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e02d      	b.n	8004738 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1c6      	bne.n	8004674 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046e6:	69fa      	ldr	r2, [r7, #28]
 80046e8:	6839      	ldr	r1, [r7, #0]
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f000 fa5a 	bl	8004ba4 <SPI_EndRxTxTransaction>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2220      	movs	r2, #32
 80046fa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10a      	bne.n	800471a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004704:	2300      	movs	r3, #0
 8004706:	617b      	str	r3, [r7, #20]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e000      	b.n	8004738 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004736:	2300      	movs	r3, #0
  }
}
 8004738:	4618      	mov	r0, r3
 800473a:	3720      	adds	r7, #32
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b08a      	sub	sp, #40	; 0x28
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
 800474c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800474e:	2301      	movs	r3, #1
 8004750:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004752:	f7fe f8c9 	bl	80028e8 <HAL_GetTick>
 8004756:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800475e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004766:	887b      	ldrh	r3, [r7, #2]
 8004768:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800476a:	7ffb      	ldrb	r3, [r7, #31]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d00c      	beq.n	800478a <HAL_SPI_TransmitReceive+0x4a>
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004776:	d106      	bne.n	8004786 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d102      	bne.n	8004786 <HAL_SPI_TransmitReceive+0x46>
 8004780:	7ffb      	ldrb	r3, [r7, #31]
 8004782:	2b04      	cmp	r3, #4
 8004784:	d001      	beq.n	800478a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004786:	2302      	movs	r3, #2
 8004788:	e17f      	b.n	8004a8a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d005      	beq.n	800479c <HAL_SPI_TransmitReceive+0x5c>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d002      	beq.n	800479c <HAL_SPI_TransmitReceive+0x5c>
 8004796:	887b      	ldrh	r3, [r7, #2]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e174      	b.n	8004a8a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d101      	bne.n	80047ae <HAL_SPI_TransmitReceive+0x6e>
 80047aa:	2302      	movs	r3, #2
 80047ac:	e16d      	b.n	8004a8a <HAL_SPI_TransmitReceive+0x34a>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d003      	beq.n	80047ca <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2205      	movs	r2, #5
 80047c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	887a      	ldrh	r2, [r7, #2]
 80047da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	887a      	ldrh	r2, [r7, #2]
 80047e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	887a      	ldrh	r2, [r7, #2]
 80047ec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	887a      	ldrh	r2, [r7, #2]
 80047f2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480a:	2b40      	cmp	r3, #64	; 0x40
 800480c:	d007      	beq.n	800481e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800481c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004826:	d17e      	bne.n	8004926 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d002      	beq.n	8004836 <HAL_SPI_TransmitReceive+0xf6>
 8004830:	8afb      	ldrh	r3, [r7, #22]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d16c      	bne.n	8004910 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483a:	881a      	ldrh	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004846:	1c9a      	adds	r2, r3, #2
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004850:	b29b      	uxth	r3, r3
 8004852:	3b01      	subs	r3, #1
 8004854:	b29a      	uxth	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800485a:	e059      	b.n	8004910 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b02      	cmp	r3, #2
 8004868:	d11b      	bne.n	80048a2 <HAL_SPI_TransmitReceive+0x162>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800486e:	b29b      	uxth	r3, r3
 8004870:	2b00      	cmp	r3, #0
 8004872:	d016      	beq.n	80048a2 <HAL_SPI_TransmitReceive+0x162>
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	2b01      	cmp	r3, #1
 8004878:	d113      	bne.n	80048a2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487e:	881a      	ldrh	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488a:	1c9a      	adds	r2, r3, #2
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004894:	b29b      	uxth	r3, r3
 8004896:	3b01      	subs	r3, #1
 8004898:	b29a      	uxth	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d119      	bne.n	80048e4 <HAL_SPI_TransmitReceive+0x1a4>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d014      	beq.n	80048e4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68da      	ldr	r2, [r3, #12]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c4:	b292      	uxth	r2, r2
 80048c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048cc:	1c9a      	adds	r2, r3, #2
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	3b01      	subs	r3, #1
 80048da:	b29a      	uxth	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048e0:	2301      	movs	r3, #1
 80048e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80048e4:	f7fe f800 	bl	80028e8 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	6a3b      	ldr	r3, [r7, #32]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d80d      	bhi.n	8004910 <HAL_SPI_TransmitReceive+0x1d0>
 80048f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fa:	d009      	beq.n	8004910 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e0bc      	b.n	8004a8a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004914:	b29b      	uxth	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1a0      	bne.n	800485c <HAL_SPI_TransmitReceive+0x11c>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800491e:	b29b      	uxth	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	d19b      	bne.n	800485c <HAL_SPI_TransmitReceive+0x11c>
 8004924:	e082      	b.n	8004a2c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d002      	beq.n	8004934 <HAL_SPI_TransmitReceive+0x1f4>
 800492e:	8afb      	ldrh	r3, [r7, #22]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d171      	bne.n	8004a18 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	330c      	adds	r3, #12
 800493e:	7812      	ldrb	r2, [r2, #0]
 8004940:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004946:	1c5a      	adds	r2, r3, #1
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004950:	b29b      	uxth	r3, r3
 8004952:	3b01      	subs	r3, #1
 8004954:	b29a      	uxth	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800495a:	e05d      	b.n	8004a18 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b02      	cmp	r3, #2
 8004968:	d11c      	bne.n	80049a4 <HAL_SPI_TransmitReceive+0x264>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800496e:	b29b      	uxth	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	d017      	beq.n	80049a4 <HAL_SPI_TransmitReceive+0x264>
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	2b01      	cmp	r3, #1
 8004978:	d114      	bne.n	80049a4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	330c      	adds	r3, #12
 8004984:	7812      	ldrb	r2, [r2, #0]
 8004986:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004996:	b29b      	uxth	r3, r3
 8004998:	3b01      	subs	r3, #1
 800499a:	b29a      	uxth	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049a0:	2300      	movs	r3, #0
 80049a2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d119      	bne.n	80049e6 <HAL_SPI_TransmitReceive+0x2a6>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d014      	beq.n	80049e6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c6:	b2d2      	uxtb	r2, r2
 80049c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ce:	1c5a      	adds	r2, r3, #1
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049d8:	b29b      	uxth	r3, r3
 80049da:	3b01      	subs	r3, #1
 80049dc:	b29a      	uxth	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049e2:	2301      	movs	r3, #1
 80049e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80049e6:	f7fd ff7f 	bl	80028e8 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	6a3b      	ldr	r3, [r7, #32]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d803      	bhi.n	80049fe <HAL_SPI_TransmitReceive+0x2be>
 80049f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049fc:	d102      	bne.n	8004a04 <HAL_SPI_TransmitReceive+0x2c4>
 80049fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d109      	bne.n	8004a18 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e038      	b.n	8004a8a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d19c      	bne.n	800495c <HAL_SPI_TransmitReceive+0x21c>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d197      	bne.n	800495c <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a2c:	6a3a      	ldr	r2, [r7, #32]
 8004a2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f000 f8b7 	bl	8004ba4 <SPI_EndRxTxTransaction>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d008      	beq.n	8004a4e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e01d      	b.n	8004a8a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10a      	bne.n	8004a6c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a56:	2300      	movs	r3, #0
 8004a58:	613b      	str	r3, [r7, #16]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	613b      	str	r3, [r7, #16]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	613b      	str	r3, [r7, #16]
 8004a6a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d001      	beq.n	8004a88 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e000      	b.n	8004a8a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004a88:	2300      	movs	r3, #0
  }
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3728      	adds	r7, #40	; 0x28
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
	...

08004a94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b088      	sub	sp, #32
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	603b      	str	r3, [r7, #0]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004aa4:	f7fd ff20 	bl	80028e8 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aac:	1a9b      	subs	r3, r3, r2
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ab4:	f7fd ff18 	bl	80028e8 <HAL_GetTick>
 8004ab8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004aba:	4b39      	ldr	r3, [pc, #228]	; (8004ba0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	015b      	lsls	r3, r3, #5
 8004ac0:	0d1b      	lsrs	r3, r3, #20
 8004ac2:	69fa      	ldr	r2, [r7, #28]
 8004ac4:	fb02 f303 	mul.w	r3, r2, r3
 8004ac8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004aca:	e054      	b.n	8004b76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad2:	d050      	beq.n	8004b76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ad4:	f7fd ff08 	bl	80028e8 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	69fa      	ldr	r2, [r7, #28]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d902      	bls.n	8004aea <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d13d      	bne.n	8004b66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004af8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b02:	d111      	bne.n	8004b28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b0c:	d004      	beq.n	8004b18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b16:	d107      	bne.n	8004b28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b30:	d10f      	bne.n	8004b52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b40:	601a      	str	r2, [r3, #0]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e017      	b.n	8004b96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	3b01      	subs	r3, #1
 8004b74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	bf0c      	ite	eq
 8004b86:	2301      	moveq	r3, #1
 8004b88:	2300      	movne	r3, #0
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	79fb      	ldrb	r3, [r7, #7]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d19b      	bne.n	8004acc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3720      	adds	r7, #32
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	2000055c 	.word	0x2000055c

08004ba4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af02      	add	r7, sp, #8
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	2102      	movs	r1, #2
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f7ff ff6a 	bl	8004a94 <SPI_WaitFlagStateUntilTimeout>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d007      	beq.n	8004bd6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bca:	f043 0220 	orr.w	r2, r3, #32
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e013      	b.n	8004bfe <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	2180      	movs	r1, #128	; 0x80
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f7ff ff57 	bl	8004a94 <SPI_WaitFlagStateUntilTimeout>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d007      	beq.n	8004bfc <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf0:	f043 0220 	orr.w	r2, r3, #32
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e000      	b.n	8004bfe <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b082      	sub	sp, #8
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d101      	bne.n	8004c18 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e042      	b.n	8004c9e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d106      	bne.n	8004c32 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f7fd fd39 	bl	80026a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2224      	movs	r2, #36	; 0x24
 8004c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68da      	ldr	r2, [r3, #12]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c48:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 fcd4 	bl	80055f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	691a      	ldr	r2, [r3, #16]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c5e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	695a      	ldr	r2, [r3, #20]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c6e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c7e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2220      	movs	r2, #32
 8004c92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b084      	sub	sp, #16
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	60f8      	str	r0, [r7, #12]
 8004cae:	60b9      	str	r1, [r7, #8]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b20      	cmp	r3, #32
 8004cbe:	d112      	bne.n	8004ce6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d002      	beq.n	8004ccc <HAL_UART_Receive_IT+0x26>
 8004cc6:	88fb      	ldrh	r3, [r7, #6]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e00b      	b.n	8004ce8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004cd6:	88fb      	ldrh	r3, [r7, #6]
 8004cd8:	461a      	mov	r2, r3
 8004cda:	68b9      	ldr	r1, [r7, #8]
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 fab6 	bl	800524e <UART_Start_Receive_IT>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	e000      	b.n	8004ce8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004ce6:	2302      	movs	r3, #2
  }
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b0ba      	sub	sp, #232	; 0xe8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d26:	f003 030f 	and.w	r3, r3, #15
 8004d2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004d2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10f      	bne.n	8004d56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d3a:	f003 0320 	and.w	r3, r3, #32
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d009      	beq.n	8004d56 <HAL_UART_IRQHandler+0x66>
 8004d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d46:	f003 0320 	and.w	r3, r3, #32
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 fb93 	bl	800547a <UART_Receive_IT>
      return;
 8004d54:	e25b      	b.n	800520e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004d56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f000 80de 	beq.w	8004f1c <HAL_UART_IRQHandler+0x22c>
 8004d60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d106      	bne.n	8004d7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d70:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f000 80d1 	beq.w	8004f1c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00b      	beq.n	8004d9e <HAL_UART_IRQHandler+0xae>
 8004d86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d005      	beq.n	8004d9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d96:	f043 0201 	orr.w	r2, r3, #1
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004da2:	f003 0304 	and.w	r3, r3, #4
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00b      	beq.n	8004dc2 <HAL_UART_IRQHandler+0xd2>
 8004daa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d005      	beq.n	8004dc2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dba:	f043 0202 	orr.w	r2, r3, #2
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00b      	beq.n	8004de6 <HAL_UART_IRQHandler+0xf6>
 8004dce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d005      	beq.n	8004de6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dde:	f043 0204 	orr.w	r2, r3, #4
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dea:	f003 0308 	and.w	r3, r3, #8
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d011      	beq.n	8004e16 <HAL_UART_IRQHandler+0x126>
 8004df2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004df6:	f003 0320 	and.w	r3, r3, #32
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d105      	bne.n	8004e0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004dfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d005      	beq.n	8004e16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e0e:	f043 0208 	orr.w	r2, r3, #8
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 81f2 	beq.w	8005204 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e24:	f003 0320 	and.w	r3, r3, #32
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d008      	beq.n	8004e3e <HAL_UART_IRQHandler+0x14e>
 8004e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e30:	f003 0320 	and.w	r3, r3, #32
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d002      	beq.n	8004e3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 fb1e 	bl	800547a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	bf14      	ite	ne
 8004e4c:	2301      	movne	r3, #1
 8004e4e:	2300      	moveq	r3, #0
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5a:	f003 0308 	and.w	r3, r3, #8
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d103      	bne.n	8004e6a <HAL_UART_IRQHandler+0x17a>
 8004e62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d04f      	beq.n	8004f0a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 fa28 	bl	80052c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d041      	beq.n	8004f02 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	3314      	adds	r3, #20
 8004e84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e8c:	e853 3f00 	ldrex	r3, [r3]
 8004e90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004e94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	3314      	adds	r3, #20
 8004ea6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004eaa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004eae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004eb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004eba:	e841 2300 	strex	r3, r2, [r1]
 8004ebe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ec2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1d9      	bne.n	8004e7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d013      	beq.n	8004efa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed6:	4a7e      	ldr	r2, [pc, #504]	; (80050d0 <HAL_UART_IRQHandler+0x3e0>)
 8004ed8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7fd fe78 	bl	8002bd4 <HAL_DMA_Abort_IT>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d016      	beq.n	8004f18 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004ef4:	4610      	mov	r0, r2
 8004ef6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ef8:	e00e      	b.n	8004f18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f993 	bl	8005226 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f00:	e00a      	b.n	8004f18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f98f 	bl	8005226 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f08:	e006      	b.n	8004f18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f98b 	bl	8005226 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004f16:	e175      	b.n	8005204 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f18:	bf00      	nop
    return;
 8004f1a:	e173      	b.n	8005204 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	f040 814f 	bne.w	80051c4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f2a:	f003 0310 	and.w	r3, r3, #16
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f000 8148 	beq.w	80051c4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f38:	f003 0310 	and.w	r3, r3, #16
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 8141 	beq.w	80051c4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f42:	2300      	movs	r3, #0
 8004f44:	60bb      	str	r3, [r7, #8]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	60bb      	str	r3, [r7, #8]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	60bb      	str	r3, [r7, #8]
 8004f56:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f000 80b6 	beq.w	80050d4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 8145 	beq.w	8005208 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f86:	429a      	cmp	r2, r3
 8004f88:	f080 813e 	bcs.w	8005208 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f92:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	2b20      	cmp	r3, #32
 8004f9c:	f000 8088 	beq.w	80050b0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	330c      	adds	r3, #12
 8004fa6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004faa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004fae:	e853 3f00 	ldrex	r3, [r3]
 8004fb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004fb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004fba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fbe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	330c      	adds	r3, #12
 8004fc8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004fcc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004fd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004fd8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004fdc:	e841 2300 	strex	r3, r2, [r1]
 8004fe0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004fe4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1d9      	bne.n	8004fa0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	3314      	adds	r3, #20
 8004ff2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ff6:	e853 3f00 	ldrex	r3, [r3]
 8004ffa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004ffc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ffe:	f023 0301 	bic.w	r3, r3, #1
 8005002:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	3314      	adds	r3, #20
 800500c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005010:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005014:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005016:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005018:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800501c:	e841 2300 	strex	r3, r2, [r1]
 8005020:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005022:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1e1      	bne.n	8004fec <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	3314      	adds	r3, #20
 800502e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005030:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005032:	e853 3f00 	ldrex	r3, [r3]
 8005036:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005038:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800503a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800503e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	3314      	adds	r3, #20
 8005048:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800504c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800504e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005050:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005052:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005054:	e841 2300 	strex	r3, r2, [r1]
 8005058:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800505a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1e3      	bne.n	8005028 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2220      	movs	r2, #32
 8005064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	330c      	adds	r3, #12
 8005074:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005078:	e853 3f00 	ldrex	r3, [r3]
 800507c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800507e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005080:	f023 0310 	bic.w	r3, r3, #16
 8005084:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	330c      	adds	r3, #12
 800508e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005092:	65ba      	str	r2, [r7, #88]	; 0x58
 8005094:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005096:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005098:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800509a:	e841 2300 	strex	r3, r2, [r1]
 800509e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80050a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1e3      	bne.n	800506e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7fd fd57 	bl	8002b5e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2202      	movs	r2, #2
 80050b4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050be:	b29b      	uxth	r3, r3
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	4619      	mov	r1, r3
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f8b6 	bl	8005238 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050cc:	e09c      	b.n	8005208 <HAL_UART_IRQHandler+0x518>
 80050ce:	bf00      	nop
 80050d0:	08005385 	.word	0x08005385
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050dc:	b29b      	uxth	r3, r3
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f000 808e 	beq.w	800520c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80050f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 8089 	beq.w	800520c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	330c      	adds	r3, #12
 8005100:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005104:	e853 3f00 	ldrex	r3, [r3]
 8005108:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800510a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800510c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005110:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	330c      	adds	r3, #12
 800511a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800511e:	647a      	str	r2, [r7, #68]	; 0x44
 8005120:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005122:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005124:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005126:	e841 2300 	strex	r3, r2, [r1]
 800512a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800512c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1e3      	bne.n	80050fa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	3314      	adds	r3, #20
 8005138:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	e853 3f00 	ldrex	r3, [r3]
 8005140:	623b      	str	r3, [r7, #32]
   return(result);
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	f023 0301 	bic.w	r3, r3, #1
 8005148:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	3314      	adds	r3, #20
 8005152:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005156:	633a      	str	r2, [r7, #48]	; 0x30
 8005158:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800515c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800515e:	e841 2300 	strex	r3, r2, [r1]
 8005162:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1e3      	bne.n	8005132 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2220      	movs	r2, #32
 800516e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	330c      	adds	r3, #12
 800517e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	e853 3f00 	ldrex	r3, [r3]
 8005186:	60fb      	str	r3, [r7, #12]
   return(result);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f023 0310 	bic.w	r3, r3, #16
 800518e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	330c      	adds	r3, #12
 8005198:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800519c:	61fa      	str	r2, [r7, #28]
 800519e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a0:	69b9      	ldr	r1, [r7, #24]
 80051a2:	69fa      	ldr	r2, [r7, #28]
 80051a4:	e841 2300 	strex	r3, r2, [r1]
 80051a8:	617b      	str	r3, [r7, #20]
   return(result);
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1e3      	bne.n	8005178 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2202      	movs	r2, #2
 80051b4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80051ba:	4619      	mov	r1, r3
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 f83b 	bl	8005238 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80051c2:	e023      	b.n	800520c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80051c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d009      	beq.n	80051e4 <HAL_UART_IRQHandler+0x4f4>
 80051d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d003      	beq.n	80051e4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f8e5 	bl	80053ac <UART_Transmit_IT>
    return;
 80051e2:	e014      	b.n	800520e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80051e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00e      	beq.n	800520e <HAL_UART_IRQHandler+0x51e>
 80051f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d008      	beq.n	800520e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 f924 	bl	800544a <UART_EndTransmit_IT>
    return;
 8005202:	e004      	b.n	800520e <HAL_UART_IRQHandler+0x51e>
    return;
 8005204:	bf00      	nop
 8005206:	e002      	b.n	800520e <HAL_UART_IRQHandler+0x51e>
      return;
 8005208:	bf00      	nop
 800520a:	e000      	b.n	800520e <HAL_UART_IRQHandler+0x51e>
      return;
 800520c:	bf00      	nop
  }
}
 800520e:	37e8      	adds	r7, #232	; 0xe8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	bc80      	pop	{r7}
 8005224:	4770      	bx	lr

08005226 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800522e:	bf00      	nop
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	bc80      	pop	{r7}
 8005236:	4770      	bx	lr

08005238 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	460b      	mov	r3, r1
 8005242:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	bc80      	pop	{r7}
 800524c:	4770      	bx	lr

0800524e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800524e:	b480      	push	{r7}
 8005250:	b085      	sub	sp, #20
 8005252:	af00      	add	r7, sp, #0
 8005254:	60f8      	str	r0, [r7, #12]
 8005256:	60b9      	str	r1, [r7, #8]
 8005258:	4613      	mov	r3, r2
 800525a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	88fa      	ldrh	r2, [r7, #6]
 8005266:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	88fa      	ldrh	r2, [r7, #6]
 800526c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2222      	movs	r2, #34	; 0x22
 8005278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d007      	beq.n	8005294 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68da      	ldr	r2, [r3, #12]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005292:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	695a      	ldr	r2, [r3, #20]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f042 0201 	orr.w	r2, r2, #1
 80052a2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68da      	ldr	r2, [r3, #12]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f042 0220 	orr.w	r2, r2, #32
 80052b2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bc80      	pop	{r7}
 80052be:	4770      	bx	lr

080052c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b095      	sub	sp, #84	; 0x54
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	330c      	adds	r3, #12
 80052ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d2:	e853 3f00 	ldrex	r3, [r3]
 80052d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	330c      	adds	r3, #12
 80052e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052e8:	643a      	str	r2, [r7, #64]	; 0x40
 80052ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052f0:	e841 2300 	strex	r3, r2, [r1]
 80052f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1e5      	bne.n	80052c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	3314      	adds	r3, #20
 8005302:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	e853 3f00 	ldrex	r3, [r3]
 800530a:	61fb      	str	r3, [r7, #28]
   return(result);
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	f023 0301 	bic.w	r3, r3, #1
 8005312:	64bb      	str	r3, [r7, #72]	; 0x48
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	3314      	adds	r3, #20
 800531a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800531c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800531e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005320:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005324:	e841 2300 	strex	r3, r2, [r1]
 8005328:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1e5      	bne.n	80052fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005334:	2b01      	cmp	r3, #1
 8005336:	d119      	bne.n	800536c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	330c      	adds	r3, #12
 800533e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	e853 3f00 	ldrex	r3, [r3]
 8005346:	60bb      	str	r3, [r7, #8]
   return(result);
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f023 0310 	bic.w	r3, r3, #16
 800534e:	647b      	str	r3, [r7, #68]	; 0x44
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	330c      	adds	r3, #12
 8005356:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005358:	61ba      	str	r2, [r7, #24]
 800535a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535c:	6979      	ldr	r1, [r7, #20]
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	e841 2300 	strex	r3, r2, [r1]
 8005364:	613b      	str	r3, [r7, #16]
   return(result);
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d1e5      	bne.n	8005338 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2220      	movs	r2, #32
 8005370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	631a      	str	r2, [r3, #48]	; 0x30
}
 800537a:	bf00      	nop
 800537c:	3754      	adds	r7, #84	; 0x54
 800537e:	46bd      	mov	sp, r7
 8005380:	bc80      	pop	{r7}
 8005382:	4770      	bx	lr

08005384 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f7ff ff41 	bl	8005226 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053a4:	bf00      	nop
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b21      	cmp	r3, #33	; 0x21
 80053be:	d13e      	bne.n	800543e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c8:	d114      	bne.n	80053f4 <UART_Transmit_IT+0x48>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d110      	bne.n	80053f4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	881b      	ldrh	r3, [r3, #0]
 80053dc:	461a      	mov	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053e6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	1c9a      	adds	r2, r3, #2
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	621a      	str	r2, [r3, #32]
 80053f2:	e008      	b.n	8005406 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a1b      	ldr	r3, [r3, #32]
 80053f8:	1c59      	adds	r1, r3, #1
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	6211      	str	r1, [r2, #32]
 80053fe:	781a      	ldrb	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800540a:	b29b      	uxth	r3, r3
 800540c:	3b01      	subs	r3, #1
 800540e:	b29b      	uxth	r3, r3
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	4619      	mov	r1, r3
 8005414:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10f      	bne.n	800543a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68da      	ldr	r2, [r3, #12]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005428:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68da      	ldr	r2, [r3, #12]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005438:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800543a:	2300      	movs	r3, #0
 800543c:	e000      	b.n	8005440 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800543e:	2302      	movs	r3, #2
  }
}
 8005440:	4618      	mov	r0, r3
 8005442:	3714      	adds	r7, #20
 8005444:	46bd      	mov	sp, r7
 8005446:	bc80      	pop	{r7}
 8005448:	4770      	bx	lr

0800544a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b082      	sub	sp, #8
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68da      	ldr	r2, [r3, #12]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005460:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2220      	movs	r2, #32
 8005466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f7ff fed2 	bl	8005214 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b08c      	sub	sp, #48	; 0x30
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b22      	cmp	r3, #34	; 0x22
 800548c:	f040 80ae 	bne.w	80055ec <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005498:	d117      	bne.n	80054ca <UART_Receive_IT+0x50>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d113      	bne.n	80054ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80054a2:	2300      	movs	r3, #0
 80054a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054aa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c2:	1c9a      	adds	r2, r3, #2
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	629a      	str	r2, [r3, #40]	; 0x28
 80054c8:	e026      	b.n	8005518 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80054d0:	2300      	movs	r3, #0
 80054d2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054dc:	d007      	beq.n	80054ee <UART_Receive_IT+0x74>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10a      	bne.n	80054fc <UART_Receive_IT+0x82>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d106      	bne.n	80054fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	b2da      	uxtb	r2, r3
 80054f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f8:	701a      	strb	r2, [r3, #0]
 80054fa:	e008      	b.n	800550e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	b2db      	uxtb	r3, r3
 8005504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005508:	b2da      	uxtb	r2, r3
 800550a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005512:	1c5a      	adds	r2, r3, #1
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800551c:	b29b      	uxth	r3, r3
 800551e:	3b01      	subs	r3, #1
 8005520:	b29b      	uxth	r3, r3
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	4619      	mov	r1, r3
 8005526:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005528:	2b00      	cmp	r3, #0
 800552a:	d15d      	bne.n	80055e8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68da      	ldr	r2, [r3, #12]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0220 	bic.w	r2, r2, #32
 800553a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68da      	ldr	r2, [r3, #12]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800554a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	695a      	ldr	r2, [r3, #20]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f022 0201 	bic.w	r2, r2, #1
 800555a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2220      	movs	r2, #32
 8005560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556e:	2b01      	cmp	r3, #1
 8005570:	d135      	bne.n	80055de <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	330c      	adds	r3, #12
 800557e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	e853 3f00 	ldrex	r3, [r3]
 8005586:	613b      	str	r3, [r7, #16]
   return(result);
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	f023 0310 	bic.w	r3, r3, #16
 800558e:	627b      	str	r3, [r7, #36]	; 0x24
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	330c      	adds	r3, #12
 8005596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005598:	623a      	str	r2, [r7, #32]
 800559a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559c:	69f9      	ldr	r1, [r7, #28]
 800559e:	6a3a      	ldr	r2, [r7, #32]
 80055a0:	e841 2300 	strex	r3, r2, [r1]
 80055a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1e5      	bne.n	8005578 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0310 	and.w	r3, r3, #16
 80055b6:	2b10      	cmp	r3, #16
 80055b8:	d10a      	bne.n	80055d0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055ba:	2300      	movs	r3, #0
 80055bc:	60fb      	str	r3, [r7, #12]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	60fb      	str	r3, [r7, #12]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	60fb      	str	r3, [r7, #12]
 80055ce:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055d4:	4619      	mov	r1, r3
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f7ff fe2e 	bl	8005238 <HAL_UARTEx_RxEventCallback>
 80055dc:	e002      	b.n	80055e4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7fb fe84 	bl	80012ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80055e4:	2300      	movs	r3, #0
 80055e6:	e002      	b.n	80055ee <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80055e8:	2300      	movs	r3, #0
 80055ea:	e000      	b.n	80055ee <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80055ec:	2302      	movs	r3, #2
  }
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3730      	adds	r7, #48	; 0x30
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
	...

080055f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	68da      	ldr	r2, [r3, #12]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	430a      	orrs	r2, r1
 8005614:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	689a      	ldr	r2, [r3, #8]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	431a      	orrs	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	695b      	ldr	r3, [r3, #20]
 8005624:	4313      	orrs	r3, r2
 8005626:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005632:	f023 030c 	bic.w	r3, r3, #12
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	6812      	ldr	r2, [r2, #0]
 800563a:	68b9      	ldr	r1, [r7, #8]
 800563c:	430b      	orrs	r3, r1
 800563e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	699a      	ldr	r2, [r3, #24]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	430a      	orrs	r2, r1
 8005654:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a2c      	ldr	r2, [pc, #176]	; (800570c <UART_SetConfig+0x114>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d103      	bne.n	8005668 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005660:	f7fe fe74 	bl	800434c <HAL_RCC_GetPCLK2Freq>
 8005664:	60f8      	str	r0, [r7, #12]
 8005666:	e002      	b.n	800566e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005668:	f7fe fe5c 	bl	8004324 <HAL_RCC_GetPCLK1Freq>
 800566c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	4613      	mov	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	009a      	lsls	r2, r3, #2
 8005678:	441a      	add	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	fbb2 f3f3 	udiv	r3, r2, r3
 8005684:	4a22      	ldr	r2, [pc, #136]	; (8005710 <UART_SetConfig+0x118>)
 8005686:	fba2 2303 	umull	r2, r3, r2, r3
 800568a:	095b      	lsrs	r3, r3, #5
 800568c:	0119      	lsls	r1, r3, #4
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	4613      	mov	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4413      	add	r3, r2
 8005696:	009a      	lsls	r2, r3, #2
 8005698:	441a      	add	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80056a4:	4b1a      	ldr	r3, [pc, #104]	; (8005710 <UART_SetConfig+0x118>)
 80056a6:	fba3 0302 	umull	r0, r3, r3, r2
 80056aa:	095b      	lsrs	r3, r3, #5
 80056ac:	2064      	movs	r0, #100	; 0x64
 80056ae:	fb00 f303 	mul.w	r3, r0, r3
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	011b      	lsls	r3, r3, #4
 80056b6:	3332      	adds	r3, #50	; 0x32
 80056b8:	4a15      	ldr	r2, [pc, #84]	; (8005710 <UART_SetConfig+0x118>)
 80056ba:	fba2 2303 	umull	r2, r3, r2, r3
 80056be:	095b      	lsrs	r3, r3, #5
 80056c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056c4:	4419      	add	r1, r3
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	4613      	mov	r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4413      	add	r3, r2
 80056ce:	009a      	lsls	r2, r3, #2
 80056d0:	441a      	add	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80056dc:	4b0c      	ldr	r3, [pc, #48]	; (8005710 <UART_SetConfig+0x118>)
 80056de:	fba3 0302 	umull	r0, r3, r3, r2
 80056e2:	095b      	lsrs	r3, r3, #5
 80056e4:	2064      	movs	r0, #100	; 0x64
 80056e6:	fb00 f303 	mul.w	r3, r0, r3
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	011b      	lsls	r3, r3, #4
 80056ee:	3332      	adds	r3, #50	; 0x32
 80056f0:	4a07      	ldr	r2, [pc, #28]	; (8005710 <UART_SetConfig+0x118>)
 80056f2:	fba2 2303 	umull	r2, r3, r2, r3
 80056f6:	095b      	lsrs	r3, r3, #5
 80056f8:	f003 020f 	and.w	r2, r3, #15
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	440a      	add	r2, r1
 8005702:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005704:	bf00      	nop
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	40013800 	.word	0x40013800
 8005710:	51eb851f 	.word	0x51eb851f

08005714 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005718:	4904      	ldr	r1, [pc, #16]	; (800572c <MX_FATFS_Init+0x18>)
 800571a:	4805      	ldr	r0, [pc, #20]	; (8005730 <MX_FATFS_Init+0x1c>)
 800571c:	f003 ff10 	bl	8009540 <FATFS_LinkDriver>
 8005720:	4603      	mov	r3, r0
 8005722:	461a      	mov	r2, r3
 8005724:	4b03      	ldr	r3, [pc, #12]	; (8005734 <MX_FATFS_Init+0x20>)
 8005726:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005728:	bf00      	nop
 800572a:	bd80      	pop	{r7, pc}
 800572c:	20002b04 	.word	0x20002b04
 8005730:	20000568 	.word	0x20000568
 8005734:	20002b00 	.word	0x20002b00

08005738 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005738:	b480      	push	{r7}
 800573a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800573c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800573e:	4618      	mov	r0, r3
 8005740:	46bd      	mov	sp, r7
 8005742:	bc80      	pop	{r7}
 8005744:	4770      	bx	lr

08005746 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b082      	sub	sp, #8
 800574a:	af00      	add	r7, sp, #0
 800574c:	4603      	mov	r3, r0
 800574e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
    return SD_disk_initialize(pdrv);
 8005750:	79fb      	ldrb	r3, [r7, #7]
 8005752:	4618      	mov	r0, r3
 8005754:	f7fb ffca 	bl	80016ec <SD_disk_initialize>
 8005758:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800575a:	4618      	mov	r0, r3
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b082      	sub	sp, #8
 8005766:	af00      	add	r7, sp, #0
 8005768:	4603      	mov	r3, r0
 800576a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
    return SD_disk_status(pdrv);
 800576c:	79fb      	ldrb	r3, [r7, #7]
 800576e:	4618      	mov	r0, r3
 8005770:	f7fc f8a2 	bl	80018b8 <SD_disk_status>
 8005774:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005776:	4618      	mov	r0, r3
 8005778:	3708      	adds	r7, #8
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b084      	sub	sp, #16
 8005782:	af00      	add	r7, sp, #0
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
 8005788:	603b      	str	r3, [r7, #0]
 800578a:	4603      	mov	r3, r0
 800578c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 800578e:	7bf8      	ldrb	r0, [r7, #15]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	68b9      	ldr	r1, [r7, #8]
 8005796:	f7fc f8a3 	bl	80018e0 <SD_disk_read>
 800579a:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800579c:	4618      	mov	r0, r3
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60b9      	str	r1, [r7, #8]
 80057ac:	607a      	str	r2, [r7, #4]
 80057ae:	603b      	str	r3, [r7, #0]
 80057b0:	4603      	mov	r3, r0
 80057b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 80057b4:	7bf8      	ldrb	r0, [r7, #15]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	68b9      	ldr	r1, [r7, #8]
 80057bc:	f7fc f8fa 	bl	80019b4 <SD_disk_write>
 80057c0:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b082      	sub	sp, #8
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	4603      	mov	r3, r0
 80057d2:	603a      	str	r2, [r7, #0]
 80057d4:	71fb      	strb	r3, [r7, #7]
 80057d6:	460b      	mov	r3, r1
 80057d8:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 80057da:	79b9      	ldrb	r1, [r7, #6]
 80057dc:	79fb      	ldrb	r3, [r7, #7]
 80057de:	683a      	ldr	r2, [r7, #0]
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7fc f96b 	bl	8001abc <SD_disk_ioctl>
 80057e6:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3708      	adds	r7, #8
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	4603      	mov	r3, r0
 80057f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80057fa:	79fb      	ldrb	r3, [r7, #7]
 80057fc:	4a08      	ldr	r2, [pc, #32]	; (8005820 <disk_status+0x30>)
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	79fa      	ldrb	r2, [r7, #7]
 8005808:	4905      	ldr	r1, [pc, #20]	; (8005820 <disk_status+0x30>)
 800580a:	440a      	add	r2, r1
 800580c:	7a12      	ldrb	r2, [r2, #8]
 800580e:	4610      	mov	r0, r2
 8005810:	4798      	blx	r3
 8005812:	4603      	mov	r3, r0
 8005814:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005816:	7bfb      	ldrb	r3, [r7, #15]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	20002d28 	.word	0x20002d28

08005824 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	4603      	mov	r3, r0
 800582c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800582e:	2300      	movs	r3, #0
 8005830:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8005832:	79fb      	ldrb	r3, [r7, #7]
 8005834:	4a0d      	ldr	r2, [pc, #52]	; (800586c <disk_initialize+0x48>)
 8005836:	5cd3      	ldrb	r3, [r2, r3]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d111      	bne.n	8005860 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800583c:	79fb      	ldrb	r3, [r7, #7]
 800583e:	4a0b      	ldr	r2, [pc, #44]	; (800586c <disk_initialize+0x48>)
 8005840:	2101      	movs	r1, #1
 8005842:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005844:	79fb      	ldrb	r3, [r7, #7]
 8005846:	4a09      	ldr	r2, [pc, #36]	; (800586c <disk_initialize+0x48>)
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	4413      	add	r3, r2
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	79fa      	ldrb	r2, [r7, #7]
 8005852:	4906      	ldr	r1, [pc, #24]	; (800586c <disk_initialize+0x48>)
 8005854:	440a      	add	r2, r1
 8005856:	7a12      	ldrb	r2, [r2, #8]
 8005858:	4610      	mov	r0, r2
 800585a:	4798      	blx	r3
 800585c:	4603      	mov	r3, r0
 800585e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005860:	7bfb      	ldrb	r3, [r7, #15]
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	20002d28 	.word	0x20002d28

08005870 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005870:	b590      	push	{r4, r7, lr}
 8005872:	b087      	sub	sp, #28
 8005874:	af00      	add	r7, sp, #0
 8005876:	60b9      	str	r1, [r7, #8]
 8005878:	607a      	str	r2, [r7, #4]
 800587a:	603b      	str	r3, [r7, #0]
 800587c:	4603      	mov	r3, r0
 800587e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005880:	7bfb      	ldrb	r3, [r7, #15]
 8005882:	4a0a      	ldr	r2, [pc, #40]	; (80058ac <disk_read+0x3c>)
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	689c      	ldr	r4, [r3, #8]
 800588c:	7bfb      	ldrb	r3, [r7, #15]
 800588e:	4a07      	ldr	r2, [pc, #28]	; (80058ac <disk_read+0x3c>)
 8005890:	4413      	add	r3, r2
 8005892:	7a18      	ldrb	r0, [r3, #8]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	68b9      	ldr	r1, [r7, #8]
 800589a:	47a0      	blx	r4
 800589c:	4603      	mov	r3, r0
 800589e:	75fb      	strb	r3, [r7, #23]
  return res;
 80058a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	371c      	adds	r7, #28
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd90      	pop	{r4, r7, pc}
 80058aa:	bf00      	nop
 80058ac:	20002d28 	.word	0x20002d28

080058b0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80058b0:	b590      	push	{r4, r7, lr}
 80058b2:	b087      	sub	sp, #28
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60b9      	str	r1, [r7, #8]
 80058b8:	607a      	str	r2, [r7, #4]
 80058ba:	603b      	str	r3, [r7, #0]
 80058bc:	4603      	mov	r3, r0
 80058be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80058c0:	7bfb      	ldrb	r3, [r7, #15]
 80058c2:	4a0a      	ldr	r2, [pc, #40]	; (80058ec <disk_write+0x3c>)
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4413      	add	r3, r2
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	68dc      	ldr	r4, [r3, #12]
 80058cc:	7bfb      	ldrb	r3, [r7, #15]
 80058ce:	4a07      	ldr	r2, [pc, #28]	; (80058ec <disk_write+0x3c>)
 80058d0:	4413      	add	r3, r2
 80058d2:	7a18      	ldrb	r0, [r3, #8]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	68b9      	ldr	r1, [r7, #8]
 80058da:	47a0      	blx	r4
 80058dc:	4603      	mov	r3, r0
 80058de:	75fb      	strb	r3, [r7, #23]
  return res;
 80058e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	371c      	adds	r7, #28
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd90      	pop	{r4, r7, pc}
 80058ea:	bf00      	nop
 80058ec:	20002d28 	.word	0x20002d28

080058f0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	4603      	mov	r3, r0
 80058f8:	603a      	str	r2, [r7, #0]
 80058fa:	71fb      	strb	r3, [r7, #7]
 80058fc:	460b      	mov	r3, r1
 80058fe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005900:	79fb      	ldrb	r3, [r7, #7]
 8005902:	4a09      	ldr	r2, [pc, #36]	; (8005928 <disk_ioctl+0x38>)
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4413      	add	r3, r2
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	79fa      	ldrb	r2, [r7, #7]
 800590e:	4906      	ldr	r1, [pc, #24]	; (8005928 <disk_ioctl+0x38>)
 8005910:	440a      	add	r2, r1
 8005912:	7a10      	ldrb	r0, [r2, #8]
 8005914:	79b9      	ldrb	r1, [r7, #6]
 8005916:	683a      	ldr	r2, [r7, #0]
 8005918:	4798      	blx	r3
 800591a:	4603      	mov	r3, r0
 800591c:	73fb      	strb	r3, [r7, #15]
  return res;
 800591e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005920:	4618      	mov	r0, r3
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	20002d28 	.word	0x20002d28

0800592c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800592c:	b480      	push	{r7}
 800592e:	b087      	sub	sp, #28
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8005940:	e007      	b.n	8005952 <mem_cpy+0x26>
		*d++ = *s++;
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	1c53      	adds	r3, r2, #1
 8005946:	613b      	str	r3, [r7, #16]
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	1c59      	adds	r1, r3, #1
 800594c:	6179      	str	r1, [r7, #20]
 800594e:	7812      	ldrb	r2, [r2, #0]
 8005950:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	1e5a      	subs	r2, r3, #1
 8005956:	607a      	str	r2, [r7, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1f2      	bne.n	8005942 <mem_cpy+0x16>
}
 800595c:	bf00      	nop
 800595e:	bf00      	nop
 8005960:	371c      	adds	r7, #28
 8005962:	46bd      	mov	sp, r7
 8005964:	bc80      	pop	{r7}
 8005966:	4770      	bx	lr

08005968 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005968:	b480      	push	{r7}
 800596a:	b087      	sub	sp, #28
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8005978:	e005      	b.n	8005986 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	1c5a      	adds	r2, r3, #1
 800597e:	617a      	str	r2, [r7, #20]
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	b2d2      	uxtb	r2, r2
 8005984:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	1e5a      	subs	r2, r3, #1
 800598a:	607a      	str	r2, [r7, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1f4      	bne.n	800597a <mem_set+0x12>
}
 8005990:	bf00      	nop
 8005992:	bf00      	nop
 8005994:	371c      	adds	r7, #28
 8005996:	46bd      	mov	sp, r7
 8005998:	bc80      	pop	{r7}
 800599a:	4770      	bx	lr

0800599c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800599c:	b480      	push	{r7}
 800599e:	b089      	sub	sp, #36	; 0x24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	61fb      	str	r3, [r7, #28]
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80059b0:	2300      	movs	r3, #0
 80059b2:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80059b4:	bf00      	nop
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	1e5a      	subs	r2, r3, #1
 80059ba:	607a      	str	r2, [r7, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00d      	beq.n	80059dc <mem_cmp+0x40>
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	1c5a      	adds	r2, r3, #1
 80059c4:	61fa      	str	r2, [r7, #28]
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	4619      	mov	r1, r3
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	1c5a      	adds	r2, r3, #1
 80059ce:	61ba      	str	r2, [r7, #24]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	1acb      	subs	r3, r1, r3
 80059d4:	617b      	str	r3, [r7, #20]
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d0ec      	beq.n	80059b6 <mem_cmp+0x1a>
	return r;
 80059dc:	697b      	ldr	r3, [r7, #20]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3724      	adds	r7, #36	; 0x24
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bc80      	pop	{r7}
 80059e6:	4770      	bx	lr

080059e8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80059f2:	e002      	b.n	80059fa <chk_chr+0x12>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	3301      	adds	r3, #1
 80059f8:	607b      	str	r3, [r7, #4]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d005      	beq.n	8005a0e <chk_chr+0x26>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	461a      	mov	r2, r3
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d1f2      	bne.n	80059f4 <chk_chr+0xc>
	return *str;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	781b      	ldrb	r3, [r3, #0]
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	370c      	adds	r7, #12
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bc80      	pop	{r7}
 8005a1a:	4770      	bx	lr

08005a1c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005a26:	2300      	movs	r3, #0
 8005a28:	60bb      	str	r3, [r7, #8]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	60fb      	str	r3, [r7, #12]
 8005a2e:	e03b      	b.n	8005aa8 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 8005a30:	4931      	ldr	r1, [pc, #196]	; (8005af8 <chk_lock+0xdc>)
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	4613      	mov	r3, r2
 8005a36:	005b      	lsls	r3, r3, #1
 8005a38:	4413      	add	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	440b      	add	r3, r1
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d02c      	beq.n	8005a9e <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005a44:	492c      	ldr	r1, [pc, #176]	; (8005af8 <chk_lock+0xdc>)
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	4613      	mov	r3, r2
 8005a4a:	005b      	lsls	r3, r3, #1
 8005a4c:	4413      	add	r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	440b      	add	r3, r1
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d120      	bne.n	8005aa2 <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8005a60:	4925      	ldr	r1, [pc, #148]	; (8005af8 <chk_lock+0xdc>)
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	4613      	mov	r3, r2
 8005a66:	005b      	lsls	r3, r3, #1
 8005a68:	4413      	add	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	440b      	add	r3, r1
 8005a6e:	3304      	adds	r3, #4
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a78:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d111      	bne.n	8005aa2 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8005a7e:	491e      	ldr	r1, [pc, #120]	; (8005af8 <chk_lock+0xdc>)
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	4613      	mov	r3, r2
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	4413      	add	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	440b      	add	r3, r1
 8005a8c:	3308      	adds	r3, #8
 8005a8e:	881a      	ldrh	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a96:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d102      	bne.n	8005aa2 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8005a9c:	e007      	b.n	8005aae <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	60fb      	str	r3, [r7, #12]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d9c0      	bls.n	8005a30 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d109      	bne.n	8005ac8 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d102      	bne.n	8005ac0 <chk_lock+0xa4>
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d101      	bne.n	8005ac4 <chk_lock+0xa8>
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	e013      	b.n	8005aec <chk_lock+0xd0>
 8005ac4:	2312      	movs	r3, #18
 8005ac6:	e011      	b.n	8005aec <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d10b      	bne.n	8005ae6 <chk_lock+0xca>
 8005ace:	490a      	ldr	r1, [pc, #40]	; (8005af8 <chk_lock+0xdc>)
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	4413      	add	r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	440b      	add	r3, r1
 8005adc:	330a      	adds	r3, #10
 8005ade:	881b      	ldrh	r3, [r3, #0]
 8005ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ae4:	d101      	bne.n	8005aea <chk_lock+0xce>
 8005ae6:	2310      	movs	r3, #16
 8005ae8:	e000      	b.n	8005aec <chk_lock+0xd0>
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3714      	adds	r7, #20
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bc80      	pop	{r7}
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	20002b10 	.word	0x20002b10

08005afc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005b02:	2300      	movs	r3, #0
 8005b04:	607b      	str	r3, [r7, #4]
 8005b06:	e002      	b.n	8005b0e <enq_lock+0x12>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	607b      	str	r3, [r7, #4]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d809      	bhi.n	8005b28 <enq_lock+0x2c>
 8005b14:	490a      	ldr	r1, [pc, #40]	; (8005b40 <enq_lock+0x44>)
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	005b      	lsls	r3, r3, #1
 8005b1c:	4413      	add	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	440b      	add	r3, r1
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1ef      	bne.n	8005b08 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	bf14      	ite	ne
 8005b2e:	2301      	movne	r3, #1
 8005b30:	2300      	moveq	r3, #0
 8005b32:	b2db      	uxtb	r3, r3
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bc80      	pop	{r7}
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	20002b10 	.word	0x20002b10

08005b44 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005b4e:	2300      	movs	r3, #0
 8005b50:	60fb      	str	r3, [r7, #12]
 8005b52:	e02e      	b.n	8005bb2 <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8005b54:	4958      	ldr	r1, [pc, #352]	; (8005cb8 <inc_lock+0x174>)
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	005b      	lsls	r3, r3, #1
 8005b5c:	4413      	add	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	440b      	add	r3, r1
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d11d      	bne.n	8005bac <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8005b70:	4951      	ldr	r1, [pc, #324]	; (8005cb8 <inc_lock+0x174>)
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	4613      	mov	r3, r2
 8005b76:	005b      	lsls	r3, r3, #1
 8005b78:	4413      	add	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	440b      	add	r3, r1
 8005b7e:	3304      	adds	r3, #4
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b88:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d10e      	bne.n	8005bac <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8005b8e:	494a      	ldr	r1, [pc, #296]	; (8005cb8 <inc_lock+0x174>)
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	4613      	mov	r3, r2
 8005b94:	005b      	lsls	r3, r3, #1
 8005b96:	4413      	add	r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	440b      	add	r3, r1
 8005b9c:	3308      	adds	r3, #8
 8005b9e:	881a      	ldrh	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ba6:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d006      	beq.n	8005bba <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	60fb      	str	r3, [r7, #12]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d9cd      	bls.n	8005b54 <inc_lock+0x10>
 8005bb8:	e000      	b.n	8005bbc <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8005bba:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d148      	bne.n	8005c54 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	60fb      	str	r3, [r7, #12]
 8005bc6:	e002      	b.n	8005bce <inc_lock+0x8a>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	60fb      	str	r3, [r7, #12]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d809      	bhi.n	8005be8 <inc_lock+0xa4>
 8005bd4:	4938      	ldr	r1, [pc, #224]	; (8005cb8 <inc_lock+0x174>)
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	005b      	lsls	r3, r3, #1
 8005bdc:	4413      	add	r3, r2
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	440b      	add	r3, r1
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1ef      	bne.n	8005bc8 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d101      	bne.n	8005bf2 <inc_lock+0xae>
 8005bee:	2300      	movs	r3, #0
 8005bf0:	e05d      	b.n	8005cae <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bf8:	6819      	ldr	r1, [r3, #0]
 8005bfa:	482f      	ldr	r0, [pc, #188]	; (8005cb8 <inc_lock+0x174>)
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	005b      	lsls	r3, r3, #1
 8005c02:	4413      	add	r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4403      	add	r3, r0
 8005c08:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c10:	6899      	ldr	r1, [r3, #8]
 8005c12:	4829      	ldr	r0, [pc, #164]	; (8005cb8 <inc_lock+0x174>)
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	4613      	mov	r3, r2
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	4413      	add	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4403      	add	r3, r0
 8005c20:	3304      	adds	r3, #4
 8005c22:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c2a:	88d8      	ldrh	r0, [r3, #6]
 8005c2c:	4922      	ldr	r1, [pc, #136]	; (8005cb8 <inc_lock+0x174>)
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	4613      	mov	r3, r2
 8005c32:	005b      	lsls	r3, r3, #1
 8005c34:	4413      	add	r3, r2
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	440b      	add	r3, r1
 8005c3a:	3308      	adds	r3, #8
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8005c40:	491d      	ldr	r1, [pc, #116]	; (8005cb8 <inc_lock+0x174>)
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	4613      	mov	r3, r2
 8005c46:	005b      	lsls	r3, r3, #1
 8005c48:	4413      	add	r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	440b      	add	r3, r1
 8005c4e:	330a      	adds	r3, #10
 8005c50:	2200      	movs	r2, #0
 8005c52:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00c      	beq.n	8005c74 <inc_lock+0x130>
 8005c5a:	4917      	ldr	r1, [pc, #92]	; (8005cb8 <inc_lock+0x174>)
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	005b      	lsls	r3, r3, #1
 8005c62:	4413      	add	r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	440b      	add	r3, r1
 8005c68:	330a      	adds	r3, #10
 8005c6a:	881b      	ldrh	r3, [r3, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d001      	beq.n	8005c74 <inc_lock+0x130>
 8005c70:	2300      	movs	r3, #0
 8005c72:	e01c      	b.n	8005cae <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10b      	bne.n	8005c92 <inc_lock+0x14e>
 8005c7a:	490f      	ldr	r1, [pc, #60]	; (8005cb8 <inc_lock+0x174>)
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	005b      	lsls	r3, r3, #1
 8005c82:	4413      	add	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	440b      	add	r3, r1
 8005c88:	330a      	adds	r3, #10
 8005c8a:	881b      	ldrh	r3, [r3, #0]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	b299      	uxth	r1, r3
 8005c90:	e001      	b.n	8005c96 <inc_lock+0x152>
 8005c92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c96:	4808      	ldr	r0, [pc, #32]	; (8005cb8 <inc_lock+0x174>)
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	005b      	lsls	r3, r3, #1
 8005c9e:	4413      	add	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4403      	add	r3, r0
 8005ca4:	330a      	adds	r3, #10
 8005ca6:	460a      	mov	r2, r1
 8005ca8:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	3301      	adds	r3, #1
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3714      	adds	r7, #20
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bc80      	pop	{r7}
 8005cb6:	4770      	bx	lr
 8005cb8:	20002b10 	.word	0x20002b10

08005cbc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	607b      	str	r3, [r7, #4]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d82e      	bhi.n	8005d2e <dec_lock+0x72>
		n = Files[i].ctr;
 8005cd0:	491b      	ldr	r1, [pc, #108]	; (8005d40 <dec_lock+0x84>)
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	005b      	lsls	r3, r3, #1
 8005cd8:	4413      	add	r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	440b      	add	r3, r1
 8005cde:	330a      	adds	r3, #10
 8005ce0:	881b      	ldrh	r3, [r3, #0]
 8005ce2:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005ce4:	89fb      	ldrh	r3, [r7, #14]
 8005ce6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cea:	d101      	bne.n	8005cf0 <dec_lock+0x34>
 8005cec:	2300      	movs	r3, #0
 8005cee:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8005cf0:	89fb      	ldrh	r3, [r7, #14]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d002      	beq.n	8005cfc <dec_lock+0x40>
 8005cf6:	89fb      	ldrh	r3, [r7, #14]
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005cfc:	4910      	ldr	r1, [pc, #64]	; (8005d40 <dec_lock+0x84>)
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	4613      	mov	r3, r2
 8005d02:	005b      	lsls	r3, r3, #1
 8005d04:	4413      	add	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	440b      	add	r3, r1
 8005d0a:	330a      	adds	r3, #10
 8005d0c:	89fa      	ldrh	r2, [r7, #14]
 8005d0e:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005d10:	89fb      	ldrh	r3, [r7, #14]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d108      	bne.n	8005d28 <dec_lock+0x6c>
 8005d16:	490a      	ldr	r1, [pc, #40]	; (8005d40 <dec_lock+0x84>)
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	005b      	lsls	r3, r3, #1
 8005d1e:	4413      	add	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	440b      	add	r3, r1
 8005d24:	2200      	movs	r2, #0
 8005d26:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	737b      	strb	r3, [r7, #13]
 8005d2c:	e001      	b.n	8005d32 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005d2e:	2302      	movs	r3, #2
 8005d30:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005d32:	7b7b      	ldrb	r3, [r7, #13]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3714      	adds	r7, #20
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bc80      	pop	{r7}
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	20002b10 	.word	0x20002b10

08005d44 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	e016      	b.n	8005d80 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005d52:	4910      	ldr	r1, [pc, #64]	; (8005d94 <clear_lock+0x50>)
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	4613      	mov	r3, r2
 8005d58:	005b      	lsls	r3, r3, #1
 8005d5a:	4413      	add	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	440b      	add	r3, r1
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d108      	bne.n	8005d7a <clear_lock+0x36>
 8005d68:	490a      	ldr	r1, [pc, #40]	; (8005d94 <clear_lock+0x50>)
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	005b      	lsls	r3, r3, #1
 8005d70:	4413      	add	r3, r2
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	440b      	add	r3, r1
 8005d76:	2200      	movs	r2, #0
 8005d78:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d9e5      	bls.n	8005d52 <clear_lock+0xe>
	}
}
 8005d86:	bf00      	nop
 8005d88:	bf00      	nop
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bc80      	pop	{r7}
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	20002b10 	.word	0x20002b10

08005d98 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005da0:	2300      	movs	r3, #0
 8005da2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005daa:	791b      	ldrb	r3, [r3, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d040      	beq.n	8005e32 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dc0:	7858      	ldrb	r0, [r3, #1]
 8005dc2:	6879      	ldr	r1, [r7, #4]
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	f7ff fd72 	bl	80058b0 <disk_write>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d002      	beq.n	8005dd8 <sync_window+0x40>
			res = FR_DISK_ERR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	73fb      	strb	r3, [r7, #15]
 8005dd6:	e02c      	b.n	8005e32 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dde:	2200      	movs	r2, #0
 8005de0:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	1ad2      	subs	r2, r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d21b      	bcs.n	8005e32 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e00:	78db      	ldrb	r3, [r3, #3]
 8005e02:	613b      	str	r3, [r7, #16]
 8005e04:	e012      	b.n	8005e2c <sync_window+0x94>
					wsect += fs->fsize;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	697a      	ldr	r2, [r7, #20]
 8005e10:	4413      	add	r3, r2
 8005e12:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e1a:	7858      	ldrb	r0, [r3, #1]
 8005e1c:	6879      	ldr	r1, [r7, #4]
 8005e1e:	2301      	movs	r3, #1
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	f7ff fd45 	bl	80058b0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	613b      	str	r3, [r7, #16]
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d8e9      	bhi.n	8005e06 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8005e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3718      	adds	r7, #24
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005e46:	2300      	movs	r3, #0
 8005e48:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e52:	683a      	ldr	r2, [r7, #0]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d01e      	beq.n	8005e96 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f7ff ff9d 	bl	8005d98 <sync_window>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005e62:	7bfb      	ldrb	r3, [r7, #15]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d116      	bne.n	8005e96 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e6e:	7858      	ldrb	r0, [r3, #1]
 8005e70:	6879      	ldr	r1, [r7, #4]
 8005e72:	2301      	movs	r3, #1
 8005e74:	683a      	ldr	r2, [r7, #0]
 8005e76:	f7ff fcfb 	bl	8005870 <disk_read>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d004      	beq.n	8005e8a <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005e80:	f04f 33ff 	mov.w	r3, #4294967295
 8005e84:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e90:	461a      	mov	r2, r3
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 8005e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f7ff ff75 	bl	8005d98 <sync_window>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005eb2:	7bfb      	ldrb	r3, [r7, #15]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f040 80ad 	bne.w	8006014 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	2b03      	cmp	r3, #3
 8005ec4:	f040 8098 	bne.w	8005ff8 <sync_fs+0x158>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ece:	795b      	ldrb	r3, [r3, #5]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	f040 8091 	bne.w	8005ff8 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ede:	895b      	ldrh	r3, [r3, #10]
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	f7ff fd40 	bl	8005968 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2255      	movs	r2, #85	; 0x55
 8005eec:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	22aa      	movs	r2, #170	; 0xaa
 8005ef4:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2252      	movs	r2, #82	; 0x52
 8005efc:	701a      	strb	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2252      	movs	r2, #82	; 0x52
 8005f02:	705a      	strb	r2, [r3, #1]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2261      	movs	r2, #97	; 0x61
 8005f08:	709a      	strb	r2, [r3, #2]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2241      	movs	r2, #65	; 0x41
 8005f0e:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2272      	movs	r2, #114	; 0x72
 8005f14:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2272      	movs	r2, #114	; 0x72
 8005f1c:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2241      	movs	r2, #65	; 0x41
 8005f24:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2261      	movs	r2, #97	; 0x61
 8005f2c:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	0a1b      	lsrs	r3, r3, #8
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	b2da      	uxtb	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	0c1b      	lsrs	r3, r3, #16
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	0e1b      	lsrs	r3, r3, #24
 8005f72:	b2da      	uxtb	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	b2da      	uxtb	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	0a1b      	lsrs	r3, r3, #8
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	b2da      	uxtb	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	0c1b      	lsrs	r3, r3, #16
 8005faa:	b2da      	uxtb	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	0e1b      	lsrs	r3, r3, #24
 8005fbc:	b2da      	uxtb	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fca:	69db      	ldr	r3, [r3, #28]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005fd4:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fdc:	7858      	ldrb	r0, [r3, #1]
 8005fde:	6879      	ldr	r1, [r7, #4]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe8:	2301      	movs	r3, #1
 8005fea:	f7ff fc61 	bl	80058b0 <disk_write>
			fs->fsi_flag = 0;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ffe:	785b      	ldrb	r3, [r3, #1]
 8006000:	2200      	movs	r2, #0
 8006002:	2100      	movs	r1, #0
 8006004:	4618      	mov	r0, r3
 8006006:	f7ff fc73 	bl	80058f0 <disk_ioctl>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d001      	beq.n	8006014 <sync_fs+0x174>
			res = FR_DISK_ERR;
 8006010:	2301      	movs	r3, #1
 8006012:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006014:	7bfb      	ldrb	r3, [r7, #15]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800601e:	b480      	push	{r7}
 8006020:	b083      	sub	sp, #12
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	3b02      	subs	r3, #2
 800602c:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	3b02      	subs	r3, #2
 8006038:	683a      	ldr	r2, [r7, #0]
 800603a:	429a      	cmp	r2, r3
 800603c:	d301      	bcc.n	8006042 <clust2sect+0x24>
 800603e:	2300      	movs	r3, #0
 8006040:	e00c      	b.n	800605c <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006048:	789b      	ldrb	r3, [r3, #2]
 800604a:	461a      	mov	r2, r3
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	fb03 f202 	mul.w	r2, r3, r2
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605a:	4413      	add	r3, r2
}
 800605c:	4618      	mov	r0, r3
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	bc80      	pop	{r7}
 8006064:	4770      	bx	lr

08006066 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b086      	sub	sp, #24
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
 800606e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d906      	bls.n	8006084 <get_fat+0x1e>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	429a      	cmp	r2, r3
 8006082:	d302      	bcc.n	800608a <get_fat+0x24>
		val = 1;	/* Internal error */
 8006084:	2301      	movs	r3, #1
 8006086:	617b      	str	r3, [r7, #20]
 8006088:	e0e4      	b.n	8006254 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800608a:	f04f 33ff 	mov.w	r3, #4294967295
 800608e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	2b03      	cmp	r3, #3
 800609a:	f000 8098 	beq.w	80061ce <get_fat+0x168>
 800609e:	2b03      	cmp	r3, #3
 80060a0:	f300 80ce 	bgt.w	8006240 <get_fat+0x1da>
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d002      	beq.n	80060ae <get_fat+0x48>
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d05f      	beq.n	800616c <get_fat+0x106>
 80060ac:	e0c8      	b.n	8006240 <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	60fb      	str	r3, [r7, #12]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	085b      	lsrs	r3, r3, #1
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	4413      	add	r3, r2
 80060ba:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060c2:	6a1a      	ldr	r2, [r3, #32]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ca:	895b      	ldrh	r3, [r3, #10]
 80060cc:	4619      	mov	r1, r3
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80060d4:	4413      	add	r3, r2
 80060d6:	4619      	mov	r1, r3
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f7ff feaf 	bl	8005e3c <move_window>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f040 80b0 	bne.w	8006246 <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	60fa      	str	r2, [r7, #12]
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80060f2:	8952      	ldrh	r2, [r2, #10]
 80060f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80060f8:	fb01 f202 	mul.w	r2, r1, r2
 80060fc:	1a9b      	subs	r3, r3, r2
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	5cd3      	ldrb	r3, [r2, r3]
 8006102:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800610a:	6a1a      	ldr	r2, [r3, #32]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006112:	895b      	ldrh	r3, [r3, #10]
 8006114:	4619      	mov	r1, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	fbb3 f3f1 	udiv	r3, r3, r1
 800611c:	4413      	add	r3, r2
 800611e:	4619      	mov	r1, r3
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f7ff fe8b 	bl	8005e3c <move_window>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	f040 808e 	bne.w	800624a <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006134:	895b      	ldrh	r3, [r3, #10]
 8006136:	461a      	mov	r2, r3
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	fbb3 f1f2 	udiv	r1, r3, r2
 800613e:	fb01 f202 	mul.w	r2, r1, r2
 8006142:	1a9b      	subs	r3, r3, r2
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	5cd3      	ldrb	r3, [r2, r3]
 8006148:	021b      	lsls	r3, r3, #8
 800614a:	461a      	mov	r2, r3
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	4313      	orrs	r3, r2
 8006150:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	f003 0301 	and.w	r3, r3, #1
 8006158:	2b00      	cmp	r3, #0
 800615a:	d002      	beq.n	8006162 <get_fat+0xfc>
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	091b      	lsrs	r3, r3, #4
 8006160:	e002      	b.n	8006168 <get_fat+0x102>
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006168:	617b      	str	r3, [r7, #20]
			break;
 800616a:	e073      	b.n	8006254 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006172:	6a1a      	ldr	r2, [r3, #32]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800617a:	895b      	ldrh	r3, [r3, #10]
 800617c:	085b      	lsrs	r3, r3, #1
 800617e:	b29b      	uxth	r3, r3
 8006180:	4619      	mov	r1, r3
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	fbb3 f3f1 	udiv	r3, r3, r1
 8006188:	4413      	add	r3, r2
 800618a:	4619      	mov	r1, r3
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f7ff fe55 	bl	8005e3c <move_window>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d15a      	bne.n	800624e <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	005b      	lsls	r3, r3, #1
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80061a2:	8952      	ldrh	r2, [r2, #10]
 80061a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80061a8:	fb01 f202 	mul.w	r2, r1, r2
 80061ac:	1a9b      	subs	r3, r3, r2
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	4413      	add	r3, r2
 80061b2:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	3301      	adds	r3, #1
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	021b      	lsls	r3, r3, #8
 80061bc:	b21a      	sxth	r2, r3
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	b21b      	sxth	r3, r3
 80061c4:	4313      	orrs	r3, r2
 80061c6:	b21b      	sxth	r3, r3
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	617b      	str	r3, [r7, #20]
			break;
 80061cc:	e042      	b.n	8006254 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061d4:	6a1a      	ldr	r2, [r3, #32]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061dc:	895b      	ldrh	r3, [r3, #10]
 80061de:	089b      	lsrs	r3, r3, #2
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	4619      	mov	r1, r3
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80061ea:	4413      	add	r3, r2
 80061ec:	4619      	mov	r1, r3
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f7ff fe24 	bl	8005e3c <move_window>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d12b      	bne.n	8006252 <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006204:	8952      	ldrh	r2, [r2, #10]
 8006206:	fbb3 f1f2 	udiv	r1, r3, r2
 800620a:	fb01 f202 	mul.w	r2, r1, r2
 800620e:	1a9b      	subs	r3, r3, r2
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	4413      	add	r3, r2
 8006214:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	3303      	adds	r3, #3
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	061a      	lsls	r2, r3, #24
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	3302      	adds	r3, #2
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	041b      	lsls	r3, r3, #16
 8006226:	4313      	orrs	r3, r2
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	3201      	adds	r2, #1
 800622c:	7812      	ldrb	r2, [r2, #0]
 800622e:	0212      	lsls	r2, r2, #8
 8006230:	4313      	orrs	r3, r2
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	7812      	ldrb	r2, [r2, #0]
 8006236:	4313      	orrs	r3, r2
 8006238:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800623c:	617b      	str	r3, [r7, #20]
			break;
 800623e:	e009      	b.n	8006254 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 8006240:	2301      	movs	r3, #1
 8006242:	617b      	str	r3, [r7, #20]
 8006244:	e006      	b.n	8006254 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006246:	bf00      	nop
 8006248:	e004      	b.n	8006254 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800624a:	bf00      	nop
 800624c:	e002      	b.n	8006254 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800624e:	bf00      	nop
 8006250:	e000      	b.n	8006254 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006252:	bf00      	nop
		}
	}

	return val;
 8006254:	697b      	ldr	r3, [r7, #20]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3718      	adds	r7, #24
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b088      	sub	sp, #32
 8006262:	af00      	add	r7, sp, #0
 8006264:	60f8      	str	r0, [r7, #12]
 8006266:	60b9      	str	r1, [r7, #8]
 8006268:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d906      	bls.n	800627e <put_fat+0x20>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006276:	695b      	ldr	r3, [r3, #20]
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	429a      	cmp	r2, r3
 800627c:	d302      	bcc.n	8006284 <put_fat+0x26>
		res = FR_INT_ERR;
 800627e:	2302      	movs	r3, #2
 8006280:	77fb      	strb	r3, [r7, #31]
 8006282:	e13a      	b.n	80064fa <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	2b03      	cmp	r3, #3
 800628e:	f000 80d0 	beq.w	8006432 <put_fat+0x1d4>
 8006292:	2b03      	cmp	r3, #3
 8006294:	f300 8127 	bgt.w	80064e6 <put_fat+0x288>
 8006298:	2b01      	cmp	r3, #1
 800629a:	d003      	beq.n	80062a4 <put_fat+0x46>
 800629c:	2b02      	cmp	r3, #2
 800629e:	f000 808f 	beq.w	80063c0 <put_fat+0x162>
 80062a2:	e120      	b.n	80064e6 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	617b      	str	r3, [r7, #20]
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	085b      	lsrs	r3, r3, #1
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	4413      	add	r3, r2
 80062b0:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062b8:	6a1a      	ldr	r2, [r3, #32]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062c0:	895b      	ldrh	r3, [r3, #10]
 80062c2:	4619      	mov	r1, r3
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80062ca:	4413      	add	r3, r2
 80062cc:	4619      	mov	r1, r3
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f7ff fdb4 	bl	8005e3c <move_window>
 80062d4:	4603      	mov	r3, r0
 80062d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80062d8:	7ffb      	ldrb	r3, [r7, #31]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f040 8106 	bne.w	80064ec <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	1c5a      	adds	r2, r3, #1
 80062e4:	617a      	str	r2, [r7, #20]
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80062ec:	8952      	ldrh	r2, [r2, #10]
 80062ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80062f2:	fb01 f202 	mul.w	r2, r1, r2
 80062f6:	1a9b      	subs	r3, r3, r2
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	4413      	add	r3, r2
 80062fc:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	f003 0301 	and.w	r3, r3, #1
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00d      	beq.n	8006324 <put_fat+0xc6>
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	b25b      	sxtb	r3, r3
 800630e:	f003 030f 	and.w	r3, r3, #15
 8006312:	b25a      	sxtb	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	b2db      	uxtb	r3, r3
 8006318:	011b      	lsls	r3, r3, #4
 800631a:	b25b      	sxtb	r3, r3
 800631c:	4313      	orrs	r3, r2
 800631e:	b25b      	sxtb	r3, r3
 8006320:	b2db      	uxtb	r3, r3
 8006322:	e001      	b.n	8006328 <put_fat+0xca>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	b2db      	uxtb	r3, r3
 8006328:	69ba      	ldr	r2, [r7, #24]
 800632a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006332:	2201      	movs	r2, #1
 8006334:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800633c:	6a1a      	ldr	r2, [r3, #32]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006344:	895b      	ldrh	r3, [r3, #10]
 8006346:	4619      	mov	r1, r3
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	fbb3 f3f1 	udiv	r3, r3, r1
 800634e:	4413      	add	r3, r2
 8006350:	4619      	mov	r1, r3
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f7ff fd72 	bl	8005e3c <move_window>
 8006358:	4603      	mov	r3, r0
 800635a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800635c:	7ffb      	ldrb	r3, [r7, #31]
 800635e:	2b00      	cmp	r3, #0
 8006360:	f040 80c6 	bne.w	80064f0 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800636a:	895b      	ldrh	r3, [r3, #10]
 800636c:	461a      	mov	r2, r3
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	fbb3 f1f2 	udiv	r1, r3, r2
 8006374:	fb01 f202 	mul.w	r2, r1, r2
 8006378:	1a9b      	subs	r3, r3, r2
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	4413      	add	r3, r2
 800637e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b00      	cmp	r3, #0
 8006388:	d003      	beq.n	8006392 <put_fat+0x134>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	091b      	lsrs	r3, r3, #4
 800638e:	b2db      	uxtb	r3, r3
 8006390:	e00e      	b.n	80063b0 <put_fat+0x152>
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	b25b      	sxtb	r3, r3
 8006398:	f023 030f 	bic.w	r3, r3, #15
 800639c:	b25a      	sxtb	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	0a1b      	lsrs	r3, r3, #8
 80063a2:	b25b      	sxtb	r3, r3
 80063a4:	f003 030f 	and.w	r3, r3, #15
 80063a8:	b25b      	sxtb	r3, r3
 80063aa:	4313      	orrs	r3, r2
 80063ac:	b25b      	sxtb	r3, r3
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063ba:	2201      	movs	r2, #1
 80063bc:	711a      	strb	r2, [r3, #4]
			break;
 80063be:	e09c      	b.n	80064fa <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063c6:	6a1a      	ldr	r2, [r3, #32]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063ce:	895b      	ldrh	r3, [r3, #10]
 80063d0:	085b      	lsrs	r3, r3, #1
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	4619      	mov	r1, r3
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80063dc:	4413      	add	r3, r2
 80063de:	4619      	mov	r1, r3
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f7ff fd2b 	bl	8005e3c <move_window>
 80063e6:	4603      	mov	r3, r0
 80063e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80063ea:	7ffb      	ldrb	r3, [r7, #31]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f040 8081 	bne.w	80064f4 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	005b      	lsls	r3, r3, #1
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80063fc:	8952      	ldrh	r2, [r2, #10]
 80063fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8006402:	fb01 f202 	mul.w	r2, r1, r2
 8006406:	1a9b      	subs	r3, r3, r2
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	4413      	add	r3, r2
 800640c:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	b2da      	uxtb	r2, r3
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	701a      	strb	r2, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	b29b      	uxth	r3, r3
 800641a:	0a1b      	lsrs	r3, r3, #8
 800641c:	b29a      	uxth	r2, r3
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	3301      	adds	r3, #1
 8006422:	b2d2      	uxtb	r2, r2
 8006424:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800642c:	2201      	movs	r2, #1
 800642e:	711a      	strb	r2, [r3, #4]
			break;
 8006430:	e063      	b.n	80064fa <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006438:	6a1a      	ldr	r2, [r3, #32]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006440:	895b      	ldrh	r3, [r3, #10]
 8006442:	089b      	lsrs	r3, r3, #2
 8006444:	b29b      	uxth	r3, r3
 8006446:	4619      	mov	r1, r3
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	fbb3 f3f1 	udiv	r3, r3, r1
 800644e:	4413      	add	r3, r2
 8006450:	4619      	mov	r1, r3
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f7ff fcf2 	bl	8005e3c <move_window>
 8006458:	4603      	mov	r3, r0
 800645a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800645c:	7ffb      	ldrb	r3, [r7, #31]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d14a      	bne.n	80064f8 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800646c:	8952      	ldrh	r2, [r2, #10]
 800646e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006472:	fb01 f202 	mul.w	r2, r1, r2
 8006476:	1a9b      	subs	r3, r3, r2
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	4413      	add	r3, r2
 800647c:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	3303      	adds	r3, #3
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	061a      	lsls	r2, r3, #24
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	3302      	adds	r3, #2
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	041b      	lsls	r3, r3, #16
 800648e:	4313      	orrs	r3, r2
 8006490:	69ba      	ldr	r2, [r7, #24]
 8006492:	3201      	adds	r2, #1
 8006494:	7812      	ldrb	r2, [r2, #0]
 8006496:	0212      	lsls	r2, r2, #8
 8006498:	4313      	orrs	r3, r2
 800649a:	69ba      	ldr	r2, [r7, #24]
 800649c:	7812      	ldrb	r2, [r2, #0]
 800649e:	4313      	orrs	r3, r2
 80064a0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	b2da      	uxtb	r2, r3
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	701a      	strb	r2, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	0a1b      	lsrs	r3, r3, #8
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	3301      	adds	r3, #1
 80064be:	b2d2      	uxtb	r2, r2
 80064c0:	701a      	strb	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	0c1a      	lsrs	r2, r3, #16
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	3302      	adds	r3, #2
 80064ca:	b2d2      	uxtb	r2, r2
 80064cc:	701a      	strb	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	0e1a      	lsrs	r2, r3, #24
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	3303      	adds	r3, #3
 80064d6:	b2d2      	uxtb	r2, r2
 80064d8:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064e0:	2201      	movs	r2, #1
 80064e2:	711a      	strb	r2, [r3, #4]
			break;
 80064e4:	e009      	b.n	80064fa <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 80064e6:	2302      	movs	r3, #2
 80064e8:	77fb      	strb	r3, [r7, #31]
 80064ea:	e006      	b.n	80064fa <put_fat+0x29c>
			if (res != FR_OK) break;
 80064ec:	bf00      	nop
 80064ee:	e004      	b.n	80064fa <put_fat+0x29c>
			if (res != FR_OK) break;
 80064f0:	bf00      	nop
 80064f2:	e002      	b.n	80064fa <put_fat+0x29c>
			if (res != FR_OK) break;
 80064f4:	bf00      	nop
 80064f6:	e000      	b.n	80064fa <put_fat+0x29c>
			if (res != FR_OK) break;
 80064f8:	bf00      	nop
		}
	}

	return res;
 80064fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3720      	adds	r7, #32
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d906      	bls.n	8006522 <remove_chain+0x1e>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	429a      	cmp	r2, r3
 8006520:	d302      	bcc.n	8006528 <remove_chain+0x24>
		res = FR_INT_ERR;
 8006522:	2302      	movs	r3, #2
 8006524:	73fb      	strb	r3, [r7, #15]
 8006526:	e049      	b.n	80065bc <remove_chain+0xb8>

	} else {
		res = FR_OK;
 8006528:	2300      	movs	r3, #0
 800652a:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800652c:	e03b      	b.n	80065a6 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800652e:	6839      	ldr	r1, [r7, #0]
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f7ff fd98 	bl	8006066 <get_fat>
 8006536:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d03b      	beq.n	80065b6 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d102      	bne.n	800654a <remove_chain+0x46>
 8006544:	2302      	movs	r3, #2
 8006546:	73fb      	strb	r3, [r7, #15]
 8006548:	e038      	b.n	80065bc <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006550:	d102      	bne.n	8006558 <remove_chain+0x54>
 8006552:	2301      	movs	r3, #1
 8006554:	73fb      	strb	r3, [r7, #15]
 8006556:	e031      	b.n	80065bc <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8006558:	2200      	movs	r2, #0
 800655a:	6839      	ldr	r1, [r7, #0]
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f7ff fe7e 	bl	800625e <put_fat>
 8006562:	4603      	mov	r3, r0
 8006564:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006566:	7bfb      	ldrb	r3, [r7, #15]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d126      	bne.n	80065ba <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006578:	d013      	beq.n	80065a2 <remove_chain+0x9e>
				fs->free_clust++;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	3301      	adds	r3, #1
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800658a:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006592:	795b      	ldrb	r3, [r3, #5]
 8006594:	f043 0301 	orr.w	r3, r3, #1
 8006598:	b2da      	uxtb	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065a0:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d3bc      	bcc.n	800652e <remove_chain+0x2a>
 80065b4:	e002      	b.n	80065bc <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 80065b6:	bf00      	nop
 80065b8:	e000      	b.n	80065bc <remove_chain+0xb8>
			if (res != FR_OK) break;
 80065ba:	bf00      	nop
		}
	}

	return res;
 80065bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b086      	sub	sp, #24
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
 80065ce:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d111      	bne.n	80065fa <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d006      	beq.n	80065f4 <create_chain+0x2e>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d31d      	bcc.n	8006630 <create_chain+0x6a>
 80065f4:	2301      	movs	r3, #1
 80065f6:	613b      	str	r3, [r7, #16]
 80065f8:	e01a      	b.n	8006630 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80065fa:	6839      	ldr	r1, [r7, #0]
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f7ff fd32 	bl	8006066 <get_fat>
 8006602:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d801      	bhi.n	800660e <create_chain+0x48>
 800660a:	2301      	movs	r3, #1
 800660c:	e07f      	b.n	800670e <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006614:	d101      	bne.n	800661a <create_chain+0x54>
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	e079      	b.n	800670e <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	429a      	cmp	r2, r3
 8006626:	d201      	bcs.n	800662c <create_chain+0x66>
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	e070      	b.n	800670e <create_chain+0x148>
		scl = clst;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	3301      	adds	r3, #1
 8006638:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006640:	695b      	ldr	r3, [r3, #20]
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	429a      	cmp	r2, r3
 8006646:	d307      	bcc.n	8006658 <create_chain+0x92>
			ncl = 2;
 8006648:	2302      	movs	r3, #2
 800664a:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	429a      	cmp	r2, r3
 8006652:	d901      	bls.n	8006658 <create_chain+0x92>
 8006654:	2300      	movs	r3, #0
 8006656:	e05a      	b.n	800670e <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8006658:	6979      	ldr	r1, [r7, #20]
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f7ff fd03 	bl	8006066 <get_fat>
 8006660:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00e      	beq.n	8006686 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666e:	d002      	beq.n	8006676 <create_chain+0xb0>
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2b01      	cmp	r3, #1
 8006674:	d101      	bne.n	800667a <create_chain+0xb4>
			return cs;
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	e049      	b.n	800670e <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	429a      	cmp	r2, r3
 8006680:	d1d8      	bne.n	8006634 <create_chain+0x6e>
 8006682:	2300      	movs	r3, #0
 8006684:	e043      	b.n	800670e <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8006686:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8006688:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800668c:	6979      	ldr	r1, [r7, #20]
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f7ff fde5 	bl	800625e <put_fat>
 8006694:	4603      	mov	r3, r0
 8006696:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8006698:	7bfb      	ldrb	r3, [r7, #15]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d109      	bne.n	80066b2 <create_chain+0xec>
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d006      	beq.n	80066b2 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	6839      	ldr	r1, [r7, #0]
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f7ff fdd8 	bl	800625e <put_fat>
 80066ae:	4603      	mov	r3, r0
 80066b0:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 80066b2:	7bfb      	ldrb	r3, [r7, #15]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d121      	bne.n	80066fc <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066be:	461a      	mov	r2, r3
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d0:	d01c      	beq.n	800670c <create_chain+0x146>
			fs->free_clust--;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	3b01      	subs	r3, #1
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80066e2:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066ea:	795b      	ldrb	r3, [r3, #5]
 80066ec:	f043 0301 	orr.w	r3, r3, #1
 80066f0:	b2da      	uxtb	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066f8:	715a      	strb	r2, [r3, #5]
 80066fa:	e007      	b.n	800670c <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80066fc:	7bfb      	ldrb	r3, [r7, #15]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d102      	bne.n	8006708 <create_chain+0x142>
 8006702:	f04f 33ff 	mov.w	r3, #4294967295
 8006706:	e000      	b.n	800670a <create_chain+0x144>
 8006708:	2301      	movs	r3, #1
 800670a:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800670c:	697b      	ldr	r3, [r7, #20]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3718      	adds	r7, #24
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8006716:	b480      	push	{r7}
 8006718:	b087      	sub	sp, #28
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
 800671e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006728:	3304      	adds	r3, #4
 800672a:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006738:	895b      	ldrh	r3, [r3, #10]
 800673a:	461a      	mov	r2, r3
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006748:	6812      	ldr	r2, [r2, #0]
 800674a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800674e:	7892      	ldrb	r2, [r2, #2]
 8006750:	fbb3 f3f2 	udiv	r3, r3, r2
 8006754:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	1d1a      	adds	r2, r3, #4
 800675a:	613a      	str	r2, [r7, #16]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <clmt_clust+0x54>
 8006766:	2300      	movs	r3, #0
 8006768:	e010      	b.n	800678c <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	429a      	cmp	r2, r3
 8006770:	d307      	bcc.n	8006782 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	617b      	str	r3, [r7, #20]
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	3304      	adds	r3, #4
 800677e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006780:	e7e9      	b.n	8006756 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8006782:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	4413      	add	r3, r2
}
 800678c:	4618      	mov	r0, r3
 800678e:	371c      	adds	r7, #28
 8006790:	46bd      	mov	sp, r7
 8006792:	bc80      	pop	{r7}
 8006794:	4770      	bx	lr

08006796 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b086      	sub	sp, #24
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
 800679e:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067aa:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d009      	beq.n	80067d0 <dir_sdi+0x3a>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067c8:	695b      	ldr	r3, [r3, #20]
 80067ca:	697a      	ldr	r2, [r7, #20]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d301      	bcc.n	80067d4 <dir_sdi+0x3e>
		return FR_INT_ERR;
 80067d0:	2302      	movs	r3, #2
 80067d2:	e0aa      	b.n	800692a <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d110      	bne.n	80067fc <dir_sdi+0x66>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	2b03      	cmp	r3, #3
 80067ea:	d107      	bne.n	80067fc <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fa:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d115      	bne.n	800682e <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800680e:	891b      	ldrh	r3, [r3, #8]
 8006810:	461a      	mov	r2, r3
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	4293      	cmp	r3, r2
 8006816:	d301      	bcc.n	800681c <dir_sdi+0x86>
			return FR_INT_ERR;
 8006818:	2302      	movs	r3, #2
 800681a:	e086      	b.n	800692a <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682a:	613b      	str	r3, [r7, #16]
 800682c:	e043      	b.n	80068b6 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800683a:	895b      	ldrh	r3, [r3, #10]
 800683c:	095b      	lsrs	r3, r3, #5
 800683e:	b29b      	uxth	r3, r3
 8006840:	461a      	mov	r2, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800684e:	789b      	ldrb	r3, [r3, #2]
 8006850:	fb02 f303 	mul.w	r3, r2, r3
 8006854:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8006856:	e021      	b.n	800689c <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6979      	ldr	r1, [r7, #20]
 8006862:	4618      	mov	r0, r3
 8006864:	f7ff fbff 	bl	8006066 <get_fat>
 8006868:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006870:	d101      	bne.n	8006876 <dir_sdi+0xe0>
 8006872:	2301      	movs	r3, #1
 8006874:	e059      	b.n	800692a <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d909      	bls.n	8006890 <dir_sdi+0xfa>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	429a      	cmp	r2, r3
 800688e:	d301      	bcc.n	8006894 <dir_sdi+0xfe>
				return FR_INT_ERR;
 8006890:	2302      	movs	r3, #2
 8006892:	e04a      	b.n	800692a <dir_sdi+0x194>
			idx -= ic;
 8006894:	683a      	ldr	r2, [r7, #0]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d2d9      	bcs.n	8006858 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6979      	ldr	r1, [r7, #20]
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7ff fbb5 	bl	800601e <clust2sect>
 80068b4:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068bc:	461a      	mov	r2, r3
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d101      	bne.n	80068cc <dir_sdi+0x136>
 80068c8:	2302      	movs	r3, #2
 80068ca:	e02e      	b.n	800692a <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068d8:	895b      	ldrh	r3, [r3, #10]
 80068da:	095b      	lsrs	r3, r3, #5
 80068dc:	b29b      	uxth	r3, r3
 80068de:	461a      	mov	r2, r3
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	4413      	add	r3, r2
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80068f0:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4618      	mov	r0, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006908:	895b      	ldrh	r3, [r3, #10]
 800690a:	095b      	lsrs	r3, r3, #5
 800690c:	b29b      	uxth	r3, r3
 800690e:	461a      	mov	r2, r3
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	fbb3 f1f2 	udiv	r1, r3, r2
 8006916:	fb01 f202 	mul.w	r2, r1, r2
 800691a:	1a9b      	subs	r3, r3, r2
 800691c:	015b      	lsls	r3, r3, #5
 800691e:	4403      	add	r3, r0
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006926:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3718      	adds	r7, #24
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006932:	b590      	push	{r4, r7, lr}
 8006934:	b087      	sub	sp, #28
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
 800693a:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006942:	88db      	ldrh	r3, [r3, #6]
 8006944:	3301      	adds	r3, #1
 8006946:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	b29b      	uxth	r3, r3
 800694c:	2b00      	cmp	r3, #0
 800694e:	d005      	beq.n	800695c <dir_next+0x2a>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d101      	bne.n	8006960 <dir_next+0x2e>
		return FR_NO_FILE;
 800695c:	2304      	movs	r3, #4
 800695e:	e12e      	b.n	8006bbe <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800696c:	895b      	ldrh	r3, [r3, #10]
 800696e:	095b      	lsrs	r3, r3, #5
 8006970:	b29b      	uxth	r3, r3
 8006972:	461a      	mov	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	fbb3 f1f2 	udiv	r1, r3, r2
 800697a:	fb01 f202 	mul.w	r2, r1, r2
 800697e:	1a9b      	subs	r3, r3, r2
 8006980:	2b00      	cmp	r3, #0
 8006982:	f040 80fa 	bne.w	8006b7a <dir_next+0x248>
		dp->sect++;					/* Next sector */
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	3301      	adds	r3, #1
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006996:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d10d      	bne.n	80069c0 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069b0:	891b      	ldrh	r3, [r3, #8]
 80069b2:	461a      	mov	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	4293      	cmp	r3, r2
 80069b8:	f0c0 80df 	bcc.w	8006b7a <dir_next+0x248>
				return FR_NO_FILE;
 80069bc:	2304      	movs	r3, #4
 80069be:	e0fe      	b.n	8006bbe <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069cc:	895b      	ldrh	r3, [r3, #10]
 80069ce:	095b      	lsrs	r3, r3, #5
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	461a      	mov	r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80069e0:	6812      	ldr	r2, [r2, #0]
 80069e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80069e6:	7892      	ldrb	r2, [r2, #2]
 80069e8:	3a01      	subs	r2, #1
 80069ea:	4013      	ands	r3, r2
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f040 80c4 	bne.w	8006b7a <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	4619      	mov	r1, r3
 8006a04:	4610      	mov	r0, r2
 8006a06:	f7ff fb2e 	bl	8006066 <get_fat>
 8006a0a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d801      	bhi.n	8006a16 <dir_next+0xe4>
 8006a12:	2302      	movs	r3, #2
 8006a14:	e0d3      	b.n	8006bbe <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a1c:	d101      	bne.n	8006a22 <dir_next+0xf0>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e0cd      	b.n	8006bbe <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a2e:	695b      	ldr	r3, [r3, #20]
 8006a30:	697a      	ldr	r2, [r7, #20]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	f0c0 808e 	bcc.w	8006b54 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d101      	bne.n	8006a42 <dir_next+0x110>
 8006a3e:	2304      	movs	r3, #4
 8006a40:	e0bd      	b.n	8006bbe <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	4619      	mov	r1, r3
 8006a54:	4610      	mov	r0, r2
 8006a56:	f7ff fdb6 	bl	80065c6 <create_chain>
 8006a5a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d101      	bne.n	8006a66 <dir_next+0x134>
 8006a62:	2307      	movs	r3, #7
 8006a64:	e0ab      	b.n	8006bbe <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d101      	bne.n	8006a70 <dir_next+0x13e>
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	e0a6      	b.n	8006bbe <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a76:	d101      	bne.n	8006a7c <dir_next+0x14a>
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e0a0      	b.n	8006bbe <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7ff f987 	bl	8005d98 <sync_window>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d001      	beq.n	8006a94 <dir_next+0x162>
 8006a90:	2301      	movs	r3, #1
 8006a92:	e094      	b.n	8006bbe <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aaa:	895b      	ldrh	r3, [r3, #10]
 8006aac:	461a      	mov	r2, r3
 8006aae:	2100      	movs	r1, #0
 8006ab0:	f7fe ff5a 	bl	8005968 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ac2:	681c      	ldr	r4, [r3, #0]
 8006ac4:	6979      	ldr	r1, [r7, #20]
 8006ac6:	4610      	mov	r0, r2
 8006ac8:	f7ff faa9 	bl	800601e <clust2sect>
 8006acc:	4603      	mov	r3, r0
 8006ace:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 8006ad2:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	613b      	str	r3, [r7, #16]
 8006ad8:	e021      	b.n	8006b1e <dir_next+0x1ec>
						dp->fs->wflag = 1;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7ff f950 	bl	8005d98 <sync_window>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <dir_next+0x1d0>
 8006afe:	2301      	movs	r3, #1
 8006b00:	e05d      	b.n	8006bbe <dir_next+0x28c>
						dp->fs->winsect++;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8006b0e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006b10:	3201      	adds	r2, #1
 8006b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b16:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	613b      	str	r3, [r7, #16]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b2a:	789b      	ldrb	r3, [r3, #2]
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d3d2      	bcc.n	8006ada <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	1acb      	subs	r3, r1, r3
 8006b4e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006b52:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	6979      	ldr	r1, [r7, #20]
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7ff fa57 	bl	800601e <clust2sect>
 8006b70:	4602      	mov	r2, r0
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b78:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b84:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4618      	mov	r0, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b9c:	895b      	ldrh	r3, [r3, #10]
 8006b9e:	095b      	lsrs	r3, r3, #5
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	fbb3 f1f2 	udiv	r1, r3, r2
 8006baa:	fb01 f202 	mul.w	r2, r1, r2
 8006bae:	1a9b      	subs	r3, r3, r2
 8006bb0:	015b      	lsls	r3, r3, #5
 8006bb2:	4403      	add	r3, r0
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006bba:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	371c      	adds	r7, #28
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd90      	pop	{r4, r7, pc}

08006bc6 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b084      	sub	sp, #16
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7ff fddf 	bl	8006796 <dir_sdi>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006bdc:	7bfb      	ldrb	r3, [r7, #15]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d135      	bne.n	8006c4e <dir_alloc+0x88>
		n = 0;
 8006be2:	2300      	movs	r3, #0
 8006be4:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	4610      	mov	r0, r2
 8006bfa:	f7ff f91f 	bl	8005e3c <move_window>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006c02:	7bfb      	ldrb	r3, [r7, #15]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d121      	bne.n	8006c4c <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c0e:	695b      	ldr	r3, [r3, #20]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	2be5      	cmp	r3, #229	; 0xe5
 8006c14:	d006      	beq.n	8006c24 <dir_alloc+0x5e>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d107      	bne.n	8006c34 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	3301      	adds	r3, #1
 8006c28:	60bb      	str	r3, [r7, #8]
 8006c2a:	68ba      	ldr	r2, [r7, #8]
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d102      	bne.n	8006c38 <dir_alloc+0x72>
 8006c32:	e00c      	b.n	8006c4e <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006c34:	2300      	movs	r3, #0
 8006c36:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8006c38:	2101      	movs	r1, #1
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f7ff fe79 	bl	8006932 <dir_next>
 8006c40:	4603      	mov	r3, r0
 8006c42:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8006c44:	7bfb      	ldrb	r3, [r7, #15]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d0cd      	beq.n	8006be6 <dir_alloc+0x20>
 8006c4a:	e000      	b.n	8006c4e <dir_alloc+0x88>
			if (res != FR_OK) break;
 8006c4c:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006c4e:	7bfb      	ldrb	r3, [r7, #15]
 8006c50:	2b04      	cmp	r3, #4
 8006c52:	d101      	bne.n	8006c58 <dir_alloc+0x92>
 8006c54:	2307      	movs	r3, #7
 8006c56:	73fb      	strb	r3, [r7, #15]
	return res;
 8006c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8006c62:	b480      	push	{r7}
 8006c64:	b085      	sub	sp, #20
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
 8006c6a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	331b      	adds	r3, #27
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	021b      	lsls	r3, r3, #8
 8006c74:	b21a      	sxth	r2, r3
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	331a      	adds	r3, #26
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	b21b      	sxth	r3, r3
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	b21b      	sxth	r3, r3
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	2b03      	cmp	r3, #3
 8006c90:	d10f      	bne.n	8006cb2 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	3315      	adds	r3, #21
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	021b      	lsls	r3, r3, #8
 8006c9a:	b21a      	sxth	r2, r3
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	3314      	adds	r3, #20
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	b21b      	sxth	r3, r3
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	b21b      	sxth	r3, r3
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	041b      	lsls	r3, r3, #16
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	60fb      	str	r3, [r7, #12]

	return cl;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3714      	adds	r7, #20
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bc80      	pop	{r7}
 8006cbc:	4770      	bx	lr

08006cbe <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	b083      	sub	sp, #12
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
 8006cc6:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	331a      	adds	r3, #26
 8006ccc:	683a      	ldr	r2, [r7, #0]
 8006cce:	b2d2      	uxtb	r2, r2
 8006cd0:	701a      	strb	r2, [r3, #0]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	0a1b      	lsrs	r3, r3, #8
 8006cd8:	b29a      	uxth	r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	331b      	adds	r3, #27
 8006cde:	b2d2      	uxtb	r2, r2
 8006ce0:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	0c1a      	lsrs	r2, r3, #16
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	3314      	adds	r3, #20
 8006cea:	b2d2      	uxtb	r2, r2
 8006cec:	701a      	strb	r2, [r3, #0]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	0c1b      	lsrs	r3, r3, #16
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	0a1b      	lsrs	r3, r3, #8
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	3315      	adds	r3, #21
 8006cfc:	b2d2      	uxtb	r2, r2
 8006cfe:	701a      	strb	r2, [r3, #0]
}
 8006d00:	bf00      	nop
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bc80      	pop	{r7}
 8006d08:	4770      	bx	lr
	...

08006d0c <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b086      	sub	sp, #24
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d1e:	1e5a      	subs	r2, r3, #1
 8006d20:	4613      	mov	r3, r2
 8006d22:	005b      	lsls	r3, r3, #1
 8006d24:	4413      	add	r3, r2
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	613b      	str	r3, [r7, #16]
 8006d30:	2301      	movs	r3, #1
 8006d32:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8006d34:	4a2b      	ldr	r2, [pc, #172]	; (8006de4 <cmp_lfn+0xd8>)
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	4413      	add	r3, r2
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	683a      	ldr	r2, [r7, #0]
 8006d40:	4413      	add	r3, r2
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	021b      	lsls	r3, r3, #8
 8006d46:	b21a      	sxth	r2, r3
 8006d48:	4926      	ldr	r1, [pc, #152]	; (8006de4 <cmp_lfn+0xd8>)
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	440b      	add	r3, r1
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	4619      	mov	r1, r3
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	440b      	add	r3, r1
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	b21b      	sxth	r3, r3
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	b21b      	sxth	r3, r3
 8006d5e:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8006d60:	89fb      	ldrh	r3, [r7, #14]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d019      	beq.n	8006d9a <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8006d66:	89bb      	ldrh	r3, [r7, #12]
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f002 fc33 	bl	80095d4 <ff_wtoupper>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	2bfe      	cmp	r3, #254	; 0xfe
 8006d76:	d80e      	bhi.n	8006d96 <cmp_lfn+0x8a>
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	1c5a      	adds	r2, r3, #1
 8006d7c:	617a      	str	r2, [r7, #20]
 8006d7e:	005b      	lsls	r3, r3, #1
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	4413      	add	r3, r2
 8006d84:	881b      	ldrh	r3, [r3, #0]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f002 fc24 	bl	80095d4 <ff_wtoupper>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	461a      	mov	r2, r3
 8006d90:	89fb      	ldrh	r3, [r7, #14]
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d008      	beq.n	8006da8 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8006d96:	2300      	movs	r3, #0
 8006d98:	e01f      	b.n	8006dda <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8006d9a:	89bb      	ldrh	r3, [r7, #12]
 8006d9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d001      	beq.n	8006da8 <cmp_lfn+0x9c>
 8006da4:	2300      	movs	r3, #0
 8006da6:	e018      	b.n	8006dda <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	3301      	adds	r3, #1
 8006dac:	613b      	str	r3, [r7, #16]
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	2b0c      	cmp	r3, #12
 8006db2:	d9bf      	bls.n	8006d34 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00b      	beq.n	8006dd8 <cmp_lfn+0xcc>
 8006dc0:	89fb      	ldrh	r3, [r7, #14]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d008      	beq.n	8006dd8 <cmp_lfn+0xcc>
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	005b      	lsls	r3, r3, #1
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	4413      	add	r3, r2
 8006dce:	881b      	ldrh	r3, [r3, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d001      	beq.n	8006dd8 <cmp_lfn+0xcc>
		return 0;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	e000      	b.n	8006dda <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8006dd8:	2301      	movs	r3, #1
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3718      	adds	r7, #24
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	0800c090 	.word	0x0800c090

08006de8 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b089      	sub	sp, #36	; 0x24
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	4611      	mov	r1, r2
 8006df4:	461a      	mov	r2, r3
 8006df6:	460b      	mov	r3, r1
 8006df8:	71fb      	strb	r3, [r7, #7]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	330d      	adds	r3, #13
 8006e02:	79ba      	ldrb	r2, [r7, #6]
 8006e04:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	330b      	adds	r3, #11
 8006e0a:	220f      	movs	r2, #15
 8006e0c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	330c      	adds	r3, #12
 8006e12:	2200      	movs	r2, #0
 8006e14:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	331a      	adds	r3, #26
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	701a      	strb	r2, [r3, #0]
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	331b      	adds	r3, #27
 8006e22:	2200      	movs	r2, #0
 8006e24:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8006e26:	79fb      	ldrb	r3, [r7, #7]
 8006e28:	1e5a      	subs	r2, r3, #1
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	005b      	lsls	r3, r3, #1
 8006e2e:	4413      	add	r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4413      	add	r3, r2
 8006e34:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006e36:	2300      	movs	r3, #0
 8006e38:	82fb      	strh	r3, [r7, #22]
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8006e3e:	8afb      	ldrh	r3, [r7, #22]
 8006e40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d007      	beq.n	8006e58 <fit_lfn+0x70>
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	1c5a      	adds	r2, r3, #1
 8006e4c:	61fa      	str	r2, [r7, #28]
 8006e4e:	005b      	lsls	r3, r3, #1
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	4413      	add	r3, r2
 8006e54:	881b      	ldrh	r3, [r3, #0]
 8006e56:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8006e58:	4a1c      	ldr	r2, [pc, #112]	; (8006ecc <fit_lfn+0xe4>)
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	461a      	mov	r2, r3
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	4413      	add	r3, r2
 8006e66:	8afa      	ldrh	r2, [r7, #22]
 8006e68:	b2d2      	uxtb	r2, r2
 8006e6a:	701a      	strb	r2, [r3, #0]
 8006e6c:	8afb      	ldrh	r3, [r7, #22]
 8006e6e:	0a1b      	lsrs	r3, r3, #8
 8006e70:	b299      	uxth	r1, r3
 8006e72:	4a16      	ldr	r2, [pc, #88]	; (8006ecc <fit_lfn+0xe4>)
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	4413      	add	r3, r2
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	4413      	add	r3, r2
 8006e80:	b2ca      	uxtb	r2, r1
 8006e82:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8006e84:	8afb      	ldrh	r3, [r7, #22]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d102      	bne.n	8006e90 <fit_lfn+0xa8>
 8006e8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e8e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	3301      	adds	r3, #1
 8006e94:	61bb      	str	r3, [r7, #24]
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	2b0c      	cmp	r3, #12
 8006e9a:	d9d0      	bls.n	8006e3e <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8006e9c:	8afb      	ldrh	r3, [r7, #22]
 8006e9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d006      	beq.n	8006eb4 <fit_lfn+0xcc>
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	005b      	lsls	r3, r3, #1
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	4413      	add	r3, r2
 8006eae:	881b      	ldrh	r3, [r3, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d103      	bne.n	8006ebc <fit_lfn+0xd4>
 8006eb4:	79fb      	ldrb	r3, [r7, #7]
 8006eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eba:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	79fa      	ldrb	r2, [r7, #7]
 8006ec0:	701a      	strb	r2, [r3, #0]
}
 8006ec2:	bf00      	nop
 8006ec4:	3724      	adds	r7, #36	; 0x24
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bc80      	pop	{r7}
 8006eca:	4770      	bx	lr
 8006ecc:	0800c090 	.word	0x0800c090

08006ed0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b08c      	sub	sp, #48	; 0x30
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
 8006edc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006ede:	220b      	movs	r2, #11
 8006ee0:	68b9      	ldr	r1, [r7, #8]
 8006ee2:	68f8      	ldr	r0, [r7, #12]
 8006ee4:	f7fe fd22 	bl	800592c <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	2b05      	cmp	r3, #5
 8006eec:	d92b      	bls.n	8006f46 <gen_numname+0x76>
		sr = seq;
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006ef2:	e022      	b.n	8006f3a <gen_numname+0x6a>
			wc = *lfn++;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	1c9a      	adds	r2, r3, #2
 8006ef8:	607a      	str	r2, [r7, #4]
 8006efa:	881b      	ldrh	r3, [r3, #0]
 8006efc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006efe:	2300      	movs	r3, #0
 8006f00:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f02:	e017      	b.n	8006f34 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	005a      	lsls	r2, r3, #1
 8006f08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f0a:	f003 0301 	and.w	r3, r3, #1
 8006f0e:	4413      	add	r3, r2
 8006f10:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006f12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f14:	085b      	lsrs	r3, r3, #1
 8006f16:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d005      	beq.n	8006f2e <gen_numname+0x5e>
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006f28:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006f2c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f30:	3301      	adds	r3, #1
 8006f32:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f36:	2b0f      	cmp	r3, #15
 8006f38:	d9e4      	bls.n	8006f04 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	881b      	ldrh	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1d8      	bne.n	8006ef4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006f46:	2307      	movs	r3, #7
 8006f48:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	f003 030f 	and.w	r3, r3, #15
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	3330      	adds	r3, #48	; 0x30
 8006f56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006f5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f5e:	2b39      	cmp	r3, #57	; 0x39
 8006f60:	d904      	bls.n	8006f6c <gen_numname+0x9c>
 8006f62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f66:	3307      	adds	r3, #7
 8006f68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6e:	1e5a      	subs	r2, r3, #1
 8006f70:	62ba      	str	r2, [r7, #40]	; 0x28
 8006f72:	3330      	adds	r3, #48	; 0x30
 8006f74:	443b      	add	r3, r7
 8006f76:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006f7a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	091b      	lsrs	r3, r3, #4
 8006f82:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1df      	bne.n	8006f4a <gen_numname+0x7a>
	ns[i] = '~';
 8006f8a:	f107 0214 	add.w	r2, r7, #20
 8006f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f90:	4413      	add	r3, r2
 8006f92:	227e      	movs	r2, #126	; 0x7e
 8006f94:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006f96:	2300      	movs	r3, #0
 8006f98:	627b      	str	r3, [r7, #36]	; 0x24
 8006f9a:	e002      	b.n	8006fa2 <gen_numname+0xd2>
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8006fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d205      	bcs.n	8006fb6 <gen_numname+0xe6>
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fae:	4413      	add	r3, r2
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	2b20      	cmp	r3, #32
 8006fb4:	d1f2      	bne.n	8006f9c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb8:	2b07      	cmp	r3, #7
 8006fba:	d807      	bhi.n	8006fcc <gen_numname+0xfc>
 8006fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fbe:	1c5a      	adds	r2, r3, #1
 8006fc0:	62ba      	str	r2, [r7, #40]	; 0x28
 8006fc2:	3330      	adds	r3, #48	; 0x30
 8006fc4:	443b      	add	r3, r7
 8006fc6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006fca:	e000      	b.n	8006fce <gen_numname+0xfe>
 8006fcc:	2120      	movs	r1, #32
 8006fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd0:	1c5a      	adds	r2, r3, #1
 8006fd2:	627a      	str	r2, [r7, #36]	; 0x24
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	460a      	mov	r2, r1
 8006fda:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fde:	2b07      	cmp	r3, #7
 8006fe0:	d9e9      	bls.n	8006fb6 <gen_numname+0xe6>
}
 8006fe2:	bf00      	nop
 8006fe4:	bf00      	nop
 8006fe6:	3730      	adds	r7, #48	; 0x30
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006ff8:	230b      	movs	r3, #11
 8006ffa:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
 8006ffe:	b2da      	uxtb	r2, r3
 8007000:	0852      	lsrs	r2, r2, #1
 8007002:	01db      	lsls	r3, r3, #7
 8007004:	4313      	orrs	r3, r2
 8007006:	b2da      	uxtb	r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	1c59      	adds	r1, r3, #1
 800700c:	6079      	str	r1, [r7, #4]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	4413      	add	r3, r2
 8007012:	73fb      	strb	r3, [r7, #15]
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	3b01      	subs	r3, #1
 8007018:	60bb      	str	r3, [r7, #8]
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1ed      	bne.n	8006ffc <sum_sfn+0x10>
	return sum;
 8007020:	7bfb      	ldrb	r3, [r7, #15]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3714      	adds	r7, #20
 8007026:	46bd      	mov	sp, r7
 8007028:	bc80      	pop	{r7}
 800702a:	4770      	bx	lr

0800702c <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b086      	sub	sp, #24
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007034:	2100      	movs	r1, #0
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f7ff fbad 	bl	8006796 <dir_sdi>
 800703c:	4603      	mov	r3, r0
 800703e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007040:	7dfb      	ldrb	r3, [r7, #23]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <dir_find+0x1e>
 8007046:	7dfb      	ldrb	r3, [r7, #23]
 8007048:	e0b8      	b.n	80071bc <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800704a:	23ff      	movs	r3, #255	; 0xff
 800704c:	753b      	strb	r3, [r7, #20]
 800704e:	7d3b      	ldrb	r3, [r7, #20]
 8007050:	757b      	strb	r3, [r7, #21]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007058:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800705c:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	4619      	mov	r1, r3
 8007070:	4610      	mov	r0, r2
 8007072:	f7fe fee3 	bl	8005e3c <move_window>
 8007076:	4603      	mov	r3, r0
 8007078:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800707a:	7dfb      	ldrb	r3, [r7, #23]
 800707c:	2b00      	cmp	r3, #0
 800707e:	f040 8097 	bne.w	80071b0 <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007092:	7dbb      	ldrb	r3, [r7, #22]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d102      	bne.n	800709e <dir_find+0x72>
 8007098:	2304      	movs	r3, #4
 800709a:	75fb      	strb	r3, [r7, #23]
 800709c:	e08d      	b.n	80071ba <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	330b      	adds	r3, #11
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070a8:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80070aa:	7dbb      	ldrb	r3, [r7, #22]
 80070ac:	2be5      	cmp	r3, #229	; 0xe5
 80070ae:	d007      	beq.n	80070c0 <dir_find+0x94>
 80070b0:	7bfb      	ldrb	r3, [r7, #15]
 80070b2:	f003 0308 	and.w	r3, r3, #8
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00b      	beq.n	80070d2 <dir_find+0xa6>
 80070ba:	7bfb      	ldrb	r3, [r7, #15]
 80070bc:	2b0f      	cmp	r3, #15
 80070be:	d008      	beq.n	80070d2 <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80070c0:	23ff      	movs	r3, #255	; 0xff
 80070c2:	757b      	strb	r3, [r7, #21]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80070ce:	849a      	strh	r2, [r3, #36]	; 0x24
 80070d0:	e063      	b.n	800719a <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80070d2:	7bfb      	ldrb	r3, [r7, #15]
 80070d4:	2b0f      	cmp	r3, #15
 80070d6:	d137      	bne.n	8007148 <dir_find+0x11c>
				if (dp->lfn) {
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070de:	6a1b      	ldr	r3, [r3, #32]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d05a      	beq.n	800719a <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80070e4:	7dbb      	ldrb	r3, [r7, #22]
 80070e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d010      	beq.n	8007110 <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	7b5b      	ldrb	r3, [r3, #13]
 80070f2:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 80070f4:	7dbb      	ldrb	r3, [r7, #22]
 80070f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070fa:	75bb      	strb	r3, [r7, #22]
 80070fc:	7dbb      	ldrb	r3, [r7, #22]
 80070fe:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007106:	88da      	ldrh	r2, [r3, #6]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800710e:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8007110:	7dba      	ldrb	r2, [r7, #22]
 8007112:	7d7b      	ldrb	r3, [r7, #21]
 8007114:	429a      	cmp	r2, r3
 8007116:	d114      	bne.n	8007142 <dir_find+0x116>
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	330d      	adds	r3, #13
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	7d3a      	ldrb	r2, [r7, #20]
 8007120:	429a      	cmp	r2, r3
 8007122:	d10e      	bne.n	8007142 <dir_find+0x116>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800712a:	6a1b      	ldr	r3, [r3, #32]
 800712c:	6939      	ldr	r1, [r7, #16]
 800712e:	4618      	mov	r0, r3
 8007130:	f7ff fdec 	bl	8006d0c <cmp_lfn>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d003      	beq.n	8007142 <dir_find+0x116>
 800713a:	7d7b      	ldrb	r3, [r7, #21]
 800713c:	3b01      	subs	r3, #1
 800713e:	b2db      	uxtb	r3, r3
 8007140:	e000      	b.n	8007144 <dir_find+0x118>
 8007142:	23ff      	movs	r3, #255	; 0xff
 8007144:	757b      	strb	r3, [r7, #21]
 8007146:	e028      	b.n	800719a <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8007148:	7d7b      	ldrb	r3, [r7, #21]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d107      	bne.n	800715e <dir_find+0x132>
 800714e:	6938      	ldr	r0, [r7, #16]
 8007150:	f7ff ff4c 	bl	8006fec <sum_sfn>
 8007154:	4603      	mov	r3, r0
 8007156:	461a      	mov	r2, r3
 8007158:	7d3b      	ldrb	r3, [r7, #20]
 800715a:	4293      	cmp	r3, r2
 800715c:	d02a      	beq.n	80071b4 <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007164:	699b      	ldr	r3, [r3, #24]
 8007166:	330b      	adds	r3, #11
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	f003 0301 	and.w	r3, r3, #1
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10b      	bne.n	800718a <dir_find+0x15e>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	220b      	movs	r2, #11
 800717c:	4619      	mov	r1, r3
 800717e:	6938      	ldr	r0, [r7, #16]
 8007180:	f7fe fc0c 	bl	800599c <mem_cmp>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d016      	beq.n	80071b8 <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800718a:	23ff      	movs	r3, #255	; 0xff
 800718c:	757b      	strb	r3, [r7, #21]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007194:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007198:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800719a:	2100      	movs	r1, #0
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f7ff fbc8 	bl	8006932 <dir_next>
 80071a2:	4603      	mov	r3, r0
 80071a4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80071a6:	7dfb      	ldrb	r3, [r7, #23]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f43f af58 	beq.w	800705e <dir_find+0x32>
 80071ae:	e004      	b.n	80071ba <dir_find+0x18e>
		if (res != FR_OK) break;
 80071b0:	bf00      	nop
 80071b2:	e002      	b.n	80071ba <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80071b4:	bf00      	nop
 80071b6:	e000      	b.n	80071ba <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80071b8:	bf00      	nop

	return res;
 80071ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3718      	adds	r7, #24
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b08c      	sub	sp, #48	; 0x30
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	623b      	str	r3, [r7, #32]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 80071e0:	f107 030c 	add.w	r3, r7, #12
 80071e4:	220c      	movs	r2, #12
 80071e6:	6a39      	ldr	r1, [r7, #32]
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7fe fb9f 	bl	800592c <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80071ee:	7dfb      	ldrb	r3, [r7, #23]
 80071f0:	f003 0301 	and.w	r3, r3, #1
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d03b      	beq.n	8007270 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 80071f8:	6a3b      	ldr	r3, [r7, #32]
 80071fa:	330b      	adds	r3, #11
 80071fc:	2200      	movs	r2, #0
 80071fe:	701a      	strb	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007206:	461a      	mov	r2, r3
 8007208:	2300      	movs	r3, #0
 800720a:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 800720c:	2301      	movs	r3, #1
 800720e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007210:	e013      	b.n	800723a <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8007212:	f107 010c 	add.w	r1, r7, #12
 8007216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007218:	69fa      	ldr	r2, [r7, #28]
 800721a:	6a38      	ldr	r0, [r7, #32]
 800721c:	f7ff fe58 	bl	8006ed0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f7ff ff03 	bl	800702c <dir_find>
 8007226:	4603      	mov	r3, r0
 8007228:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800722c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007230:	2b00      	cmp	r3, #0
 8007232:	d106      	bne.n	8007242 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8007234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007236:	3301      	adds	r3, #1
 8007238:	62bb      	str	r3, [r7, #40]	; 0x28
 800723a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723c:	2b63      	cmp	r3, #99	; 0x63
 800723e:	d9e8      	bls.n	8007212 <dir_register+0x4e>
 8007240:	e000      	b.n	8007244 <dir_register+0x80>
			if (res != FR_OK) break;
 8007242:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007246:	2b64      	cmp	r3, #100	; 0x64
 8007248:	d101      	bne.n	800724e <dir_register+0x8a>
 800724a:	2307      	movs	r3, #7
 800724c:	e0d8      	b.n	8007400 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800724e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007252:	2b04      	cmp	r3, #4
 8007254:	d002      	beq.n	800725c <dir_register+0x98>
 8007256:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800725a:	e0d1      	b.n	8007400 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800725c:	6a3b      	ldr	r3, [r7, #32]
 800725e:	330b      	adds	r3, #11
 8007260:	7dfa      	ldrb	r2, [r7, #23]
 8007262:	701a      	strb	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800726a:	461a      	mov	r2, r3
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8007270:	7dfb      	ldrb	r3, [r7, #23]
 8007272:	f003 0302 	and.w	r3, r3, #2
 8007276:	2b00      	cmp	r3, #0
 8007278:	d014      	beq.n	80072a4 <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 800727a:	2300      	movs	r3, #0
 800727c:	62bb      	str	r3, [r7, #40]	; 0x28
 800727e:	e002      	b.n	8007286 <dir_register+0xc2>
 8007280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007282:	3301      	adds	r3, #1
 8007284:	62bb      	str	r3, [r7, #40]	; 0x28
 8007286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007288:	005b      	lsls	r3, r3, #1
 800728a:	69fa      	ldr	r2, [r7, #28]
 800728c:	4413      	add	r3, r2
 800728e:	881b      	ldrh	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1f5      	bne.n	8007280 <dir_register+0xbc>
		nent = (n + 25) / 13;
 8007294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007296:	3319      	adds	r3, #25
 8007298:	4a5b      	ldr	r2, [pc, #364]	; (8007408 <dir_register+0x244>)
 800729a:	fba2 2303 	umull	r2, r3, r2, r3
 800729e:	089b      	lsrs	r3, r3, #2
 80072a0:	627b      	str	r3, [r7, #36]	; 0x24
 80072a2:	e001      	b.n	80072a8 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 80072a4:	2301      	movs	r3, #1
 80072a6:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80072a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f7ff fc8b 	bl	8006bc6 <dir_alloc>
 80072b0:	4603      	mov	r3, r0
 80072b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80072b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d15b      	bne.n	8007376 <dir_register+0x1b2>
 80072be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c0:	3b01      	subs	r3, #1
 80072c2:	627b      	str	r3, [r7, #36]	; 0x24
 80072c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d055      	beq.n	8007376 <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072d0:	88db      	ldrh	r3, [r3, #6]
 80072d2:	461a      	mov	r2, r3
 80072d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	4619      	mov	r1, r3
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f7ff fa5b 	bl	8006796 <dir_sdi>
 80072e0:	4603      	mov	r3, r0
 80072e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80072e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d143      	bne.n	8007376 <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072f4:	699b      	ldr	r3, [r3, #24]
 80072f6:	4618      	mov	r0, r3
 80072f8:	f7ff fe78 	bl	8006fec <sum_sfn>
 80072fc:	4603      	mov	r3, r0
 80072fe:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	4619      	mov	r1, r3
 8007312:	4610      	mov	r0, r2
 8007314:	f7fe fd92 	bl	8005e3c <move_window>
 8007318:	4603      	mov	r3, r0
 800731a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800731e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007322:	2b00      	cmp	r3, #0
 8007324:	d126      	bne.n	8007374 <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800732c:	6a18      	ldr	r0, [r3, #32]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007334:	6959      	ldr	r1, [r3, #20]
 8007336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007338:	b2da      	uxtb	r2, r3
 800733a:	7efb      	ldrb	r3, [r7, #27]
 800733c:	f7ff fd54 	bl	8006de8 <fit_lfn>
				dp->fs->wflag = 1;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800734c:	2201      	movs	r2, #1
 800734e:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8007350:	2100      	movs	r1, #0
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f7ff faed 	bl	8006932 <dir_next>
 8007358:	4603      	mov	r3, r0
 800735a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800735e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007362:	2b00      	cmp	r3, #0
 8007364:	d107      	bne.n	8007376 <dir_register+0x1b2>
 8007366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007368:	3b01      	subs	r3, #1
 800736a:	627b      	str	r3, [r7, #36]	; 0x24
 800736c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1c6      	bne.n	8007300 <dir_register+0x13c>
 8007372:	e000      	b.n	8007376 <dir_register+0x1b2>
				if (res != FR_OK) break;
 8007374:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8007376:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800737a:	2b00      	cmp	r3, #0
 800737c:	d13e      	bne.n	80073fc <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	4619      	mov	r1, r3
 8007390:	4610      	mov	r0, r2
 8007392:	f7fe fd53 	bl	8005e3c <move_window>
 8007396:	4603      	mov	r3, r0
 8007398:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800739c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d12b      	bne.n	80073fc <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073aa:	695b      	ldr	r3, [r3, #20]
 80073ac:	2220      	movs	r2, #32
 80073ae:	2100      	movs	r1, #0
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7fe fad9 	bl	8005968 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073bc:	6958      	ldr	r0, [r3, #20]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	220b      	movs	r2, #11
 80073c8:	4619      	mov	r1, r3
 80073ca:	f7fe faaf 	bl	800592c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	330b      	adds	r3, #11
 80073d8:	781a      	ldrb	r2, [r3, #0]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073e0:	695b      	ldr	r3, [r3, #20]
 80073e2:	330c      	adds	r3, #12
 80073e4:	f002 0218 	and.w	r2, r2, #24
 80073e8:	b2d2      	uxtb	r2, r2
 80073ea:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073f8:	2201      	movs	r2, #1
 80073fa:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 80073fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007400:	4618      	mov	r0, r3
 8007402:	3730      	adds	r7, #48	; 0x30
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	4ec4ec4f 	.word	0x4ec4ec4f

0800740c <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b08a      	sub	sp, #40	; 0x28
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	613b      	str	r3, [r7, #16]
 800741c:	e002      	b.n	8007424 <create_name+0x18>
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	3301      	adds	r3, #1
 8007422:	613b      	str	r3, [r7, #16]
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	2b2f      	cmp	r3, #47	; 0x2f
 800742a:	d0f8      	beq.n	800741e <create_name+0x12>
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	2b5c      	cmp	r3, #92	; 0x5c
 8007432:	d0f4      	beq.n	800741e <create_name+0x12>
	lfn = dp->lfn;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800743a:	6a1b      	ldr	r3, [r3, #32]
 800743c:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800743e:	2300      	movs	r3, #0
 8007440:	617b      	str	r3, [r7, #20]
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	1c5a      	adds	r2, r3, #1
 800744a:	61ba      	str	r2, [r7, #24]
 800744c:	693a      	ldr	r2, [r7, #16]
 800744e:	4413      	add	r3, r2
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8007454:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007456:	2b1f      	cmp	r3, #31
 8007458:	d92f      	bls.n	80074ba <create_name+0xae>
 800745a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800745c:	2b2f      	cmp	r3, #47	; 0x2f
 800745e:	d02c      	beq.n	80074ba <create_name+0xae>
 8007460:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007462:	2b5c      	cmp	r3, #92	; 0x5c
 8007464:	d029      	beq.n	80074ba <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	2bfe      	cmp	r3, #254	; 0xfe
 800746a:	d901      	bls.n	8007470 <create_name+0x64>
			return FR_INVALID_NAME;
 800746c:	2306      	movs	r3, #6
 800746e:	e186      	b.n	800777e <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007470:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007472:	b2db      	uxtb	r3, r3
 8007474:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007476:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007478:	2101      	movs	r1, #1
 800747a:	4618      	mov	r0, r3
 800747c:	f002 f870 	bl	8009560 <ff_convert>
 8007480:	4603      	mov	r3, r0
 8007482:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007484:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007486:	2b00      	cmp	r3, #0
 8007488:	d101      	bne.n	800748e <create_name+0x82>
 800748a:	2306      	movs	r3, #6
 800748c:	e177      	b.n	800777e <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800748e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007490:	2b7f      	cmp	r3, #127	; 0x7f
 8007492:	d809      	bhi.n	80074a8 <create_name+0x9c>
 8007494:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007496:	4619      	mov	r1, r3
 8007498:	488e      	ldr	r0, [pc, #568]	; (80076d4 <create_name+0x2c8>)
 800749a:	f7fe faa5 	bl	80059e8 <chk_chr>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d001      	beq.n	80074a8 <create_name+0x9c>
			return FR_INVALID_NAME;
 80074a4:	2306      	movs	r3, #6
 80074a6:	e16a      	b.n	800777e <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	1c5a      	adds	r2, r3, #1
 80074ac:	617a      	str	r2, [r7, #20]
 80074ae:	005b      	lsls	r3, r3, #1
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	4413      	add	r3, r2
 80074b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80074b6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80074b8:	e7c5      	b.n	8007446 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80074ba:	693a      	ldr	r2, [r7, #16]
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	441a      	add	r2, r3
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80074c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074c6:	2b1f      	cmp	r3, #31
 80074c8:	d801      	bhi.n	80074ce <create_name+0xc2>
 80074ca:	2304      	movs	r3, #4
 80074cc:	e000      	b.n	80074d0 <create_name+0xc4>
 80074ce:	2300      	movs	r3, #0
 80074d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 80074d4:	e011      	b.n	80074fa <create_name+0xee>
		w = lfn[di - 1];
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80074dc:	3b01      	subs	r3, #1
 80074de:	005b      	lsls	r3, r3, #1
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	4413      	add	r3, r2
 80074e4:	881b      	ldrh	r3, [r3, #0]
 80074e6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80074e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074ea:	2b20      	cmp	r3, #32
 80074ec:	d002      	beq.n	80074f4 <create_name+0xe8>
 80074ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074f0:	2b2e      	cmp	r3, #46	; 0x2e
 80074f2:	d106      	bne.n	8007502 <create_name+0xf6>
		di--;
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	3b01      	subs	r3, #1
 80074f8:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1ea      	bne.n	80074d6 <create_name+0xca>
 8007500:	e000      	b.n	8007504 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 8007502:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d101      	bne.n	800750e <create_name+0x102>
 800750a:	2306      	movs	r3, #6
 800750c:	e137      	b.n	800777e <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	005b      	lsls	r3, r3, #1
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	4413      	add	r3, r2
 8007516:	2200      	movs	r2, #0
 8007518:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	220b      	movs	r2, #11
 8007524:	2120      	movs	r1, #32
 8007526:	4618      	mov	r0, r3
 8007528:	f7fe fa1e 	bl	8005968 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800752c:	2300      	movs	r3, #0
 800752e:	61bb      	str	r3, [r7, #24]
 8007530:	e002      	b.n	8007538 <create_name+0x12c>
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	3301      	adds	r3, #1
 8007536:	61bb      	str	r3, [r7, #24]
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	005b      	lsls	r3, r3, #1
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	4413      	add	r3, r2
 8007540:	881b      	ldrh	r3, [r3, #0]
 8007542:	2b20      	cmp	r3, #32
 8007544:	d0f5      	beq.n	8007532 <create_name+0x126>
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	005b      	lsls	r3, r3, #1
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	4413      	add	r3, r2
 800754e:	881b      	ldrh	r3, [r3, #0]
 8007550:	2b2e      	cmp	r3, #46	; 0x2e
 8007552:	d0ee      	beq.n	8007532 <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d009      	beq.n	800756e <create_name+0x162>
 800755a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800755e:	f043 0303 	orr.w	r3, r3, #3
 8007562:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007566:	e002      	b.n	800756e <create_name+0x162>
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	3b01      	subs	r3, #1
 800756c:	617b      	str	r3, [r7, #20]
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d009      	beq.n	8007588 <create_name+0x17c>
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800757a:	3b01      	subs	r3, #1
 800757c:	005b      	lsls	r3, r3, #1
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	4413      	add	r3, r2
 8007582:	881b      	ldrh	r3, [r3, #0]
 8007584:	2b2e      	cmp	r3, #46	; 0x2e
 8007586:	d1ef      	bne.n	8007568 <create_name+0x15c>

	b = i = 0; ni = 8;
 8007588:	2300      	movs	r3, #0
 800758a:	623b      	str	r3, [r7, #32]
 800758c:	2300      	movs	r3, #0
 800758e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007592:	2308      	movs	r3, #8
 8007594:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	1c5a      	adds	r2, r3, #1
 800759a:	61ba      	str	r2, [r7, #24]
 800759c:	005b      	lsls	r3, r3, #1
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	4413      	add	r3, r2
 80075a2:	881b      	ldrh	r3, [r3, #0]
 80075a4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80075a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f000 8091 	beq.w	80076d0 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80075ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075b0:	2b20      	cmp	r3, #32
 80075b2:	d006      	beq.n	80075c2 <create_name+0x1b6>
 80075b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075b6:	2b2e      	cmp	r3, #46	; 0x2e
 80075b8:	d10a      	bne.n	80075d0 <create_name+0x1c4>
 80075ba:	69ba      	ldr	r2, [r7, #24]
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d006      	beq.n	80075d0 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 80075c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075c6:	f043 0303 	orr.w	r3, r3, #3
 80075ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80075ce:	e07e      	b.n	80076ce <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80075d0:	6a3a      	ldr	r2, [r7, #32]
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d203      	bcs.n	80075e0 <create_name+0x1d4>
 80075d8:	69ba      	ldr	r2, [r7, #24]
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d123      	bne.n	8007628 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	2b0b      	cmp	r3, #11
 80075e4:	d106      	bne.n	80075f4 <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 80075e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075ea:	f043 0303 	orr.w	r3, r3, #3
 80075ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80075f2:	e076      	b.n	80076e2 <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80075f4:	69ba      	ldr	r2, [r7, #24]
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d005      	beq.n	8007608 <create_name+0x1fc>
 80075fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007600:	f043 0303 	orr.w	r3, r3, #3
 8007604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8007608:	69ba      	ldr	r2, [r7, #24]
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	429a      	cmp	r2, r3
 800760e:	d867      	bhi.n	80076e0 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	61bb      	str	r3, [r7, #24]
 8007614:	2308      	movs	r3, #8
 8007616:	623b      	str	r3, [r7, #32]
 8007618:	230b      	movs	r3, #11
 800761a:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800761c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007626:	e052      	b.n	80076ce <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007628:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800762a:	2b7f      	cmp	r3, #127	; 0x7f
 800762c:	d914      	bls.n	8007658 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800762e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007630:	2100      	movs	r1, #0
 8007632:	4618      	mov	r0, r3
 8007634:	f001 ff94 	bl	8009560 <ff_convert>
 8007638:	4603      	mov	r3, r0
 800763a:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800763c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800763e:	2b00      	cmp	r3, #0
 8007640:	d004      	beq.n	800764c <create_name+0x240>
 8007642:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007644:	3b80      	subs	r3, #128	; 0x80
 8007646:	4a24      	ldr	r2, [pc, #144]	; (80076d8 <create_name+0x2cc>)
 8007648:	5cd3      	ldrb	r3, [r2, r3]
 800764a:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800764c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007650:	f043 0302 	orr.w	r3, r3, #2
 8007654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007658:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800765a:	2b00      	cmp	r3, #0
 800765c:	d007      	beq.n	800766e <create_name+0x262>
 800765e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007660:	4619      	mov	r1, r3
 8007662:	481e      	ldr	r0, [pc, #120]	; (80076dc <create_name+0x2d0>)
 8007664:	f7fe f9c0 	bl	80059e8 <chk_chr>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d008      	beq.n	8007680 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800766e:	235f      	movs	r3, #95	; 0x5f
 8007670:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007672:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007676:	f043 0303 	orr.w	r3, r3, #3
 800767a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800767e:	e01b      	b.n	80076b8 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007680:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007682:	2b40      	cmp	r3, #64	; 0x40
 8007684:	d909      	bls.n	800769a <create_name+0x28e>
 8007686:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007688:	2b5a      	cmp	r3, #90	; 0x5a
 800768a:	d806      	bhi.n	800769a <create_name+0x28e>
					b |= 2;
 800768c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007690:	f043 0302 	orr.w	r3, r3, #2
 8007694:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007698:	e00e      	b.n	80076b8 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800769a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800769c:	2b60      	cmp	r3, #96	; 0x60
 800769e:	d90b      	bls.n	80076b8 <create_name+0x2ac>
 80076a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076a2:	2b7a      	cmp	r3, #122	; 0x7a
 80076a4:	d808      	bhi.n	80076b8 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 80076a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80076aa:	f043 0301 	orr.w	r3, r3, #1
 80076ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80076b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076b4:	3b20      	subs	r3, #32
 80076b6:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076be:	699a      	ldr	r2, [r3, #24]
 80076c0:	6a3b      	ldr	r3, [r7, #32]
 80076c2:	1c59      	adds	r1, r3, #1
 80076c4:	6239      	str	r1, [r7, #32]
 80076c6:	4413      	add	r3, r2
 80076c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80076ca:	b2d2      	uxtb	r2, r2
 80076cc:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 80076ce:	e762      	b.n	8007596 <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 80076d0:	bf00      	nop
 80076d2:	e006      	b.n	80076e2 <create_name+0x2d6>
 80076d4:	08009788 	.word	0x08009788
 80076d8:	0800c010 	.word	0x0800c010
 80076dc:	08009794 	.word	0x08009794
			if (si > di) break;			/* No extension */
 80076e0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076e8:	699b      	ldr	r3, [r3, #24]
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	2be5      	cmp	r3, #229	; 0xe5
 80076ee:	d105      	bne.n	80076fc <create_name+0x2f0>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076f6:	699b      	ldr	r3, [r3, #24]
 80076f8:	2205      	movs	r2, #5
 80076fa:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	2b08      	cmp	r3, #8
 8007700:	d104      	bne.n	800770c <create_name+0x300>
 8007702:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800770c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007710:	f003 030c 	and.w	r3, r3, #12
 8007714:	2b0c      	cmp	r3, #12
 8007716:	d005      	beq.n	8007724 <create_name+0x318>
 8007718:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800771c:	f003 0303 	and.w	r3, r3, #3
 8007720:	2b03      	cmp	r3, #3
 8007722:	d105      	bne.n	8007730 <create_name+0x324>
		cf |= NS_LFN;
 8007724:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007728:	f043 0302 	orr.w	r3, r3, #2
 800772c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007730:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007734:	f003 0302 	and.w	r3, r3, #2
 8007738:	2b00      	cmp	r3, #0
 800773a:	d117      	bne.n	800776c <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800773c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007740:	f003 0303 	and.w	r3, r3, #3
 8007744:	2b01      	cmp	r3, #1
 8007746:	d105      	bne.n	8007754 <create_name+0x348>
 8007748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800774c:	f043 0310 	orr.w	r3, r3, #16
 8007750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007754:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007758:	f003 030c 	and.w	r3, r3, #12
 800775c:	2b04      	cmp	r3, #4
 800775e:	d105      	bne.n	800776c <create_name+0x360>
 8007760:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007764:	f043 0308 	orr.w	r3, r3, #8
 8007768:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007772:	699b      	ldr	r3, [r3, #24]
 8007774:	330b      	adds	r3, #11
 8007776:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800777a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800777c:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800777e:	4618      	mov	r0, r3
 8007780:	3728      	adds	r7, #40	; 0x28
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop

08007788 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	2b2f      	cmp	r3, #47	; 0x2f
 8007798:	d003      	beq.n	80077a2 <follow_path+0x1a>
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	2b5c      	cmp	r3, #92	; 0x5c
 80077a0:	d102      	bne.n	80077a8 <follow_path+0x20>
		path++;
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	3301      	adds	r3, #1
 80077a6:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077ae:	461a      	mov	r2, r3
 80077b0:	2300      	movs	r3, #0
 80077b2:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	2b1f      	cmp	r3, #31
 80077ba:	d80c      	bhi.n	80077d6 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 80077bc:	2100      	movs	r1, #0
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f7fe ffe9 	bl	8006796 <dir_sdi>
 80077c4:	4603      	mov	r3, r0
 80077c6:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077ce:	461a      	mov	r2, r3
 80077d0:	2300      	movs	r3, #0
 80077d2:	6153      	str	r3, [r2, #20]
 80077d4:	e049      	b.n	800786a <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80077d6:	463b      	mov	r3, r7
 80077d8:	4619      	mov	r1, r3
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f7ff fe16 	bl	800740c <create_name>
 80077e0:	4603      	mov	r3, r0
 80077e2:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80077e4:	7bfb      	ldrb	r3, [r7, #15]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d13a      	bne.n	8007860 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f7ff fc1e 	bl	800702c <dir_find>
 80077f0:	4603      	mov	r3, r0
 80077f2:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077fa:	699b      	ldr	r3, [r3, #24]
 80077fc:	7adb      	ldrb	r3, [r3, #11]
 80077fe:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8007800:	7bfb      	ldrb	r3, [r7, #15]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00a      	beq.n	800781c <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007806:	7bfb      	ldrb	r3, [r7, #15]
 8007808:	2b04      	cmp	r3, #4
 800780a:	d12b      	bne.n	8007864 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800780c:	7bbb      	ldrb	r3, [r7, #14]
 800780e:	f003 0304 	and.w	r3, r3, #4
 8007812:	2b00      	cmp	r3, #0
 8007814:	d126      	bne.n	8007864 <follow_path+0xdc>
 8007816:	2305      	movs	r3, #5
 8007818:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800781a:	e023      	b.n	8007864 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800781c:	7bbb      	ldrb	r3, [r7, #14]
 800781e:	f003 0304 	and.w	r3, r3, #4
 8007822:	2b00      	cmp	r3, #0
 8007824:	d120      	bne.n	8007868 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800782c:	695b      	ldr	r3, [r3, #20]
 800782e:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	330b      	adds	r3, #11
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	f003 0310 	and.w	r3, r3, #16
 800783a:	2b00      	cmp	r3, #0
 800783c:	d102      	bne.n	8007844 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 800783e:	2305      	movs	r3, #5
 8007840:	73fb      	strb	r3, [r7, #15]
 8007842:	e012      	b.n	800786a <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68b9      	ldr	r1, [r7, #8]
 800784e:	4618      	mov	r0, r3
 8007850:	f7ff fa07 	bl	8006c62 <ld_clust>
 8007854:	4602      	mov	r2, r0
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800785c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800785e:	e7ba      	b.n	80077d6 <follow_path+0x4e>
			if (res != FR_OK) break;
 8007860:	bf00      	nop
 8007862:	e002      	b.n	800786a <follow_path+0xe2>
				break;
 8007864:	bf00      	nop
 8007866:	e000      	b.n	800786a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007868:	bf00      	nop
		}
	}

	return res;
 800786a:	7bfb      	ldrb	r3, [r7, #15]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007874:	b480      	push	{r7}
 8007876:	b087      	sub	sp, #28
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800787c:	f04f 33ff 	mov.w	r3, #4294967295
 8007880:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d031      	beq.n	80078ee <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	617b      	str	r3, [r7, #20]
 8007890:	e002      	b.n	8007898 <get_ldnumber+0x24>
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	3301      	adds	r3, #1
 8007896:	617b      	str	r3, [r7, #20]
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	2b1f      	cmp	r3, #31
 800789e:	d903      	bls.n	80078a8 <get_ldnumber+0x34>
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	2b3a      	cmp	r3, #58	; 0x3a
 80078a6:	d1f4      	bne.n	8007892 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	2b3a      	cmp	r3, #58	; 0x3a
 80078ae:	d11c      	bne.n	80078ea <get_ldnumber+0x76>
			tp = *path;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	1c5a      	adds	r2, r3, #1
 80078ba:	60fa      	str	r2, [r7, #12]
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	3b30      	subs	r3, #48	; 0x30
 80078c0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	2b09      	cmp	r3, #9
 80078c6:	d80e      	bhi.n	80078e6 <get_ldnumber+0x72>
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d10a      	bne.n	80078e6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d107      	bne.n	80078e6 <get_ldnumber+0x72>
					vol = (int)i;
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	3301      	adds	r3, #1
 80078de:	617b      	str	r3, [r7, #20]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	697a      	ldr	r2, [r7, #20]
 80078e4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	e002      	b.n	80078f0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80078ea:	2300      	movs	r3, #0
 80078ec:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80078ee:	693b      	ldr	r3, [r7, #16]
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	371c      	adds	r7, #28
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bc80      	pop	{r7}
 80078f8:	4770      	bx	lr
	...

080078fc <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800790c:	2200      	movs	r2, #0
 800790e:	711a      	strb	r2, [r3, #4]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007916:	461a      	mov	r2, r3
 8007918:	f04f 33ff 	mov.w	r3, #4294967295
 800791c:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800791e:	6839      	ldr	r1, [r7, #0]
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f7fe fa8b 	bl	8005e3c <move_window>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d001      	beq.n	8007930 <check_fs+0x34>
		return 3;
 800792c:	2303      	movs	r3, #3
 800792e:	e04a      	b.n	80079c6 <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007936:	3301      	adds	r3, #1
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	021b      	lsls	r3, r3, #8
 800793c:	b21a      	sxth	r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8007944:	b21b      	sxth	r3, r3
 8007946:	4313      	orrs	r3, r2
 8007948:	b21b      	sxth	r3, r3
 800794a:	4a21      	ldr	r2, [pc, #132]	; (80079d0 <check_fs+0xd4>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d001      	beq.n	8007954 <check_fs+0x58>
		return 2;
 8007950:	2302      	movs	r3, #2
 8007952:	e038      	b.n	80079c6 <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	3336      	adds	r3, #54	; 0x36
 8007958:	3303      	adds	r3, #3
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	061a      	lsls	r2, r3, #24
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	3336      	adds	r3, #54	; 0x36
 8007962:	3302      	adds	r3, #2
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	041b      	lsls	r3, r3, #16
 8007968:	4313      	orrs	r3, r2
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	3236      	adds	r2, #54	; 0x36
 800796e:	3201      	adds	r2, #1
 8007970:	7812      	ldrb	r2, [r2, #0]
 8007972:	0212      	lsls	r2, r2, #8
 8007974:	4313      	orrs	r3, r2
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800797c:	4313      	orrs	r3, r2
 800797e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007982:	4a14      	ldr	r2, [pc, #80]	; (80079d4 <check_fs+0xd8>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d101      	bne.n	800798c <check_fs+0x90>
		return 0;
 8007988:	2300      	movs	r3, #0
 800798a:	e01c      	b.n	80079c6 <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	3352      	adds	r3, #82	; 0x52
 8007990:	3303      	adds	r3, #3
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	061a      	lsls	r2, r3, #24
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	3352      	adds	r3, #82	; 0x52
 800799a:	3302      	adds	r3, #2
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	041b      	lsls	r3, r3, #16
 80079a0:	4313      	orrs	r3, r2
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	3252      	adds	r2, #82	; 0x52
 80079a6:	3201      	adds	r2, #1
 80079a8:	7812      	ldrb	r2, [r2, #0]
 80079aa:	0212      	lsls	r2, r2, #8
 80079ac:	4313      	orrs	r3, r2
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 80079b4:	4313      	orrs	r3, r2
 80079b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80079ba:	4a06      	ldr	r2, [pc, #24]	; (80079d4 <check_fs+0xd8>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d101      	bne.n	80079c4 <check_fs+0xc8>
		return 0;
 80079c0:	2300      	movs	r3, #0
 80079c2:	e000      	b.n	80079c6 <check_fs+0xca>

	return 1;
 80079c4:	2301      	movs	r3, #1
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3708      	adds	r7, #8
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	ffffaa55 	.word	0xffffaa55
 80079d4:	00544146 	.word	0x00544146

080079d8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b096      	sub	sp, #88	; 0x58
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	4613      	mov	r3, r2
 80079e4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80079ec:	68b8      	ldr	r0, [r7, #8]
 80079ee:	f7ff ff41 	bl	8007874 <get_ldnumber>
 80079f2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80079f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	da01      	bge.n	80079fe <find_volume+0x26>
 80079fa:	230b      	movs	r3, #11
 80079fc:	e311      	b.n	8008022 <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80079fe:	4a98      	ldr	r2, [pc, #608]	; (8007c60 <find_volume+0x288>)
 8007a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a06:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d101      	bne.n	8007a12 <find_volume+0x3a>
 8007a0e:	230c      	movs	r3, #12
 8007a10:	e307      	b.n	8008022 <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a16:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8007a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d01c      	beq.n	8007a5e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a2a:	785b      	ldrb	r3, [r3, #1]
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7fd fedf 	bl	80057f0 <disk_status>
 8007a32:	4603      	mov	r3, r0
 8007a34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007a38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a3c:	f003 0301 	and.w	r3, r3, #1
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d10c      	bne.n	8007a5e <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8007a44:	79fb      	ldrb	r3, [r7, #7]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d007      	beq.n	8007a5a <find_volume+0x82>
 8007a4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a4e:	f003 0304 	and.w	r3, r3, #4
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d001      	beq.n	8007a5a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007a56:	230a      	movs	r3, #10
 8007a58:	e2e3      	b.n	8008022 <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	e2e1      	b.n	8008022 <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a64:	2200      	movs	r2, #0
 8007a66:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a6a:	b2da      	uxtb	r2, r3
 8007a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a72:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a7a:	785b      	ldrb	r3, [r3, #1]
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7fd fed1 	bl	8005824 <disk_initialize>
 8007a82:	4603      	mov	r3, r0
 8007a84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8007a88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a8c:	f003 0301 	and.w	r3, r3, #1
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d001      	beq.n	8007a98 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007a94:	2303      	movs	r3, #3
 8007a96:	e2c4      	b.n	8008022 <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8007a98:	79fb      	ldrb	r3, [r7, #7]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d007      	beq.n	8007aae <find_volume+0xd6>
 8007a9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007aa2:	f003 0304 	and.w	r3, r3, #4
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d001      	beq.n	8007aae <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8007aaa:	230a      	movs	r3, #10
 8007aac:	e2b9      	b.n	8008022 <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8007aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ab4:	7858      	ldrb	r0, [r3, #1]
 8007ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007abc:	330a      	adds	r3, #10
 8007abe:	461a      	mov	r2, r3
 8007ac0:	2102      	movs	r1, #2
 8007ac2:	f7fd ff15 	bl	80058f0 <disk_ioctl>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10d      	bne.n	8007ae8 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8007acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ad2:	895b      	ldrh	r3, [r3, #10]
 8007ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ad8:	d306      	bcc.n	8007ae8 <find_volume+0x110>
 8007ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ae0:	895b      	ldrh	r3, [r3, #10]
 8007ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ae6:	d901      	bls.n	8007aec <find_volume+0x114>
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e29a      	b.n	8008022 <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8007aec:	2300      	movs	r3, #0
 8007aee:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8007af0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007af2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007af4:	f7ff ff02 	bl	80078fc <check_fs>
 8007af8:	4603      	mov	r3, r0
 8007afa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8007afe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d153      	bne.n	8007bae <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007b06:	2300      	movs	r3, #0
 8007b08:	643b      	str	r3, [r7, #64]	; 0x40
 8007b0a:	e028      	b.n	8007b5e <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8007b0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b10:	011b      	lsls	r3, r3, #4
 8007b12:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007b16:	4413      	add	r3, r2
 8007b18:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1c:	3304      	adds	r3, #4
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d012      	beq.n	8007b4a <find_volume+0x172>
 8007b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b26:	330b      	adds	r3, #11
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	061a      	lsls	r2, r3, #24
 8007b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2e:	330a      	adds	r3, #10
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	041b      	lsls	r3, r3, #16
 8007b34:	4313      	orrs	r3, r2
 8007b36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b38:	3209      	adds	r2, #9
 8007b3a:	7812      	ldrb	r2, [r2, #0]
 8007b3c:	0212      	lsls	r2, r2, #8
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b42:	3208      	adds	r2, #8
 8007b44:	7812      	ldrb	r2, [r2, #0]
 8007b46:	431a      	orrs	r2, r3
 8007b48:	e000      	b.n	8007b4c <find_volume+0x174>
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	3358      	adds	r3, #88	; 0x58
 8007b52:	443b      	add	r3, r7
 8007b54:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007b58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	643b      	str	r3, [r7, #64]	; 0x40
 8007b5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b60:	2b03      	cmp	r3, #3
 8007b62:	d9d3      	bls.n	8007b0c <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8007b64:	2300      	movs	r3, #0
 8007b66:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d002      	beq.n	8007b74 <find_volume+0x19c>
 8007b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b70:	3b01      	subs	r3, #1
 8007b72:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8007b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	3358      	adds	r3, #88	; 0x58
 8007b7a:	443b      	add	r3, r7
 8007b7c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007b80:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8007b82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d005      	beq.n	8007b94 <find_volume+0x1bc>
 8007b88:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007b8a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007b8c:	f7ff feb6 	bl	80078fc <check_fs>
 8007b90:	4603      	mov	r3, r0
 8007b92:	e000      	b.n	8007b96 <find_volume+0x1be>
 8007b94:	2302      	movs	r3, #2
 8007b96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8007b9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d005      	beq.n	8007bae <find_volume+0x1d6>
 8007ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	643b      	str	r3, [r7, #64]	; 0x40
 8007ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007baa:	2b03      	cmp	r3, #3
 8007bac:	d9e2      	bls.n	8007b74 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007bae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007bb2:	2b03      	cmp	r3, #3
 8007bb4:	d101      	bne.n	8007bba <find_volume+0x1e2>
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e233      	b.n	8008022 <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8007bba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d001      	beq.n	8007bc6 <find_volume+0x1ee>
 8007bc2:	230d      	movs	r3, #13
 8007bc4:	e22d      	b.n	8008022 <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc8:	7b1b      	ldrb	r3, [r3, #12]
 8007bca:	021b      	lsls	r3, r3, #8
 8007bcc:	b21a      	sxth	r2, r3
 8007bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd0:	7adb      	ldrb	r3, [r3, #11]
 8007bd2:	b21b      	sxth	r3, r3
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	b21a      	sxth	r2, r3
 8007bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bde:	895b      	ldrh	r3, [r3, #10]
 8007be0:	b21b      	sxth	r3, r3
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d001      	beq.n	8007bea <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 8007be6:	230d      	movs	r3, #13
 8007be8:	e21b      	b.n	8008022 <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8007bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bec:	7ddb      	ldrb	r3, [r3, #23]
 8007bee:	021b      	lsls	r3, r3, #8
 8007bf0:	b21a      	sxth	r2, r3
 8007bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf4:	7d9b      	ldrb	r3, [r3, #22]
 8007bf6:	b21b      	sxth	r3, r3
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	b21b      	sxth	r3, r3
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8007c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d112      	bne.n	8007c2c <find_volume+0x254>
 8007c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c08:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007c0c:	061a      	lsls	r2, r3, #24
 8007c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c10:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007c14:	041b      	lsls	r3, r3, #16
 8007c16:	4313      	orrs	r3, r2
 8007c18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c1a:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8007c1e:	0212      	lsls	r2, r2, #8
 8007c20:	4313      	orrs	r3, r2
 8007c22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c24:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8007c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c32:	461a      	mov	r2, r3
 8007c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c36:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8007c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3a:	7c1a      	ldrb	r2, [r3, #16]
 8007c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c42:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8007c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c4a:	78db      	ldrb	r3, [r3, #3]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d009      	beq.n	8007c64 <find_volume+0x28c>
 8007c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c56:	78db      	ldrb	r3, [r3, #3]
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d003      	beq.n	8007c64 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 8007c5c:	230d      	movs	r3, #13
 8007c5e:	e1e0      	b.n	8008022 <find_volume+0x64a>
 8007c60:	20002b08 	.word	0x20002b08
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8007c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c6a:	78db      	ldrb	r3, [r3, #3]
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c70:	fb02 f303 	mul.w	r3, r2, r3
 8007c74:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8007c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c78:	7b5a      	ldrb	r2, [r3, #13]
 8007c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c80:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8007c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c88:	789b      	ldrb	r3, [r3, #2]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00c      	beq.n	8007ca8 <find_volume+0x2d0>
 8007c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c94:	789b      	ldrb	r3, [r3, #2]
 8007c96:	461a      	mov	r2, r3
 8007c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c9e:	789b      	ldrb	r3, [r3, #2]
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d001      	beq.n	8007cac <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 8007ca8:	230d      	movs	r3, #13
 8007caa:	e1ba      	b.n	8008022 <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8007cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cae:	7c9b      	ldrb	r3, [r3, #18]
 8007cb0:	021b      	lsls	r3, r3, #8
 8007cb2:	b21a      	sxth	r2, r3
 8007cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb6:	7c5b      	ldrb	r3, [r3, #17]
 8007cb8:	b21b      	sxth	r3, r3
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	b21b      	sxth	r3, r3
 8007cbe:	b29a      	uxth	r2, r3
 8007cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cc6:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8007cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cce:	891b      	ldrh	r3, [r3, #8]
 8007cd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cd2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007cd6:	8952      	ldrh	r2, [r2, #10]
 8007cd8:	0952      	lsrs	r2, r2, #5
 8007cda:	b292      	uxth	r2, r2
 8007cdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ce0:	fb01 f202 	mul.w	r2, r1, r2
 8007ce4:	1a9b      	subs	r3, r3, r2
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d001      	beq.n	8007cf0 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 8007cec:	230d      	movs	r3, #13
 8007cee:	e198      	b.n	8008022 <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8007cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf2:	7d1b      	ldrb	r3, [r3, #20]
 8007cf4:	021b      	lsls	r3, r3, #8
 8007cf6:	b21a      	sxth	r2, r3
 8007cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfa:	7cdb      	ldrb	r3, [r3, #19]
 8007cfc:	b21b      	sxth	r3, r3
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	b21b      	sxth	r3, r3
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8007d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d112      	bne.n	8007d32 <find_volume+0x35a>
 8007d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007d12:	061a      	lsls	r2, r3, #24
 8007d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d16:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007d1a:	041b      	lsls	r3, r3, #16
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d20:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8007d24:	0212      	lsls	r2, r2, #8
 8007d26:	4313      	orrs	r3, r2
 8007d28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d2a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8007d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d34:	7bdb      	ldrb	r3, [r3, #15]
 8007d36:	021b      	lsls	r3, r3, #8
 8007d38:	b21a      	sxth	r2, r3
 8007d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3c:	7b9b      	ldrb	r3, [r3, #14]
 8007d3e:	b21b      	sxth	r3, r3
 8007d40:	4313      	orrs	r3, r2
 8007d42:	b21b      	sxth	r3, r3
 8007d44:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8007d46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d101      	bne.n	8007d50 <find_volume+0x378>
 8007d4c:	230d      	movs	r3, #13
 8007d4e:	e168      	b.n	8008022 <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8007d50:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d54:	4413      	add	r3, r2
 8007d56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d58:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007d5c:	8911      	ldrh	r1, [r2, #8]
 8007d5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d60:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007d64:	8952      	ldrh	r2, [r2, #10]
 8007d66:	0952      	lsrs	r2, r2, #5
 8007d68:	b292      	uxth	r2, r2
 8007d6a:	fbb1 f2f2 	udiv	r2, r1, r2
 8007d6e:	b292      	uxth	r2, r2
 8007d70:	4413      	add	r3, r2
 8007d72:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007d74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d201      	bcs.n	8007d80 <find_volume+0x3a8>
 8007d7c:	230d      	movs	r3, #13
 8007d7e:	e150      	b.n	8008022 <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8007d80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d84:	1ad3      	subs	r3, r2, r3
 8007d86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d88:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007d8c:	7892      	ldrb	r2, [r2, #2]
 8007d8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d92:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8007d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d101      	bne.n	8007d9e <find_volume+0x3c6>
 8007d9a:	230d      	movs	r3, #13
 8007d9c:	e141      	b.n	8008022 <find_volume+0x64a>
	fmt = FS_FAT12;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8007da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da6:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d902      	bls.n	8007db4 <find_volume+0x3dc>
 8007dae:	2302      	movs	r3, #2
 8007db0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8007db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d902      	bls.n	8007dc4 <find_volume+0x3ec>
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc6:	3302      	adds	r3, #2
 8007dc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007dce:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 8007dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dda:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8007ddc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007de0:	4413      	add	r3, r2
 8007de2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007de4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007de8:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 8007dea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dee:	4413      	add	r3, r2
 8007df0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007df2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007df6:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 8007df8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007dfc:	2b03      	cmp	r3, #3
 8007dfe:	d124      	bne.n	8007e4a <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8007e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e06:	891b      	ldrh	r3, [r3, #8]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d001      	beq.n	8007e10 <find_volume+0x438>
 8007e0c:	230d      	movs	r3, #13
 8007e0e:	e108      	b.n	8008022 <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8007e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e12:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007e16:	061a      	lsls	r2, r3, #24
 8007e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8007e1e:	041b      	lsls	r3, r3, #16
 8007e20:	4313      	orrs	r3, r2
 8007e22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e24:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8007e28:	0212      	lsls	r2, r2, #8
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e2e:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8007e32:	4313      	orrs	r3, r2
 8007e34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e36:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007e3a:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8007e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e42:	695b      	ldr	r3, [r3, #20]
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	647b      	str	r3, [r7, #68]	; 0x44
 8007e48:	e02b      	b.n	8007ea2 <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8007e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e50:	891b      	ldrh	r3, [r3, #8]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d101      	bne.n	8007e5a <find_volume+0x482>
 8007e56:	230d      	movs	r3, #13
 8007e58:	e0e3      	b.n	8008022 <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8007e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e60:	6a1a      	ldr	r2, [r3, #32]
 8007e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e64:	4413      	add	r3, r2
 8007e66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e68:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007e6c:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007e6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e72:	2b02      	cmp	r3, #2
 8007e74:	d105      	bne.n	8007e82 <find_volume+0x4aa>
 8007e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e7c:	695b      	ldr	r3, [r3, #20]
 8007e7e:	005b      	lsls	r3, r3, #1
 8007e80:	e00e      	b.n	8007ea0 <find_volume+0x4c8>
 8007e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e88:	695a      	ldr	r2, [r3, #20]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	005b      	lsls	r3, r3, #1
 8007e8e:	4413      	add	r3, r2
 8007e90:	085a      	lsrs	r2, r3, #1
 8007e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e98:	695b      	ldr	r3, [r3, #20]
 8007e9a:	f003 0301 	and.w	r3, r3, #1
 8007e9e:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8007ea0:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8007ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ea8:	699a      	ldr	r2, [r3, #24]
 8007eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eb0:	895b      	ldrh	r3, [r3, #10]
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007eb6:	440b      	add	r3, r1
 8007eb8:	3b01      	subs	r3, #1
 8007eba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ebc:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8007ec0:	8949      	ldrh	r1, [r1, #10]
 8007ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d201      	bcs.n	8007ece <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 8007eca:	230d      	movs	r3, #13
 8007ecc:	e0a9      	b.n	8008022 <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8007ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8007eda:	6113      	str	r3, [r2, #16]
 8007edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ee6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007eea:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8007eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ef2:	2280      	movs	r2, #128	; 0x80
 8007ef4:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8007ef6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007efa:	2b03      	cmp	r3, #3
 8007efc:	d17a      	bne.n	8007ff4 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8007efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f00:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007f04:	021b      	lsls	r3, r3, #8
 8007f06:	b21a      	sxth	r2, r3
 8007f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007f0e:	b21b      	sxth	r3, r3
 8007f10:	4313      	orrs	r3, r2
 8007f12:	b21b      	sxth	r3, r3
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d16d      	bne.n	8007ff4 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 8007f18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f20:	f7fd ff8c 	bl	8005e3c <move_window>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d164      	bne.n	8007ff4 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 8007f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f30:	2200      	movs	r2, #0
 8007f32:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f36:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8007f3a:	021b      	lsls	r3, r3, #8
 8007f3c:	b21a      	sxth	r2, r3
 8007f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f40:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8007f44:	b21b      	sxth	r3, r3
 8007f46:	4313      	orrs	r3, r2
 8007f48:	b21b      	sxth	r3, r3
 8007f4a:	4a38      	ldr	r2, [pc, #224]	; (800802c <find_volume+0x654>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d151      	bne.n	8007ff4 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8007f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f52:	78db      	ldrb	r3, [r3, #3]
 8007f54:	061a      	lsls	r2, r3, #24
 8007f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f58:	789b      	ldrb	r3, [r3, #2]
 8007f5a:	041b      	lsls	r3, r3, #16
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f60:	7852      	ldrb	r2, [r2, #1]
 8007f62:	0212      	lsls	r2, r2, #8
 8007f64:	4313      	orrs	r3, r2
 8007f66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f68:	7812      	ldrb	r2, [r2, #0]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	4a30      	ldr	r2, [pc, #192]	; (8008030 <find_volume+0x658>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d140      	bne.n	8007ff4 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8007f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f74:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8007f78:	061a      	lsls	r2, r3, #24
 8007f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7c:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8007f80:	041b      	lsls	r3, r3, #16
 8007f82:	4313      	orrs	r3, r2
 8007f84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f86:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8007f8a:	0212      	lsls	r2, r2, #8
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f90:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8007f94:	4313      	orrs	r3, r2
 8007f96:	4a27      	ldr	r2, [pc, #156]	; (8008034 <find_volume+0x65c>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d12b      	bne.n	8007ff4 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8007f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9e:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8007fa2:	061a      	lsls	r2, r3, #24
 8007fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa6:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8007faa:	041b      	lsls	r3, r3, #16
 8007fac:	4313      	orrs	r3, r2
 8007fae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fb0:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8007fb4:	0212      	lsls	r2, r2, #8
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fba:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007fc6:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8007fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fca:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8007fce:	061a      	lsls	r2, r3, #24
 8007fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd2:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8007fd6:	041b      	lsls	r3, r3, #16
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fdc:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8007fe0:	0212      	lsls	r2, r2, #8
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fe6:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8007fea:	4313      	orrs	r3, r2
 8007fec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007ff2:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8007ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008000:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8008002:	4b0d      	ldr	r3, [pc, #52]	; (8008038 <find_volume+0x660>)
 8008004:	881b      	ldrh	r3, [r3, #0]
 8008006:	3301      	adds	r3, #1
 8008008:	b29a      	uxth	r2, r3
 800800a:	4b0b      	ldr	r3, [pc, #44]	; (8008038 <find_volume+0x660>)
 800800c:	801a      	strh	r2, [r3, #0]
 800800e:	4b0a      	ldr	r3, [pc, #40]	; (8008038 <find_volume+0x660>)
 8008010:	881a      	ldrh	r2, [r3, #0]
 8008012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008018:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800801a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800801c:	f7fd fe92 	bl	8005d44 <clear_lock>
#endif

	return FR_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3758      	adds	r7, #88	; 0x58
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	ffffaa55 	.word	0xffffaa55
 8008030:	41615252 	.word	0x41615252
 8008034:	61417272 	.word	0x61417272
 8008038:	20002b0c 	.word	0x20002b0c

0800803c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d02a      	beq.n	80080a4 <validate+0x68>
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d024      	beq.n	80080a4 <validate+0x68>
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d01b      	beq.n	80080a4 <validate+0x68>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008078:	88da      	ldrh	r2, [r3, #6]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008080:	889b      	ldrh	r3, [r3, #4]
 8008082:	429a      	cmp	r2, r3
 8008084:	d10e      	bne.n	80080a4 <validate+0x68>
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008092:	785b      	ldrb	r3, [r3, #1]
 8008094:	4618      	mov	r0, r3
 8008096:	f7fd fbab 	bl	80057f0 <disk_status>
 800809a:	4603      	mov	r3, r0
 800809c:	f003 0301 	and.w	r3, r3, #1
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d001      	beq.n	80080a8 <validate+0x6c>
		return FR_INVALID_OBJECT;
 80080a4:	2309      	movs	r3, #9
 80080a6:	e000      	b.n	80080aa <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3710      	adds	r7, #16
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
	...

080080b4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b088      	sub	sp, #32
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	60b9      	str	r1, [r7, #8]
 80080be:	4613      	mov	r3, r2
 80080c0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 80080c6:	f107 0310 	add.w	r3, r7, #16
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7ff fbd2 	bl	8007874 <get_ldnumber>
 80080d0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	da01      	bge.n	80080dc <f_mount+0x28>
 80080d8:	230b      	movs	r3, #11
 80080da:	e02f      	b.n	800813c <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80080dc:	4a19      	ldr	r2, [pc, #100]	; (8008144 <f_mount+0x90>)
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080e4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d007      	beq.n	80080fc <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 80080ec:	69b8      	ldr	r0, [r7, #24]
 80080ee:	f7fd fe29 	bl	8005d44 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080f8:	2200      	movs	r2, #0
 80080fa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d004      	beq.n	800810c <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008108:	2200      	movs	r2, #0
 800810a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	490d      	ldr	r1, [pc, #52]	; (8008144 <f_mount+0x90>)
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d002      	beq.n	8008122 <f_mount+0x6e>
 800811c:	79fb      	ldrb	r3, [r7, #7]
 800811e:	2b01      	cmp	r3, #1
 8008120:	d001      	beq.n	8008126 <f_mount+0x72>
 8008122:	2300      	movs	r3, #0
 8008124:	e00a      	b.n	800813c <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8008126:	f107 0108 	add.w	r1, r7, #8
 800812a:	f107 030c 	add.w	r3, r7, #12
 800812e:	2200      	movs	r2, #0
 8008130:	4618      	mov	r0, r3
 8008132:	f7ff fc51 	bl	80079d8 <find_volume>
 8008136:	4603      	mov	r3, r0
 8008138:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800813a:	7dfb      	ldrb	r3, [r7, #23]
}
 800813c:	4618      	mov	r0, r3
 800813e:	3720      	adds	r7, #32
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}
 8008144:	20002b08 	.word	0x20002b08

08008148 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800814e:	b086      	sub	sp, #24
 8008150:	af00      	add	r7, sp, #0
 8008152:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008156:	f843 0c4c 	str.w	r0, [r3, #-76]
 800815a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800815e:	f843 1c50 	str.w	r1, [r3, #-80]
 8008162:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008166:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800816a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800816e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d101      	bne.n	800817a <f_open+0x32>
 8008176:	2309      	movs	r3, #9
 8008178:	e2f7      	b.n	800876a <f_open+0x622>
	fp->fs = 0;			/* Clear file object */
 800817a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800817e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008182:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008186:	461a      	mov	r2, r3
 8008188:	2300      	movs	r3, #0
 800818a:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800818c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008190:	461a      	mov	r2, r3
 8008192:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008196:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800819a:	f003 031f 	and.w	r3, r3, #31
 800819e:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80081a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80081a6:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80081aa:	f023 0301 	bic.w	r3, r3, #1
 80081ae:	b2da      	uxtb	r2, r3
 80081b0:	f107 0118 	add.w	r1, r7, #24
 80081b4:	3910      	subs	r1, #16
 80081b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80081ba:	3b18      	subs	r3, #24
 80081bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7ff fc09 	bl	80079d8 <find_volume>
 80081c6:	4603      	mov	r3, r0
 80081c8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80081cc:	f102 0217 	add.w	r2, r2, #23
 80081d0:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80081d2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80081d6:	f103 0317 	add.w	r3, r3, #23
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f040 82bf 	bne.w	8008760 <f_open+0x618>
		INIT_BUF(dj);
 80081e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80081e6:	461a      	mov	r2, r3
 80081e8:	f107 0318 	add.w	r3, r7, #24
 80081ec:	3b04      	subs	r3, #4
 80081ee:	f8c2 3fe0 	str.w	r3, [r2, #4064]	; 0xfe0
 80081f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80081f6:	461a      	mov	r2, r3
 80081f8:	4bd4      	ldr	r3, [pc, #848]	; (800854c <f_open+0x404>)
 80081fa:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 80081fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008202:	f853 2c50 	ldr.w	r2, [r3, #-80]
 8008206:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800820a:	3b18      	subs	r3, #24
 800820c:	4611      	mov	r1, r2
 800820e:	4618      	mov	r0, r3
 8008210:	f7ff faba 	bl	8007788 <follow_path>
 8008214:	4603      	mov	r3, r0
 8008216:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800821a:	f102 0217 	add.w	r2, r2, #23
 800821e:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8008220:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008224:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 8008228:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800822c:	f102 0210 	add.w	r2, r2, #16
 8008230:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008232:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008236:	f103 0317 	add.w	r3, r3, #23
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d126      	bne.n	800828e <f_open+0x146>
			if (!dir)	/* Default directory itself */
 8008240:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008244:	f103 0310 	add.w	r3, r3, #16
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d106      	bne.n	800825c <f_open+0x114>
				res = FR_INVALID_NAME;
 800824e:	2306      	movs	r3, #6
 8008250:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008254:	f102 0217 	add.w	r2, r2, #23
 8008258:	7013      	strb	r3, [r2, #0]
 800825a:	e018      	b.n	800828e <f_open+0x146>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800825c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008260:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008264:	f023 0301 	bic.w	r3, r3, #1
 8008268:	2b00      	cmp	r3, #0
 800826a:	bf14      	ite	ne
 800826c:	2301      	movne	r3, #1
 800826e:	2300      	moveq	r3, #0
 8008270:	b2db      	uxtb	r3, r3
 8008272:	461a      	mov	r2, r3
 8008274:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008278:	3b18      	subs	r3, #24
 800827a:	4611      	mov	r1, r2
 800827c:	4618      	mov	r0, r3
 800827e:	f7fd fbcd 	bl	8005a1c <chk_lock>
 8008282:	4603      	mov	r3, r0
 8008284:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008288:	f102 0217 	add.w	r2, r2, #23
 800828c:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800828e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008292:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008296:	f003 031c 	and.w	r3, r3, #28
 800829a:	2b00      	cmp	r3, #0
 800829c:	f000 813c 	beq.w	8008518 <f_open+0x3d0>
			if (res != FR_OK) {					/* No file, create new */
 80082a0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80082a4:	f103 0317 	add.w	r3, r3, #23
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d02e      	beq.n	800830c <f_open+0x1c4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80082ae:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80082b2:	f103 0317 	add.w	r3, r3, #23
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	2b04      	cmp	r3, #4
 80082ba:	d112      	bne.n	80082e2 <f_open+0x19a>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80082bc:	f7fd fc1e 	bl	8005afc <enq_lock>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d007      	beq.n	80082d6 <f_open+0x18e>
 80082c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80082ca:	3b18      	subs	r3, #24
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7fe ff79 	bl	80071c4 <dir_register>
 80082d2:	4603      	mov	r3, r0
 80082d4:	e000      	b.n	80082d8 <f_open+0x190>
 80082d6:	2312      	movs	r3, #18
 80082d8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80082dc:	f102 0217 	add.w	r2, r2, #23
 80082e0:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80082e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80082e6:	461a      	mov	r2, r3
 80082e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80082ec:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80082f0:	f043 0308 	orr.w	r3, r3, #8
 80082f4:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 80082f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80082fc:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 8008300:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008304:	f102 0210 	add.w	r2, r2, #16
 8008308:	6013      	str	r3, [r2, #0]
 800830a:	e01f      	b.n	800834c <f_open+0x204>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800830c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008310:	f103 0310 	add.w	r3, r3, #16
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	330b      	adds	r3, #11
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	f003 0311 	and.w	r3, r3, #17
 800831e:	2b00      	cmp	r3, #0
 8008320:	d006      	beq.n	8008330 <f_open+0x1e8>
					res = FR_DENIED;
 8008322:	2307      	movs	r3, #7
 8008324:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008328:	f102 0217 	add.w	r2, r2, #23
 800832c:	7013      	strb	r3, [r2, #0]
 800832e:	e00d      	b.n	800834c <f_open+0x204>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8008330:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008334:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008338:	f003 0304 	and.w	r3, r3, #4
 800833c:	2b00      	cmp	r3, #0
 800833e:	d005      	beq.n	800834c <f_open+0x204>
						res = FR_EXIST;
 8008340:	2308      	movs	r3, #8
 8008342:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008346:	f102 0217 	add.w	r2, r2, #23
 800834a:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800834c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008350:	f103 0317 	add.w	r3, r3, #23
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	f040 8113 	bne.w	8008582 <f_open+0x43a>
 800835c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008360:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008364:	f003 0308 	and.w	r3, r3, #8
 8008368:	2b00      	cmp	r3, #0
 800836a:	f000 810a 	beq.w	8008582 <f_open+0x43a>
				dw = GET_FATTIME();				/* Created time */
 800836e:	f7fd f9e3 	bl	8005738 <get_fattime>
 8008372:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008376:	f103 030c 	add.w	r3, r3, #12
 800837a:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800837c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008380:	f103 0310 	add.w	r3, r3, #16
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	330e      	adds	r3, #14
 8008388:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800838c:	f102 020c 	add.w	r2, r2, #12
 8008390:	6812      	ldr	r2, [r2, #0]
 8008392:	b2d2      	uxtb	r2, r2
 8008394:	701a      	strb	r2, [r3, #0]
 8008396:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800839a:	f103 030c 	add.w	r3, r3, #12
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	0a1b      	lsrs	r3, r3, #8
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80083aa:	f103 0310 	add.w	r3, r3, #16
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	330f      	adds	r3, #15
 80083b2:	b2d2      	uxtb	r2, r2
 80083b4:	701a      	strb	r2, [r3, #0]
 80083b6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80083ba:	f103 030c 	add.w	r3, r3, #12
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	0c1a      	lsrs	r2, r3, #16
 80083c2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80083c6:	f103 0310 	add.w	r3, r3, #16
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	3310      	adds	r3, #16
 80083ce:	b2d2      	uxtb	r2, r2
 80083d0:	701a      	strb	r2, [r3, #0]
 80083d2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80083d6:	f103 030c 	add.w	r3, r3, #12
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	0e1a      	lsrs	r2, r3, #24
 80083de:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80083e2:	f103 0310 	add.w	r3, r3, #16
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	3311      	adds	r3, #17
 80083ea:	b2d2      	uxtb	r2, r2
 80083ec:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80083ee:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80083f2:	f103 0310 	add.w	r3, r3, #16
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	330b      	adds	r3, #11
 80083fa:	2200      	movs	r2, #0
 80083fc:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80083fe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008402:	f103 0310 	add.w	r3, r3, #16
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	331c      	adds	r3, #28
 800840a:	2200      	movs	r2, #0
 800840c:	701a      	strb	r2, [r3, #0]
 800840e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008412:	f103 0310 	add.w	r3, r3, #16
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	331d      	adds	r3, #29
 800841a:	2200      	movs	r2, #0
 800841c:	701a      	strb	r2, [r3, #0]
 800841e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008422:	f103 0310 	add.w	r3, r3, #16
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	331e      	adds	r3, #30
 800842a:	2200      	movs	r2, #0
 800842c:	701a      	strb	r2, [r3, #0]
 800842e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008432:	f103 0310 	add.w	r3, r3, #16
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	331f      	adds	r3, #31
 800843a:	2200      	movs	r2, #0
 800843c:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800843e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008442:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8008446:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800844a:	f102 0210 	add.w	r2, r2, #16
 800844e:	6811      	ldr	r1, [r2, #0]
 8008450:	4618      	mov	r0, r3
 8008452:	f7fe fc06 	bl	8006c62 <ld_clust>
 8008456:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800845a:	f103 0308 	add.w	r3, r3, #8
 800845e:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8008460:	2100      	movs	r1, #0
 8008462:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008466:	f103 0310 	add.w	r3, r3, #16
 800846a:	6818      	ldr	r0, [r3, #0]
 800846c:	f7fe fc27 	bl	8006cbe <st_clust>
				dj.fs->wflag = 1;
 8008470:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008474:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8008478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800847c:	2201      	movs	r2, #1
 800847e:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8008480:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008484:	f103 0308 	add.w	r3, r3, #8
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d079      	beq.n	8008582 <f_open+0x43a>
					dw = dj.fs->winsect;
 800848e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008492:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8008496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800849a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800849c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80084a0:	f102 020c 	add.w	r2, r2, #12
 80084a4:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 80084a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80084aa:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 80084ae:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80084b2:	f102 0208 	add.w	r2, r2, #8
 80084b6:	6811      	ldr	r1, [r2, #0]
 80084b8:	4618      	mov	r0, r3
 80084ba:	f7fe f823 	bl	8006504 <remove_chain>
 80084be:	4603      	mov	r3, r0
 80084c0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80084c4:	f102 0217 	add.w	r2, r2, #23
 80084c8:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 80084ca:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80084ce:	f103 0317 	add.w	r3, r3, #23
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d154      	bne.n	8008582 <f_open+0x43a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80084d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80084dc:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	; 0xfc8
 80084e0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80084e4:	f103 0308 	add.w	r3, r3, #8
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	3b01      	subs	r3, #1
 80084ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80084f0:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 80084f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80084f6:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 80084fa:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80084fe:	f102 020c 	add.w	r2, r2, #12
 8008502:	6811      	ldr	r1, [r2, #0]
 8008504:	4618      	mov	r0, r3
 8008506:	f7fd fc99 	bl	8005e3c <move_window>
 800850a:	4603      	mov	r3, r0
 800850c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008510:	f102 0217 	add.w	r2, r2, #23
 8008514:	7013      	strb	r3, [r2, #0]
 8008516:	e034      	b.n	8008582 <f_open+0x43a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8008518:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800851c:	f103 0317 	add.w	r3, r3, #23
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d12d      	bne.n	8008582 <f_open+0x43a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8008526:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800852a:	f103 0310 	add.w	r3, r3, #16
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	330b      	adds	r3, #11
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	f003 0310 	and.w	r3, r3, #16
 8008538:	2b00      	cmp	r3, #0
 800853a:	d009      	beq.n	8008550 <f_open+0x408>
					res = FR_NO_FILE;
 800853c:	2304      	movs	r3, #4
 800853e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008542:	f102 0217 	add.w	r2, r2, #23
 8008546:	7013      	strb	r3, [r2, #0]
 8008548:	e01b      	b.n	8008582 <f_open+0x43a>
 800854a:	bf00      	nop
 800854c:	20002b28 	.word	0x20002b28
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8008550:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008554:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008558:	f003 0302 	and.w	r3, r3, #2
 800855c:	2b00      	cmp	r3, #0
 800855e:	d010      	beq.n	8008582 <f_open+0x43a>
 8008560:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008564:	f103 0310 	add.w	r3, r3, #16
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	330b      	adds	r3, #11
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	f003 0301 	and.w	r3, r3, #1
 8008572:	2b00      	cmp	r3, #0
 8008574:	d005      	beq.n	8008582 <f_open+0x43a>
						res = FR_DENIED;
 8008576:	2307      	movs	r3, #7
 8008578:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800857c:	f102 0217 	add.w	r2, r2, #23
 8008580:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8008582:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008586:	f103 0317 	add.w	r3, r3, #23
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d157      	bne.n	8008640 <f_open+0x4f8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008590:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008594:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008598:	f003 0308 	and.w	r3, r3, #8
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00a      	beq.n	80085b6 <f_open+0x46e>
				mode |= FA__WRITTEN;
 80085a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80085a4:	461a      	mov	r2, r3
 80085a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80085aa:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80085ae:	f043 0320 	orr.w	r3, r3, #32
 80085b2:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80085b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80085ba:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 80085be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80085c8:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80085cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80085d0:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 80085d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80085d6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80085da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085de:	461a      	mov	r2, r3
 80085e0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80085e4:	f103 0310 	add.w	r3, r3, #16
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80085ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80085f0:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80085f4:	f023 0301 	bic.w	r3, r3, #1
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	bf14      	ite	ne
 80085fc:	2301      	movne	r3, #1
 80085fe:	2300      	moveq	r3, #0
 8008600:	b2db      	uxtb	r3, r3
 8008602:	461a      	mov	r2, r3
 8008604:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008608:	3b18      	subs	r3, #24
 800860a:	4611      	mov	r1, r2
 800860c:	4618      	mov	r0, r3
 800860e:	f7fd fa99 	bl	8005b44 <inc_lock>
 8008612:	4602      	mov	r2, r0
 8008614:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008618:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800861c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008620:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8008622:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008626:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800862a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800862e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008630:	2b00      	cmp	r3, #0
 8008632:	d105      	bne.n	8008640 <f_open+0x4f8>
 8008634:	2302      	movs	r3, #2
 8008636:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800863a:	f102 0217 	add.w	r2, r2, #23
 800863e:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8008640:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008644:	f103 0317 	add.w	r3, r3, #23
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	2b00      	cmp	r3, #0
 800864c:	f040 8088 	bne.w	8008760 <f_open+0x618>
			fp->flag = mode;					/* File access mode */
 8008650:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008654:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800865c:	461a      	mov	r2, r3
 800865e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008662:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008666:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 8008668:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800866c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008674:	2200      	movs	r2, #0
 8008676:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8008678:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800867c:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8008680:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008684:	f102 0210 	add.w	r2, r2, #16
 8008688:	6811      	ldr	r1, [r2, #0]
 800868a:	4618      	mov	r0, r3
 800868c:	f7fe fae9 	bl	8006c62 <ld_clust>
 8008690:	4602      	mov	r2, r0
 8008692:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008696:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800869a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800869e:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80086a0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80086a4:	f103 0310 	add.w	r3, r3, #16
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	331f      	adds	r3, #31
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	061a      	lsls	r2, r3, #24
 80086b0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80086b4:	f103 0310 	add.w	r3, r3, #16
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	331e      	adds	r3, #30
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	041b      	lsls	r3, r3, #16
 80086c0:	4313      	orrs	r3, r2
 80086c2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80086c6:	f102 0210 	add.w	r2, r2, #16
 80086ca:	6812      	ldr	r2, [r2, #0]
 80086cc:	321d      	adds	r2, #29
 80086ce:	7812      	ldrb	r2, [r2, #0]
 80086d0:	0212      	lsls	r2, r2, #8
 80086d2:	4313      	orrs	r3, r2
 80086d4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80086d8:	f102 0210 	add.w	r2, r2, #16
 80086dc:	6812      	ldr	r2, [r2, #0]
 80086de:	321c      	adds	r2, #28
 80086e0:	7812      	ldrb	r2, [r2, #0]
 80086e2:	4313      	orrs	r3, r2
 80086e4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80086e8:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80086ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80086f0:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 80086f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80086f6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80086fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086fe:	461a      	mov	r2, r3
 8008700:	2300      	movs	r3, #0
 8008702:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 8008704:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008708:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800870c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008710:	461a      	mov	r2, r3
 8008712:	2300      	movs	r3, #0
 8008714:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8008716:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800871a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800871e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008722:	461a      	mov	r2, r3
 8008724:	2300      	movs	r3, #0
 8008726:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8008728:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800872c:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8008730:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008734:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8008738:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800873c:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 800873e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008742:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008750:	88da      	ldrh	r2, [r3, #6]
 8008752:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008756:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800875a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800875e:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8008760:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008764:	f103 0317 	add.w	r3, r3, #23
 8008768:	781b      	ldrb	r3, [r3, #0]
}
 800876a:	4618      	mov	r0, r3
 800876c:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8008770:	3718      	adds	r7, #24
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop

08008778 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b08a      	sub	sp, #40	; 0x28
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	607a      	str	r2, [r7, #4]
 8008784:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	2200      	movs	r2, #0
 800878e:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8008790:	68f8      	ldr	r0, [r7, #12]
 8008792:	f7ff fc53 	bl	800803c <validate>
 8008796:	4603      	mov	r3, r0
 8008798:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800879a:	7dfb      	ldrb	r3, [r7, #23]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d001      	beq.n	80087a4 <f_write+0x2c>
 80087a0:	7dfb      	ldrb	r3, [r7, #23]
 80087a2:	e21e      	b.n	8008be2 <f_write+0x46a>
	if (fp->err)							/* Check error */
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087aa:	79db      	ldrb	r3, [r3, #7]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d004      	beq.n	80087ba <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087b6:	79db      	ldrb	r3, [r3, #7]
 80087b8:	e213      	b.n	8008be2 <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087c0:	799b      	ldrb	r3, [r3, #6]
 80087c2:	f003 0302 	and.w	r3, r3, #2
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d101      	bne.n	80087ce <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 80087ca:	2307      	movs	r3, #7
 80087cc:	e209      	b.n	8008be2 <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087d4:	689a      	ldr	r2, [r3, #8]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	441a      	add	r2, r3
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	f080 81d9 	bcs.w	8008b9a <f_write+0x422>
 80087e8:	2300      	movs	r3, #0
 80087ea:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80087ec:	e1d5      	b.n	8008b9a <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	68fa      	ldr	r2, [r7, #12]
 80087f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80087fc:	6812      	ldr	r2, [r2, #0]
 80087fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008802:	8952      	ldrh	r2, [r2, #10]
 8008804:	fbb3 f1f2 	udiv	r1, r3, r2
 8008808:	fb01 f202 	mul.w	r2, r1, r2
 800880c:	1a9b      	subs	r3, r3, r2
 800880e:	2b00      	cmp	r3, #0
 8008810:	f040 8169 	bne.w	8008ae6 <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008822:	6812      	ldr	r2, [r2, #0]
 8008824:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008828:	8952      	ldrh	r2, [r2, #10]
 800882a:	fbb3 f3f2 	udiv	r3, r3, r2
 800882e:	b2da      	uxtb	r2, r3
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800883c:	789b      	ldrb	r3, [r3, #2]
 800883e:	3b01      	subs	r3, #1
 8008840:	b2db      	uxtb	r3, r3
 8008842:	4013      	ands	r3, r2
 8008844:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8008846:	7dbb      	ldrb	r3, [r7, #22]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d15f      	bne.n	800890c <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d111      	bne.n	800887c <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8008862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008864:	2b00      	cmp	r3, #0
 8008866:	d126      	bne.n	80088b6 <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2100      	movs	r1, #0
 8008872:	4618      	mov	r0, r3
 8008874:	f7fd fea7 	bl	80065c6 <create_chain>
 8008878:	6278      	str	r0, [r7, #36]	; 0x24
 800887a:	e01c      	b.n	80088b6 <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008884:	2b00      	cmp	r3, #0
 8008886:	d009      	beq.n	800889c <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	4619      	mov	r1, r3
 8008892:	68f8      	ldr	r0, [r7, #12]
 8008894:	f7fd ff3f 	bl	8006716 <clmt_clust>
 8008898:	6278      	str	r0, [r7, #36]	; 0x24
 800889a:	e00c      	b.n	80088b6 <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088aa:	695b      	ldr	r3, [r3, #20]
 80088ac:	4619      	mov	r1, r3
 80088ae:	4610      	mov	r0, r2
 80088b0:	f7fd fe89 	bl	80065c6 <create_chain>
 80088b4:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80088b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	f000 8173 	beq.w	8008ba4 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80088be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d106      	bne.n	80088d2 <f_write+0x15a>
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088ca:	2202      	movs	r2, #2
 80088cc:	71da      	strb	r2, [r3, #7]
 80088ce:	2302      	movs	r3, #2
 80088d0:	e187      	b.n	8008be2 <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80088d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d8:	d106      	bne.n	80088e8 <f_write+0x170>
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088e0:	2201      	movs	r2, #1
 80088e2:	71da      	strb	r2, [r3, #7]
 80088e4:	2301      	movs	r3, #1
 80088e6:	e17c      	b.n	8008be2 <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088ee:	461a      	mov	r2, r3
 80088f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f2:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088fa:	691b      	ldr	r3, [r3, #16]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d105      	bne.n	800890c <f_write+0x194>
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008906:	461a      	mov	r2, r3
 8008908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890a:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008912:	799b      	ldrb	r3, [r3, #6]
 8008914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008918:	2b00      	cmp	r3, #0
 800891a:	d023      	beq.n	8008964 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008928:	7858      	ldrb	r0, [r3, #1]
 800892a:	68f9      	ldr	r1, [r7, #12]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008932:	699a      	ldr	r2, [r3, #24]
 8008934:	2301      	movs	r3, #1
 8008936:	f7fc ffbb 	bl	80058b0 <disk_write>
 800893a:	4603      	mov	r3, r0
 800893c:	2b00      	cmp	r3, #0
 800893e:	d006      	beq.n	800894e <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008946:	2201      	movs	r2, #1
 8008948:	71da      	strb	r2, [r3, #7]
 800894a:	2301      	movs	r3, #1
 800894c:	e149      	b.n	8008be2 <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008954:	799b      	ldrb	r3, [r3, #6]
 8008956:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800895a:	b2da      	uxtb	r2, r3
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008962:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008972:	695b      	ldr	r3, [r3, #20]
 8008974:	4619      	mov	r1, r3
 8008976:	4610      	mov	r0, r2
 8008978:	f7fd fb51 	bl	800601e <clust2sect>
 800897c:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d106      	bne.n	8008992 <f_write+0x21a>
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800898a:	2202      	movs	r2, #2
 800898c:	71da      	strb	r2, [r3, #7]
 800898e:	2302      	movs	r3, #2
 8008990:	e127      	b.n	8008be2 <f_write+0x46a>
			sect += csect;
 8008992:	7dbb      	ldrb	r3, [r7, #22]
 8008994:	693a      	ldr	r2, [r7, #16]
 8008996:	4413      	add	r3, r2
 8008998:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089a6:	895b      	ldrh	r3, [r3, #10]
 80089a8:	461a      	mov	r2, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80089b0:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d069      	beq.n	8008a8c <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80089b8:	7dba      	ldrb	r2, [r7, #22]
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	4413      	add	r3, r2
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80089c4:	6812      	ldr	r2, [r2, #0]
 80089c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80089ca:	7892      	ldrb	r2, [r2, #2]
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d90a      	bls.n	80089e6 <f_write+0x26e>
					cc = fp->fs->csize - csect;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089dc:	789b      	ldrb	r3, [r3, #2]
 80089de:	461a      	mov	r2, r3
 80089e0:	7dbb      	ldrb	r3, [r7, #22]
 80089e2:	1ad3      	subs	r3, r2, r3
 80089e4:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089f2:	7858      	ldrb	r0, [r3, #1]
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	693a      	ldr	r2, [r7, #16]
 80089f8:	69b9      	ldr	r1, [r7, #24]
 80089fa:	f7fc ff59 	bl	80058b0 <disk_write>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d006      	beq.n	8008a12 <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	71da      	strb	r2, [r3, #7]
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e0e7      	b.n	8008be2 <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a18:	699a      	ldr	r2, [r3, #24]
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	1ad3      	subs	r3, r2, r3
 8008a1e:	69fa      	ldr	r2, [r7, #28]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d926      	bls.n	8008a72 <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a2c:	699a      	ldr	r2, [r3, #24]
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	68fa      	ldr	r2, [r7, #12]
 8008a34:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008a38:	6812      	ldr	r2, [r2, #0]
 8008a3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008a3e:	8952      	ldrh	r2, [r2, #10]
 8008a40:	fb02 f303 	mul.w	r3, r2, r3
 8008a44:	69ba      	ldr	r2, [r7, #24]
 8008a46:	18d1      	adds	r1, r2, r3
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a54:	895b      	ldrh	r3, [r3, #10]
 8008a56:	461a      	mov	r2, r3
 8008a58:	f7fc ff68 	bl	800592c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a62:	799b      	ldrb	r3, [r3, #6]
 8008a64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a68:	b2da      	uxtb	r2, r3
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a70:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a7e:	895b      	ldrh	r3, [r3, #10]
 8008a80:	461a      	mov	r2, r3
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	fb02 f303 	mul.w	r3, r2, r3
 8008a88:	623b      	str	r3, [r7, #32]
				continue;
 8008a8a:	e06e      	b.n	8008b6a <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a92:	699b      	ldr	r3, [r3, #24]
 8008a94:	693a      	ldr	r2, [r7, #16]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d01f      	beq.n	8008ada <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aa0:	689a      	ldr	r2, [r3, #8]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d215      	bcs.n	8008ada <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aba:	7858      	ldrb	r0, [r3, #1]
 8008abc:	68f9      	ldr	r1, [r7, #12]
 8008abe:	2301      	movs	r3, #1
 8008ac0:	693a      	ldr	r2, [r7, #16]
 8008ac2:	f7fc fed5 	bl	8005870 <disk_read>
 8008ac6:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d006      	beq.n	8008ada <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	71da      	strb	r2, [r3, #7]
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e083      	b.n	8008be2 <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008af2:	895b      	ldrh	r3, [r3, #10]
 8008af4:	4618      	mov	r0, r3
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	68fa      	ldr	r2, [r7, #12]
 8008b00:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b04:	6812      	ldr	r2, [r2, #0]
 8008b06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b0a:	8952      	ldrh	r2, [r2, #10]
 8008b0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b10:	fb01 f202 	mul.w	r2, r1, r2
 8008b14:	1a9b      	subs	r3, r3, r2
 8008b16:	1ac3      	subs	r3, r0, r3
 8008b18:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8008b1a:	6a3a      	ldr	r2, [r7, #32]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d901      	bls.n	8008b26 <f_write+0x3ae>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b34:	6812      	ldr	r2, [r2, #0]
 8008b36:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b3a:	8952      	ldrh	r2, [r2, #10]
 8008b3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b40:	fb01 f202 	mul.w	r2, r1, r2
 8008b44:	1a9b      	subs	r3, r3, r2
 8008b46:	68fa      	ldr	r2, [r7, #12]
 8008b48:	4413      	add	r3, r2
 8008b4a:	6a3a      	ldr	r2, [r7, #32]
 8008b4c:	69b9      	ldr	r1, [r7, #24]
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7fc feec 	bl	800592c <mem_cpy>
		fp->flag |= FA__DIRTY;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b5a:	799b      	ldrb	r3, [r3, #6]
 8008b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b60:	b2da      	uxtb	r2, r3
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b68:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8008b6a:	69ba      	ldr	r2, [r7, #24]
 8008b6c:	6a3b      	ldr	r3, [r7, #32]
 8008b6e:	4413      	add	r3, r2
 8008b70:	61bb      	str	r3, [r7, #24]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b78:	689a      	ldr	r2, [r3, #8]
 8008b7a:	6a3b      	ldr	r3, [r7, #32]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	68fa      	ldr	r2, [r7, #12]
 8008b80:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b84:	6093      	str	r3, [r2, #8]
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	6a3b      	ldr	r3, [r7, #32]
 8008b8c:	441a      	add	r2, r3
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	601a      	str	r2, [r3, #0]
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	6a3b      	ldr	r3, [r7, #32]
 8008b96:	1ad3      	subs	r3, r2, r3
 8008b98:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	f47f ae26 	bne.w	80087ee <f_write+0x76>
 8008ba2:	e000      	b.n	8008ba6 <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008ba4:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bac:	689a      	ldr	r2, [r3, #8]
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d907      	bls.n	8008bca <f_write+0x452>
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	68fa      	ldr	r2, [r7, #12]
 8008bc4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008bc8:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bd0:	799b      	ldrb	r3, [r3, #6]
 8008bd2:	f043 0320 	orr.w	r3, r3, #32
 8008bd6:	b2da      	uxtb	r2, r3
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bde:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8008be0:	2300      	movs	r3, #0
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3728      	adds	r7, #40	; 0x28
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b086      	sub	sp, #24
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7ff fa22 	bl	800803c <validate>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008bfc:	7dfb      	ldrb	r3, [r7, #23]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	f040 80bc 	bne.w	8008d7c <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c0a:	799b      	ldrb	r3, [r3, #6]
 8008c0c:	f003 0320 	and.w	r3, r3, #32
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	f000 80b3 	beq.w	8008d7c <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c1c:	799b      	ldrb	r3, [r3, #6]
 8008c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d01e      	beq.n	8008c64 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c32:	7858      	ldrb	r0, [r3, #1]
 8008c34:	6879      	ldr	r1, [r7, #4]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c3c:	699a      	ldr	r2, [r3, #24]
 8008c3e:	2301      	movs	r3, #1
 8008c40:	f7fc fe36 	bl	80058b0 <disk_write>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d001      	beq.n	8008c4e <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e097      	b.n	8008d7e <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c54:	799b      	ldrb	r3, [r3, #6]
 8008c56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c5a:	b2da      	uxtb	r2, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c62:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c72:	69db      	ldr	r3, [r3, #28]
 8008c74:	4619      	mov	r1, r3
 8008c76:	4610      	mov	r0, r2
 8008c78:	f7fd f8e0 	bl	8005e3c <move_window>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8008c80:	7dfb      	ldrb	r3, [r7, #23]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d17a      	bne.n	8008d7c <f_sync+0x192>
				dir = fp->dir_ptr;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c8c:	6a1b      	ldr	r3, [r3, #32]
 8008c8e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	330b      	adds	r3, #11
 8008c94:	781a      	ldrb	r2, [r3, #0]
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	330b      	adds	r3, #11
 8008c9a:	f042 0220 	orr.w	r2, r2, #32
 8008c9e:	b2d2      	uxtb	r2, r2
 8008ca0:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ca8:	68da      	ldr	r2, [r3, #12]
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	331c      	adds	r3, #28
 8008cae:	b2d2      	uxtb	r2, r2
 8008cb0:	701a      	strb	r2, [r3, #0]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	0a1b      	lsrs	r3, r3, #8
 8008cbe:	b29a      	uxth	r2, r3
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	331d      	adds	r3, #29
 8008cc4:	b2d2      	uxtb	r2, r2
 8008cc6:	701a      	strb	r2, [r3, #0]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	0c1a      	lsrs	r2, r3, #16
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	331e      	adds	r3, #30
 8008cd6:	b2d2      	uxtb	r2, r2
 8008cd8:	701a      	strb	r2, [r3, #0]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ce0:	68db      	ldr	r3, [r3, #12]
 8008ce2:	0e1a      	lsrs	r2, r3, #24
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	331f      	adds	r3, #31
 8008ce8:	b2d2      	uxtb	r2, r2
 8008cea:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cf2:	691b      	ldr	r3, [r3, #16]
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	6938      	ldr	r0, [r7, #16]
 8008cf8:	f7fd ffe1 	bl	8006cbe <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8008cfc:	f7fc fd1c 	bl	8005738 <get_fattime>
 8008d00:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	3316      	adds	r3, #22
 8008d06:	68fa      	ldr	r2, [r7, #12]
 8008d08:	b2d2      	uxtb	r2, r2
 8008d0a:	701a      	strb	r2, [r3, #0]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	0a1b      	lsrs	r3, r3, #8
 8008d12:	b29a      	uxth	r2, r3
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	3317      	adds	r3, #23
 8008d18:	b2d2      	uxtb	r2, r2
 8008d1a:	701a      	strb	r2, [r3, #0]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	0c1a      	lsrs	r2, r3, #16
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	3318      	adds	r3, #24
 8008d24:	b2d2      	uxtb	r2, r2
 8008d26:	701a      	strb	r2, [r3, #0]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	0e1a      	lsrs	r2, r3, #24
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	3319      	adds	r3, #25
 8008d30:	b2d2      	uxtb	r2, r2
 8008d32:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	3312      	adds	r3, #18
 8008d38:	2200      	movs	r2, #0
 8008d3a:	701a      	strb	r2, [r3, #0]
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	3313      	adds	r3, #19
 8008d40:	2200      	movs	r2, #0
 8008d42:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d4a:	799b      	ldrb	r3, [r3, #6]
 8008d4c:	f023 0320 	bic.w	r3, r3, #32
 8008d50:	b2da      	uxtb	r2, r3
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d58:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d66:	2201      	movs	r2, #1
 8008d68:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7fd f894 	bl	8005ea0 <sync_fs>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8008d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3718      	adds	r7, #24
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b084      	sub	sp, #16
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f7ff ff2b 	bl	8008bea <f_sync>
 8008d94:	4603      	mov	r3, r0
 8008d96:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008d98:	7bfb      	ldrb	r3, [r7, #15]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d119      	bne.n	8008dd2 <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f7ff f94c 	bl	800803c <validate>
 8008da4:	4603      	mov	r3, r0
 8008da6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008da8:	7bfb      	ldrb	r3, [r7, #15]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d111      	bne.n	8008dd2 <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7fc ff80 	bl	8005cbc <dec_lock>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008dc0:	7bfb      	ldrb	r3, [r7, #15]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d105      	bne.n	8008dd2 <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dcc:	461a      	mov	r2, r3
 8008dce:	2300      	movs	r3, #0
 8008dd0:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3710      	adds	r7, #16
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b090      	sub	sp, #64	; 0x40
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f7ff f928 	bl	800803c <validate>
 8008dec:	4603      	mov	r3, r0
 8008dee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8008df2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d002      	beq.n	8008e00 <f_lseek+0x24>
 8008dfa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008dfe:	e2da      	b.n	80093b6 <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e06:	79db      	ldrb	r3, [r3, #7]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d004      	beq.n	8008e16 <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e12:	79db      	ldrb	r3, [r3, #7]
 8008e14:	e2cf      	b.n	80093b6 <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	f000 8124 	beq.w	800906c <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e2a:	d16c      	bne.n	8008f06 <f_lseek+0x12a>
			tbl = fp->cltbl;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e34:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e38:	1d1a      	adds	r2, r3, #4
 8008e3a:	627a      	str	r2, [r7, #36]	; 0x24
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	617b      	str	r3, [r7, #20]
 8008e40:	2302      	movs	r3, #2
 8008e42:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e4a:	691b      	ldr	r3, [r3, #16]
 8008e4c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8008e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d046      	beq.n	8008ee2 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e56:	613b      	str	r3, [r7, #16]
 8008e58:	2300      	movs	r3, #0
 8008e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e5e:	3302      	adds	r3, #2
 8008e60:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8008e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e64:	60fb      	str	r3, [r7, #12]
 8008e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e68:	3301      	adds	r3, #1
 8008e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e76:	4618      	mov	r0, r3
 8008e78:	f7fd f8f5 	bl	8006066 <get_fat>
 8008e7c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8008e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d806      	bhi.n	8008e92 <f_lseek+0xb6>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e8a:	2202      	movs	r2, #2
 8008e8c:	71da      	strb	r2, [r3, #7]
 8008e8e:	2302      	movs	r3, #2
 8008e90:	e291      	b.n	80093b6 <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e98:	d106      	bne.n	8008ea8 <f_lseek+0xcc>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	71da      	strb	r2, [r3, #7]
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	e286      	b.n	80093b6 <f_lseek+0x5da>
					} while (cl == pcl + 1);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	3301      	adds	r3, #1
 8008eac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d0d7      	beq.n	8008e62 <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008eb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d809      	bhi.n	8008ece <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 8008eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebc:	1d1a      	adds	r2, r3, #4
 8008ebe:	627a      	str	r2, [r7, #36]	; 0x24
 8008ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ec2:	601a      	str	r2, [r3, #0]
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec6:	1d1a      	adds	r2, r3, #4
 8008ec8:	627a      	str	r2, [r7, #36]	; 0x24
 8008eca:	693a      	ldr	r2, [r7, #16]
 8008ecc:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008eda:	695b      	ldr	r3, [r3, #20]
 8008edc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d3b8      	bcc.n	8008e54 <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008eec:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8008eee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d803      	bhi.n	8008efe <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 8008ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef8:	2200      	movs	r2, #0
 8008efa:	601a      	str	r2, [r3, #0]
 8008efc:	e259      	b.n	80093b2 <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008efe:	2311      	movs	r3, #17
 8008f00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008f04:	e255      	b.n	80093b2 <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	683a      	ldr	r2, [r7, #0]
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d904      	bls.n	8008f1e <f_lseek+0x142>
				ofs = fp->fsize;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f24:	461a      	mov	r2, r3
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	6093      	str	r3, [r2, #8]
			if (ofs) {
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	f000 8240 	beq.w	80093b2 <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	3b01      	subs	r3, #1
 8008f36:	4619      	mov	r1, r3
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f7fd fbec 	bl	8006716 <clmt_clust>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f46:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f56:	695b      	ldr	r3, [r3, #20]
 8008f58:	4619      	mov	r1, r3
 8008f5a:	4610      	mov	r0, r2
 8008f5c:	f7fd f85f 	bl	800601e <clust2sect>
 8008f60:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d106      	bne.n	8008f76 <f_lseek+0x19a>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f6e:	2202      	movs	r2, #2
 8008f70:	71da      	strb	r2, [r3, #7]
 8008f72:	2302      	movs	r3, #2
 8008f74:	e21f      	b.n	80093b6 <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	3b01      	subs	r3, #1
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008f80:	6812      	ldr	r2, [r2, #0]
 8008f82:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008f86:	8952      	ldrh	r2, [r2, #10]
 8008f88:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008f92:	6812      	ldr	r2, [r2, #0]
 8008f94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008f98:	7892      	ldrb	r2, [r2, #2]
 8008f9a:	3a01      	subs	r2, #1
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	69ba      	ldr	r2, [r7, #24]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008fb2:	6812      	ldr	r2, [r2, #0]
 8008fb4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008fb8:	8952      	ldrh	r2, [r2, #10]
 8008fba:	fbb3 f1f2 	udiv	r1, r3, r2
 8008fbe:	fb01 f202 	mul.w	r2, r1, r2
 8008fc2:	1a9b      	subs	r3, r3, r2
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	f000 81f4 	beq.w	80093b2 <f_lseek+0x5d6>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fd0:	699b      	ldr	r3, [r3, #24]
 8008fd2:	69ba      	ldr	r2, [r7, #24]
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	f000 81ec 	beq.w	80093b2 <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fe0:	799b      	ldrb	r3, [r3, #6]
 8008fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d023      	beq.n	8009032 <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ff6:	7858      	ldrb	r0, [r3, #1]
 8008ff8:	6879      	ldr	r1, [r7, #4]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009000:	699a      	ldr	r2, [r3, #24]
 8009002:	2301      	movs	r3, #1
 8009004:	f7fc fc54 	bl	80058b0 <disk_write>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d006      	beq.n	800901c <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009014:	2201      	movs	r2, #1
 8009016:	71da      	strb	r2, [r3, #7]
 8009018:	2301      	movs	r3, #1
 800901a:	e1cc      	b.n	80093b6 <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009022:	799b      	ldrb	r3, [r3, #6]
 8009024:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009028:	b2da      	uxtb	r2, r3
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009030:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800903e:	7858      	ldrb	r0, [r3, #1]
 8009040:	6879      	ldr	r1, [r7, #4]
 8009042:	2301      	movs	r3, #1
 8009044:	69ba      	ldr	r2, [r7, #24]
 8009046:	f7fc fc13 	bl	8005870 <disk_read>
 800904a:	4603      	mov	r3, r0
 800904c:	2b00      	cmp	r3, #0
 800904e:	d006      	beq.n	800905e <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009056:	2201      	movs	r2, #1
 8009058:	71da      	strb	r2, [r3, #7]
 800905a:	2301      	movs	r3, #1
 800905c:	e1ab      	b.n	80093b6 <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009064:	461a      	mov	r2, r3
 8009066:	69bb      	ldr	r3, [r7, #24]
 8009068:	6193      	str	r3, [r2, #24]
 800906a:	e1a2      	b.n	80093b2 <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	683a      	ldr	r2, [r7, #0]
 8009076:	429a      	cmp	r2, r3
 8009078:	d90c      	bls.n	8009094 <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009080:	799b      	ldrb	r3, [r3, #6]
 8009082:	f003 0302 	and.w	r3, r3, #2
 8009086:	2b00      	cmp	r3, #0
 8009088:	d104      	bne.n	8009094 <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800909e:	2300      	movs	r3, #0
 80090a0:	637b      	str	r3, [r7, #52]	; 0x34
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090a8:	461a      	mov	r2, r3
 80090aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ac:	6093      	str	r3, [r2, #8]
		if (ofs) {
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f000 8100 	beq.w	80092b6 <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090c2:	789b      	ldrb	r3, [r3, #2]
 80090c4:	461a      	mov	r2, r3
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090d2:	895b      	ldrh	r3, [r3, #10]
 80090d4:	fb02 f303 	mul.w	r3, r2, r3
 80090d8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80090da:	6a3b      	ldr	r3, [r7, #32]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d021      	beq.n	8009124 <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	1e5a      	subs	r2, r3, #1
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80090ea:	6a3b      	ldr	r3, [r7, #32]
 80090ec:	1e59      	subs	r1, r3, #1
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d315      	bcc.n	8009124 <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 80090f8:	6a3b      	ldr	r3, [r7, #32]
 80090fa:	1e5a      	subs	r2, r3, #1
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	425b      	negs	r3, r3
 8009100:	4013      	ands	r3, r2
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009108:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	683a      	ldr	r2, [r7, #0]
 8009114:	1ad3      	subs	r3, r2, r3
 8009116:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800911e:	695b      	ldr	r3, [r3, #20]
 8009120:	63bb      	str	r3, [r7, #56]	; 0x38
 8009122:	e031      	b.n	8009188 <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800912a:	691b      	ldr	r3, [r3, #16]
 800912c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800912e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009130:	2b00      	cmp	r3, #0
 8009132:	d123      	bne.n	800917c <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2100      	movs	r1, #0
 800913e:	4618      	mov	r0, r3
 8009140:	f7fd fa41 	bl	80065c6 <create_chain>
 8009144:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8009146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009148:	2b01      	cmp	r3, #1
 800914a:	d106      	bne.n	800915a <f_lseek+0x37e>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009152:	2202      	movs	r2, #2
 8009154:	71da      	strb	r2, [r3, #7]
 8009156:	2302      	movs	r3, #2
 8009158:	e12d      	b.n	80093b6 <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800915a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800915c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009160:	d106      	bne.n	8009170 <f_lseek+0x394>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009168:	2201      	movs	r2, #1
 800916a:	71da      	strb	r2, [r3, #7]
 800916c:	2301      	movs	r3, #1
 800916e:	e122      	b.n	80093b6 <f_lseek+0x5da>
					fp->sclust = clst;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009176:	461a      	mov	r2, r3
 8009178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917a:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009182:	461a      	mov	r2, r3
 8009184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009186:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 8009188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918a:	2b00      	cmp	r3, #0
 800918c:	f000 8093 	beq.w	80092b6 <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 8009190:	e052      	b.n	8009238 <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009198:	799b      	ldrb	r3, [r3, #6]
 800919a:	f003 0302 	and.w	r3, r3, #2
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d00e      	beq.n	80091c0 <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7fd fa0a 	bl	80065c6 <create_chain>
 80091b2:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 80091b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d10b      	bne.n	80091d2 <f_lseek+0x3f6>
							ofs = bcs; break;
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	603b      	str	r3, [r7, #0]
 80091be:	e03f      	b.n	8009240 <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7fc ff4b 	bl	8006066 <get_fat>
 80091d0:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80091d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091d8:	d106      	bne.n	80091e8 <f_lseek+0x40c>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091e0:	2201      	movs	r2, #1
 80091e2:	71da      	strb	r2, [r3, #7]
 80091e4:	2301      	movs	r3, #1
 80091e6:	e0e6      	b.n	80093b6 <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 80091e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d909      	bls.n	8009202 <f_lseek+0x426>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091fa:	695b      	ldr	r3, [r3, #20]
 80091fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091fe:	429a      	cmp	r2, r3
 8009200:	d306      	bcc.n	8009210 <f_lseek+0x434>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009208:	2202      	movs	r2, #2
 800920a:	71da      	strb	r2, [r3, #7]
 800920c:	2302      	movs	r3, #2
 800920e:	e0d2      	b.n	80093b6 <f_lseek+0x5da>
					fp->clust = clst;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009216:	461a      	mov	r2, r3
 8009218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800921a:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009222:	689a      	ldr	r2, [r3, #8]
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	4413      	add	r3, r2
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800922e:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 8009230:	683a      	ldr	r2, [r7, #0]
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	1ad3      	subs	r3, r2, r3
 8009236:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8009238:	683a      	ldr	r2, [r7, #0]
 800923a:	69fb      	ldr	r3, [r7, #28]
 800923c:	429a      	cmp	r2, r3
 800923e:	d8a8      	bhi.n	8009192 <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009246:	689a      	ldr	r2, [r3, #8]
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	4413      	add	r3, r2
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009252:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009260:	895b      	ldrh	r3, [r3, #10]
 8009262:	461a      	mov	r2, r3
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	fbb3 f1f2 	udiv	r1, r3, r2
 800926a:	fb01 f202 	mul.w	r2, r1, r2
 800926e:	1a9b      	subs	r3, r3, r2
 8009270:	2b00      	cmp	r3, #0
 8009272:	d020      	beq.n	80092b6 <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800927e:	4618      	mov	r0, r3
 8009280:	f7fc fecd 	bl	800601e <clust2sect>
 8009284:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8009286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009288:	2b00      	cmp	r3, #0
 800928a:	d106      	bne.n	800929a <f_lseek+0x4be>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009292:	2202      	movs	r2, #2
 8009294:	71da      	strb	r2, [r3, #7]
 8009296:	2302      	movs	r3, #2
 8009298:	e08d      	b.n	80093b6 <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092a6:	895b      	ldrh	r3, [r3, #10]
 80092a8:	461a      	mov	r2, r3
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80092b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092b2:	4413      	add	r3, r2
 80092b4:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80092c4:	6812      	ldr	r2, [r2, #0]
 80092c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80092ca:	8952      	ldrh	r2, [r2, #10]
 80092cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80092d0:	fb01 f202 	mul.w	r2, r1, r2
 80092d4:	1a9b      	subs	r3, r3, r2
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d04e      	beq.n	8009378 <f_lseek+0x59c>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092e0:	699b      	ldr	r3, [r3, #24]
 80092e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d047      	beq.n	8009378 <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092ee:	799b      	ldrb	r3, [r3, #6]
 80092f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d023      	beq.n	8009340 <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009304:	7858      	ldrb	r0, [r3, #1]
 8009306:	6879      	ldr	r1, [r7, #4]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800930e:	699a      	ldr	r2, [r3, #24]
 8009310:	2301      	movs	r3, #1
 8009312:	f7fc facd 	bl	80058b0 <disk_write>
 8009316:	4603      	mov	r3, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d006      	beq.n	800932a <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009322:	2201      	movs	r2, #1
 8009324:	71da      	strb	r2, [r3, #7]
 8009326:	2301      	movs	r3, #1
 8009328:	e045      	b.n	80093b6 <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009330:	799b      	ldrb	r3, [r3, #6]
 8009332:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009336:	b2da      	uxtb	r2, r3
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800933e:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800934c:	7858      	ldrb	r0, [r3, #1]
 800934e:	6879      	ldr	r1, [r7, #4]
 8009350:	2301      	movs	r3, #1
 8009352:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009354:	f7fc fa8c 	bl	8005870 <disk_read>
 8009358:	4603      	mov	r3, r0
 800935a:	2b00      	cmp	r3, #0
 800935c:	d006      	beq.n	800936c <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009364:	2201      	movs	r2, #1
 8009366:	71da      	strb	r2, [r3, #7]
 8009368:	2301      	movs	r3, #1
 800936a:	e024      	b.n	80093b6 <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009372:	461a      	mov	r2, r3
 8009374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009376:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800937e:	689a      	ldr	r2, [r3, #8]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009386:	68db      	ldr	r3, [r3, #12]
 8009388:	429a      	cmp	r2, r3
 800938a:	d912      	bls.n	80093b2 <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800939a:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093a2:	799b      	ldrb	r3, [r3, #6]
 80093a4:	f043 0320 	orr.w	r3, r3, #32
 80093a8:	b2da      	uxtb	r2, r3
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093b0:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 80093b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3740      	adds	r7, #64	; 0x40
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b084      	sub	sp, #16
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
 80093c6:	460b      	mov	r3, r1
 80093c8:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 80093ca:	78fb      	ldrb	r3, [r7, #3]
 80093cc:	2b0a      	cmp	r3, #10
 80093ce:	d103      	bne.n	80093d8 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80093d0:	210d      	movs	r1, #13
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f7ff fff3 	bl	80093be <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	db25      	blt.n	8009430 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	1c5a      	adds	r2, r3, #1
 80093e8:	60fa      	str	r2, [r7, #12]
 80093ea:	687a      	ldr	r2, [r7, #4]
 80093ec:	4413      	add	r3, r2
 80093ee:	78fa      	ldrb	r2, [r7, #3]
 80093f0:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2b3c      	cmp	r3, #60	; 0x3c
 80093f6:	dd12      	ble.n	800941e <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6818      	ldr	r0, [r3, #0]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f103 010c 	add.w	r1, r3, #12
 8009402:	68fa      	ldr	r2, [r7, #12]
 8009404:	f107 0308 	add.w	r3, r7, #8
 8009408:	f7ff f9b6 	bl	8008778 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800940c:	68ba      	ldr	r2, [r7, #8]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	429a      	cmp	r2, r3
 8009412:	d101      	bne.n	8009418 <putc_bfd+0x5a>
 8009414:	2300      	movs	r3, #0
 8009416:	e001      	b.n	800941c <putc_bfd+0x5e>
 8009418:	f04f 33ff 	mov.w	r3, #4294967295
 800941c:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	1c5a      	adds	r2, r3, #1
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	609a      	str	r2, [r3, #8]
 800942e:	e000      	b.n	8009432 <putc_bfd+0x74>
	if (i < 0) return;
 8009430:	bf00      	nop
}
 8009432:	3710      	adds	r7, #16
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8009438:	b590      	push	{r4, r7, lr}
 800943a:	b097      	sub	sp, #92	; 0x5c
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8009446:	2300      	movs	r3, #0
 8009448:	613b      	str	r3, [r7, #16]
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800944e:	e009      	b.n	8009464 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	1c5a      	adds	r2, r3, #1
 8009454:	607a      	str	r2, [r7, #4]
 8009456:	781a      	ldrb	r2, [r3, #0]
 8009458:	f107 030c 	add.w	r3, r7, #12
 800945c:	4611      	mov	r1, r2
 800945e:	4618      	mov	r0, r3
 8009460:	f7ff ffad 	bl	80093be <putc_bfd>
	while (*str)			/* Put the string */
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d1f1      	bne.n	8009450 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	2b00      	cmp	r3, #0
 8009470:	db15      	blt.n	800949e <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8009472:	68f8      	ldr	r0, [r7, #12]
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	461c      	mov	r4, r3
 8009478:	f107 0208 	add.w	r2, r7, #8
 800947c:	f107 030c 	add.w	r3, r7, #12
 8009480:	f103 010c 	add.w	r1, r3, #12
 8009484:	4613      	mov	r3, r2
 8009486:	4622      	mov	r2, r4
 8009488:	f7ff f976 	bl	8008778 <f_write>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d105      	bne.n	800949e <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	68ba      	ldr	r2, [r7, #8]
 8009496:	4293      	cmp	r3, r2
 8009498:	d101      	bne.n	800949e <f_puts+0x66>
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	e001      	b.n	80094a2 <f_puts+0x6a>
	return EOF;
 800949e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	375c      	adds	r7, #92	; 0x5c
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd90      	pop	{r4, r7, pc}
	...

080094ac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b087      	sub	sp, #28
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	4613      	mov	r3, r2
 80094b8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80094ba:	2301      	movs	r3, #1
 80094bc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80094be:	2300      	movs	r3, #0
 80094c0:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80094c2:	4b1e      	ldr	r3, [pc, #120]	; (800953c <FATFS_LinkDriverEx+0x90>)
 80094c4:	7a5b      	ldrb	r3, [r3, #9]
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d831      	bhi.n	8009530 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80094cc:	4b1b      	ldr	r3, [pc, #108]	; (800953c <FATFS_LinkDriverEx+0x90>)
 80094ce:	7a5b      	ldrb	r3, [r3, #9]
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	461a      	mov	r2, r3
 80094d4:	4b19      	ldr	r3, [pc, #100]	; (800953c <FATFS_LinkDriverEx+0x90>)
 80094d6:	2100      	movs	r1, #0
 80094d8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80094da:	4b18      	ldr	r3, [pc, #96]	; (800953c <FATFS_LinkDriverEx+0x90>)
 80094dc:	7a5b      	ldrb	r3, [r3, #9]
 80094de:	b2db      	uxtb	r3, r3
 80094e0:	4a16      	ldr	r2, [pc, #88]	; (800953c <FATFS_LinkDriverEx+0x90>)
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	4413      	add	r3, r2
 80094e6:	68fa      	ldr	r2, [r7, #12]
 80094e8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80094ea:	4b14      	ldr	r3, [pc, #80]	; (800953c <FATFS_LinkDriverEx+0x90>)
 80094ec:	7a5b      	ldrb	r3, [r3, #9]
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	461a      	mov	r2, r3
 80094f2:	4b12      	ldr	r3, [pc, #72]	; (800953c <FATFS_LinkDriverEx+0x90>)
 80094f4:	4413      	add	r3, r2
 80094f6:	79fa      	ldrb	r2, [r7, #7]
 80094f8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80094fa:	4b10      	ldr	r3, [pc, #64]	; (800953c <FATFS_LinkDriverEx+0x90>)
 80094fc:	7a5b      	ldrb	r3, [r3, #9]
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	1c5a      	adds	r2, r3, #1
 8009502:	b2d1      	uxtb	r1, r2
 8009504:	4a0d      	ldr	r2, [pc, #52]	; (800953c <FATFS_LinkDriverEx+0x90>)
 8009506:	7251      	strb	r1, [r2, #9]
 8009508:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800950a:	7dbb      	ldrb	r3, [r7, #22]
 800950c:	3330      	adds	r3, #48	; 0x30
 800950e:	b2da      	uxtb	r2, r3
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	3301      	adds	r3, #1
 8009518:	223a      	movs	r2, #58	; 0x3a
 800951a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	3302      	adds	r3, #2
 8009520:	222f      	movs	r2, #47	; 0x2f
 8009522:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	3303      	adds	r3, #3
 8009528:	2200      	movs	r2, #0
 800952a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800952c:	2300      	movs	r3, #0
 800952e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8009530:	7dfb      	ldrb	r3, [r7, #23]
}
 8009532:	4618      	mov	r0, r3
 8009534:	371c      	adds	r7, #28
 8009536:	46bd      	mov	sp, r7
 8009538:	bc80      	pop	{r7}
 800953a:	4770      	bx	lr
 800953c:	20002d28 	.word	0x20002d28

08009540 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800954a:	2200      	movs	r2, #0
 800954c:	6839      	ldr	r1, [r7, #0]
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f7ff ffac 	bl	80094ac <FATFS_LinkDriverEx>
 8009554:	4603      	mov	r3, r0
}
 8009556:	4618      	mov	r0, r3
 8009558:	3708      	adds	r7, #8
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
	...

08009560 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8009560:	b480      	push	{r7}
 8009562:	b085      	sub	sp, #20
 8009564:	af00      	add	r7, sp, #0
 8009566:	4603      	mov	r3, r0
 8009568:	6039      	str	r1, [r7, #0]
 800956a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800956c:	88fb      	ldrh	r3, [r7, #6]
 800956e:	2b7f      	cmp	r3, #127	; 0x7f
 8009570:	d802      	bhi.n	8009578 <ff_convert+0x18>
		c = chr;
 8009572:	88fb      	ldrh	r3, [r7, #6]
 8009574:	81fb      	strh	r3, [r7, #14]
 8009576:	e025      	b.n	80095c4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d00b      	beq.n	8009596 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800957e:	88fb      	ldrh	r3, [r7, #6]
 8009580:	2bff      	cmp	r3, #255	; 0xff
 8009582:	d805      	bhi.n	8009590 <ff_convert+0x30>
 8009584:	88fb      	ldrh	r3, [r7, #6]
 8009586:	3b80      	subs	r3, #128	; 0x80
 8009588:	4a11      	ldr	r2, [pc, #68]	; (80095d0 <ff_convert+0x70>)
 800958a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800958e:	e000      	b.n	8009592 <ff_convert+0x32>
 8009590:	2300      	movs	r3, #0
 8009592:	81fb      	strh	r3, [r7, #14]
 8009594:	e016      	b.n	80095c4 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8009596:	2300      	movs	r3, #0
 8009598:	81fb      	strh	r3, [r7, #14]
 800959a:	e009      	b.n	80095b0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800959c:	89fb      	ldrh	r3, [r7, #14]
 800959e:	4a0c      	ldr	r2, [pc, #48]	; (80095d0 <ff_convert+0x70>)
 80095a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095a4:	88fa      	ldrh	r2, [r7, #6]
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d006      	beq.n	80095b8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80095aa:	89fb      	ldrh	r3, [r7, #14]
 80095ac:	3301      	adds	r3, #1
 80095ae:	81fb      	strh	r3, [r7, #14]
 80095b0:	89fb      	ldrh	r3, [r7, #14]
 80095b2:	2b7f      	cmp	r3, #127	; 0x7f
 80095b4:	d9f2      	bls.n	800959c <ff_convert+0x3c>
 80095b6:	e000      	b.n	80095ba <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80095b8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80095ba:	89fb      	ldrh	r3, [r7, #14]
 80095bc:	3380      	adds	r3, #128	; 0x80
 80095be:	b29b      	uxth	r3, r3
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80095c4:	89fb      	ldrh	r3, [r7, #14]
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3714      	adds	r7, #20
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bc80      	pop	{r7}
 80095ce:	4770      	bx	lr
 80095d0:	0800c0a0 	.word	0x0800c0a0

080095d4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	4603      	mov	r3, r0
 80095dc:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80095de:	2300      	movs	r3, #0
 80095e0:	60fb      	str	r3, [r7, #12]
 80095e2:	e002      	b.n	80095ea <ff_wtoupper+0x16>
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	3301      	adds	r3, #1
 80095e8:	60fb      	str	r3, [r7, #12]
 80095ea:	4a0f      	ldr	r2, [pc, #60]	; (8009628 <ff_wtoupper+0x54>)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d006      	beq.n	8009604 <ff_wtoupper+0x30>
 80095f6:	4a0c      	ldr	r2, [pc, #48]	; (8009628 <ff_wtoupper+0x54>)
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095fe:	88fa      	ldrh	r2, [r7, #6]
 8009600:	429a      	cmp	r2, r3
 8009602:	d1ef      	bne.n	80095e4 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8009604:	4a08      	ldr	r2, [pc, #32]	; (8009628 <ff_wtoupper+0x54>)
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d004      	beq.n	800961a <ff_wtoupper+0x46>
 8009610:	4a06      	ldr	r2, [pc, #24]	; (800962c <ff_wtoupper+0x58>)
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009618:	e000      	b.n	800961c <ff_wtoupper+0x48>
 800961a:	88fb      	ldrh	r3, [r7, #6]
}
 800961c:	4618      	mov	r0, r3
 800961e:	3714      	adds	r7, #20
 8009620:	46bd      	mov	sp, r7
 8009622:	bc80      	pop	{r7}
 8009624:	4770      	bx	lr
 8009626:	bf00      	nop
 8009628:	0800c1a0 	.word	0x0800c1a0
 800962c:	0800c380 	.word	0x0800c380

08009630 <__itoa>:
 8009630:	1e93      	subs	r3, r2, #2
 8009632:	2b22      	cmp	r3, #34	; 0x22
 8009634:	b510      	push	{r4, lr}
 8009636:	460c      	mov	r4, r1
 8009638:	d904      	bls.n	8009644 <__itoa+0x14>
 800963a:	2300      	movs	r3, #0
 800963c:	461c      	mov	r4, r3
 800963e:	700b      	strb	r3, [r1, #0]
 8009640:	4620      	mov	r0, r4
 8009642:	bd10      	pop	{r4, pc}
 8009644:	2a0a      	cmp	r2, #10
 8009646:	d109      	bne.n	800965c <__itoa+0x2c>
 8009648:	2800      	cmp	r0, #0
 800964a:	da07      	bge.n	800965c <__itoa+0x2c>
 800964c:	232d      	movs	r3, #45	; 0x2d
 800964e:	700b      	strb	r3, [r1, #0]
 8009650:	2101      	movs	r1, #1
 8009652:	4240      	negs	r0, r0
 8009654:	4421      	add	r1, r4
 8009656:	f000 f805 	bl	8009664 <__utoa>
 800965a:	e7f1      	b.n	8009640 <__itoa+0x10>
 800965c:	2100      	movs	r1, #0
 800965e:	e7f9      	b.n	8009654 <__itoa+0x24>

08009660 <itoa>:
 8009660:	f7ff bfe6 	b.w	8009630 <__itoa>

08009664 <__utoa>:
 8009664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009666:	b08b      	sub	sp, #44	; 0x2c
 8009668:	4605      	mov	r5, r0
 800966a:	460b      	mov	r3, r1
 800966c:	466e      	mov	r6, sp
 800966e:	4c1d      	ldr	r4, [pc, #116]	; (80096e4 <__utoa+0x80>)
 8009670:	f104 0c20 	add.w	ip, r4, #32
 8009674:	4637      	mov	r7, r6
 8009676:	6820      	ldr	r0, [r4, #0]
 8009678:	6861      	ldr	r1, [r4, #4]
 800967a:	3408      	adds	r4, #8
 800967c:	c703      	stmia	r7!, {r0, r1}
 800967e:	4564      	cmp	r4, ip
 8009680:	463e      	mov	r6, r7
 8009682:	d1f7      	bne.n	8009674 <__utoa+0x10>
 8009684:	7921      	ldrb	r1, [r4, #4]
 8009686:	6820      	ldr	r0, [r4, #0]
 8009688:	7139      	strb	r1, [r7, #4]
 800968a:	1e91      	subs	r1, r2, #2
 800968c:	2922      	cmp	r1, #34	; 0x22
 800968e:	6038      	str	r0, [r7, #0]
 8009690:	f04f 0100 	mov.w	r1, #0
 8009694:	d904      	bls.n	80096a0 <__utoa+0x3c>
 8009696:	7019      	strb	r1, [r3, #0]
 8009698:	460b      	mov	r3, r1
 800969a:	4618      	mov	r0, r3
 800969c:	b00b      	add	sp, #44	; 0x2c
 800969e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096a0:	1e58      	subs	r0, r3, #1
 80096a2:	4684      	mov	ip, r0
 80096a4:	fbb5 f7f2 	udiv	r7, r5, r2
 80096a8:	fb02 5617 	mls	r6, r2, r7, r5
 80096ac:	3628      	adds	r6, #40	; 0x28
 80096ae:	446e      	add	r6, sp
 80096b0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80096b4:	460c      	mov	r4, r1
 80096b6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80096ba:	462e      	mov	r6, r5
 80096bc:	42b2      	cmp	r2, r6
 80096be:	463d      	mov	r5, r7
 80096c0:	f101 0101 	add.w	r1, r1, #1
 80096c4:	d9ee      	bls.n	80096a4 <__utoa+0x40>
 80096c6:	2200      	movs	r2, #0
 80096c8:	545a      	strb	r2, [r3, r1]
 80096ca:	1919      	adds	r1, r3, r4
 80096cc:	1aa5      	subs	r5, r4, r2
 80096ce:	42aa      	cmp	r2, r5
 80096d0:	dae3      	bge.n	800969a <__utoa+0x36>
 80096d2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80096d6:	780e      	ldrb	r6, [r1, #0]
 80096d8:	3201      	adds	r2, #1
 80096da:	7006      	strb	r6, [r0, #0]
 80096dc:	f801 5901 	strb.w	r5, [r1], #-1
 80096e0:	e7f4      	b.n	80096cc <__utoa+0x68>
 80096e2:	bf00      	nop
 80096e4:	0800c560 	.word	0x0800c560

080096e8 <memset>:
 80096e8:	4603      	mov	r3, r0
 80096ea:	4402      	add	r2, r0
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d100      	bne.n	80096f2 <memset+0xa>
 80096f0:	4770      	bx	lr
 80096f2:	f803 1b01 	strb.w	r1, [r3], #1
 80096f6:	e7f9      	b.n	80096ec <memset+0x4>

080096f8 <__libc_init_array>:
 80096f8:	b570      	push	{r4, r5, r6, lr}
 80096fa:	2600      	movs	r6, #0
 80096fc:	4d0c      	ldr	r5, [pc, #48]	; (8009730 <__libc_init_array+0x38>)
 80096fe:	4c0d      	ldr	r4, [pc, #52]	; (8009734 <__libc_init_array+0x3c>)
 8009700:	1b64      	subs	r4, r4, r5
 8009702:	10a4      	asrs	r4, r4, #2
 8009704:	42a6      	cmp	r6, r4
 8009706:	d109      	bne.n	800971c <__libc_init_array+0x24>
 8009708:	f000 f81a 	bl	8009740 <_init>
 800970c:	2600      	movs	r6, #0
 800970e:	4d0a      	ldr	r5, [pc, #40]	; (8009738 <__libc_init_array+0x40>)
 8009710:	4c0a      	ldr	r4, [pc, #40]	; (800973c <__libc_init_array+0x44>)
 8009712:	1b64      	subs	r4, r4, r5
 8009714:	10a4      	asrs	r4, r4, #2
 8009716:	42a6      	cmp	r6, r4
 8009718:	d105      	bne.n	8009726 <__libc_init_array+0x2e>
 800971a:	bd70      	pop	{r4, r5, r6, pc}
 800971c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009720:	4798      	blx	r3
 8009722:	3601      	adds	r6, #1
 8009724:	e7ee      	b.n	8009704 <__libc_init_array+0xc>
 8009726:	f855 3b04 	ldr.w	r3, [r5], #4
 800972a:	4798      	blx	r3
 800972c:	3601      	adds	r6, #1
 800972e:	e7f2      	b.n	8009716 <__libc_init_array+0x1e>
 8009730:	0800c588 	.word	0x0800c588
 8009734:	0800c588 	.word	0x0800c588
 8009738:	0800c588 	.word	0x0800c588
 800973c:	0800c58c 	.word	0x0800c58c

08009740 <_init>:
 8009740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009742:	bf00      	nop
 8009744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009746:	bc08      	pop	{r3}
 8009748:	469e      	mov	lr, r3
 800974a:	4770      	bx	lr

0800974c <_fini>:
 800974c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800974e:	bf00      	nop
 8009750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009752:	bc08      	pop	{r3}
 8009754:	469e      	mov	lr, r3
 8009756:	4770      	bx	lr

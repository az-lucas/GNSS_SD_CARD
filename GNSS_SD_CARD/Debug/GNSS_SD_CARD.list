
GNSS_SD_CARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056b8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002880  080057c4  080057c4  000157c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008044  08008044  00020580  2**0
                  CONTENTS
  4 .ARM          00000000  08008044  08008044  00020580  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008044  08008044  00020580  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008044  08008044  00018044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008048  08008048  00018048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000580  20000000  0800804c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000053c  20000580  080085cc  00020580  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000abc  080085cc  00020abc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020580  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000205a9  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ef38  00000000  00000000  000205ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029c7  00000000  00000000  0002f524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df0  00000000  00000000  00031ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ad4  00000000  00000000  00032ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018763  00000000  00000000  000337b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012a30  00000000  00000000  0004bf17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086d0d  00000000  00000000  0005e947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a8c  00000000  00000000  000e5654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000e90e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000580 	.word	0x20000580
 8000128:	00000000 	.word	0x00000000
 800012c:	080057ac 	.word	0x080057ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000584 	.word	0x20000584
 8000148:	080057ac 	.word	0x080057ac

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_frsub>:
 8000988:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800098c:	e002      	b.n	8000994 <__addsf3>
 800098e:	bf00      	nop

08000990 <__aeabi_fsub>:
 8000990:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000994 <__addsf3>:
 8000994:	0042      	lsls	r2, r0, #1
 8000996:	bf1f      	itttt	ne
 8000998:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800099c:	ea92 0f03 	teqne	r2, r3
 80009a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a8:	d06a      	beq.n	8000a80 <__addsf3+0xec>
 80009aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b2:	bfc1      	itttt	gt
 80009b4:	18d2      	addgt	r2, r2, r3
 80009b6:	4041      	eorgt	r1, r0
 80009b8:	4048      	eorgt	r0, r1
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	bfb8      	it	lt
 80009be:	425b      	neglt	r3, r3
 80009c0:	2b19      	cmp	r3, #25
 80009c2:	bf88      	it	hi
 80009c4:	4770      	bxhi	lr
 80009c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d2:	bf18      	it	ne
 80009d4:	4240      	negne	r0, r0
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e2:	bf18      	it	ne
 80009e4:	4249      	negne	r1, r1
 80009e6:	ea92 0f03 	teq	r2, r3
 80009ea:	d03f      	beq.n	8000a6c <__addsf3+0xd8>
 80009ec:	f1a2 0201 	sub.w	r2, r2, #1
 80009f0:	fa41 fc03 	asr.w	ip, r1, r3
 80009f4:	eb10 000c 	adds.w	r0, r0, ip
 80009f8:	f1c3 0320 	rsb	r3, r3, #32
 80009fc:	fa01 f103 	lsl.w	r1, r1, r3
 8000a00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a04:	d502      	bpl.n	8000a0c <__addsf3+0x78>
 8000a06:	4249      	negs	r1, r1
 8000a08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a10:	d313      	bcc.n	8000a3a <__addsf3+0xa6>
 8000a12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a16:	d306      	bcc.n	8000a26 <__addsf3+0x92>
 8000a18:	0840      	lsrs	r0, r0, #1
 8000a1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a1e:	f102 0201 	add.w	r2, r2, #1
 8000a22:	2afe      	cmp	r2, #254	; 0xfe
 8000a24:	d251      	bcs.n	8000aca <__addsf3+0x136>
 8000a26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a2e:	bf08      	it	eq
 8000a30:	f020 0001 	biceq.w	r0, r0, #1
 8000a34:	ea40 0003 	orr.w	r0, r0, r3
 8000a38:	4770      	bx	lr
 8000a3a:	0049      	lsls	r1, r1, #1
 8000a3c:	eb40 0000 	adc.w	r0, r0, r0
 8000a40:	3a01      	subs	r2, #1
 8000a42:	bf28      	it	cs
 8000a44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a48:	d2ed      	bcs.n	8000a26 <__addsf3+0x92>
 8000a4a:	fab0 fc80 	clz	ip, r0
 8000a4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a52:	ebb2 020c 	subs.w	r2, r2, ip
 8000a56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5a:	bfaa      	itet	ge
 8000a5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a60:	4252      	neglt	r2, r2
 8000a62:	4318      	orrge	r0, r3
 8000a64:	bfbc      	itt	lt
 8000a66:	40d0      	lsrlt	r0, r2
 8000a68:	4318      	orrlt	r0, r3
 8000a6a:	4770      	bx	lr
 8000a6c:	f092 0f00 	teq	r2, #0
 8000a70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a74:	bf06      	itte	eq
 8000a76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7a:	3201      	addeq	r2, #1
 8000a7c:	3b01      	subne	r3, #1
 8000a7e:	e7b5      	b.n	80009ec <__addsf3+0x58>
 8000a80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8e:	d021      	beq.n	8000ad4 <__addsf3+0x140>
 8000a90:	ea92 0f03 	teq	r2, r3
 8000a94:	d004      	beq.n	8000aa0 <__addsf3+0x10c>
 8000a96:	f092 0f00 	teq	r2, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	4608      	moveq	r0, r1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea90 0f01 	teq	r0, r1
 8000aa4:	bf1c      	itt	ne
 8000aa6:	2000      	movne	r0, #0
 8000aa8:	4770      	bxne	lr
 8000aaa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aae:	d104      	bne.n	8000aba <__addsf3+0x126>
 8000ab0:	0040      	lsls	r0, r0, #1
 8000ab2:	bf28      	it	cs
 8000ab4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ab8:	4770      	bx	lr
 8000aba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000abe:	bf3c      	itt	cc
 8000ac0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bxcc	lr
 8000ac6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ace:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad2:	4770      	bx	lr
 8000ad4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ad8:	bf16      	itet	ne
 8000ada:	4608      	movne	r0, r1
 8000adc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae0:	4601      	movne	r1, r0
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	bf06      	itte	eq
 8000ae6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aea:	ea90 0f01 	teqeq	r0, r1
 8000aee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_ui2f>:
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	e004      	b.n	8000b04 <__aeabi_i2f+0x8>
 8000afa:	bf00      	nop

08000afc <__aeabi_i2f>:
 8000afc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b00:	bf48      	it	mi
 8000b02:	4240      	negmi	r0, r0
 8000b04:	ea5f 0c00 	movs.w	ip, r0
 8000b08:	bf08      	it	eq
 8000b0a:	4770      	bxeq	lr
 8000b0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b10:	4601      	mov	r1, r0
 8000b12:	f04f 0000 	mov.w	r0, #0
 8000b16:	e01c      	b.n	8000b52 <__aeabi_l2f+0x2a>

08000b18 <__aeabi_ul2f>:
 8000b18:	ea50 0201 	orrs.w	r2, r0, r1
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e00a      	b.n	8000b3c <__aeabi_l2f+0x14>
 8000b26:	bf00      	nop

08000b28 <__aeabi_l2f>:
 8000b28:	ea50 0201 	orrs.w	r2, r0, r1
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__aeabi_l2f+0x14>
 8000b36:	4240      	negs	r0, r0
 8000b38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b3c:	ea5f 0c01 	movs.w	ip, r1
 8000b40:	bf02      	ittt	eq
 8000b42:	4684      	moveq	ip, r0
 8000b44:	4601      	moveq	r1, r0
 8000b46:	2000      	moveq	r0, #0
 8000b48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b4c:	bf08      	it	eq
 8000b4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b56:	fabc f28c 	clz	r2, ip
 8000b5a:	3a08      	subs	r2, #8
 8000b5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b60:	db10      	blt.n	8000b84 <__aeabi_l2f+0x5c>
 8000b62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b66:	4463      	add	r3, ip
 8000b68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b6c:	f1c2 0220 	rsb	r2, r2, #32
 8000b70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b74:	fa20 f202 	lsr.w	r2, r0, r2
 8000b78:	eb43 0002 	adc.w	r0, r3, r2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f102 0220 	add.w	r2, r2, #32
 8000b88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8c:	f1c2 0220 	rsb	r2, r2, #32
 8000b90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b94:	fa21 f202 	lsr.w	r2, r1, r2
 8000b98:	eb43 0002 	adc.w	r0, r3, r2
 8000b9c:	bf08      	it	eq
 8000b9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba2:	4770      	bx	lr

08000ba4 <initDisplay>:
				.minutoStr[0] = '0',	.minutoStr[1] = '0',
				.segundoStr[0] = '0',	.segundoStr[1] = '0'}};
UART_HandleTypeDef huart1;


void initDisplay(displayConfig *disp){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]

	if(disp->configurado != NONE){
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d02b      	beq.n	8000c0c <initDisplay+0x68>
		SSD1306_Init();
 8000bb4:	f001 f902 	bl	8001dbc <SSD1306_Init>
		if(disp->configurado == VELOCIDADE){
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d112      	bne.n	8000be6 <initDisplay+0x42>
			SSD1306_GotoXY (0,0);
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	f001 fa62 	bl	800208c <SSD1306_GotoXY>
			SSD1306_Puts ("Velocidade", &Font_11x18, 1);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	4912      	ldr	r1, [pc, #72]	; (8000c14 <initDisplay+0x70>)
 8000bcc:	4812      	ldr	r0, [pc, #72]	; (8000c18 <initDisplay+0x74>)
 8000bce:	f001 faf3 	bl	80021b8 <SSD1306_Puts>
			SSD1306_GotoXY (80, 36);
 8000bd2:	2124      	movs	r1, #36	; 0x24
 8000bd4:	2050      	movs	r0, #80	; 0x50
 8000bd6:	f001 fa59 	bl	800208c <SSD1306_GotoXY>
			SSD1306_Puts ("km/h", &Font_11x18, 1);
 8000bda:	2201      	movs	r2, #1
 8000bdc:	490d      	ldr	r1, [pc, #52]	; (8000c14 <initDisplay+0x70>)
 8000bde:	480f      	ldr	r0, [pc, #60]	; (8000c1c <initDisplay+0x78>)
 8000be0:	f001 faea 	bl	80021b8 <SSD1306_Puts>
 8000be4:	e010      	b.n	8000c08 <initDisplay+0x64>

		}else if(disp->configurado == INFO){
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d00c      	beq.n	8000c08 <initDisplay+0x64>

		}else if(disp->configurado == HORA){
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b03      	cmp	r3, #3
 8000bf4:	d108      	bne.n	8000c08 <initDisplay+0x64>
			SSD1306_GotoXY (0,0);
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f001 fa47 	bl	800208c <SSD1306_GotoXY>
			SSD1306_Puts ("Hora", &Font_11x18, 1);
 8000bfe:	2201      	movs	r2, #1
 8000c00:	4904      	ldr	r1, [pc, #16]	; (8000c14 <initDisplay+0x70>)
 8000c02:	4807      	ldr	r0, [pc, #28]	; (8000c20 <initDisplay+0x7c>)
 8000c04:	f001 fad8 	bl	80021b8 <SSD1306_Puts>
		}
		SSD1306_UpdateScreen();
 8000c08:	f001 f99c 	bl	8001f44 <SSD1306_UpdateScreen>
	}
}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000550 	.word	0x20000550
 8000c18:	080057c4 	.word	0x080057c4
 8000c1c:	080057d0 	.word	0x080057d0
 8000c20:	080057d8 	.word	0x080057d8

08000c24 <updateDisplay>:

void updateDisplay(displayConfig *disp, GNSS *gn){
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
	if(disp->configurado == VELOCIDADE){
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d104      	bne.n	8000c40 <updateDisplay+0x1c>
		updateDisplayVelocidade(disp, gn);
 8000c36:	6839      	ldr	r1, [r7, #0]
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f000 f883 	bl	8000d44 <updateDisplayVelocidade>
	}else if(disp->configurado == INFO){

	}else if(disp->configurado == HORA){
		updateDisplayHora(disp, gn);
	}
}
 8000c3e:	e00b      	b.n	8000c58 <updateDisplay+0x34>
	}else if(disp->configurado == INFO){
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d007      	beq.n	8000c58 <updateDisplay+0x34>
	}else if(disp->configurado == HORA){
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b03      	cmp	r3, #3
 8000c4e:	d103      	bne.n	8000c58 <updateDisplay+0x34>
		updateDisplayHora(disp, gn);
 8000c50:	6839      	ldr	r1, [r7, #0]
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f000 f824 	bl	8000ca0 <updateDisplayHora>
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <updateDisplayNumeroSatelites>:

void updateDisplayNumeroSatelites(displayConfig *disp, GNSS *gn){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
	SSD1306_GotoXY (113, 0);
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	2071      	movs	r0, #113	; 0x71
 8000c6e:	f001 fa0d 	bl	800208c <SSD1306_GotoXY>
	SSD1306_Putc(gn->numeroSatelitesStr[0], &Font_7x10, 1);
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	f893 3540 	ldrb.w	r3, [r3, #1344]	; 0x540
 8000c78:	2201      	movs	r2, #1
 8000c7a:	4908      	ldr	r1, [pc, #32]	; (8000c9c <updateDisplayNumeroSatelites+0x3c>)
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f001 fa1b 	bl	80020b8 <SSD1306_Putc>
	SSD1306_Putc(gn->numeroSatelitesStr[1], &Font_7x10, 1);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	f893 3541 	ldrb.w	r3, [r3, #1345]	; 0x541
 8000c88:	2201      	movs	r2, #1
 8000c8a:	4904      	ldr	r1, [pc, #16]	; (8000c9c <updateDisplayNumeroSatelites+0x3c>)
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f001 fa13 	bl	80020b8 <SSD1306_Putc>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000548 	.word	0x20000548

08000ca0 <updateDisplayHora>:

void updateDisplayHora(displayConfig *disp, GNSS *gn){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]

	updateDisplayNumeroSatelites(disp, gn);
 8000caa:	6839      	ldr	r1, [r7, #0]
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff ffd7 	bl	8000c60 <updateDisplayNumeroSatelites>

	SSD1306_GotoXY (0, 30);
 8000cb2:	211e      	movs	r1, #30
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f001 f9e9 	bl	800208c <SSD1306_GotoXY>
	SSD1306_Putc(gn->data.horaUTCStr[0], &Font_16x26, 1);
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	f893 352c 	ldrb.w	r3, [r3, #1324]	; 0x52c
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	491e      	ldr	r1, [pc, #120]	; (8000d3c <updateDisplayHora+0x9c>)
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f001 f9f7 	bl	80020b8 <SSD1306_Putc>
	SSD1306_Putc(gn->data.horaUTCStr[1], &Font_16x26, 1);
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	f893 352d 	ldrb.w	r3, [r3, #1325]	; 0x52d
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	491a      	ldr	r1, [pc, #104]	; (8000d3c <updateDisplayHora+0x9c>)
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f001 f9ef 	bl	80020b8 <SSD1306_Putc>
	SSD1306_Putc(':', &Font_11x18, 1);
 8000cda:	2201      	movs	r2, #1
 8000cdc:	4918      	ldr	r1, [pc, #96]	; (8000d40 <updateDisplayHora+0xa0>)
 8000cde:	203a      	movs	r0, #58	; 0x3a
 8000ce0:	f001 f9ea 	bl	80020b8 <SSD1306_Putc>
	SSD1306_Putc(gn->data.minutoStr[0], &Font_16x26, 1);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	f893 3530 	ldrb.w	r3, [r3, #1328]	; 0x530
 8000cea:	2201      	movs	r2, #1
 8000cec:	4913      	ldr	r1, [pc, #76]	; (8000d3c <updateDisplayHora+0x9c>)
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f001 f9e2 	bl	80020b8 <SSD1306_Putc>
	SSD1306_Putc(gn->data.minutoStr[1], &Font_16x26, 1);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	f893 3531 	ldrb.w	r3, [r3, #1329]	; 0x531
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	490f      	ldr	r1, [pc, #60]	; (8000d3c <updateDisplayHora+0x9c>)
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f001 f9da 	bl	80020b8 <SSD1306_Putc>
	SSD1306_Putc(':', &Font_11x18, 1);
 8000d04:	2201      	movs	r2, #1
 8000d06:	490e      	ldr	r1, [pc, #56]	; (8000d40 <updateDisplayHora+0xa0>)
 8000d08:	203a      	movs	r0, #58	; 0x3a
 8000d0a:	f001 f9d5 	bl	80020b8 <SSD1306_Putc>
	SSD1306_Putc(gn->data.segundoStr[0], &Font_16x26, 1);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	f893 3532 	ldrb.w	r3, [r3, #1330]	; 0x532
 8000d14:	2201      	movs	r2, #1
 8000d16:	4909      	ldr	r1, [pc, #36]	; (8000d3c <updateDisplayHora+0x9c>)
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f001 f9cd 	bl	80020b8 <SSD1306_Putc>
	SSD1306_Putc(gn->data.segundoStr[1], &Font_16x26, 1);
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	f893 3533 	ldrb.w	r3, [r3, #1331]	; 0x533
 8000d24:	2201      	movs	r2, #1
 8000d26:	4905      	ldr	r1, [pc, #20]	; (8000d3c <updateDisplayHora+0x9c>)
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f001 f9c5 	bl	80020b8 <SSD1306_Putc>
	SSD1306_UpdateScreen();
 8000d2e:	f001 f909 	bl	8001f44 <SSD1306_UpdateScreen>
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000558 	.word	0x20000558
 8000d40:	20000550 	.word	0x20000550

08000d44 <updateDisplayVelocidade>:




void updateDisplayVelocidade(displayConfig *disp, GNSS *gn){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
	char _snum[4];

	updateDisplayNumeroSatelites(disp, gn);
 8000d4e:	6839      	ldr	r1, [r7, #0]
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f7ff ff85 	bl	8000c60 <updateDisplayNumeroSatelites>
	itoa(gn->velocidade.velocidade8bits, _snum, 10);
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	f893 351c 	ldrb.w	r3, [r3, #1308]	; 0x51c
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f107 030c 	add.w	r3, r7, #12
 8000d62:	220a      	movs	r2, #10
 8000d64:	4619      	mov	r1, r3
 8000d66:	f004 fcb0 	bl	80056ca <itoa>
	SSD1306_GotoXY (25, 30);
 8000d6a:	211e      	movs	r1, #30
 8000d6c:	2019      	movs	r0, #25
 8000d6e:	f001 f98d 	bl	800208c <SSD1306_GotoXY>
	if(gn->velocidade.velocidade8bits < 10) {// 1 DIGIT
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	f893 351c 	ldrb.w	r3, [r3, #1308]	; 0x51c
 8000d78:	2b09      	cmp	r3, #9
 8000d7a:	d808      	bhi.n	8000d8e <updateDisplayVelocidade+0x4a>

		_snum[3] = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	73fb      	strb	r3, [r7, #15]
		_snum[2] = _snum[0];
 8000d80:	7b3b      	ldrb	r3, [r7, #12]
 8000d82:	73bb      	strb	r3, [r7, #14]
		_snum[1] = ' ';
 8000d84:	2320      	movs	r3, #32
 8000d86:	737b      	strb	r3, [r7, #13]
		_snum[0] = ' ';
 8000d88:	2320      	movs	r3, #32
 8000d8a:	733b      	strb	r3, [r7, #12]
 8000d8c:	e015      	b.n	8000dba <updateDisplayVelocidade+0x76>

	}
	else if (gn->velocidade.velocidade8bits < 100 ) {// 2 DIGITS
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	f893 351c 	ldrb.w	r3, [r3, #1308]	; 0x51c
 8000d94:	2b63      	cmp	r3, #99	; 0x63
 8000d96:	d808      	bhi.n	8000daa <updateDisplayVelocidade+0x66>
		_snum[3] = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	73fb      	strb	r3, [r7, #15]
		_snum[2] = _snum[1];
 8000d9c:	7b7b      	ldrb	r3, [r7, #13]
 8000d9e:	73bb      	strb	r3, [r7, #14]
		_snum[1] = _snum[0];
 8000da0:	7b3b      	ldrb	r3, [r7, #12]
 8000da2:	737b      	strb	r3, [r7, #13]
		_snum[0] = ' ';
 8000da4:	2320      	movs	r3, #32
 8000da6:	733b      	strb	r3, [r7, #12]
 8000da8:	e007      	b.n	8000dba <updateDisplayVelocidade+0x76>

	}
	else if (gn->velocidade.velocidade8bits < 1000 ) {// 3 DIGITS
		_snum[3] = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	73fb      	strb	r3, [r7, #15]
		_snum[2] = _snum[2];
 8000dae:	7bbb      	ldrb	r3, [r7, #14]
 8000db0:	73bb      	strb	r3, [r7, #14]
		_snum[1] = _snum[1];
 8000db2:	7b7b      	ldrb	r3, [r7, #13]
 8000db4:	737b      	strb	r3, [r7, #13]
		_snum[0] = _snum[0];
 8000db6:	7b3b      	ldrb	r3, [r7, #12]
 8000db8:	733b      	strb	r3, [r7, #12]
	}
	else {
		SSD1306_GotoXY (30, 30);  // 4 DIGIS
	}

	SSD1306_Puts (_snum, &Font_16x26, 1);
 8000dba:	f107 030c 	add.w	r3, r7, #12
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	4904      	ldr	r1, [pc, #16]	; (8000dd4 <updateDisplayVelocidade+0x90>)
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f001 f9f8 	bl	80021b8 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8000dc8:	f001 f8bc 	bl	8001f44 <SSD1306_UpdateScreen>

}
 8000dcc:	bf00      	nop
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000558 	.word	0x20000558

08000dd8 <converte4Bytes2float>:

float converte4Bytes2float(uint8_t *str){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]

	if(*(str+1) == '.'){//x.xx
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3301      	adds	r3, #1
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b2e      	cmp	r3, #46	; 0x2e
 8000de8:	d125      	bne.n	8000e36 <converte4Bytes2float+0x5e>
		return (((*(str+3)-'0')+10*((*(str+2)-'0'))+100*((*(str)-'0')))/100.0);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	3303      	adds	r3, #3
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3302      	adds	r3, #2
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000dfe:	4613      	mov	r3, r2
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	4413      	add	r3, r2
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	18ca      	adds	r2, r1, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	3b30      	subs	r3, #48	; 0x30
 8000e0e:	2164      	movs	r1, #100	; 0x64
 8000e10:	fb01 f303 	mul.w	r3, r1, r3
 8000e14:	4413      	add	r3, r2
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff faea 	bl	80003f0 <__aeabi_i2d>
 8000e1c:	f04f 0200 	mov.w	r2, #0
 8000e20:	4b29      	ldr	r3, [pc, #164]	; (8000ec8 <converte4Bytes2float+0xf0>)
 8000e22:	f7ff fc79 	bl	8000718 <__aeabi_ddiv>
 8000e26:	4602      	mov	r2, r0
 8000e28:	460b      	mov	r3, r1
 8000e2a:	4610      	mov	r0, r2
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f7ff fd5b 	bl	80008e8 <__aeabi_d2f>
 8000e32:	4603      	mov	r3, r0
 8000e34:	e044      	b.n	8000ec0 <converte4Bytes2float+0xe8>
	}else if(*(str+2) == '.'){//xx.x
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	3302      	adds	r3, #2
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b2e      	cmp	r3, #46	; 0x2e
 8000e3e:	d125      	bne.n	8000e8c <converte4Bytes2float+0xb4>
		return (((*(str+3)-'0')+10*((*(str+1)-'0'))+100*((*(str)-'0')))/10.0);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3303      	adds	r3, #3
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000e54:	4613      	mov	r3, r2
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	4413      	add	r3, r2
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	18ca      	adds	r2, r1, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	3b30      	subs	r3, #48	; 0x30
 8000e64:	2164      	movs	r1, #100	; 0x64
 8000e66:	fb01 f303 	mul.w	r3, r1, r3
 8000e6a:	4413      	add	r3, r2
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fabf 	bl	80003f0 <__aeabi_i2d>
 8000e72:	f04f 0200 	mov.w	r2, #0
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <converte4Bytes2float+0xf4>)
 8000e78:	f7ff fc4e 	bl	8000718 <__aeabi_ddiv>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	460b      	mov	r3, r1
 8000e80:	4610      	mov	r0, r2
 8000e82:	4619      	mov	r1, r3
 8000e84:	f7ff fd30 	bl	80008e8 <__aeabi_d2f>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	e019      	b.n	8000ec0 <converte4Bytes2float+0xe8>
	}else{//xxx.
		return (((*(str+2)-'0')+10*((*(str+1)-'0'))+100*((*(str)-'0'))));
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3302      	adds	r3, #2
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	4413      	add	r3, r2
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	18ca      	adds	r2, r1, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	3b30      	subs	r3, #48	; 0x30
 8000eb0:	2164      	movs	r1, #100	; 0x64
 8000eb2:	fb01 f303 	mul.w	r3, r1, r3
 8000eb6:	4413      	add	r3, r2
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fe1f 	bl	8000afc <__aeabi_i2f>
 8000ebe:	4603      	mov	r3, r0
	}
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40590000 	.word	0x40590000
 8000ecc:	40240000 	.word	0x40240000

08000ed0 <decodeNMEA>:

	return ((*str)-'0')*1000+(*(str+1)-'0')*100+(*(str+2)-'0')*10+(*(str+3)-'0');

}

void decodeNMEA(uint8_t *str, GNSS *gn){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
	uint8_t *p;
	uint8_t contVirgulas = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	72fb      	strb	r3, [r7, #11]
//GNRMC
//GNVTG OK -> velocidade
//GNGLL
//GPGSA
//BDGSV
	if(str[0] == '$'){
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b24      	cmp	r3, #36	; 0x24
 8000ee4:	f040 80fd 	bne.w	80010e2 <decodeNMEA+0x212>
		if(str[1] == 'G'){//G
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3301      	adds	r3, #1
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b47      	cmp	r3, #71	; 0x47
 8000ef0:	f040 80f7 	bne.w	80010e2 <decodeNMEA+0x212>
			if(str[2] == 'N'){//GN
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b4e      	cmp	r3, #78	; 0x4e
 8000efc:	f040 80f1 	bne.w	80010e2 <decodeNMEA+0x212>
				if(str[3] == 'V'){//GNV
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3303      	adds	r3, #3
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b56      	cmp	r3, #86	; 0x56
 8000f08:	d149      	bne.n	8000f9e <decodeNMEA+0xce>
					if(str[4] == 'T'){//GNVT
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2b54      	cmp	r3, #84	; 0x54
 8000f12:	f040 80e6 	bne.w	80010e2 <decodeNMEA+0x212>
						if(str[5] == 'G'){//GNVTG
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	3305      	adds	r3, #5
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b47      	cmp	r3, #71	; 0x47
 8000f1e:	f040 80e0 	bne.w	80010e2 <decodeNMEA+0x212>
							if(str[6] == ','){//GNVTG
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	3306      	adds	r3, #6
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b2c      	cmp	r3, #44	; 0x2c
 8000f2a:	f040 80da 	bne.w	80010e2 <decodeNMEA+0x212>
								p = &str[7];
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	3307      	adds	r3, #7
 8000f32:	60fb      	str	r3, [r7, #12]
								while(contVirgulas < 6){// velocidade
 8000f34:	e009      	b.n	8000f4a <decodeNMEA+0x7a>
									if(*p == ','){
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b2c      	cmp	r3, #44	; 0x2c
 8000f3c:	d102      	bne.n	8000f44 <decodeNMEA+0x74>
										contVirgulas++;
 8000f3e:	7afb      	ldrb	r3, [r7, #11]
 8000f40:	3301      	adds	r3, #1
 8000f42:	72fb      	strb	r3, [r7, #11]
									}
									p++;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	3301      	adds	r3, #1
 8000f48:	60fb      	str	r3, [r7, #12]
								while(contVirgulas < 6){// velocidade
 8000f4a:	7afb      	ldrb	r3, [r7, #11]
 8000f4c:	2b05      	cmp	r3, #5
 8000f4e:	d9f2      	bls.n	8000f36 <decodeNMEA+0x66>
								}
								gn->velocidade.velocidadeSTR[0] = *p++;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	1c5a      	adds	r2, r3, #1
 8000f54:	60fa      	str	r2, [r7, #12]
 8000f56:	781a      	ldrb	r2, [r3, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	f883 251d 	strb.w	r2, [r3, #1309]	; 0x51d
								gn->velocidade.velocidadeSTR[1] = *p++;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	1c5a      	adds	r2, r3, #1
 8000f62:	60fa      	str	r2, [r7, #12]
 8000f64:	781a      	ldrb	r2, [r3, #0]
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	f883 251e 	strb.w	r2, [r3, #1310]	; 0x51e
								gn->velocidade.velocidadeSTR[2] = *p++;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	1c5a      	adds	r2, r3, #1
 8000f70:	60fa      	str	r2, [r7, #12]
 8000f72:	781a      	ldrb	r2, [r3, #0]
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	f883 251f 	strb.w	r2, [r3, #1311]	; 0x51f
								gn->velocidade.velocidadeSTR[3] = *p++;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	1c5a      	adds	r2, r3, #1
 8000f7e:	60fa      	str	r2, [r7, #12]
 8000f80:	781a      	ldrb	r2, [r3, #0]
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	f883 2520 	strb.w	r2, [r3, #1312]	; 0x520
								gn->velocidade.velocidadeFloat = converte4Bytes2float(gn->velocidade.velocidadeSTR);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	f203 531d 	addw	r3, r3, #1309	; 0x51d
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff ff22 	bl	8000dd8 <converte4Bytes2float>
 8000f94:	4602      	mov	r2, r0
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
 8000f9c:	e0a1      	b.n	80010e2 <decodeNMEA+0x212>


							}
						}
					}
				}else if(str[3] == 'Z'){//GNZ
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3303      	adds	r3, #3
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b5a      	cmp	r3, #90	; 0x5a
 8000fa6:	d13f      	bne.n	8001028 <decodeNMEA+0x158>
					if(str[4] == 'D'){//GNZD
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3304      	adds	r3, #4
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b44      	cmp	r3, #68	; 0x44
 8000fb0:	f040 8097 	bne.w	80010e2 <decodeNMEA+0x212>
						if(str[5] == 'A'){//GNZDA
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3305      	adds	r3, #5
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b41      	cmp	r3, #65	; 0x41
 8000fbc:	f040 8091 	bne.w	80010e2 <decodeNMEA+0x212>
							if(str[6] == ','){//GNZDA
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3306      	adds	r3, #6
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b2c      	cmp	r3, #44	; 0x2c
 8000fc8:	f040 808b 	bne.w	80010e2 <decodeNMEA+0x212>
								p = &str[7];
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3307      	adds	r3, #7
 8000fd0:	60fb      	str	r3, [r7, #12]

								gn->data.horaUTCStr[0] = *p++;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	1c5a      	adds	r2, r3, #1
 8000fd6:	60fa      	str	r2, [r7, #12]
 8000fd8:	781a      	ldrb	r2, [r3, #0]
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	f883 252c 	strb.w	r2, [r3, #1324]	; 0x52c
								gn->data.horaUTCStr[1] = *p++;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	1c5a      	adds	r2, r3, #1
 8000fe4:	60fa      	str	r2, [r7, #12]
 8000fe6:	781a      	ldrb	r2, [r3, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	f883 252d 	strb.w	r2, [r3, #1325]	; 0x52d
								gn->data.minutoStr[0] = *p++;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	1c5a      	adds	r2, r3, #1
 8000ff2:	60fa      	str	r2, [r7, #12]
 8000ff4:	781a      	ldrb	r2, [r3, #0]
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	f883 2530 	strb.w	r2, [r3, #1328]	; 0x530
								gn->data.minutoStr[1] = *p++;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	1c5a      	adds	r2, r3, #1
 8001000:	60fa      	str	r2, [r7, #12]
 8001002:	781a      	ldrb	r2, [r3, #0]
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	f883 2531 	strb.w	r2, [r3, #1329]	; 0x531
								gn->data.segundoStr[0] = *p++;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	1c5a      	adds	r2, r3, #1
 800100e:	60fa      	str	r2, [r7, #12]
 8001010:	781a      	ldrb	r2, [r3, #0]
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	f883 2532 	strb.w	r2, [r3, #1330]	; 0x532
								gn->data.segundoStr[1] = *p++;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	1c5a      	adds	r2, r3, #1
 800101c:	60fa      	str	r2, [r7, #12]
 800101e:	781a      	ldrb	r2, [r3, #0]
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	f883 2533 	strb.w	r2, [r3, #1331]	; 0x533
 8001026:	e05c      	b.n	80010e2 <decodeNMEA+0x212>
								gn->data.ano = converte4Bytes2uint16(p);
								*/
							}
						}
					}
				}else if(str[3] == 'G'){//GNG
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3303      	adds	r3, #3
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b47      	cmp	r3, #71	; 0x47
 8001030:	d157      	bne.n	80010e2 <decodeNMEA+0x212>
					if(str[4] == 'G'){//GNGG
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3304      	adds	r3, #4
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b47      	cmp	r3, #71	; 0x47
 800103a:	d152      	bne.n	80010e2 <decodeNMEA+0x212>
						if(str[5] == 'A'){//GNGGA
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3305      	adds	r3, #5
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b41      	cmp	r3, #65	; 0x41
 8001044:	d14d      	bne.n	80010e2 <decodeNMEA+0x212>
							if(str[6] == ','){//GNGGA
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3306      	adds	r3, #6
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b2c      	cmp	r3, #44	; 0x2c
 800104e:	d148      	bne.n	80010e2 <decodeNMEA+0x212>
								p = &str[7];
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3307      	adds	r3, #7
 8001054:	60fb      	str	r3, [r7, #12]
								gn->data.horaUTCStr[0] = *p++;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	1c5a      	adds	r2, r3, #1
 800105a:	60fa      	str	r2, [r7, #12]
 800105c:	781a      	ldrb	r2, [r3, #0]
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	f883 252c 	strb.w	r2, [r3, #1324]	; 0x52c
								gn->data.horaUTCStr[1] = *p++;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	1c5a      	adds	r2, r3, #1
 8001068:	60fa      	str	r2, [r7, #12]
 800106a:	781a      	ldrb	r2, [r3, #0]
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	f883 252d 	strb.w	r2, [r3, #1325]	; 0x52d
								gn->data.minutoStr[0] = *p++;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	1c5a      	adds	r2, r3, #1
 8001076:	60fa      	str	r2, [r7, #12]
 8001078:	781a      	ldrb	r2, [r3, #0]
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	f883 2530 	strb.w	r2, [r3, #1328]	; 0x530
								gn->data.minutoStr[1] = *p++;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	1c5a      	adds	r2, r3, #1
 8001084:	60fa      	str	r2, [r7, #12]
 8001086:	781a      	ldrb	r2, [r3, #0]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	f883 2531 	strb.w	r2, [r3, #1329]	; 0x531
								gn->data.segundoStr[0] = *p++;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	1c5a      	adds	r2, r3, #1
 8001092:	60fa      	str	r2, [r7, #12]
 8001094:	781a      	ldrb	r2, [r3, #0]
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	f883 2532 	strb.w	r2, [r3, #1330]	; 0x532
								gn->data.segundoStr[1] = *p++;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	1c5a      	adds	r2, r3, #1
 80010a0:	60fa      	str	r2, [r7, #12]
 80010a2:	781a      	ldrb	r2, [r3, #0]
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	f883 2533 	strb.w	r2, [r3, #1331]	; 0x533

								while(contVirgulas < 6){// numero de satelites
 80010aa:	e009      	b.n	80010c0 <decodeNMEA+0x1f0>
									if(*p == ','){
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b2c      	cmp	r3, #44	; 0x2c
 80010b2:	d102      	bne.n	80010ba <decodeNMEA+0x1ea>
										contVirgulas++;
 80010b4:	7afb      	ldrb	r3, [r7, #11]
 80010b6:	3301      	adds	r3, #1
 80010b8:	72fb      	strb	r3, [r7, #11]
									}
									p++;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	3301      	adds	r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
								while(contVirgulas < 6){// numero de satelites
 80010c0:	7afb      	ldrb	r3, [r7, #11]
 80010c2:	2b05      	cmp	r3, #5
 80010c4:	d9f2      	bls.n	80010ac <decodeNMEA+0x1dc>
								}
								gn->numeroSatelitesStr[0] = *p++;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	1c5a      	adds	r2, r3, #1
 80010ca:	60fa      	str	r2, [r7, #12]
 80010cc:	781a      	ldrb	r2, [r3, #0]
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	f883 2540 	strb.w	r2, [r3, #1344]	; 0x540
								gn->numeroSatelitesStr[1] = *p++;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	1c5a      	adds	r2, r3, #1
 80010d8:	60fa      	str	r2, [r7, #12]
 80010da:	781a      	ldrb	r2, [r3, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	f883 2541 	strb.w	r2, [r3, #1345]	; 0x541
					}
				}
			}
		}
	}
	str[0] = 0;// ja foi lido
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	701a      	strb	r2, [r3, #0]


}
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80010f0:	b590      	push	{r4, r7, lr}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]

	HAL_UART_Receive_IT(&huart1, gnss.temp, 1);
 80010f8:	2201      	movs	r2, #1
 80010fa:	4921      	ldr	r1, [pc, #132]	; (8001180 <HAL_UART_RxCpltCallback+0x90>)
 80010fc:	4821      	ldr	r0, [pc, #132]	; (8001184 <HAL_UART_RxCpltCallback+0x94>)
 80010fe:	f003 fcd4 	bl	8004aaa <HAL_UART_Receive_IT>
	gnss.RxDataSerial[gnss.indy][gnss.indx] = gnss.temp[0];
 8001102:	4b21      	ldr	r3, [pc, #132]	; (8001188 <HAL_UART_RxCpltCallback+0x98>)
 8001104:	f893 3517 	ldrb.w	r3, [r3, #1303]	; 0x517
 8001108:	461c      	mov	r4, r3
 800110a:	4b1f      	ldr	r3, [pc, #124]	; (8001188 <HAL_UART_RxCpltCallback+0x98>)
 800110c:	f893 3516 	ldrb.w	r3, [r3, #1302]	; 0x516
 8001110:	4618      	mov	r0, r3
 8001112:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <HAL_UART_RxCpltCallback+0x98>)
 8001114:	f893 1514 	ldrb.w	r1, [r3, #1300]	; 0x514
 8001118:	4a1b      	ldr	r2, [pc, #108]	; (8001188 <HAL_UART_RxCpltCallback+0x98>)
 800111a:	2364      	movs	r3, #100	; 0x64
 800111c:	fb04 f303 	mul.w	r3, r4, r3
 8001120:	4413      	add	r3, r2
 8001122:	4403      	add	r3, r0
 8001124:	460a      	mov	r2, r1
 8001126:	701a      	strb	r2, [r3, #0]
	gnss.indx++;
 8001128:	4b17      	ldr	r3, [pc, #92]	; (8001188 <HAL_UART_RxCpltCallback+0x98>)
 800112a:	f893 3516 	ldrb.w	r3, [r3, #1302]	; 0x516
 800112e:	3301      	adds	r3, #1
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4b15      	ldr	r3, [pc, #84]	; (8001188 <HAL_UART_RxCpltCallback+0x98>)
 8001134:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516

	if (gnss.indx >= 100 || gnss.temp[0] == '\n'){
 8001138:	4b13      	ldr	r3, [pc, #76]	; (8001188 <HAL_UART_RxCpltCallback+0x98>)
 800113a:	f893 3516 	ldrb.w	r3, [r3, #1302]	; 0x516
 800113e:	2b63      	cmp	r3, #99	; 0x63
 8001140:	d804      	bhi.n	800114c <HAL_UART_RxCpltCallback+0x5c>
 8001142:	4b11      	ldr	r3, [pc, #68]	; (8001188 <HAL_UART_RxCpltCallback+0x98>)
 8001144:	f893 3514 	ldrb.w	r3, [r3, #1300]	; 0x514
 8001148:	2b0a      	cmp	r3, #10
 800114a:	d114      	bne.n	8001176 <HAL_UART_RxCpltCallback+0x86>
		//decodeNMEA(&gnss.RxDataSerial[gnss.indy][0], &gnss);

		gnss.indx = 0;
 800114c:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <HAL_UART_RxCpltCallback+0x98>)
 800114e:	2200      	movs	r2, #0
 8001150:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
		gnss.indy++;
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <HAL_UART_RxCpltCallback+0x98>)
 8001156:	f893 3517 	ldrb.w	r3, [r3, #1303]	; 0x517
 800115a:	3301      	adds	r3, #1
 800115c:	b2da      	uxtb	r2, r3
 800115e:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <HAL_UART_RxCpltCallback+0x98>)
 8001160:	f883 2517 	strb.w	r2, [r3, #1303]	; 0x517
		if(gnss.indy >= 13)gnss.indy = 0;
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <HAL_UART_RxCpltCallback+0x98>)
 8001166:	f893 3517 	ldrb.w	r3, [r3, #1303]	; 0x517
 800116a:	2b0c      	cmp	r3, #12
 800116c:	d903      	bls.n	8001176 <HAL_UART_RxCpltCallback+0x86>
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_UART_RxCpltCallback+0x98>)
 8001170:	2200      	movs	r2, #0
 8001172:	f883 2517 	strb.w	r2, [r3, #1303]	; 0x517
	}

}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	bd90      	pop	{r4, r7, pc}
 800117e:	bf00      	nop
 8001180:	20000514 	.word	0x20000514
 8001184:	200005a0 	.word	0x200005a0
 8001188:	20000000 	.word	0x20000000

0800118c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	2110      	movs	r1, #16
 8001194:	4803      	ldr	r0, [pc, #12]	; (80011a4 <SELECT+0x18>)
 8001196:	f001 fe1b 	bl	8002dd0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800119a:	2001      	movs	r0, #1
 800119c:	f001 fab0 	bl	8002700 <HAL_Delay>
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40010800 	.word	0x40010800

080011a8 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80011ac:	2201      	movs	r2, #1
 80011ae:	2110      	movs	r1, #16
 80011b0:	4803      	ldr	r0, [pc, #12]	; (80011c0 <DESELECT+0x18>)
 80011b2:	f001 fe0d 	bl	8002dd0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80011b6:	2001      	movs	r0, #1
 80011b8:	f001 faa2 	bl	8002700 <HAL_Delay>
}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40010800 	.word	0x40010800

080011c4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80011ce:	bf00      	nop
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <SPI_TxByte+0x30>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d1f8      	bne.n	80011d0 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80011de:	1df9      	adds	r1, r7, #7
 80011e0:	2364      	movs	r3, #100	; 0x64
 80011e2:	2201      	movs	r2, #1
 80011e4:	4803      	ldr	r0, [pc, #12]	; (80011f4 <SPI_TxByte+0x30>)
 80011e6:	f003 f869 	bl	80042bc <HAL_SPI_Transmit>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000644 	.word	0x20000644

080011f8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001204:	bf00      	nop
 8001206:	4b08      	ldr	r3, [pc, #32]	; (8001228 <SPI_TxBuffer+0x30>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b02      	cmp	r3, #2
 8001212:	d1f8      	bne.n	8001206 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001214:	887a      	ldrh	r2, [r7, #2]
 8001216:	2364      	movs	r3, #100	; 0x64
 8001218:	6879      	ldr	r1, [r7, #4]
 800121a:	4803      	ldr	r0, [pc, #12]	; (8001228 <SPI_TxBuffer+0x30>)
 800121c:	f003 f84e 	bl	80042bc <HAL_SPI_Transmit>
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000644 	.word	0x20000644

0800122c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8001232:	23ff      	movs	r3, #255	; 0xff
 8001234:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001236:	bf00      	nop
 8001238:	4b09      	ldr	r3, [pc, #36]	; (8001260 <SPI_RxByte+0x34>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b02      	cmp	r3, #2
 8001244:	d1f8      	bne.n	8001238 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001246:	1dba      	adds	r2, r7, #6
 8001248:	1df9      	adds	r1, r7, #7
 800124a:	2364      	movs	r3, #100	; 0x64
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	2301      	movs	r3, #1
 8001250:	4803      	ldr	r0, [pc, #12]	; (8001260 <SPI_RxByte+0x34>)
 8001252:	f003 f977 	bl	8004544 <HAL_SPI_TransmitReceive>

	return data;
 8001256:	79bb      	ldrb	r3, [r7, #6]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000644 	.word	0x20000644

08001264 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800126c:	f7ff ffde 	bl	800122c <SPI_RxByte>
 8001270:	4603      	mov	r3, r0
 8001272:	461a      	mov	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	701a      	strb	r2, [r3, #0]
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001286:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <SD_ReadyWait+0x30>)
 8001288:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800128c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800128e:	f7ff ffcd 	bl	800122c <SPI_RxByte>
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	2bff      	cmp	r3, #255	; 0xff
 800129a:	d003      	beq.n	80012a4 <SD_ReadyWait+0x24>
 800129c:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <SD_ReadyWait+0x30>)
 800129e:	881b      	ldrh	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1f4      	bne.n	800128e <SD_ReadyWait+0xe>

	return res;
 80012a4:	79fb      	ldrb	r3, [r7, #7]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	200005ea 	.word	0x200005ea

080012b4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80012ba:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80012be:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80012c0:	f7ff ff72 	bl	80011a8 <DESELECT>
	for(int i = 0; i < 10; i++)
 80012c4:	2300      	movs	r3, #0
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	e005      	b.n	80012d6 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80012ca:	20ff      	movs	r0, #255	; 0xff
 80012cc:	f7ff ff7a 	bl	80011c4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	3301      	adds	r3, #1
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	2b09      	cmp	r3, #9
 80012da:	ddf6      	ble.n	80012ca <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80012dc:	f7ff ff56 	bl	800118c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80012e0:	2340      	movs	r3, #64	; 0x40
 80012e2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80012f4:	2395      	movs	r3, #149	; 0x95
 80012f6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80012f8:	463b      	mov	r3, r7
 80012fa:	2106      	movs	r1, #6
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff7b 	bl	80011f8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001302:	e002      	b.n	800130a <SD_PowerOn+0x56>
	{
		cnt--;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	3b01      	subs	r3, #1
 8001308:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800130a:	f7ff ff8f 	bl	800122c <SPI_RxByte>
 800130e:	4603      	mov	r3, r0
 8001310:	2b01      	cmp	r3, #1
 8001312:	d002      	beq.n	800131a <SD_PowerOn+0x66>
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f4      	bne.n	8001304 <SD_PowerOn+0x50>
	}

	DESELECT();
 800131a:	f7ff ff45 	bl	80011a8 <DESELECT>
	SPI_TxByte(0XFF);
 800131e:	20ff      	movs	r0, #255	; 0xff
 8001320:	f7ff ff50 	bl	80011c4 <SPI_TxByte>

	PowerFlag = 1;
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <SD_PowerOn+0x80>)
 8001326:	2201      	movs	r2, #1
 8001328:	701a      	strb	r2, [r3, #0]
}
 800132a:	bf00      	nop
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	200005ed 	.word	0x200005ed

08001338 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <SD_PowerOff+0x14>)
 800133e:	2200      	movs	r2, #0
 8001340:	701a      	strb	r2, [r3, #0]
}
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	200005ed 	.word	0x200005ed

08001350 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001354:	4b02      	ldr	r3, [pc, #8]	; (8001360 <SD_CheckPower+0x10>)
 8001356:	781b      	ldrb	r3, [r3, #0]
}
 8001358:	4618      	mov	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr
 8001360:	200005ed 	.word	0x200005ed

08001364 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800136e:	4b13      	ldr	r3, [pc, #76]	; (80013bc <SD_RxDataBlock+0x58>)
 8001370:	22c8      	movs	r2, #200	; 0xc8
 8001372:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001374:	f7ff ff5a 	bl	800122c <SPI_RxByte>
 8001378:	4603      	mov	r3, r0
 800137a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	2bff      	cmp	r3, #255	; 0xff
 8001380:	d103      	bne.n	800138a <SD_RxDataBlock+0x26>
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <SD_RxDataBlock+0x58>)
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1f4      	bne.n	8001374 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	2bfe      	cmp	r3, #254	; 0xfe
 800138e:	d001      	beq.n	8001394 <SD_RxDataBlock+0x30>
 8001390:	2300      	movs	r3, #0
 8001392:	e00f      	b.n	80013b4 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	1c5a      	adds	r2, r3, #1
 8001398:	607a      	str	r2, [r7, #4]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff ff62 	bl	8001264 <SPI_RxBytePtr>
	} while(len--);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	1e5a      	subs	r2, r3, #1
 80013a4:	603a      	str	r2, [r7, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f4      	bne.n	8001394 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80013aa:	f7ff ff3f 	bl	800122c <SPI_RxByte>
	SPI_RxByte();
 80013ae:	f7ff ff3d 	bl	800122c <SPI_RxByte>

	return TRUE;
 80013b2:	2301      	movs	r3, #1
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	200005e8 	.word	0x200005e8

080013c0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80013d0:	f7ff ff56 	bl	8001280 <SD_ReadyWait>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2bff      	cmp	r3, #255	; 0xff
 80013d8:	d001      	beq.n	80013de <SD_TxDataBlock+0x1e>
 80013da:	2300      	movs	r3, #0
 80013dc:	e02f      	b.n	800143e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80013de:	78fb      	ldrb	r3, [r7, #3]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff feef 	bl	80011c4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80013e6:	78fb      	ldrb	r3, [r7, #3]
 80013e8:	2bfd      	cmp	r3, #253	; 0xfd
 80013ea:	d020      	beq.n	800142e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80013ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff ff01 	bl	80011f8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80013f6:	f7ff ff19 	bl	800122c <SPI_RxByte>
		SPI_RxByte();
 80013fa:	f7ff ff17 	bl	800122c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80013fe:	e00b      	b.n	8001418 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001400:	f7ff ff14 	bl	800122c <SPI_RxByte>
 8001404:	4603      	mov	r3, r0
 8001406:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	f003 031f 	and.w	r3, r3, #31
 800140e:	2b05      	cmp	r3, #5
 8001410:	d006      	beq.n	8001420 <SD_TxDataBlock+0x60>
			i++;
 8001412:	7bbb      	ldrb	r3, [r7, #14]
 8001414:	3301      	adds	r3, #1
 8001416:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001418:	7bbb      	ldrb	r3, [r7, #14]
 800141a:	2b40      	cmp	r3, #64	; 0x40
 800141c:	d9f0      	bls.n	8001400 <SD_TxDataBlock+0x40>
 800141e:	e000      	b.n	8001422 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001420:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001422:	bf00      	nop
 8001424:	f7ff ff02 	bl	800122c <SPI_RxByte>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0fa      	beq.n	8001424 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	f003 031f 	and.w	r3, r3, #31
 8001434:	2b05      	cmp	r3, #5
 8001436:	d101      	bne.n	800143c <SD_TxDataBlock+0x7c>
 8001438:	2301      	movs	r3, #1
 800143a:	e000      	b.n	800143e <SD_TxDataBlock+0x7e>

	return FALSE;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b084      	sub	sp, #16
 800144a:	af00      	add	r7, sp, #0
 800144c:	4603      	mov	r3, r0
 800144e:	6039      	str	r1, [r7, #0]
 8001450:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001452:	f7ff ff15 	bl	8001280 <SD_ReadyWait>
 8001456:	4603      	mov	r3, r0
 8001458:	2bff      	cmp	r3, #255	; 0xff
 800145a:	d001      	beq.n	8001460 <SD_SendCmd+0x1a>
 800145c:	23ff      	movs	r3, #255	; 0xff
 800145e:	e042      	b.n	80014e6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff feae 	bl	80011c4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	0e1b      	lsrs	r3, r3, #24
 800146c:	b2db      	uxtb	r3, r3
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fea8 	bl	80011c4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	0c1b      	lsrs	r3, r3, #16
 8001478:	b2db      	uxtb	r3, r3
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff fea2 	bl	80011c4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	0a1b      	lsrs	r3, r3, #8
 8001484:	b2db      	uxtb	r3, r3
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fe9c 	bl	80011c4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fe97 	bl	80011c4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	2b40      	cmp	r3, #64	; 0x40
 800149a:	d102      	bne.n	80014a2 <SD_SendCmd+0x5c>
 800149c:	2395      	movs	r3, #149	; 0x95
 800149e:	73fb      	strb	r3, [r7, #15]
 80014a0:	e007      	b.n	80014b2 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	2b48      	cmp	r3, #72	; 0x48
 80014a6:	d102      	bne.n	80014ae <SD_SendCmd+0x68>
 80014a8:	2387      	movs	r3, #135	; 0x87
 80014aa:	73fb      	strb	r3, [r7, #15]
 80014ac:	e001      	b.n	80014b2 <SD_SendCmd+0x6c>
	else crc = 1;
 80014ae:	2301      	movs	r3, #1
 80014b0:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fe85 	bl	80011c4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	2b4c      	cmp	r3, #76	; 0x4c
 80014be:	d101      	bne.n	80014c4 <SD_SendCmd+0x7e>
 80014c0:	f7ff feb4 	bl	800122c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80014c4:	230a      	movs	r3, #10
 80014c6:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80014c8:	f7ff feb0 	bl	800122c <SPI_RxByte>
 80014cc:	4603      	mov	r3, r0
 80014ce:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80014d0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	da05      	bge.n	80014e4 <SD_SendCmd+0x9e>
 80014d8:	7bbb      	ldrb	r3, [r7, #14]
 80014da:	3b01      	subs	r3, #1
 80014dc:	73bb      	strb	r3, [r7, #14]
 80014de:	7bbb      	ldrb	r3, [r7, #14]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1f1      	bne.n	80014c8 <SD_SendCmd+0x82>

	return res;
 80014e4:	7b7b      	ldrb	r3, [r7, #13]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <SD_disk_initialize+0x14>
 8001500:	2301      	movs	r3, #1
 8001502:	e0d1      	b.n	80016a8 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001504:	4b6a      	ldr	r3, [pc, #424]	; (80016b0 <SD_disk_initialize+0x1c0>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <SD_disk_initialize+0x2a>
 8001512:	4b67      	ldr	r3, [pc, #412]	; (80016b0 <SD_disk_initialize+0x1c0>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	b2db      	uxtb	r3, r3
 8001518:	e0c6      	b.n	80016a8 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800151a:	f7ff fecb 	bl	80012b4 <SD_PowerOn>

	/* slave select */
	SELECT();
 800151e:	f7ff fe35 	bl	800118c <SELECT>

	/* check disk type */
	type = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001526:	2100      	movs	r1, #0
 8001528:	2040      	movs	r0, #64	; 0x40
 800152a:	f7ff ff8c 	bl	8001446 <SD_SendCmd>
 800152e:	4603      	mov	r3, r0
 8001530:	2b01      	cmp	r3, #1
 8001532:	f040 80a1 	bne.w	8001678 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001536:	4b5f      	ldr	r3, [pc, #380]	; (80016b4 <SD_disk_initialize+0x1c4>)
 8001538:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800153c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800153e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001542:	2048      	movs	r0, #72	; 0x48
 8001544:	f7ff ff7f 	bl	8001446 <SD_SendCmd>
 8001548:	4603      	mov	r3, r0
 800154a:	2b01      	cmp	r3, #1
 800154c:	d155      	bne.n	80015fa <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800154e:	2300      	movs	r3, #0
 8001550:	73fb      	strb	r3, [r7, #15]
 8001552:	e00c      	b.n	800156e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001554:	7bfc      	ldrb	r4, [r7, #15]
 8001556:	f7ff fe69 	bl	800122c <SPI_RxByte>
 800155a:	4603      	mov	r3, r0
 800155c:	461a      	mov	r2, r3
 800155e:	f104 0310 	add.w	r3, r4, #16
 8001562:	443b      	add	r3, r7
 8001564:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001568:	7bfb      	ldrb	r3, [r7, #15]
 800156a:	3301      	adds	r3, #1
 800156c:	73fb      	strb	r3, [r7, #15]
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	2b03      	cmp	r3, #3
 8001572:	d9ef      	bls.n	8001554 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001574:	7abb      	ldrb	r3, [r7, #10]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d17e      	bne.n	8001678 <SD_disk_initialize+0x188>
 800157a:	7afb      	ldrb	r3, [r7, #11]
 800157c:	2baa      	cmp	r3, #170	; 0xaa
 800157e:	d17b      	bne.n	8001678 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001580:	2100      	movs	r1, #0
 8001582:	2077      	movs	r0, #119	; 0x77
 8001584:	f7ff ff5f 	bl	8001446 <SD_SendCmd>
 8001588:	4603      	mov	r3, r0
 800158a:	2b01      	cmp	r3, #1
 800158c:	d807      	bhi.n	800159e <SD_disk_initialize+0xae>
 800158e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001592:	2069      	movs	r0, #105	; 0x69
 8001594:	f7ff ff57 	bl	8001446 <SD_SendCmd>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d004      	beq.n	80015a8 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800159e:	4b45      	ldr	r3, [pc, #276]	; (80016b4 <SD_disk_initialize+0x1c4>)
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1ec      	bne.n	8001580 <SD_disk_initialize+0x90>
 80015a6:	e000      	b.n	80015aa <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80015a8:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80015aa:	4b42      	ldr	r3, [pc, #264]	; (80016b4 <SD_disk_initialize+0x1c4>)
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d062      	beq.n	8001678 <SD_disk_initialize+0x188>
 80015b2:	2100      	movs	r1, #0
 80015b4:	207a      	movs	r0, #122	; 0x7a
 80015b6:	f7ff ff46 	bl	8001446 <SD_SendCmd>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d15b      	bne.n	8001678 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80015c0:	2300      	movs	r3, #0
 80015c2:	73fb      	strb	r3, [r7, #15]
 80015c4:	e00c      	b.n	80015e0 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80015c6:	7bfc      	ldrb	r4, [r7, #15]
 80015c8:	f7ff fe30 	bl	800122c <SPI_RxByte>
 80015cc:	4603      	mov	r3, r0
 80015ce:	461a      	mov	r2, r3
 80015d0:	f104 0310 	add.w	r3, r4, #16
 80015d4:	443b      	add	r3, r7
 80015d6:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	3301      	adds	r3, #1
 80015de:	73fb      	strb	r3, [r7, #15]
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	2b03      	cmp	r3, #3
 80015e4:	d9ef      	bls.n	80015c6 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80015e6:	7a3b      	ldrb	r3, [r7, #8]
 80015e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <SD_disk_initialize+0x104>
 80015f0:	230c      	movs	r3, #12
 80015f2:	e000      	b.n	80015f6 <SD_disk_initialize+0x106>
 80015f4:	2304      	movs	r3, #4
 80015f6:	73bb      	strb	r3, [r7, #14]
 80015f8:	e03e      	b.n	8001678 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80015fa:	2100      	movs	r1, #0
 80015fc:	2077      	movs	r0, #119	; 0x77
 80015fe:	f7ff ff22 	bl	8001446 <SD_SendCmd>
 8001602:	4603      	mov	r3, r0
 8001604:	2b01      	cmp	r3, #1
 8001606:	d808      	bhi.n	800161a <SD_disk_initialize+0x12a>
 8001608:	2100      	movs	r1, #0
 800160a:	2069      	movs	r0, #105	; 0x69
 800160c:	f7ff ff1b 	bl	8001446 <SD_SendCmd>
 8001610:	4603      	mov	r3, r0
 8001612:	2b01      	cmp	r3, #1
 8001614:	d801      	bhi.n	800161a <SD_disk_initialize+0x12a>
 8001616:	2302      	movs	r3, #2
 8001618:	e000      	b.n	800161c <SD_disk_initialize+0x12c>
 800161a:	2301      	movs	r3, #1
 800161c:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800161e:	7bbb      	ldrb	r3, [r7, #14]
 8001620:	2b02      	cmp	r3, #2
 8001622:	d10e      	bne.n	8001642 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001624:	2100      	movs	r1, #0
 8001626:	2077      	movs	r0, #119	; 0x77
 8001628:	f7ff ff0d 	bl	8001446 <SD_SendCmd>
 800162c:	4603      	mov	r3, r0
 800162e:	2b01      	cmp	r3, #1
 8001630:	d80e      	bhi.n	8001650 <SD_disk_initialize+0x160>
 8001632:	2100      	movs	r1, #0
 8001634:	2069      	movs	r0, #105	; 0x69
 8001636:	f7ff ff06 	bl	8001446 <SD_SendCmd>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d107      	bne.n	8001650 <SD_disk_initialize+0x160>
 8001640:	e00c      	b.n	800165c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001642:	2100      	movs	r1, #0
 8001644:	2041      	movs	r0, #65	; 0x41
 8001646:	f7ff fefe 	bl	8001446 <SD_SendCmd>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d004      	beq.n	800165a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001650:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <SD_disk_initialize+0x1c4>)
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1e2      	bne.n	800161e <SD_disk_initialize+0x12e>
 8001658:	e000      	b.n	800165c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800165a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800165c:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <SD_disk_initialize+0x1c4>)
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d007      	beq.n	8001674 <SD_disk_initialize+0x184>
 8001664:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001668:	2050      	movs	r0, #80	; 0x50
 800166a:	f7ff feec 	bl	8001446 <SD_SendCmd>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <SD_disk_initialize+0x188>
 8001674:	2300      	movs	r3, #0
 8001676:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001678:	4a0f      	ldr	r2, [pc, #60]	; (80016b8 <SD_disk_initialize+0x1c8>)
 800167a:	7bbb      	ldrb	r3, [r7, #14]
 800167c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800167e:	f7ff fd93 	bl	80011a8 <DESELECT>
	SPI_RxByte();
 8001682:	f7ff fdd3 	bl	800122c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001686:	7bbb      	ldrb	r3, [r7, #14]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d008      	beq.n	800169e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 800168c:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <SD_disk_initialize+0x1c0>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	f023 0301 	bic.w	r3, r3, #1
 8001696:	b2da      	uxtb	r2, r3
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <SD_disk_initialize+0x1c0>)
 800169a:	701a      	strb	r2, [r3, #0]
 800169c:	e001      	b.n	80016a2 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800169e:	f7ff fe4b 	bl	8001338 <SD_PowerOff>
	}

	return Stat;
 80016a2:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <SD_disk_initialize+0x1c0>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	b2db      	uxtb	r3, r3
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd90      	pop	{r4, r7, pc}
 80016b0:	20000544 	.word	0x20000544
 80016b4:	200005e8 	.word	0x200005e8
 80016b8:	200005ec 	.word	0x200005ec

080016bc <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <SD_disk_status+0x14>
 80016cc:	2301      	movs	r3, #1
 80016ce:	e002      	b.n	80016d6 <SD_disk_status+0x1a>
	return Stat;
 80016d0:	4b03      	ldr	r3, [pc, #12]	; (80016e0 <SD_disk_status+0x24>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	b2db      	uxtb	r3, r3
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr
 80016e0:	20000544 	.word	0x20000544

080016e4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60b9      	str	r1, [r7, #8]
 80016ec:	607a      	str	r2, [r7, #4]
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	4603      	mov	r3, r0
 80016f2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d102      	bne.n	8001700 <SD_disk_read+0x1c>
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <SD_disk_read+0x20>
 8001700:	2304      	movs	r3, #4
 8001702:	e051      	b.n	80017a8 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001704:	4b2a      	ldr	r3, [pc, #168]	; (80017b0 <SD_disk_read+0xcc>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	b2db      	uxtb	r3, r3
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <SD_disk_read+0x32>
 8001712:	2303      	movs	r3, #3
 8001714:	e048      	b.n	80017a8 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001716:	4b27      	ldr	r3, [pc, #156]	; (80017b4 <SD_disk_read+0xd0>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	f003 0304 	and.w	r3, r3, #4
 800171e:	2b00      	cmp	r3, #0
 8001720:	d102      	bne.n	8001728 <SD_disk_read+0x44>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	025b      	lsls	r3, r3, #9
 8001726:	607b      	str	r3, [r7, #4]

	SELECT();
 8001728:	f7ff fd30 	bl	800118c <SELECT>

	if (count == 1)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d111      	bne.n	8001756 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001732:	6879      	ldr	r1, [r7, #4]
 8001734:	2051      	movs	r0, #81	; 0x51
 8001736:	f7ff fe86 	bl	8001446 <SD_SendCmd>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d129      	bne.n	8001794 <SD_disk_read+0xb0>
 8001740:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001744:	68b8      	ldr	r0, [r7, #8]
 8001746:	f7ff fe0d 	bl	8001364 <SD_RxDataBlock>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d021      	beq.n	8001794 <SD_disk_read+0xb0>
 8001750:	2300      	movs	r3, #0
 8001752:	603b      	str	r3, [r7, #0]
 8001754:	e01e      	b.n	8001794 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	2052      	movs	r0, #82	; 0x52
 800175a:	f7ff fe74 	bl	8001446 <SD_SendCmd>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d117      	bne.n	8001794 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001764:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001768:	68b8      	ldr	r0, [r7, #8]
 800176a:	f7ff fdfb 	bl	8001364 <SD_RxDataBlock>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d00a      	beq.n	800178a <SD_disk_read+0xa6>
				buff += 512;
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800177a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	3b01      	subs	r3, #1
 8001780:	603b      	str	r3, [r7, #0]
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1ed      	bne.n	8001764 <SD_disk_read+0x80>
 8001788:	e000      	b.n	800178c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800178a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800178c:	2100      	movs	r1, #0
 800178e:	204c      	movs	r0, #76	; 0x4c
 8001790:	f7ff fe59 	bl	8001446 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001794:	f7ff fd08 	bl	80011a8 <DESELECT>
	SPI_RxByte();
 8001798:	f7ff fd48 	bl	800122c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	bf14      	ite	ne
 80017a2:	2301      	movne	r3, #1
 80017a4:	2300      	moveq	r3, #0
 80017a6:	b2db      	uxtb	r3, r3
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000544 	.word	0x20000544
 80017b4:	200005ec 	.word	0x200005ec

080017b8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60b9      	str	r1, [r7, #8]
 80017c0:	607a      	str	r2, [r7, #4]
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	4603      	mov	r3, r0
 80017c6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d102      	bne.n	80017d4 <SD_disk_write+0x1c>
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <SD_disk_write+0x20>
 80017d4:	2304      	movs	r3, #4
 80017d6:	e06b      	b.n	80018b0 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80017d8:	4b37      	ldr	r3, [pc, #220]	; (80018b8 <SD_disk_write+0x100>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <SD_disk_write+0x32>
 80017e6:	2303      	movs	r3, #3
 80017e8:	e062      	b.n	80018b0 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80017ea:	4b33      	ldr	r3, [pc, #204]	; (80018b8 <SD_disk_write+0x100>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <SD_disk_write+0x44>
 80017f8:	2302      	movs	r3, #2
 80017fa:	e059      	b.n	80018b0 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80017fc:	4b2f      	ldr	r3, [pc, #188]	; (80018bc <SD_disk_write+0x104>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	f003 0304 	and.w	r3, r3, #4
 8001804:	2b00      	cmp	r3, #0
 8001806:	d102      	bne.n	800180e <SD_disk_write+0x56>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	025b      	lsls	r3, r3, #9
 800180c:	607b      	str	r3, [r7, #4]

	SELECT();
 800180e:	f7ff fcbd 	bl	800118c <SELECT>

	if (count == 1)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d110      	bne.n	800183a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001818:	6879      	ldr	r1, [r7, #4]
 800181a:	2058      	movs	r0, #88	; 0x58
 800181c:	f7ff fe13 	bl	8001446 <SD_SendCmd>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d13a      	bne.n	800189c <SD_disk_write+0xe4>
 8001826:	21fe      	movs	r1, #254	; 0xfe
 8001828:	68b8      	ldr	r0, [r7, #8]
 800182a:	f7ff fdc9 	bl	80013c0 <SD_TxDataBlock>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d033      	beq.n	800189c <SD_disk_write+0xe4>
			count = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	e030      	b.n	800189c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800183a:	4b20      	ldr	r3, [pc, #128]	; (80018bc <SD_disk_write+0x104>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d007      	beq.n	8001856 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001846:	2100      	movs	r1, #0
 8001848:	2077      	movs	r0, #119	; 0x77
 800184a:	f7ff fdfc 	bl	8001446 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800184e:	6839      	ldr	r1, [r7, #0]
 8001850:	2057      	movs	r0, #87	; 0x57
 8001852:	f7ff fdf8 	bl	8001446 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	2059      	movs	r0, #89	; 0x59
 800185a:	f7ff fdf4 	bl	8001446 <SD_SendCmd>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d11b      	bne.n	800189c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001864:	21fc      	movs	r1, #252	; 0xfc
 8001866:	68b8      	ldr	r0, [r7, #8]
 8001868:	f7ff fdaa 	bl	80013c0 <SD_TxDataBlock>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00a      	beq.n	8001888 <SD_disk_write+0xd0>
				buff += 512;
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001878:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	3b01      	subs	r3, #1
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1ee      	bne.n	8001864 <SD_disk_write+0xac>
 8001886:	e000      	b.n	800188a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001888:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800188a:	21fd      	movs	r1, #253	; 0xfd
 800188c:	2000      	movs	r0, #0
 800188e:	f7ff fd97 	bl	80013c0 <SD_TxDataBlock>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <SD_disk_write+0xe4>
			{
				count = 1;
 8001898:	2301      	movs	r3, #1
 800189a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800189c:	f7ff fc84 	bl	80011a8 <DESELECT>
	SPI_RxByte();
 80018a0:	f7ff fcc4 	bl	800122c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	bf14      	ite	ne
 80018aa:	2301      	movne	r3, #1
 80018ac:	2300      	moveq	r3, #0
 80018ae:	b2db      	uxtb	r3, r3
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000544 	.word	0x20000544
 80018bc:	200005ec 	.word	0x200005ec

080018c0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80018c0:	b590      	push	{r4, r7, lr}
 80018c2:	b08b      	sub	sp, #44	; 0x2c
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	603a      	str	r2, [r7, #0]
 80018ca:	71fb      	strb	r3, [r7, #7]
 80018cc:	460b      	mov	r3, r1
 80018ce:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <SD_disk_ioctl+0x1e>
 80018da:	2304      	movs	r3, #4
 80018dc:	e115      	b.n	8001b0a <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80018e4:	79bb      	ldrb	r3, [r7, #6]
 80018e6:	2b05      	cmp	r3, #5
 80018e8:	d124      	bne.n	8001934 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80018ea:	6a3b      	ldr	r3, [r7, #32]
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d012      	beq.n	8001918 <SD_disk_ioctl+0x58>
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	dc1a      	bgt.n	800192c <SD_disk_ioctl+0x6c>
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d002      	beq.n	8001900 <SD_disk_ioctl+0x40>
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d006      	beq.n	800190c <SD_disk_ioctl+0x4c>
 80018fe:	e015      	b.n	800192c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001900:	f7ff fd1a 	bl	8001338 <SD_PowerOff>
			res = RES_OK;
 8001904:	2300      	movs	r3, #0
 8001906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800190a:	e0fc      	b.n	8001b06 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 800190c:	f7ff fcd2 	bl	80012b4 <SD_PowerOn>
			res = RES_OK;
 8001910:	2300      	movs	r3, #0
 8001912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001916:	e0f6      	b.n	8001b06 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001918:	6a3b      	ldr	r3, [r7, #32]
 800191a:	1c5c      	adds	r4, r3, #1
 800191c:	f7ff fd18 	bl	8001350 <SD_CheckPower>
 8001920:	4603      	mov	r3, r0
 8001922:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001924:	2300      	movs	r3, #0
 8001926:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800192a:	e0ec      	b.n	8001b06 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 800192c:	2304      	movs	r3, #4
 800192e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001932:	e0e8      	b.n	8001b06 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001934:	4b77      	ldr	r3, [pc, #476]	; (8001b14 <SD_disk_ioctl+0x254>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	b2db      	uxtb	r3, r3
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <SD_disk_ioctl+0x86>
 8001942:	2303      	movs	r3, #3
 8001944:	e0e1      	b.n	8001b0a <SD_disk_ioctl+0x24a>

		SELECT();
 8001946:	f7ff fc21 	bl	800118c <SELECT>

		switch (ctrl)
 800194a:	79bb      	ldrb	r3, [r7, #6]
 800194c:	2b0d      	cmp	r3, #13
 800194e:	f200 80cb 	bhi.w	8001ae8 <SD_disk_ioctl+0x228>
 8001952:	a201      	add	r2, pc, #4	; (adr r2, 8001958 <SD_disk_ioctl+0x98>)
 8001954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001958:	08001a53 	.word	0x08001a53
 800195c:	08001991 	.word	0x08001991
 8001960:	08001a43 	.word	0x08001a43
 8001964:	08001ae9 	.word	0x08001ae9
 8001968:	08001ae9 	.word	0x08001ae9
 800196c:	08001ae9 	.word	0x08001ae9
 8001970:	08001ae9 	.word	0x08001ae9
 8001974:	08001ae9 	.word	0x08001ae9
 8001978:	08001ae9 	.word	0x08001ae9
 800197c:	08001ae9 	.word	0x08001ae9
 8001980:	08001ae9 	.word	0x08001ae9
 8001984:	08001a65 	.word	0x08001a65
 8001988:	08001a89 	.word	0x08001a89
 800198c:	08001aad 	.word	0x08001aad
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001990:	2100      	movs	r1, #0
 8001992:	2049      	movs	r0, #73	; 0x49
 8001994:	f7ff fd57 	bl	8001446 <SD_SendCmd>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	f040 80a8 	bne.w	8001af0 <SD_disk_ioctl+0x230>
 80019a0:	f107 030c 	add.w	r3, r7, #12
 80019a4:	2110      	movs	r1, #16
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff fcdc 	bl	8001364 <SD_RxDataBlock>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 809e 	beq.w	8001af0 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80019b4:	7b3b      	ldrb	r3, [r7, #12]
 80019b6:	099b      	lsrs	r3, r3, #6
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d10e      	bne.n	80019dc <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80019be:	7d7b      	ldrb	r3, [r7, #21]
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	7d3b      	ldrb	r3, [r7, #20]
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	021b      	lsls	r3, r3, #8
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	4413      	add	r3, r2
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	3301      	adds	r3, #1
 80019d0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80019d2:	8bfb      	ldrh	r3, [r7, #30]
 80019d4:	029a      	lsls	r2, r3, #10
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	e02e      	b.n	8001a3a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80019dc:	7c7b      	ldrb	r3, [r7, #17]
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	7dbb      	ldrb	r3, [r7, #22]
 80019e6:	09db      	lsrs	r3, r3, #7
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	4413      	add	r3, r2
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	7d7b      	ldrb	r3, [r7, #21]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	f003 0306 	and.w	r3, r3, #6
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	4413      	add	r3, r2
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	3302      	adds	r3, #2
 8001a00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001a04:	7d3b      	ldrb	r3, [r7, #20]
 8001a06:	099b      	lsrs	r3, r3, #6
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	7cfb      	ldrb	r3, [r7, #19]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	4413      	add	r3, r2
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	7cbb      	ldrb	r3, [r7, #18]
 8001a1a:	029b      	lsls	r3, r3, #10
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	4413      	add	r3, r2
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	3301      	adds	r3, #1
 8001a2a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001a2c:	8bfa      	ldrh	r2, [r7, #30]
 8001a2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a32:	3b09      	subs	r3, #9
 8001a34:	409a      	lsls	r2, r3
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001a40:	e056      	b.n	8001af0 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a48:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001a50:	e055      	b.n	8001afe <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001a52:	f7ff fc15 	bl	8001280 <SD_ReadyWait>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2bff      	cmp	r3, #255	; 0xff
 8001a5a:	d14b      	bne.n	8001af4 <SD_disk_ioctl+0x234>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001a62:	e047      	b.n	8001af4 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001a64:	2100      	movs	r1, #0
 8001a66:	2049      	movs	r0, #73	; 0x49
 8001a68:	f7ff fced 	bl	8001446 <SD_SendCmd>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d142      	bne.n	8001af8 <SD_disk_ioctl+0x238>
 8001a72:	2110      	movs	r1, #16
 8001a74:	6a38      	ldr	r0, [r7, #32]
 8001a76:	f7ff fc75 	bl	8001364 <SD_RxDataBlock>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d03b      	beq.n	8001af8 <SD_disk_ioctl+0x238>
 8001a80:	2300      	movs	r3, #0
 8001a82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001a86:	e037      	b.n	8001af8 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001a88:	2100      	movs	r1, #0
 8001a8a:	204a      	movs	r0, #74	; 0x4a
 8001a8c:	f7ff fcdb 	bl	8001446 <SD_SendCmd>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d132      	bne.n	8001afc <SD_disk_ioctl+0x23c>
 8001a96:	2110      	movs	r1, #16
 8001a98:	6a38      	ldr	r0, [r7, #32]
 8001a9a:	f7ff fc63 	bl	8001364 <SD_RxDataBlock>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d02b      	beq.n	8001afc <SD_disk_ioctl+0x23c>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001aaa:	e027      	b.n	8001afc <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001aac:	2100      	movs	r1, #0
 8001aae:	207a      	movs	r0, #122	; 0x7a
 8001ab0:	f7ff fcc9 	bl	8001446 <SD_SendCmd>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d116      	bne.n	8001ae8 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001aba:	2300      	movs	r3, #0
 8001abc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001ac0:	e00b      	b.n	8001ada <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001ac2:	6a3c      	ldr	r4, [r7, #32]
 8001ac4:	1c63      	adds	r3, r4, #1
 8001ac6:	623b      	str	r3, [r7, #32]
 8001ac8:	f7ff fbb0 	bl	800122c <SPI_RxByte>
 8001acc:	4603      	mov	r3, r0
 8001ace:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001ad0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001ada:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ade:	2b03      	cmp	r3, #3
 8001ae0:	d9ef      	bls.n	8001ac2 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001ae8:	2304      	movs	r3, #4
 8001aea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001aee:	e006      	b.n	8001afe <SD_disk_ioctl+0x23e>
			break;
 8001af0:	bf00      	nop
 8001af2:	e004      	b.n	8001afe <SD_disk_ioctl+0x23e>
			break;
 8001af4:	bf00      	nop
 8001af6:	e002      	b.n	8001afe <SD_disk_ioctl+0x23e>
			break;
 8001af8:	bf00      	nop
 8001afa:	e000      	b.n	8001afe <SD_disk_ioctl+0x23e>
			break;
 8001afc:	bf00      	nop
		}

		DESELECT();
 8001afe:	f7ff fb53 	bl	80011a8 <DESELECT>
		SPI_RxByte();
 8001b02:	f7ff fb93 	bl	800122c <SPI_RxByte>
	}

	return res;
 8001b06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	372c      	adds	r7, #44	; 0x2c
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd90      	pop	{r4, r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000544 	.word	0x20000544

08001b18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b1c:	f000 fd8e 	bl	800263c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b20:	f000 f83e 	bl	8001ba0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b24:	f000 f906 	bl	8001d34 <MX_GPIO_Init>
  MX_FATFS_Init();
 8001b28:	f003 fcf6 	bl	8005518 <MX_FATFS_Init>
  MX_SPI1_Init();
 8001b2c:	f000 f8a2 	bl	8001c74 <MX_SPI1_Init>
  MX_I2C1_Init();
 8001b30:	f000 f872 	bl	8001c18 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001b34:	f000 f8d4 	bl	8001ce0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1500);
 8001b38:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001b3c:	f000 fde0 	bl	8002700 <HAL_Delay>
  Display.configurado = VELOCIDADE;
 8001b40:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <main+0x78>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	701a      	strb	r2, [r3, #0]
  initDisplay(&Display);
 8001b46:	4812      	ldr	r0, [pc, #72]	; (8001b90 <main+0x78>)
 8001b48:	f7ff f82c 	bl	8000ba4 <initDisplay>
  HAL_UART_Receive_IT(&huart1, gnss.RxDataSerial, 1);
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	4911      	ldr	r1, [pc, #68]	; (8001b94 <main+0x7c>)
 8001b50:	4811      	ldr	r0, [pc, #68]	; (8001b98 <main+0x80>)
 8001b52:	f002 ffaa 	bl	8004aaa <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){

	  if(gnss.indy == 0){
 8001b56:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <main+0x7c>)
 8001b58:	f893 3517 	ldrb.w	r3, [r3, #1303]	; 0x517
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d104      	bne.n	8001b6a <main+0x52>
		  decodeNMEA(&gnss.RxDataSerial[13][0], &gnss);
 8001b60:	490c      	ldr	r1, [pc, #48]	; (8001b94 <main+0x7c>)
 8001b62:	480e      	ldr	r0, [pc, #56]	; (8001b9c <main+0x84>)
 8001b64:	f7ff f9b4 	bl	8000ed0 <decodeNMEA>
 8001b68:	e00c      	b.n	8001b84 <main+0x6c>
		  //gnss.velocidade.velocidade8bits = 10;//debug

	  }else{
		  decodeNMEA(&gnss.RxDataSerial[gnss.indy-1][0], &gnss);
 8001b6a:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <main+0x7c>)
 8001b6c:	f893 3517 	ldrb.w	r3, [r3, #1303]	; 0x517
 8001b70:	3b01      	subs	r3, #1
 8001b72:	2264      	movs	r2, #100	; 0x64
 8001b74:	fb02 f303 	mul.w	r3, r2, r3
 8001b78:	4a06      	ldr	r2, [pc, #24]	; (8001b94 <main+0x7c>)
 8001b7a:	4413      	add	r3, r2
 8001b7c:	4905      	ldr	r1, [pc, #20]	; (8001b94 <main+0x7c>)
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff f9a6 	bl	8000ed0 <decodeNMEA>
		  //gnss.velocidade.velocidade8bits = gnss.indy-1;//debug

	  }

	  updateDisplay(&Display,&gnss);
 8001b84:	4903      	ldr	r1, [pc, #12]	; (8001b94 <main+0x7c>)
 8001b86:	4802      	ldr	r0, [pc, #8]	; (8001b90 <main+0x78>)
 8001b88:	f7ff f84c 	bl	8000c24 <updateDisplay>
	  if(gnss.indy == 0){
 8001b8c:	e7e3      	b.n	8001b56 <main+0x3e>
 8001b8e:	bf00      	nop
 8001b90:	2000059c 	.word	0x2000059c
 8001b94:	20000000 	.word	0x20000000
 8001b98:	200005a0 	.word	0x200005a0
 8001b9c:	20000514 	.word	0x20000514

08001ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b090      	sub	sp, #64	; 0x40
 8001ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ba6:	f107 0318 	add.w	r3, r7, #24
 8001baa:	2228      	movs	r2, #40	; 0x28
 8001bac:	2100      	movs	r1, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f003 fdd0 	bl	8005754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	60da      	str	r2, [r3, #12]
 8001bc0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bca:	2310      	movs	r3, #16
 8001bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bd2:	f107 0318 	add.w	r3, r7, #24
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f001 fedc 	bl	8003994 <HAL_RCC_OscConfig>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001be2:	f000 f8e5 	bl	8001db0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001be6:	230f      	movs	r3, #15
 8001be8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001bea:	2300      	movs	r3, #0
 8001bec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001bfa:	1d3b      	adds	r3, r7, #4
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f002 f94a 	bl	8003e98 <HAL_RCC_ClockConfig>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001c0a:	f000 f8d1 	bl	8001db0 <Error_Handler>
  }
}
 8001c0e:	bf00      	nop
 8001c10:	3740      	adds	r7, #64	; 0x40
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c1c:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <MX_I2C1_Init+0x50>)
 8001c1e:	4a13      	ldr	r2, [pc, #76]	; (8001c6c <MX_I2C1_Init+0x54>)
 8001c20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001c22:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <MX_I2C1_Init+0x50>)
 8001c24:	4a12      	ldr	r2, [pc, #72]	; (8001c70 <MX_I2C1_Init+0x58>)
 8001c26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c28:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <MX_I2C1_Init+0x50>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <MX_I2C1_Init+0x50>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <MX_I2C1_Init+0x50>)
 8001c36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <MX_I2C1_Init+0x50>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c42:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <MX_I2C1_Init+0x50>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c48:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <MX_I2C1_Init+0x50>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c4e:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <MX_I2C1_Init+0x50>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c54:	4804      	ldr	r0, [pc, #16]	; (8001c68 <MX_I2C1_Init+0x50>)
 8001c56:	f001 f8d3 	bl	8002e00 <HAL_I2C_Init>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c60:	f000 f8a6 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	200005f0 	.word	0x200005f0
 8001c6c:	40005400 	.word	0x40005400
 8001c70:	00061a80 	.word	0x00061a80

08001c74 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c78:	4b17      	ldr	r3, [pc, #92]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001c7a:	4a18      	ldr	r2, [pc, #96]	; (8001cdc <MX_SPI1_Init+0x68>)
 8001c7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c7e:	4b16      	ldr	r3, [pc, #88]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001c80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c86:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c8c:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c92:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c98:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001ca0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ca4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cac:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cb2:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cb8:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001cc0:	220a      	movs	r2, #10
 8001cc2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cc4:	4804      	ldr	r0, [pc, #16]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001cc6:	f002 fa75 	bl	80041b4 <HAL_SPI_Init>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001cd0:	f000 f86e 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cd4:	bf00      	nop
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000644 	.word	0x20000644
 8001cdc:	40013000 	.word	0x40013000

08001ce0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ce4:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <MX_USART1_UART_Init+0x4c>)
 8001ce6:	4a12      	ldr	r2, [pc, #72]	; (8001d30 <MX_USART1_UART_Init+0x50>)
 8001ce8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001cea:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <MX_USART1_UART_Init+0x4c>)
 8001cec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001cf0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <MX_USART1_UART_Init+0x4c>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <MX_USART1_UART_Init+0x4c>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <MX_USART1_UART_Init+0x4c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d04:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <MX_USART1_UART_Init+0x4c>)
 8001d06:	220c      	movs	r2, #12
 8001d08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d0a:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <MX_USART1_UART_Init+0x4c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d10:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <MX_USART1_UART_Init+0x4c>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d16:	4805      	ldr	r0, [pc, #20]	; (8001d2c <MX_USART1_UART_Init+0x4c>)
 8001d18:	f002 fe77 	bl	8004a0a <HAL_UART_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d22:	f000 f845 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	200005a0 	.word	0x200005a0
 8001d30:	40013800 	.word	0x40013800

08001d34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3a:	f107 0308 	add.w	r3, r7, #8
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	605a      	str	r2, [r3, #4]
 8001d44:	609a      	str	r2, [r3, #8]
 8001d46:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d48:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <MX_GPIO_Init+0x74>)
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	4a16      	ldr	r2, [pc, #88]	; (8001da8 <MX_GPIO_Init+0x74>)
 8001d4e:	f043 0304 	orr.w	r3, r3, #4
 8001d52:	6193      	str	r3, [r2, #24]
 8001d54:	4b14      	ldr	r3, [pc, #80]	; (8001da8 <MX_GPIO_Init+0x74>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	607b      	str	r3, [r7, #4]
 8001d5e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d60:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <MX_GPIO_Init+0x74>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	4a10      	ldr	r2, [pc, #64]	; (8001da8 <MX_GPIO_Init+0x74>)
 8001d66:	f043 0308 	orr.w	r3, r3, #8
 8001d6a:	6193      	str	r3, [r2, #24]
 8001d6c:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <MX_GPIO_Init+0x74>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	603b      	str	r3, [r7, #0]
 8001d76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001d78:	2201      	movs	r2, #1
 8001d7a:	2110      	movs	r1, #16
 8001d7c:	480b      	ldr	r0, [pc, #44]	; (8001dac <MX_GPIO_Init+0x78>)
 8001d7e:	f001 f827 	bl	8002dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d82:	2310      	movs	r3, #16
 8001d84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d86:	2301      	movs	r3, #1
 8001d88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d92:	f107 0308 	add.w	r3, r7, #8
 8001d96:	4619      	mov	r1, r3
 8001d98:	4804      	ldr	r0, [pc, #16]	; (8001dac <MX_GPIO_Init+0x78>)
 8001d9a:	f000 fe95 	bl	8002ac8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d9e:	bf00      	nop
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40010800 	.word	0x40010800

08001db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001db4:	b672      	cpsid	i
}
 8001db6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001db8:	e7fe      	b.n	8001db8 <Error_Handler+0x8>
	...

08001dbc <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001dc2:	f000 fa1f 	bl	8002204 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001dc6:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001dca:	2201      	movs	r2, #1
 8001dcc:	2178      	movs	r1, #120	; 0x78
 8001dce:	485b      	ldr	r0, [pc, #364]	; (8001f3c <SSD1306_Init+0x180>)
 8001dd0:	f001 fa58 	bl	8003284 <HAL_I2C_IsDeviceReady>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	e0a9      	b.n	8001f32 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001dde:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001de2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001de4:	e002      	b.n	8001dec <SSD1306_Init+0x30>
		p--;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3b01      	subs	r3, #1
 8001dea:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f9      	bne.n	8001de6 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001df2:	22ae      	movs	r2, #174	; 0xae
 8001df4:	2100      	movs	r1, #0
 8001df6:	2078      	movs	r0, #120	; 0x78
 8001df8:	f000 fa7e 	bl	80022f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	2100      	movs	r1, #0
 8001e00:	2078      	movs	r0, #120	; 0x78
 8001e02:	f000 fa79 	bl	80022f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001e06:	2210      	movs	r2, #16
 8001e08:	2100      	movs	r1, #0
 8001e0a:	2078      	movs	r0, #120	; 0x78
 8001e0c:	f000 fa74 	bl	80022f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001e10:	22b0      	movs	r2, #176	; 0xb0
 8001e12:	2100      	movs	r1, #0
 8001e14:	2078      	movs	r0, #120	; 0x78
 8001e16:	f000 fa6f 	bl	80022f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001e1a:	22c8      	movs	r2, #200	; 0xc8
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	2078      	movs	r0, #120	; 0x78
 8001e20:	f000 fa6a 	bl	80022f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001e24:	2200      	movs	r2, #0
 8001e26:	2100      	movs	r1, #0
 8001e28:	2078      	movs	r0, #120	; 0x78
 8001e2a:	f000 fa65 	bl	80022f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001e2e:	2210      	movs	r2, #16
 8001e30:	2100      	movs	r1, #0
 8001e32:	2078      	movs	r0, #120	; 0x78
 8001e34:	f000 fa60 	bl	80022f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001e38:	2240      	movs	r2, #64	; 0x40
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	2078      	movs	r0, #120	; 0x78
 8001e3e:	f000 fa5b 	bl	80022f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001e42:	2281      	movs	r2, #129	; 0x81
 8001e44:	2100      	movs	r1, #0
 8001e46:	2078      	movs	r0, #120	; 0x78
 8001e48:	f000 fa56 	bl	80022f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001e4c:	22ff      	movs	r2, #255	; 0xff
 8001e4e:	2100      	movs	r1, #0
 8001e50:	2078      	movs	r0, #120	; 0x78
 8001e52:	f000 fa51 	bl	80022f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001e56:	22a1      	movs	r2, #161	; 0xa1
 8001e58:	2100      	movs	r1, #0
 8001e5a:	2078      	movs	r0, #120	; 0x78
 8001e5c:	f000 fa4c 	bl	80022f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001e60:	22a6      	movs	r2, #166	; 0xa6
 8001e62:	2100      	movs	r1, #0
 8001e64:	2078      	movs	r0, #120	; 0x78
 8001e66:	f000 fa47 	bl	80022f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001e6a:	22a8      	movs	r2, #168	; 0xa8
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	2078      	movs	r0, #120	; 0x78
 8001e70:	f000 fa42 	bl	80022f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001e74:	223f      	movs	r2, #63	; 0x3f
 8001e76:	2100      	movs	r1, #0
 8001e78:	2078      	movs	r0, #120	; 0x78
 8001e7a:	f000 fa3d 	bl	80022f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001e7e:	22a4      	movs	r2, #164	; 0xa4
 8001e80:	2100      	movs	r1, #0
 8001e82:	2078      	movs	r0, #120	; 0x78
 8001e84:	f000 fa38 	bl	80022f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001e88:	22d3      	movs	r2, #211	; 0xd3
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	2078      	movs	r0, #120	; 0x78
 8001e8e:	f000 fa33 	bl	80022f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001e92:	2200      	movs	r2, #0
 8001e94:	2100      	movs	r1, #0
 8001e96:	2078      	movs	r0, #120	; 0x78
 8001e98:	f000 fa2e 	bl	80022f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001e9c:	22d5      	movs	r2, #213	; 0xd5
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	2078      	movs	r0, #120	; 0x78
 8001ea2:	f000 fa29 	bl	80022f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001ea6:	22f0      	movs	r2, #240	; 0xf0
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	2078      	movs	r0, #120	; 0x78
 8001eac:	f000 fa24 	bl	80022f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001eb0:	22d9      	movs	r2, #217	; 0xd9
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	2078      	movs	r0, #120	; 0x78
 8001eb6:	f000 fa1f 	bl	80022f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001eba:	2222      	movs	r2, #34	; 0x22
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	2078      	movs	r0, #120	; 0x78
 8001ec0:	f000 fa1a 	bl	80022f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001ec4:	22da      	movs	r2, #218	; 0xda
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	2078      	movs	r0, #120	; 0x78
 8001eca:	f000 fa15 	bl	80022f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001ece:	2212      	movs	r2, #18
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	2078      	movs	r0, #120	; 0x78
 8001ed4:	f000 fa10 	bl	80022f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001ed8:	22db      	movs	r2, #219	; 0xdb
 8001eda:	2100      	movs	r1, #0
 8001edc:	2078      	movs	r0, #120	; 0x78
 8001ede:	f000 fa0b 	bl	80022f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	2078      	movs	r0, #120	; 0x78
 8001ee8:	f000 fa06 	bl	80022f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001eec:	228d      	movs	r2, #141	; 0x8d
 8001eee:	2100      	movs	r1, #0
 8001ef0:	2078      	movs	r0, #120	; 0x78
 8001ef2:	f000 fa01 	bl	80022f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001ef6:	2214      	movs	r2, #20
 8001ef8:	2100      	movs	r1, #0
 8001efa:	2078      	movs	r0, #120	; 0x78
 8001efc:	f000 f9fc 	bl	80022f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001f00:	22af      	movs	r2, #175	; 0xaf
 8001f02:	2100      	movs	r1, #0
 8001f04:	2078      	movs	r0, #120	; 0x78
 8001f06:	f000 f9f7 	bl	80022f8 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001f0a:	222e      	movs	r2, #46	; 0x2e
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	2078      	movs	r0, #120	; 0x78
 8001f10:	f000 f9f2 	bl	80022f8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001f14:	2000      	movs	r0, #0
 8001f16:	f000 f843 	bl	8001fa0 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001f1a:	f000 f813 	bl	8001f44 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001f1e:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <SSD1306_Init+0x184>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001f24:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <SSD1306_Init+0x184>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001f2a:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <SSD1306_Init+0x184>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001f30:	2301      	movs	r3, #1
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	200005f0 	.word	0x200005f0
 8001f40:	20000a9c 	.word	0x20000a9c

08001f44 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	71fb      	strb	r3, [r7, #7]
 8001f4e:	e01d      	b.n	8001f8c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	3b50      	subs	r3, #80	; 0x50
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	461a      	mov	r2, r3
 8001f58:	2100      	movs	r1, #0
 8001f5a:	2078      	movs	r0, #120	; 0x78
 8001f5c:	f000 f9cc 	bl	80022f8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001f60:	2200      	movs	r2, #0
 8001f62:	2100      	movs	r1, #0
 8001f64:	2078      	movs	r0, #120	; 0x78
 8001f66:	f000 f9c7 	bl	80022f8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001f6a:	2210      	movs	r2, #16
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	2078      	movs	r0, #120	; 0x78
 8001f70:	f000 f9c2 	bl	80022f8 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	01db      	lsls	r3, r3, #7
 8001f78:	4a08      	ldr	r2, [pc, #32]	; (8001f9c <SSD1306_UpdateScreen+0x58>)
 8001f7a:	441a      	add	r2, r3
 8001f7c:	2380      	movs	r3, #128	; 0x80
 8001f7e:	2140      	movs	r1, #64	; 0x40
 8001f80:	2078      	movs	r0, #120	; 0x78
 8001f82:	f000 f953 	bl	800222c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	71fb      	strb	r3, [r7, #7]
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	2b07      	cmp	r3, #7
 8001f90:	d9de      	bls.n	8001f50 <SSD1306_UpdateScreen+0xc>
	}
}
 8001f92:	bf00      	nop
 8001f94:	bf00      	nop
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	2000069c 	.word	0x2000069c

08001fa0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <SSD1306_Fill+0x14>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	e000      	b.n	8001fb6 <SSD1306_Fill+0x16>
 8001fb4:	23ff      	movs	r3, #255	; 0xff
 8001fb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4803      	ldr	r0, [pc, #12]	; (8001fcc <SSD1306_Fill+0x2c>)
 8001fbe:	f003 fbc9 	bl	8005754 <memset>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	2000069c 	.word	0x2000069c

08001fd0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	80fb      	strh	r3, [r7, #6]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	80bb      	strh	r3, [r7, #4]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	70fb      	strb	r3, [r7, #3]
	if (
 8001fe2:	88fb      	ldrh	r3, [r7, #6]
 8001fe4:	2b7f      	cmp	r3, #127	; 0x7f
 8001fe6:	d848      	bhi.n	800207a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001fe8:	88bb      	ldrh	r3, [r7, #4]
 8001fea:	2b3f      	cmp	r3, #63	; 0x3f
 8001fec:	d845      	bhi.n	800207a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001fee:	4b25      	ldr	r3, [pc, #148]	; (8002084 <SSD1306_DrawPixel+0xb4>)
 8001ff0:	791b      	ldrb	r3, [r3, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d006      	beq.n	8002004 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	bf0c      	ite	eq
 8001ffc:	2301      	moveq	r3, #1
 8001ffe:	2300      	movne	r3, #0
 8002000:	b2db      	uxtb	r3, r3
 8002002:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002004:	78fb      	ldrb	r3, [r7, #3]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d11a      	bne.n	8002040 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800200a:	88fa      	ldrh	r2, [r7, #6]
 800200c:	88bb      	ldrh	r3, [r7, #4]
 800200e:	08db      	lsrs	r3, r3, #3
 8002010:	b298      	uxth	r0, r3
 8002012:	4603      	mov	r3, r0
 8002014:	01db      	lsls	r3, r3, #7
 8002016:	4413      	add	r3, r2
 8002018:	4a1b      	ldr	r2, [pc, #108]	; (8002088 <SSD1306_DrawPixel+0xb8>)
 800201a:	5cd3      	ldrb	r3, [r2, r3]
 800201c:	b25a      	sxtb	r2, r3
 800201e:	88bb      	ldrh	r3, [r7, #4]
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	2101      	movs	r1, #1
 8002026:	fa01 f303 	lsl.w	r3, r1, r3
 800202a:	b25b      	sxtb	r3, r3
 800202c:	4313      	orrs	r3, r2
 800202e:	b259      	sxtb	r1, r3
 8002030:	88fa      	ldrh	r2, [r7, #6]
 8002032:	4603      	mov	r3, r0
 8002034:	01db      	lsls	r3, r3, #7
 8002036:	4413      	add	r3, r2
 8002038:	b2c9      	uxtb	r1, r1
 800203a:	4a13      	ldr	r2, [pc, #76]	; (8002088 <SSD1306_DrawPixel+0xb8>)
 800203c:	54d1      	strb	r1, [r2, r3]
 800203e:	e01d      	b.n	800207c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002040:	88fa      	ldrh	r2, [r7, #6]
 8002042:	88bb      	ldrh	r3, [r7, #4]
 8002044:	08db      	lsrs	r3, r3, #3
 8002046:	b298      	uxth	r0, r3
 8002048:	4603      	mov	r3, r0
 800204a:	01db      	lsls	r3, r3, #7
 800204c:	4413      	add	r3, r2
 800204e:	4a0e      	ldr	r2, [pc, #56]	; (8002088 <SSD1306_DrawPixel+0xb8>)
 8002050:	5cd3      	ldrb	r3, [r2, r3]
 8002052:	b25a      	sxtb	r2, r3
 8002054:	88bb      	ldrh	r3, [r7, #4]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	2101      	movs	r1, #1
 800205c:	fa01 f303 	lsl.w	r3, r1, r3
 8002060:	b25b      	sxtb	r3, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	b25b      	sxtb	r3, r3
 8002066:	4013      	ands	r3, r2
 8002068:	b259      	sxtb	r1, r3
 800206a:	88fa      	ldrh	r2, [r7, #6]
 800206c:	4603      	mov	r3, r0
 800206e:	01db      	lsls	r3, r3, #7
 8002070:	4413      	add	r3, r2
 8002072:	b2c9      	uxtb	r1, r1
 8002074:	4a04      	ldr	r2, [pc, #16]	; (8002088 <SSD1306_DrawPixel+0xb8>)
 8002076:	54d1      	strb	r1, [r2, r3]
 8002078:	e000      	b.n	800207c <SSD1306_DrawPixel+0xac>
		return;
 800207a:	bf00      	nop
	}
}
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr
 8002084:	20000a9c 	.word	0x20000a9c
 8002088:	2000069c 	.word	0x2000069c

0800208c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	460a      	mov	r2, r1
 8002096:	80fb      	strh	r3, [r7, #6]
 8002098:	4613      	mov	r3, r2
 800209a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800209c:	4a05      	ldr	r2, [pc, #20]	; (80020b4 <SSD1306_GotoXY+0x28>)
 800209e:	88fb      	ldrh	r3, [r7, #6]
 80020a0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80020a2:	4a04      	ldr	r2, [pc, #16]	; (80020b4 <SSD1306_GotoXY+0x28>)
 80020a4:	88bb      	ldrh	r3, [r7, #4]
 80020a6:	8053      	strh	r3, [r2, #2]
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	20000a9c 	.word	0x20000a9c

080020b8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	6039      	str	r1, [r7, #0]
 80020c2:	71fb      	strb	r3, [r7, #7]
 80020c4:	4613      	mov	r3, r2
 80020c6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80020c8:	4b3a      	ldr	r3, [pc, #232]	; (80021b4 <SSD1306_Putc+0xfc>)
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	461a      	mov	r2, r3
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	4413      	add	r3, r2
	if (
 80020d4:	2b7f      	cmp	r3, #127	; 0x7f
 80020d6:	dc07      	bgt.n	80020e8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80020d8:	4b36      	ldr	r3, [pc, #216]	; (80021b4 <SSD1306_Putc+0xfc>)
 80020da:	885b      	ldrh	r3, [r3, #2]
 80020dc:	461a      	mov	r2, r3
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	785b      	ldrb	r3, [r3, #1]
 80020e2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80020e4:	2b3f      	cmp	r3, #63	; 0x3f
 80020e6:	dd01      	ble.n	80020ec <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	e05e      	b.n	80021aa <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	e04b      	b.n	800218a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	3b20      	subs	r3, #32
 80020fa:	6839      	ldr	r1, [r7, #0]
 80020fc:	7849      	ldrb	r1, [r1, #1]
 80020fe:	fb01 f303 	mul.w	r3, r1, r3
 8002102:	4619      	mov	r1, r3
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	440b      	add	r3, r1
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	4413      	add	r3, r2
 800210c:	881b      	ldrh	r3, [r3, #0]
 800210e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002110:	2300      	movs	r3, #0
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	e030      	b.n	8002178 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d010      	beq.n	8002148 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002126:	4b23      	ldr	r3, [pc, #140]	; (80021b4 <SSD1306_Putc+0xfc>)
 8002128:	881a      	ldrh	r2, [r3, #0]
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	b29b      	uxth	r3, r3
 800212e:	4413      	add	r3, r2
 8002130:	b298      	uxth	r0, r3
 8002132:	4b20      	ldr	r3, [pc, #128]	; (80021b4 <SSD1306_Putc+0xfc>)
 8002134:	885a      	ldrh	r2, [r3, #2]
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	b29b      	uxth	r3, r3
 800213a:	4413      	add	r3, r2
 800213c:	b29b      	uxth	r3, r3
 800213e:	79ba      	ldrb	r2, [r7, #6]
 8002140:	4619      	mov	r1, r3
 8002142:	f7ff ff45 	bl	8001fd0 <SSD1306_DrawPixel>
 8002146:	e014      	b.n	8002172 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002148:	4b1a      	ldr	r3, [pc, #104]	; (80021b4 <SSD1306_Putc+0xfc>)
 800214a:	881a      	ldrh	r2, [r3, #0]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	b29b      	uxth	r3, r3
 8002150:	4413      	add	r3, r2
 8002152:	b298      	uxth	r0, r3
 8002154:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <SSD1306_Putc+0xfc>)
 8002156:	885a      	ldrh	r2, [r3, #2]
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	b29b      	uxth	r3, r3
 800215c:	4413      	add	r3, r2
 800215e:	b299      	uxth	r1, r3
 8002160:	79bb      	ldrb	r3, [r7, #6]
 8002162:	2b00      	cmp	r3, #0
 8002164:	bf0c      	ite	eq
 8002166:	2301      	moveq	r3, #1
 8002168:	2300      	movne	r3, #0
 800216a:	b2db      	uxtb	r3, r3
 800216c:	461a      	mov	r2, r3
 800216e:	f7ff ff2f 	bl	8001fd0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	3301      	adds	r3, #1
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	4293      	cmp	r3, r2
 8002182:	d3c8      	bcc.n	8002116 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	3301      	adds	r3, #1
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	785b      	ldrb	r3, [r3, #1]
 800218e:	461a      	mov	r2, r3
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	4293      	cmp	r3, r2
 8002194:	d3ad      	bcc.n	80020f2 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002196:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <SSD1306_Putc+0xfc>)
 8002198:	881a      	ldrh	r2, [r3, #0]
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	4413      	add	r3, r2
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	4b03      	ldr	r3, [pc, #12]	; (80021b4 <SSD1306_Putc+0xfc>)
 80021a6:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80021a8:	79fb      	ldrb	r3, [r7, #7]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3718      	adds	r7, #24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000a9c 	.word	0x20000a9c

080021b8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	4613      	mov	r3, r2
 80021c4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80021c6:	e012      	b.n	80021ee <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	79fa      	ldrb	r2, [r7, #7]
 80021ce:	68b9      	ldr	r1, [r7, #8]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff71 	bl	80020b8 <SSD1306_Putc>
 80021d6:	4603      	mov	r3, r0
 80021d8:	461a      	mov	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d002      	beq.n	80021e8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	e008      	b.n	80021fa <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	3301      	adds	r3, #1
 80021ec:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1e8      	bne.n	80021c8 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	781b      	ldrb	r3, [r3, #0]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800220a:	4b07      	ldr	r3, [pc, #28]	; (8002228 <ssd1306_I2C_Init+0x24>)
 800220c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800220e:	e002      	b.n	8002216 <ssd1306_I2C_Init+0x12>
		p--;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3b01      	subs	r3, #1
 8002214:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1f9      	bne.n	8002210 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800221c:	bf00      	nop
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr
 8002228:	0003d090 	.word	0x0003d090

0800222c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800222c:	b590      	push	{r4, r7, lr}
 800222e:	b0c7      	sub	sp, #284	; 0x11c
 8002230:	af02      	add	r7, sp, #8
 8002232:	4604      	mov	r4, r0
 8002234:	4608      	mov	r0, r1
 8002236:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800223a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800223e:	600a      	str	r2, [r1, #0]
 8002240:	4619      	mov	r1, r3
 8002242:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002246:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800224a:	4622      	mov	r2, r4
 800224c:	701a      	strb	r2, [r3, #0]
 800224e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002252:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8002256:	4602      	mov	r2, r0
 8002258:	701a      	strb	r2, [r3, #0]
 800225a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800225e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002262:	460a      	mov	r2, r1
 8002264:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002266:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800226a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800226e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002272:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8002276:	7812      	ldrb	r2, [r2, #0]
 8002278:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800227a:	2300      	movs	r3, #0
 800227c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002280:	e015      	b.n	80022ae <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8002282:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002286:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800228a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	441a      	add	r2, r3
 8002292:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002296:	3301      	adds	r3, #1
 8002298:	7811      	ldrb	r1, [r2, #0]
 800229a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800229e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80022a2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80022a4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80022a8:	3301      	adds	r3, #1
 80022aa:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80022ae:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80022b8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80022bc:	8812      	ldrh	r2, [r2, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d8df      	bhi.n	8002282 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80022c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80022c6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	b299      	uxth	r1, r3
 80022ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80022d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	3301      	adds	r3, #1
 80022da:	b29b      	uxth	r3, r3
 80022dc:	f107 020c 	add.w	r2, r7, #12
 80022e0:	200a      	movs	r0, #10
 80022e2:	9000      	str	r0, [sp, #0]
 80022e4:	4803      	ldr	r0, [pc, #12]	; (80022f4 <ssd1306_I2C_WriteMulti+0xc8>)
 80022e6:	f000 fecf 	bl	8003088 <HAL_I2C_Master_Transmit>
}
 80022ea:	bf00      	nop
 80022ec:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd90      	pop	{r4, r7, pc}
 80022f4:	200005f0 	.word	0x200005f0

080022f8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af02      	add	r7, sp, #8
 80022fe:	4603      	mov	r3, r0
 8002300:	71fb      	strb	r3, [r7, #7]
 8002302:	460b      	mov	r3, r1
 8002304:	71bb      	strb	r3, [r7, #6]
 8002306:	4613      	mov	r3, r2
 8002308:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800230a:	79bb      	ldrb	r3, [r7, #6]
 800230c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800230e:	797b      	ldrb	r3, [r7, #5]
 8002310:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002312:	79fb      	ldrb	r3, [r7, #7]
 8002314:	b299      	uxth	r1, r3
 8002316:	f107 020c 	add.w	r2, r7, #12
 800231a:	230a      	movs	r3, #10
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	2302      	movs	r3, #2
 8002320:	4803      	ldr	r0, [pc, #12]	; (8002330 <ssd1306_I2C_Write+0x38>)
 8002322:	f000 feb1 	bl	8003088 <HAL_I2C_Master_Transmit>
}
 8002326:	bf00      	nop
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	200005f0 	.word	0x200005f0

08002334 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <HAL_MspInit+0x5c>)
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	4a14      	ldr	r2, [pc, #80]	; (8002390 <HAL_MspInit+0x5c>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	6193      	str	r3, [r2, #24]
 8002346:	4b12      	ldr	r3, [pc, #72]	; (8002390 <HAL_MspInit+0x5c>)
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002352:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <HAL_MspInit+0x5c>)
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	4a0e      	ldr	r2, [pc, #56]	; (8002390 <HAL_MspInit+0x5c>)
 8002358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800235c:	61d3      	str	r3, [r2, #28]
 800235e:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <HAL_MspInit+0x5c>)
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002366:	607b      	str	r3, [r7, #4]
 8002368:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800236a:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <HAL_MspInit+0x60>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	4a04      	ldr	r2, [pc, #16]	; (8002394 <HAL_MspInit+0x60>)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002386:	bf00      	nop
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr
 8002390:	40021000 	.word	0x40021000
 8002394:	40010000 	.word	0x40010000

08002398 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b088      	sub	sp, #32
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a0:	f107 0310 	add.w	r3, r7, #16
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a15      	ldr	r2, [pc, #84]	; (8002408 <HAL_I2C_MspInit+0x70>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d123      	bne.n	8002400 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b8:	4b14      	ldr	r3, [pc, #80]	; (800240c <HAL_I2C_MspInit+0x74>)
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	4a13      	ldr	r2, [pc, #76]	; (800240c <HAL_I2C_MspInit+0x74>)
 80023be:	f043 0308 	orr.w	r3, r3, #8
 80023c2:	6193      	str	r3, [r2, #24]
 80023c4:	4b11      	ldr	r3, [pc, #68]	; (800240c <HAL_I2C_MspInit+0x74>)
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023d0:	23c0      	movs	r3, #192	; 0xc0
 80023d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023d4:	2312      	movs	r3, #18
 80023d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023d8:	2303      	movs	r3, #3
 80023da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023dc:	f107 0310 	add.w	r3, r7, #16
 80023e0:	4619      	mov	r1, r3
 80023e2:	480b      	ldr	r0, [pc, #44]	; (8002410 <HAL_I2C_MspInit+0x78>)
 80023e4:	f000 fb70 	bl	8002ac8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023e8:	4b08      	ldr	r3, [pc, #32]	; (800240c <HAL_I2C_MspInit+0x74>)
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	4a07      	ldr	r2, [pc, #28]	; (800240c <HAL_I2C_MspInit+0x74>)
 80023ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023f2:	61d3      	str	r3, [r2, #28]
 80023f4:	4b05      	ldr	r3, [pc, #20]	; (800240c <HAL_I2C_MspInit+0x74>)
 80023f6:	69db      	ldr	r3, [r3, #28]
 80023f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002400:	bf00      	nop
 8002402:	3720      	adds	r7, #32
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40005400 	.word	0x40005400
 800240c:	40021000 	.word	0x40021000
 8002410:	40010c00 	.word	0x40010c00

08002414 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 0310 	add.w	r3, r7, #16
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a1b      	ldr	r2, [pc, #108]	; (800249c <HAL_SPI_MspInit+0x88>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d12f      	bne.n	8002494 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002434:	4b1a      	ldr	r3, [pc, #104]	; (80024a0 <HAL_SPI_MspInit+0x8c>)
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	4a19      	ldr	r2, [pc, #100]	; (80024a0 <HAL_SPI_MspInit+0x8c>)
 800243a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800243e:	6193      	str	r3, [r2, #24]
 8002440:	4b17      	ldr	r3, [pc, #92]	; (80024a0 <HAL_SPI_MspInit+0x8c>)
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800244c:	4b14      	ldr	r3, [pc, #80]	; (80024a0 <HAL_SPI_MspInit+0x8c>)
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	4a13      	ldr	r2, [pc, #76]	; (80024a0 <HAL_SPI_MspInit+0x8c>)
 8002452:	f043 0304 	orr.w	r3, r3, #4
 8002456:	6193      	str	r3, [r2, #24]
 8002458:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <HAL_SPI_MspInit+0x8c>)
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002464:	23a0      	movs	r3, #160	; 0xa0
 8002466:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002468:	2302      	movs	r3, #2
 800246a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800246c:	2303      	movs	r3, #3
 800246e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002470:	f107 0310 	add.w	r3, r7, #16
 8002474:	4619      	mov	r1, r3
 8002476:	480b      	ldr	r0, [pc, #44]	; (80024a4 <HAL_SPI_MspInit+0x90>)
 8002478:	f000 fb26 	bl	8002ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800247c:	2340      	movs	r3, #64	; 0x40
 800247e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
 8002486:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002488:	f107 0310 	add.w	r3, r7, #16
 800248c:	4619      	mov	r1, r3
 800248e:	4805      	ldr	r0, [pc, #20]	; (80024a4 <HAL_SPI_MspInit+0x90>)
 8002490:	f000 fb1a 	bl	8002ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002494:	bf00      	nop
 8002496:	3720      	adds	r7, #32
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40013000 	.word	0x40013000
 80024a0:	40021000 	.word	0x40021000
 80024a4:	40010800 	.word	0x40010800

080024a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b088      	sub	sp, #32
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b0:	f107 0310 	add.w	r3, r7, #16
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a20      	ldr	r2, [pc, #128]	; (8002544 <HAL_UART_MspInit+0x9c>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d139      	bne.n	800253c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024c8:	4b1f      	ldr	r3, [pc, #124]	; (8002548 <HAL_UART_MspInit+0xa0>)
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	4a1e      	ldr	r2, [pc, #120]	; (8002548 <HAL_UART_MspInit+0xa0>)
 80024ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024d2:	6193      	str	r3, [r2, #24]
 80024d4:	4b1c      	ldr	r3, [pc, #112]	; (8002548 <HAL_UART_MspInit+0xa0>)
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e0:	4b19      	ldr	r3, [pc, #100]	; (8002548 <HAL_UART_MspInit+0xa0>)
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	4a18      	ldr	r2, [pc, #96]	; (8002548 <HAL_UART_MspInit+0xa0>)
 80024e6:	f043 0304 	orr.w	r3, r3, #4
 80024ea:	6193      	str	r3, [r2, #24]
 80024ec:	4b16      	ldr	r3, [pc, #88]	; (8002548 <HAL_UART_MspInit+0xa0>)
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fe:	2302      	movs	r3, #2
 8002500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002502:	2303      	movs	r3, #3
 8002504:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002506:	f107 0310 	add.w	r3, r7, #16
 800250a:	4619      	mov	r1, r3
 800250c:	480f      	ldr	r0, [pc, #60]	; (800254c <HAL_UART_MspInit+0xa4>)
 800250e:	f000 fadb 	bl	8002ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002516:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	2300      	movs	r3, #0
 800251e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002520:	f107 0310 	add.w	r3, r7, #16
 8002524:	4619      	mov	r1, r3
 8002526:	4809      	ldr	r0, [pc, #36]	; (800254c <HAL_UART_MspInit+0xa4>)
 8002528:	f000 face 	bl	8002ac8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800252c:	2200      	movs	r2, #0
 800252e:	2100      	movs	r1, #0
 8002530:	2025      	movs	r0, #37	; 0x25
 8002532:	f000 f9e0 	bl	80028f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002536:	2025      	movs	r0, #37	; 0x25
 8002538:	f000 f9f9 	bl	800292e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800253c:	bf00      	nop
 800253e:	3720      	adds	r7, #32
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40013800 	.word	0x40013800
 8002548:	40021000 	.word	0x40021000
 800254c:	40010800 	.word	0x40010800

08002550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002554:	e7fe      	b.n	8002554 <NMI_Handler+0x4>

08002556 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800255a:	e7fe      	b.n	800255a <HardFault_Handler+0x4>

0800255c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002560:	e7fe      	b.n	8002560 <MemManage_Handler+0x4>

08002562 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002562:	b480      	push	{r7}
 8002564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002566:	e7fe      	b.n	8002566 <BusFault_Handler+0x4>

08002568 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800256c:	e7fe      	b.n	800256c <UsageFault_Handler+0x4>

0800256e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800256e:	b480      	push	{r7}
 8002570:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	46bd      	mov	sp, r7
 8002576:	bc80      	pop	{r7}
 8002578:	4770      	bx	lr

0800257a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr

08002586 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002586:	b480      	push	{r7}
 8002588:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800258a:	bf00      	nop
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr
	...

08002594 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8002598:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <SysTick_Handler+0x34>)
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <SysTick_Handler+0x18>
		Timer1--;
 80025a0:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <SysTick_Handler+0x34>)
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	3b01      	subs	r3, #1
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	4b07      	ldr	r3, [pc, #28]	; (80025c8 <SysTick_Handler+0x34>)
 80025aa:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 80025ac:	4b07      	ldr	r3, [pc, #28]	; (80025cc <SysTick_Handler+0x38>)
 80025ae:	881b      	ldrh	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <SysTick_Handler+0x2c>
		Timer2--;
 80025b4:	4b05      	ldr	r3, [pc, #20]	; (80025cc <SysTick_Handler+0x38>)
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	4b03      	ldr	r3, [pc, #12]	; (80025cc <SysTick_Handler+0x38>)
 80025be:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025c0:	f000 f882 	bl	80026c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025c4:	bf00      	nop
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	200005e8 	.word	0x200005e8
 80025cc:	200005ea 	.word	0x200005ea

080025d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025d4:	4802      	ldr	r0, [pc, #8]	; (80025e0 <USART1_IRQHandler+0x10>)
 80025d6:	f002 fa8d 	bl	8004af4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	200005a0 	.word	0x200005a0

080025e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr

080025f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025f0:	f7ff fff8 	bl	80025e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025f4:	480b      	ldr	r0, [pc, #44]	; (8002624 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80025f6:	490c      	ldr	r1, [pc, #48]	; (8002628 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80025f8:	4a0c      	ldr	r2, [pc, #48]	; (800262c <LoopFillZerobss+0x16>)
  movs r3, #0
 80025fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025fc:	e002      	b.n	8002604 <LoopCopyDataInit>

080025fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002602:	3304      	adds	r3, #4

08002604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002608:	d3f9      	bcc.n	80025fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800260a:	4a09      	ldr	r2, [pc, #36]	; (8002630 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800260c:	4c09      	ldr	r4, [pc, #36]	; (8002634 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800260e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002610:	e001      	b.n	8002616 <LoopFillZerobss>

08002612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002614:	3204      	adds	r2, #4

08002616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002618:	d3fb      	bcc.n	8002612 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800261a:	f003 f8a3 	bl	8005764 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800261e:	f7ff fa7b 	bl	8001b18 <main>
  bx lr
 8002622:	4770      	bx	lr
  ldr r0, =_sdata
 8002624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002628:	20000580 	.word	0x20000580
  ldr r2, =_sidata
 800262c:	0800804c 	.word	0x0800804c
  ldr r2, =_sbss
 8002630:	20000580 	.word	0x20000580
  ldr r4, =_ebss
 8002634:	20000abc 	.word	0x20000abc

08002638 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002638:	e7fe      	b.n	8002638 <ADC1_2_IRQHandler>
	...

0800263c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002640:	4b08      	ldr	r3, [pc, #32]	; (8002664 <HAL_Init+0x28>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a07      	ldr	r2, [pc, #28]	; (8002664 <HAL_Init+0x28>)
 8002646:	f043 0310 	orr.w	r3, r3, #16
 800264a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800264c:	2003      	movs	r0, #3
 800264e:	f000 f947 	bl	80028e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002652:	200f      	movs	r0, #15
 8002654:	f000 f808 	bl	8002668 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002658:	f7ff fe6c 	bl	8002334 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40022000 	.word	0x40022000

08002668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002670:	4b12      	ldr	r3, [pc, #72]	; (80026bc <HAL_InitTick+0x54>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	4b12      	ldr	r3, [pc, #72]	; (80026c0 <HAL_InitTick+0x58>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	4619      	mov	r1, r3
 800267a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800267e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002682:	fbb2 f3f3 	udiv	r3, r2, r3
 8002686:	4618      	mov	r0, r3
 8002688:	f000 f95f 	bl	800294a <HAL_SYSTICK_Config>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e00e      	b.n	80026b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b0f      	cmp	r3, #15
 800269a:	d80a      	bhi.n	80026b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800269c:	2200      	movs	r2, #0
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	f04f 30ff 	mov.w	r0, #4294967295
 80026a4:	f000 f927 	bl	80028f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026a8:	4a06      	ldr	r2, [pc, #24]	; (80026c4 <HAL_InitTick+0x5c>)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
 80026b0:	e000      	b.n	80026b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20000560 	.word	0x20000560
 80026c0:	20000568 	.word	0x20000568
 80026c4:	20000564 	.word	0x20000564

080026c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026cc:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <HAL_IncTick+0x1c>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <HAL_IncTick+0x20>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4413      	add	r3, r2
 80026d8:	4a03      	ldr	r2, [pc, #12]	; (80026e8 <HAL_IncTick+0x20>)
 80026da:	6013      	str	r3, [r2, #0]
}
 80026dc:	bf00      	nop
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr
 80026e4:	20000568 	.word	0x20000568
 80026e8:	20000aa4 	.word	0x20000aa4

080026ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  return uwTick;
 80026f0:	4b02      	ldr	r3, [pc, #8]	; (80026fc <HAL_GetTick+0x10>)
 80026f2:	681b      	ldr	r3, [r3, #0]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bc80      	pop	{r7}
 80026fa:	4770      	bx	lr
 80026fc:	20000aa4 	.word	0x20000aa4

08002700 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002708:	f7ff fff0 	bl	80026ec <HAL_GetTick>
 800270c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002718:	d005      	beq.n	8002726 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800271a:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <HAL_Delay+0x44>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	461a      	mov	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4413      	add	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002726:	bf00      	nop
 8002728:	f7ff ffe0 	bl	80026ec <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	429a      	cmp	r2, r3
 8002736:	d8f7      	bhi.n	8002728 <HAL_Delay+0x28>
  {
  }
}
 8002738:	bf00      	nop
 800273a:	bf00      	nop
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	20000568 	.word	0x20000568

08002748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002758:	4b0c      	ldr	r3, [pc, #48]	; (800278c <__NVIC_SetPriorityGrouping+0x44>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002764:	4013      	ands	r3, r2
 8002766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002770:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800277a:	4a04      	ldr	r2, [pc, #16]	; (800278c <__NVIC_SetPriorityGrouping+0x44>)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	60d3      	str	r3, [r2, #12]
}
 8002780:	bf00      	nop
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002794:	4b04      	ldr	r3, [pc, #16]	; (80027a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	0a1b      	lsrs	r3, r3, #8
 800279a:	f003 0307 	and.w	r3, r3, #7
}
 800279e:	4618      	mov	r0, r3
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	e000ed00 	.word	0xe000ed00

080027ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	db0b      	blt.n	80027d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	f003 021f 	and.w	r2, r3, #31
 80027c4:	4906      	ldr	r1, [pc, #24]	; (80027e0 <__NVIC_EnableIRQ+0x34>)
 80027c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ca:	095b      	lsrs	r3, r3, #5
 80027cc:	2001      	movs	r0, #1
 80027ce:	fa00 f202 	lsl.w	r2, r0, r2
 80027d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr
 80027e0:	e000e100 	.word	0xe000e100

080027e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	6039      	str	r1, [r7, #0]
 80027ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	db0a      	blt.n	800280e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	490c      	ldr	r1, [pc, #48]	; (8002830 <__NVIC_SetPriority+0x4c>)
 80027fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002802:	0112      	lsls	r2, r2, #4
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	440b      	add	r3, r1
 8002808:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800280c:	e00a      	b.n	8002824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	b2da      	uxtb	r2, r3
 8002812:	4908      	ldr	r1, [pc, #32]	; (8002834 <__NVIC_SetPriority+0x50>)
 8002814:	79fb      	ldrb	r3, [r7, #7]
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	3b04      	subs	r3, #4
 800281c:	0112      	lsls	r2, r2, #4
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	440b      	add	r3, r1
 8002822:	761a      	strb	r2, [r3, #24]
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	e000e100 	.word	0xe000e100
 8002834:	e000ed00 	.word	0xe000ed00

08002838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002838:	b480      	push	{r7}
 800283a:	b089      	sub	sp, #36	; 0x24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f1c3 0307 	rsb	r3, r3, #7
 8002852:	2b04      	cmp	r3, #4
 8002854:	bf28      	it	cs
 8002856:	2304      	movcs	r3, #4
 8002858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	3304      	adds	r3, #4
 800285e:	2b06      	cmp	r3, #6
 8002860:	d902      	bls.n	8002868 <NVIC_EncodePriority+0x30>
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	3b03      	subs	r3, #3
 8002866:	e000      	b.n	800286a <NVIC_EncodePriority+0x32>
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800286c:	f04f 32ff 	mov.w	r2, #4294967295
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43da      	mvns	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	401a      	ands	r2, r3
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002880:	f04f 31ff 	mov.w	r1, #4294967295
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	fa01 f303 	lsl.w	r3, r1, r3
 800288a:	43d9      	mvns	r1, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002890:	4313      	orrs	r3, r2
         );
}
 8002892:	4618      	mov	r0, r3
 8002894:	3724      	adds	r7, #36	; 0x24
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3b01      	subs	r3, #1
 80028a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028ac:	d301      	bcc.n	80028b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ae:	2301      	movs	r3, #1
 80028b0:	e00f      	b.n	80028d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028b2:	4a0a      	ldr	r2, [pc, #40]	; (80028dc <SysTick_Config+0x40>)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ba:	210f      	movs	r1, #15
 80028bc:	f04f 30ff 	mov.w	r0, #4294967295
 80028c0:	f7ff ff90 	bl	80027e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028c4:	4b05      	ldr	r3, [pc, #20]	; (80028dc <SysTick_Config+0x40>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ca:	4b04      	ldr	r3, [pc, #16]	; (80028dc <SysTick_Config+0x40>)
 80028cc:	2207      	movs	r2, #7
 80028ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	e000e010 	.word	0xe000e010

080028e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7ff ff2d 	bl	8002748 <__NVIC_SetPriorityGrouping>
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b086      	sub	sp, #24
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	4603      	mov	r3, r0
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	607a      	str	r2, [r7, #4]
 8002902:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002908:	f7ff ff42 	bl	8002790 <__NVIC_GetPriorityGrouping>
 800290c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	68b9      	ldr	r1, [r7, #8]
 8002912:	6978      	ldr	r0, [r7, #20]
 8002914:	f7ff ff90 	bl	8002838 <NVIC_EncodePriority>
 8002918:	4602      	mov	r2, r0
 800291a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800291e:	4611      	mov	r1, r2
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff ff5f 	bl	80027e4 <__NVIC_SetPriority>
}
 8002926:	bf00      	nop
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	4603      	mov	r3, r0
 8002936:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff ff35 	bl	80027ac <__NVIC_EnableIRQ>
}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7ff ffa2 	bl	800289c <SysTick_Config>
 8002958:	4603      	mov	r3, r0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002962:	b480      	push	{r7}
 8002964:	b085      	sub	sp, #20
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800296a:	2300      	movs	r3, #0
 800296c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d008      	beq.n	800298c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2204      	movs	r2, #4
 800297e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e020      	b.n	80029ce <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 020e 	bic.w	r2, r2, #14
 800299a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0201 	bic.w	r2, r2, #1
 80029aa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b4:	2101      	movs	r1, #1
 80029b6:	fa01 f202 	lsl.w	r2, r1, r2
 80029ba:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029e0:	2300      	movs	r3, #0
 80029e2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d005      	beq.n	80029fc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2204      	movs	r2, #4
 80029f4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	73fb      	strb	r3, [r7, #15]
 80029fa:	e051      	b.n	8002aa0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 020e 	bic.w	r2, r2, #14
 8002a0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0201 	bic.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a22      	ldr	r2, [pc, #136]	; (8002aac <HAL_DMA_Abort_IT+0xd4>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d029      	beq.n	8002a7a <HAL_DMA_Abort_IT+0xa2>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a21      	ldr	r2, [pc, #132]	; (8002ab0 <HAL_DMA_Abort_IT+0xd8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d022      	beq.n	8002a76 <HAL_DMA_Abort_IT+0x9e>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a1f      	ldr	r2, [pc, #124]	; (8002ab4 <HAL_DMA_Abort_IT+0xdc>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d01a      	beq.n	8002a70 <HAL_DMA_Abort_IT+0x98>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a1e      	ldr	r2, [pc, #120]	; (8002ab8 <HAL_DMA_Abort_IT+0xe0>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d012      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x92>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a1c      	ldr	r2, [pc, #112]	; (8002abc <HAL_DMA_Abort_IT+0xe4>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d00a      	beq.n	8002a64 <HAL_DMA_Abort_IT+0x8c>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a1b      	ldr	r2, [pc, #108]	; (8002ac0 <HAL_DMA_Abort_IT+0xe8>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d102      	bne.n	8002a5e <HAL_DMA_Abort_IT+0x86>
 8002a58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a5c:	e00e      	b.n	8002a7c <HAL_DMA_Abort_IT+0xa4>
 8002a5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a62:	e00b      	b.n	8002a7c <HAL_DMA_Abort_IT+0xa4>
 8002a64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a68:	e008      	b.n	8002a7c <HAL_DMA_Abort_IT+0xa4>
 8002a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a6e:	e005      	b.n	8002a7c <HAL_DMA_Abort_IT+0xa4>
 8002a70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a74:	e002      	b.n	8002a7c <HAL_DMA_Abort_IT+0xa4>
 8002a76:	2310      	movs	r3, #16
 8002a78:	e000      	b.n	8002a7c <HAL_DMA_Abort_IT+0xa4>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	4a11      	ldr	r2, [pc, #68]	; (8002ac4 <HAL_DMA_Abort_IT+0xec>)
 8002a7e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	4798      	blx	r3
    } 
  }
  return status;
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40020008 	.word	0x40020008
 8002ab0:	4002001c 	.word	0x4002001c
 8002ab4:	40020030 	.word	0x40020030
 8002ab8:	40020044 	.word	0x40020044
 8002abc:	40020058 	.word	0x40020058
 8002ac0:	4002006c 	.word	0x4002006c
 8002ac4:	40020000 	.word	0x40020000

08002ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b08b      	sub	sp, #44	; 0x2c
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ada:	e169      	b.n	8002db0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002adc:	2201      	movs	r2, #1
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	69fa      	ldr	r2, [r7, #28]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	f040 8158 	bne.w	8002daa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	4a9a      	ldr	r2, [pc, #616]	; (8002d68 <HAL_GPIO_Init+0x2a0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d05e      	beq.n	8002bc2 <HAL_GPIO_Init+0xfa>
 8002b04:	4a98      	ldr	r2, [pc, #608]	; (8002d68 <HAL_GPIO_Init+0x2a0>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d875      	bhi.n	8002bf6 <HAL_GPIO_Init+0x12e>
 8002b0a:	4a98      	ldr	r2, [pc, #608]	; (8002d6c <HAL_GPIO_Init+0x2a4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d058      	beq.n	8002bc2 <HAL_GPIO_Init+0xfa>
 8002b10:	4a96      	ldr	r2, [pc, #600]	; (8002d6c <HAL_GPIO_Init+0x2a4>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d86f      	bhi.n	8002bf6 <HAL_GPIO_Init+0x12e>
 8002b16:	4a96      	ldr	r2, [pc, #600]	; (8002d70 <HAL_GPIO_Init+0x2a8>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d052      	beq.n	8002bc2 <HAL_GPIO_Init+0xfa>
 8002b1c:	4a94      	ldr	r2, [pc, #592]	; (8002d70 <HAL_GPIO_Init+0x2a8>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d869      	bhi.n	8002bf6 <HAL_GPIO_Init+0x12e>
 8002b22:	4a94      	ldr	r2, [pc, #592]	; (8002d74 <HAL_GPIO_Init+0x2ac>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d04c      	beq.n	8002bc2 <HAL_GPIO_Init+0xfa>
 8002b28:	4a92      	ldr	r2, [pc, #584]	; (8002d74 <HAL_GPIO_Init+0x2ac>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d863      	bhi.n	8002bf6 <HAL_GPIO_Init+0x12e>
 8002b2e:	4a92      	ldr	r2, [pc, #584]	; (8002d78 <HAL_GPIO_Init+0x2b0>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d046      	beq.n	8002bc2 <HAL_GPIO_Init+0xfa>
 8002b34:	4a90      	ldr	r2, [pc, #576]	; (8002d78 <HAL_GPIO_Init+0x2b0>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d85d      	bhi.n	8002bf6 <HAL_GPIO_Init+0x12e>
 8002b3a:	2b12      	cmp	r3, #18
 8002b3c:	d82a      	bhi.n	8002b94 <HAL_GPIO_Init+0xcc>
 8002b3e:	2b12      	cmp	r3, #18
 8002b40:	d859      	bhi.n	8002bf6 <HAL_GPIO_Init+0x12e>
 8002b42:	a201      	add	r2, pc, #4	; (adr r2, 8002b48 <HAL_GPIO_Init+0x80>)
 8002b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b48:	08002bc3 	.word	0x08002bc3
 8002b4c:	08002b9d 	.word	0x08002b9d
 8002b50:	08002baf 	.word	0x08002baf
 8002b54:	08002bf1 	.word	0x08002bf1
 8002b58:	08002bf7 	.word	0x08002bf7
 8002b5c:	08002bf7 	.word	0x08002bf7
 8002b60:	08002bf7 	.word	0x08002bf7
 8002b64:	08002bf7 	.word	0x08002bf7
 8002b68:	08002bf7 	.word	0x08002bf7
 8002b6c:	08002bf7 	.word	0x08002bf7
 8002b70:	08002bf7 	.word	0x08002bf7
 8002b74:	08002bf7 	.word	0x08002bf7
 8002b78:	08002bf7 	.word	0x08002bf7
 8002b7c:	08002bf7 	.word	0x08002bf7
 8002b80:	08002bf7 	.word	0x08002bf7
 8002b84:	08002bf7 	.word	0x08002bf7
 8002b88:	08002bf7 	.word	0x08002bf7
 8002b8c:	08002ba5 	.word	0x08002ba5
 8002b90:	08002bb9 	.word	0x08002bb9
 8002b94:	4a79      	ldr	r2, [pc, #484]	; (8002d7c <HAL_GPIO_Init+0x2b4>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d013      	beq.n	8002bc2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b9a:	e02c      	b.n	8002bf6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	623b      	str	r3, [r7, #32]
          break;
 8002ba2:	e029      	b.n	8002bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	3304      	adds	r3, #4
 8002baa:	623b      	str	r3, [r7, #32]
          break;
 8002bac:	e024      	b.n	8002bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	3308      	adds	r3, #8
 8002bb4:	623b      	str	r3, [r7, #32]
          break;
 8002bb6:	e01f      	b.n	8002bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	330c      	adds	r3, #12
 8002bbe:	623b      	str	r3, [r7, #32]
          break;
 8002bc0:	e01a      	b.n	8002bf8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d102      	bne.n	8002bd0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002bca:	2304      	movs	r3, #4
 8002bcc:	623b      	str	r3, [r7, #32]
          break;
 8002bce:	e013      	b.n	8002bf8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d105      	bne.n	8002be4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bd8:	2308      	movs	r3, #8
 8002bda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	69fa      	ldr	r2, [r7, #28]
 8002be0:	611a      	str	r2, [r3, #16]
          break;
 8002be2:	e009      	b.n	8002bf8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002be4:	2308      	movs	r3, #8
 8002be6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	69fa      	ldr	r2, [r7, #28]
 8002bec:	615a      	str	r2, [r3, #20]
          break;
 8002bee:	e003      	b.n	8002bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	623b      	str	r3, [r7, #32]
          break;
 8002bf4:	e000      	b.n	8002bf8 <HAL_GPIO_Init+0x130>
          break;
 8002bf6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	2bff      	cmp	r3, #255	; 0xff
 8002bfc:	d801      	bhi.n	8002c02 <HAL_GPIO_Init+0x13a>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	e001      	b.n	8002c06 <HAL_GPIO_Init+0x13e>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	3304      	adds	r3, #4
 8002c06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	2bff      	cmp	r3, #255	; 0xff
 8002c0c:	d802      	bhi.n	8002c14 <HAL_GPIO_Init+0x14c>
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	e002      	b.n	8002c1a <HAL_GPIO_Init+0x152>
 8002c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c16:	3b08      	subs	r3, #8
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	210f      	movs	r1, #15
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	fa01 f303 	lsl.w	r3, r1, r3
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	401a      	ands	r2, r3
 8002c2c:	6a39      	ldr	r1, [r7, #32]
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	fa01 f303 	lsl.w	r3, r1, r3
 8002c34:	431a      	orrs	r2, r3
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 80b1 	beq.w	8002daa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c48:	4b4d      	ldr	r3, [pc, #308]	; (8002d80 <HAL_GPIO_Init+0x2b8>)
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	4a4c      	ldr	r2, [pc, #304]	; (8002d80 <HAL_GPIO_Init+0x2b8>)
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	6193      	str	r3, [r2, #24]
 8002c54:	4b4a      	ldr	r3, [pc, #296]	; (8002d80 <HAL_GPIO_Init+0x2b8>)
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c60:	4a48      	ldr	r2, [pc, #288]	; (8002d84 <HAL_GPIO_Init+0x2bc>)
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	089b      	lsrs	r3, r3, #2
 8002c66:	3302      	adds	r3, #2
 8002c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	f003 0303 	and.w	r3, r3, #3
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	220f      	movs	r2, #15
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	4013      	ands	r3, r2
 8002c82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a40      	ldr	r2, [pc, #256]	; (8002d88 <HAL_GPIO_Init+0x2c0>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d013      	beq.n	8002cb4 <HAL_GPIO_Init+0x1ec>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a3f      	ldr	r2, [pc, #252]	; (8002d8c <HAL_GPIO_Init+0x2c4>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d00d      	beq.n	8002cb0 <HAL_GPIO_Init+0x1e8>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a3e      	ldr	r2, [pc, #248]	; (8002d90 <HAL_GPIO_Init+0x2c8>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d007      	beq.n	8002cac <HAL_GPIO_Init+0x1e4>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a3d      	ldr	r2, [pc, #244]	; (8002d94 <HAL_GPIO_Init+0x2cc>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d101      	bne.n	8002ca8 <HAL_GPIO_Init+0x1e0>
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e006      	b.n	8002cb6 <HAL_GPIO_Init+0x1ee>
 8002ca8:	2304      	movs	r3, #4
 8002caa:	e004      	b.n	8002cb6 <HAL_GPIO_Init+0x1ee>
 8002cac:	2302      	movs	r3, #2
 8002cae:	e002      	b.n	8002cb6 <HAL_GPIO_Init+0x1ee>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e000      	b.n	8002cb6 <HAL_GPIO_Init+0x1ee>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb8:	f002 0203 	and.w	r2, r2, #3
 8002cbc:	0092      	lsls	r2, r2, #2
 8002cbe:	4093      	lsls	r3, r2
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002cc6:	492f      	ldr	r1, [pc, #188]	; (8002d84 <HAL_GPIO_Init+0x2bc>)
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	089b      	lsrs	r3, r3, #2
 8002ccc:	3302      	adds	r3, #2
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d006      	beq.n	8002cee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ce0:	4b2d      	ldr	r3, [pc, #180]	; (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	492c      	ldr	r1, [pc, #176]	; (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	608b      	str	r3, [r1, #8]
 8002cec:	e006      	b.n	8002cfc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002cee:	4b2a      	ldr	r3, [pc, #168]	; (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	4928      	ldr	r1, [pc, #160]	; (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d006      	beq.n	8002d16 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d08:	4b23      	ldr	r3, [pc, #140]	; (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	4922      	ldr	r1, [pc, #136]	; (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	60cb      	str	r3, [r1, #12]
 8002d14:	e006      	b.n	8002d24 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d16:	4b20      	ldr	r3, [pc, #128]	; (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	491e      	ldr	r1, [pc, #120]	; (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d006      	beq.n	8002d3e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d30:	4b19      	ldr	r3, [pc, #100]	; (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	4918      	ldr	r1, [pc, #96]	; (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	604b      	str	r3, [r1, #4]
 8002d3c:	e006      	b.n	8002d4c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d3e:	4b16      	ldr	r3, [pc, #88]	; (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	43db      	mvns	r3, r3
 8002d46:	4914      	ldr	r1, [pc, #80]	; (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002d48:	4013      	ands	r3, r2
 8002d4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d021      	beq.n	8002d9c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d58:	4b0f      	ldr	r3, [pc, #60]	; (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	490e      	ldr	r1, [pc, #56]	; (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	600b      	str	r3, [r1, #0]
 8002d64:	e021      	b.n	8002daa <HAL_GPIO_Init+0x2e2>
 8002d66:	bf00      	nop
 8002d68:	10320000 	.word	0x10320000
 8002d6c:	10310000 	.word	0x10310000
 8002d70:	10220000 	.word	0x10220000
 8002d74:	10210000 	.word	0x10210000
 8002d78:	10120000 	.word	0x10120000
 8002d7c:	10110000 	.word	0x10110000
 8002d80:	40021000 	.word	0x40021000
 8002d84:	40010000 	.word	0x40010000
 8002d88:	40010800 	.word	0x40010800
 8002d8c:	40010c00 	.word	0x40010c00
 8002d90:	40011000 	.word	0x40011000
 8002d94:	40011400 	.word	0x40011400
 8002d98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d9c:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <HAL_GPIO_Init+0x304>)
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	43db      	mvns	r3, r3
 8002da4:	4909      	ldr	r1, [pc, #36]	; (8002dcc <HAL_GPIO_Init+0x304>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	3301      	adds	r3, #1
 8002dae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f47f ae8e 	bne.w	8002adc <HAL_GPIO_Init+0x14>
  }
}
 8002dc0:	bf00      	nop
 8002dc2:	bf00      	nop
 8002dc4:	372c      	adds	r7, #44	; 0x2c
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr
 8002dcc:	40010400 	.word	0x40010400

08002dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	807b      	strh	r3, [r7, #2]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002de0:	787b      	ldrb	r3, [r7, #1]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002de6:	887a      	ldrh	r2, [r7, #2]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002dec:	e003      	b.n	8002df6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002dee:	887b      	ldrh	r3, [r7, #2]
 8002df0:	041a      	lsls	r2, r3, #16
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	611a      	str	r2, [r3, #16]
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr

08002e00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e12b      	b.n	800306a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d106      	bne.n	8002e2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7ff fab6 	bl	8002398 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2224      	movs	r2, #36	; 0x24
 8002e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 0201 	bic.w	r2, r2, #1
 8002e42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e64:	f001 f960 	bl	8004128 <HAL_RCC_GetPCLK1Freq>
 8002e68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	4a81      	ldr	r2, [pc, #516]	; (8003074 <HAL_I2C_Init+0x274>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d807      	bhi.n	8002e84 <HAL_I2C_Init+0x84>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4a80      	ldr	r2, [pc, #512]	; (8003078 <HAL_I2C_Init+0x278>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	bf94      	ite	ls
 8002e7c:	2301      	movls	r3, #1
 8002e7e:	2300      	movhi	r3, #0
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	e006      	b.n	8002e92 <HAL_I2C_Init+0x92>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4a7d      	ldr	r2, [pc, #500]	; (800307c <HAL_I2C_Init+0x27c>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	bf94      	ite	ls
 8002e8c:	2301      	movls	r3, #1
 8002e8e:	2300      	movhi	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e0e7      	b.n	800306a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	4a78      	ldr	r2, [pc, #480]	; (8003080 <HAL_I2C_Init+0x280>)
 8002e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea2:	0c9b      	lsrs	r3, r3, #18
 8002ea4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	4a6a      	ldr	r2, [pc, #424]	; (8003074 <HAL_I2C_Init+0x274>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d802      	bhi.n	8002ed4 <HAL_I2C_Init+0xd4>
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	e009      	b.n	8002ee8 <HAL_I2C_Init+0xe8>
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002eda:	fb02 f303 	mul.w	r3, r2, r3
 8002ede:	4a69      	ldr	r2, [pc, #420]	; (8003084 <HAL_I2C_Init+0x284>)
 8002ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee4:	099b      	lsrs	r3, r3, #6
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	6812      	ldr	r2, [r2, #0]
 8002eec:	430b      	orrs	r3, r1
 8002eee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002efa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	495c      	ldr	r1, [pc, #368]	; (8003074 <HAL_I2C_Init+0x274>)
 8002f04:	428b      	cmp	r3, r1
 8002f06:	d819      	bhi.n	8002f3c <HAL_I2C_Init+0x13c>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	1e59      	subs	r1, r3, #1
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f16:	1c59      	adds	r1, r3, #1
 8002f18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f1c:	400b      	ands	r3, r1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <HAL_I2C_Init+0x138>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	1e59      	subs	r1, r3, #1
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f30:	3301      	adds	r3, #1
 8002f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f36:	e051      	b.n	8002fdc <HAL_I2C_Init+0x1dc>
 8002f38:	2304      	movs	r3, #4
 8002f3a:	e04f      	b.n	8002fdc <HAL_I2C_Init+0x1dc>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d111      	bne.n	8002f68 <HAL_I2C_Init+0x168>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	1e58      	subs	r0, r3, #1
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6859      	ldr	r1, [r3, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	440b      	add	r3, r1
 8002f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f56:	3301      	adds	r3, #1
 8002f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	bf0c      	ite	eq
 8002f60:	2301      	moveq	r3, #1
 8002f62:	2300      	movne	r3, #0
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	e012      	b.n	8002f8e <HAL_I2C_Init+0x18e>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	1e58      	subs	r0, r3, #1
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6859      	ldr	r1, [r3, #4]
 8002f70:	460b      	mov	r3, r1
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	0099      	lsls	r1, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f7e:	3301      	adds	r3, #1
 8002f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	bf0c      	ite	eq
 8002f88:	2301      	moveq	r3, #1
 8002f8a:	2300      	movne	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <HAL_I2C_Init+0x196>
 8002f92:	2301      	movs	r3, #1
 8002f94:	e022      	b.n	8002fdc <HAL_I2C_Init+0x1dc>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10e      	bne.n	8002fbc <HAL_I2C_Init+0x1bc>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	1e58      	subs	r0, r3, #1
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6859      	ldr	r1, [r3, #4]
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	440b      	add	r3, r1
 8002fac:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fba:	e00f      	b.n	8002fdc <HAL_I2C_Init+0x1dc>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	1e58      	subs	r0, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6859      	ldr	r1, [r3, #4]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	0099      	lsls	r1, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	6809      	ldr	r1, [r1, #0]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69da      	ldr	r2, [r3, #28]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800300a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6911      	ldr	r1, [r2, #16]
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	68d2      	ldr	r2, [r2, #12]
 8003016:	4311      	orrs	r1, r2
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6812      	ldr	r2, [r2, #0]
 800301c:	430b      	orrs	r3, r1
 800301e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	695a      	ldr	r2, [r3, #20]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f042 0201 	orr.w	r2, r2, #1
 800304a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2220      	movs	r2, #32
 8003056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	000186a0 	.word	0x000186a0
 8003078:	001e847f 	.word	0x001e847f
 800307c:	003d08ff 	.word	0x003d08ff
 8003080:	431bde83 	.word	0x431bde83
 8003084:	10624dd3 	.word	0x10624dd3

08003088 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b088      	sub	sp, #32
 800308c:	af02      	add	r7, sp, #8
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	607a      	str	r2, [r7, #4]
 8003092:	461a      	mov	r2, r3
 8003094:	460b      	mov	r3, r1
 8003096:	817b      	strh	r3, [r7, #10]
 8003098:	4613      	mov	r3, r2
 800309a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800309c:	f7ff fb26 	bl	80026ec <HAL_GetTick>
 80030a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b20      	cmp	r3, #32
 80030ac:	f040 80e0 	bne.w	8003270 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	2319      	movs	r3, #25
 80030b6:	2201      	movs	r2, #1
 80030b8:	4970      	ldr	r1, [pc, #448]	; (800327c <HAL_I2C_Master_Transmit+0x1f4>)
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 fa92 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80030c6:	2302      	movs	r3, #2
 80030c8:	e0d3      	b.n	8003272 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d101      	bne.n	80030d8 <HAL_I2C_Master_Transmit+0x50>
 80030d4:	2302      	movs	r3, #2
 80030d6:	e0cc      	b.n	8003272 <HAL_I2C_Master_Transmit+0x1ea>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d007      	beq.n	80030fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f042 0201 	orr.w	r2, r2, #1
 80030fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800310c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2221      	movs	r2, #33	; 0x21
 8003112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2210      	movs	r2, #16
 800311a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	893a      	ldrh	r2, [r7, #8]
 800312e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003134:	b29a      	uxth	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	4a50      	ldr	r2, [pc, #320]	; (8003280 <HAL_I2C_Master_Transmit+0x1f8>)
 800313e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003140:	8979      	ldrh	r1, [r7, #10]
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	6a3a      	ldr	r2, [r7, #32]
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 f9ca 	bl	80034e0 <I2C_MasterRequestWrite>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e08d      	b.n	8003272 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003156:	2300      	movs	r3, #0
 8003158:	613b      	str	r3, [r7, #16]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	613b      	str	r3, [r7, #16]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800316c:	e066      	b.n	800323c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	6a39      	ldr	r1, [r7, #32]
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 fb50 	bl	8003818 <I2C_WaitOnTXEFlagUntilTimeout>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00d      	beq.n	800319a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	2b04      	cmp	r3, #4
 8003184:	d107      	bne.n	8003196 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003194:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e06b      	b.n	8003272 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	781a      	ldrb	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031aa:	1c5a      	adds	r2, r3, #1
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	3b01      	subs	r3, #1
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d11b      	bne.n	8003210 <HAL_I2C_Master_Transmit+0x188>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d017      	beq.n	8003210 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	781a      	ldrb	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	6a39      	ldr	r1, [r7, #32]
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f000 fb47 	bl	80038a8 <I2C_WaitOnBTFFlagUntilTimeout>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00d      	beq.n	800323c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	2b04      	cmp	r3, #4
 8003226:	d107      	bne.n	8003238 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003236:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e01a      	b.n	8003272 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003240:	2b00      	cmp	r3, #0
 8003242:	d194      	bne.n	800316e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003252:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2220      	movs	r2, #32
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800326c:	2300      	movs	r3, #0
 800326e:	e000      	b.n	8003272 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003270:	2302      	movs	r3, #2
  }
}
 8003272:	4618      	mov	r0, r3
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	00100002 	.word	0x00100002
 8003280:	ffff0000 	.word	0xffff0000

08003284 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b08a      	sub	sp, #40	; 0x28
 8003288:	af02      	add	r7, sp, #8
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	607a      	str	r2, [r7, #4]
 800328e:	603b      	str	r3, [r7, #0]
 8003290:	460b      	mov	r3, r1
 8003292:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003294:	f7ff fa2a 	bl	80026ec <HAL_GetTick>
 8003298:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800329a:	2300      	movs	r3, #0
 800329c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b20      	cmp	r3, #32
 80032a8:	f040 8111 	bne.w	80034ce <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	2319      	movs	r3, #25
 80032b2:	2201      	movs	r2, #1
 80032b4:	4988      	ldr	r1, [pc, #544]	; (80034d8 <HAL_I2C_IsDeviceReady+0x254>)
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 f994 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80032c2:	2302      	movs	r3, #2
 80032c4:	e104      	b.n	80034d0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d101      	bne.n	80032d4 <HAL_I2C_IsDeviceReady+0x50>
 80032d0:	2302      	movs	r3, #2
 80032d2:	e0fd      	b.n	80034d0 <HAL_I2C_IsDeviceReady+0x24c>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d007      	beq.n	80032fa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f042 0201 	orr.w	r2, r2, #1
 80032f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003308:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2224      	movs	r2, #36	; 0x24
 800330e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4a70      	ldr	r2, [pc, #448]	; (80034dc <HAL_I2C_IsDeviceReady+0x258>)
 800331c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800332c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	2200      	movs	r2, #0
 8003336:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 f952 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00d      	beq.n	8003362 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003350:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003354:	d103      	bne.n	800335e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f44f 7200 	mov.w	r2, #512	; 0x200
 800335c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e0b6      	b.n	80034d0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003362:	897b      	ldrh	r3, [r7, #10]
 8003364:	b2db      	uxtb	r3, r3
 8003366:	461a      	mov	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003370:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003372:	f7ff f9bb 	bl	80026ec <HAL_GetTick>
 8003376:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b02      	cmp	r3, #2
 8003384:	bf0c      	ite	eq
 8003386:	2301      	moveq	r3, #1
 8003388:	2300      	movne	r3, #0
 800338a:	b2db      	uxtb	r3, r3
 800338c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800339c:	bf0c      	ite	eq
 800339e:	2301      	moveq	r3, #1
 80033a0:	2300      	movne	r3, #0
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80033a6:	e025      	b.n	80033f4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033a8:	f7ff f9a0 	bl	80026ec <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d302      	bcc.n	80033be <HAL_I2C_IsDeviceReady+0x13a>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d103      	bne.n	80033c6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	22a0      	movs	r2, #160	; 0xa0
 80033c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	bf0c      	ite	eq
 80033d4:	2301      	moveq	r3, #1
 80033d6:	2300      	movne	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ea:	bf0c      	ite	eq
 80033ec:	2301      	moveq	r3, #1
 80033ee:	2300      	movne	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2ba0      	cmp	r3, #160	; 0xa0
 80033fe:	d005      	beq.n	800340c <HAL_I2C_IsDeviceReady+0x188>
 8003400:	7dfb      	ldrb	r3, [r7, #23]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d102      	bne.n	800340c <HAL_I2C_IsDeviceReady+0x188>
 8003406:	7dbb      	ldrb	r3, [r7, #22]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0cd      	beq.n	80033a8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2220      	movs	r2, #32
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b02      	cmp	r3, #2
 8003420:	d129      	bne.n	8003476 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003430:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003432:	2300      	movs	r3, #0
 8003434:	613b      	str	r3, [r7, #16]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	613b      	str	r3, [r7, #16]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	2319      	movs	r3, #25
 800344e:	2201      	movs	r2, #1
 8003450:	4921      	ldr	r1, [pc, #132]	; (80034d8 <HAL_I2C_IsDeviceReady+0x254>)
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 f8c6 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e036      	b.n	80034d0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2220      	movs	r2, #32
 8003466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	e02c      	b.n	80034d0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003484:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800348e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	2319      	movs	r3, #25
 8003496:	2201      	movs	r2, #1
 8003498:	490f      	ldr	r1, [pc, #60]	; (80034d8 <HAL_I2C_IsDeviceReady+0x254>)
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 f8a2 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e012      	b.n	80034d0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	3301      	adds	r3, #1
 80034ae:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	f4ff af32 	bcc.w	800331e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2220      	movs	r2, #32
 80034be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e000      	b.n	80034d0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80034ce:	2302      	movs	r3, #2
  }
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3720      	adds	r7, #32
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	00100002 	.word	0x00100002
 80034dc:	ffff0000 	.word	0xffff0000

080034e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b088      	sub	sp, #32
 80034e4:	af02      	add	r7, sp, #8
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	607a      	str	r2, [r7, #4]
 80034ea:	603b      	str	r3, [r7, #0]
 80034ec:	460b      	mov	r3, r1
 80034ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d006      	beq.n	800350a <I2C_MasterRequestWrite+0x2a>
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d003      	beq.n	800350a <I2C_MasterRequestWrite+0x2a>
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003508:	d108      	bne.n	800351c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	e00b      	b.n	8003534 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003520:	2b12      	cmp	r3, #18
 8003522:	d107      	bne.n	8003534 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003532:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f000 f84f 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00d      	beq.n	8003568 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800355a:	d103      	bne.n	8003564 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003562:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e035      	b.n	80035d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003570:	d108      	bne.n	8003584 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003572:	897b      	ldrh	r3, [r7, #10]
 8003574:	b2db      	uxtb	r3, r3
 8003576:	461a      	mov	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003580:	611a      	str	r2, [r3, #16]
 8003582:	e01b      	b.n	80035bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003584:	897b      	ldrh	r3, [r7, #10]
 8003586:	11db      	asrs	r3, r3, #7
 8003588:	b2db      	uxtb	r3, r3
 800358a:	f003 0306 	and.w	r3, r3, #6
 800358e:	b2db      	uxtb	r3, r3
 8003590:	f063 030f 	orn	r3, r3, #15
 8003594:	b2da      	uxtb	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	490e      	ldr	r1, [pc, #56]	; (80035dc <I2C_MasterRequestWrite+0xfc>)
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 f898 	bl	80036d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e010      	b.n	80035d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035b2:	897b      	ldrh	r3, [r7, #10]
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	4907      	ldr	r1, [pc, #28]	; (80035e0 <I2C_MasterRequestWrite+0x100>)
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 f888 	bl	80036d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	00010008 	.word	0x00010008
 80035e0:	00010002 	.word	0x00010002

080035e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	603b      	str	r3, [r7, #0]
 80035f0:	4613      	mov	r3, r2
 80035f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035f4:	e048      	b.n	8003688 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fc:	d044      	beq.n	8003688 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035fe:	f7ff f875 	bl	80026ec <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	429a      	cmp	r2, r3
 800360c:	d302      	bcc.n	8003614 <I2C_WaitOnFlagUntilTimeout+0x30>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d139      	bne.n	8003688 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	0c1b      	lsrs	r3, r3, #16
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b01      	cmp	r3, #1
 800361c:	d10d      	bne.n	800363a <I2C_WaitOnFlagUntilTimeout+0x56>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	43da      	mvns	r2, r3
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	4013      	ands	r3, r2
 800362a:	b29b      	uxth	r3, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	bf0c      	ite	eq
 8003630:	2301      	moveq	r3, #1
 8003632:	2300      	movne	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	461a      	mov	r2, r3
 8003638:	e00c      	b.n	8003654 <I2C_WaitOnFlagUntilTimeout+0x70>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	43da      	mvns	r2, r3
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	4013      	ands	r3, r2
 8003646:	b29b      	uxth	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	bf0c      	ite	eq
 800364c:	2301      	moveq	r3, #1
 800364e:	2300      	movne	r3, #0
 8003650:	b2db      	uxtb	r3, r3
 8003652:	461a      	mov	r2, r3
 8003654:	79fb      	ldrb	r3, [r7, #7]
 8003656:	429a      	cmp	r2, r3
 8003658:	d116      	bne.n	8003688 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	f043 0220 	orr.w	r2, r3, #32
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e023      	b.n	80036d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	0c1b      	lsrs	r3, r3, #16
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b01      	cmp	r3, #1
 8003690:	d10d      	bne.n	80036ae <I2C_WaitOnFlagUntilTimeout+0xca>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	43da      	mvns	r2, r3
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	4013      	ands	r3, r2
 800369e:	b29b      	uxth	r3, r3
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	bf0c      	ite	eq
 80036a4:	2301      	moveq	r3, #1
 80036a6:	2300      	movne	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	461a      	mov	r2, r3
 80036ac:	e00c      	b.n	80036c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	43da      	mvns	r2, r3
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	4013      	ands	r3, r2
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	bf0c      	ite	eq
 80036c0:	2301      	moveq	r3, #1
 80036c2:	2300      	movne	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	461a      	mov	r2, r3
 80036c8:	79fb      	ldrb	r3, [r7, #7]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d093      	beq.n	80035f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
 80036e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036e6:	e071      	b.n	80037cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036f6:	d123      	bne.n	8003740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003706:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003710:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	f043 0204 	orr.w	r2, r3, #4
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e067      	b.n	8003810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003746:	d041      	beq.n	80037cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003748:	f7fe ffd0 	bl	80026ec <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	429a      	cmp	r2, r3
 8003756:	d302      	bcc.n	800375e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d136      	bne.n	80037cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	0c1b      	lsrs	r3, r3, #16
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b01      	cmp	r3, #1
 8003766:	d10c      	bne.n	8003782 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	43da      	mvns	r2, r3
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	4013      	ands	r3, r2
 8003774:	b29b      	uxth	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	bf14      	ite	ne
 800377a:	2301      	movne	r3, #1
 800377c:	2300      	moveq	r3, #0
 800377e:	b2db      	uxtb	r3, r3
 8003780:	e00b      	b.n	800379a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	43da      	mvns	r2, r3
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	4013      	ands	r3, r2
 800378e:	b29b      	uxth	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	bf14      	ite	ne
 8003794:	2301      	movne	r3, #1
 8003796:	2300      	moveq	r3, #0
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d016      	beq.n	80037cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	f043 0220 	orr.w	r2, r3, #32
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e021      	b.n	8003810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	0c1b      	lsrs	r3, r3, #16
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d10c      	bne.n	80037f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	43da      	mvns	r2, r3
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	4013      	ands	r3, r2
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	bf14      	ite	ne
 80037e8:	2301      	movne	r3, #1
 80037ea:	2300      	moveq	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	e00b      	b.n	8003808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	43da      	mvns	r2, r3
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	4013      	ands	r3, r2
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	bf14      	ite	ne
 8003802:	2301      	movne	r3, #1
 8003804:	2300      	moveq	r3, #0
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	f47f af6d 	bne.w	80036e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003824:	e034      	b.n	8003890 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 f886 	bl	8003938 <I2C_IsAcknowledgeFailed>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e034      	b.n	80038a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383c:	d028      	beq.n	8003890 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800383e:	f7fe ff55 	bl	80026ec <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	429a      	cmp	r2, r3
 800384c:	d302      	bcc.n	8003854 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d11d      	bne.n	8003890 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385e:	2b80      	cmp	r3, #128	; 0x80
 8003860:	d016      	beq.n	8003890 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2220      	movs	r2, #32
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387c:	f043 0220 	orr.w	r2, r3, #32
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e007      	b.n	80038a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389a:	2b80      	cmp	r3, #128	; 0x80
 800389c:	d1c3      	bne.n	8003826 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038b4:	e034      	b.n	8003920 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 f83e 	bl	8003938 <I2C_IsAcknowledgeFailed>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e034      	b.n	8003930 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038cc:	d028      	beq.n	8003920 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ce:	f7fe ff0d 	bl	80026ec <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d302      	bcc.n	80038e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d11d      	bne.n	8003920 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	f003 0304 	and.w	r3, r3, #4
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d016      	beq.n	8003920 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	f043 0220 	orr.w	r2, r3, #32
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e007      	b.n	8003930 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	f003 0304 	and.w	r3, r3, #4
 800392a:	2b04      	cmp	r3, #4
 800392c:	d1c3      	bne.n	80038b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800394a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800394e:	d11b      	bne.n	8003988 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003958:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2220      	movs	r2, #32
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003974:	f043 0204 	orr.w	r2, r3, #4
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e000      	b.n	800398a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr

08003994 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e272      	b.n	8003e8c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 8087 	beq.w	8003ac2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039b4:	4b92      	ldr	r3, [pc, #584]	; (8003c00 <HAL_RCC_OscConfig+0x26c>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f003 030c 	and.w	r3, r3, #12
 80039bc:	2b04      	cmp	r3, #4
 80039be:	d00c      	beq.n	80039da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039c0:	4b8f      	ldr	r3, [pc, #572]	; (8003c00 <HAL_RCC_OscConfig+0x26c>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f003 030c 	and.w	r3, r3, #12
 80039c8:	2b08      	cmp	r3, #8
 80039ca:	d112      	bne.n	80039f2 <HAL_RCC_OscConfig+0x5e>
 80039cc:	4b8c      	ldr	r3, [pc, #560]	; (8003c00 <HAL_RCC_OscConfig+0x26c>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d8:	d10b      	bne.n	80039f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039da:	4b89      	ldr	r3, [pc, #548]	; (8003c00 <HAL_RCC_OscConfig+0x26c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d06c      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x12c>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d168      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e24c      	b.n	8003e8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039fa:	d106      	bne.n	8003a0a <HAL_RCC_OscConfig+0x76>
 80039fc:	4b80      	ldr	r3, [pc, #512]	; (8003c00 <HAL_RCC_OscConfig+0x26c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a7f      	ldr	r2, [pc, #508]	; (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003a02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a06:	6013      	str	r3, [r2, #0]
 8003a08:	e02e      	b.n	8003a68 <HAL_RCC_OscConfig+0xd4>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10c      	bne.n	8003a2c <HAL_RCC_OscConfig+0x98>
 8003a12:	4b7b      	ldr	r3, [pc, #492]	; (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a7a      	ldr	r2, [pc, #488]	; (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003a18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	4b78      	ldr	r3, [pc, #480]	; (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a77      	ldr	r2, [pc, #476]	; (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003a24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	e01d      	b.n	8003a68 <HAL_RCC_OscConfig+0xd4>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a34:	d10c      	bne.n	8003a50 <HAL_RCC_OscConfig+0xbc>
 8003a36:	4b72      	ldr	r3, [pc, #456]	; (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a71      	ldr	r2, [pc, #452]	; (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a40:	6013      	str	r3, [r2, #0]
 8003a42:	4b6f      	ldr	r3, [pc, #444]	; (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a6e      	ldr	r2, [pc, #440]	; (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	e00b      	b.n	8003a68 <HAL_RCC_OscConfig+0xd4>
 8003a50:	4b6b      	ldr	r3, [pc, #428]	; (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a6a      	ldr	r2, [pc, #424]	; (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a5a:	6013      	str	r3, [r2, #0]
 8003a5c:	4b68      	ldr	r3, [pc, #416]	; (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a67      	ldr	r2, [pc, #412]	; (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d013      	beq.n	8003a98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a70:	f7fe fe3c 	bl	80026ec <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a78:	f7fe fe38 	bl	80026ec <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b64      	cmp	r3, #100	; 0x64
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e200      	b.n	8003e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a8a:	4b5d      	ldr	r3, [pc, #372]	; (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0f0      	beq.n	8003a78 <HAL_RCC_OscConfig+0xe4>
 8003a96:	e014      	b.n	8003ac2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a98:	f7fe fe28 	bl	80026ec <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aa0:	f7fe fe24 	bl	80026ec <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b64      	cmp	r3, #100	; 0x64
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e1ec      	b.n	8003e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ab2:	4b53      	ldr	r3, [pc, #332]	; (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1f0      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x10c>
 8003abe:	e000      	b.n	8003ac2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d063      	beq.n	8003b96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ace:	4b4c      	ldr	r3, [pc, #304]	; (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f003 030c 	and.w	r3, r3, #12
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00b      	beq.n	8003af2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ada:	4b49      	ldr	r3, [pc, #292]	; (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f003 030c 	and.w	r3, r3, #12
 8003ae2:	2b08      	cmp	r3, #8
 8003ae4:	d11c      	bne.n	8003b20 <HAL_RCC_OscConfig+0x18c>
 8003ae6:	4b46      	ldr	r3, [pc, #280]	; (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d116      	bne.n	8003b20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003af2:	4b43      	ldr	r3, [pc, #268]	; (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d005      	beq.n	8003b0a <HAL_RCC_OscConfig+0x176>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d001      	beq.n	8003b0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e1c0      	b.n	8003e8c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b0a:	4b3d      	ldr	r3, [pc, #244]	; (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	4939      	ldr	r1, [pc, #228]	; (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b1e:	e03a      	b.n	8003b96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d020      	beq.n	8003b6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b28:	4b36      	ldr	r3, [pc, #216]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2e:	f7fe fddd 	bl	80026ec <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b36:	f7fe fdd9 	bl	80026ec <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e1a1      	b.n	8003e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b48:	4b2d      	ldr	r3, [pc, #180]	; (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0f0      	beq.n	8003b36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b54:	4b2a      	ldr	r3, [pc, #168]	; (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	4927      	ldr	r1, [pc, #156]	; (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	600b      	str	r3, [r1, #0]
 8003b68:	e015      	b.n	8003b96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b6a:	4b26      	ldr	r3, [pc, #152]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b70:	f7fe fdbc 	bl	80026ec <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b78:	f7fe fdb8 	bl	80026ec <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e180      	b.n	8003e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b8a:	4b1d      	ldr	r3, [pc, #116]	; (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1f0      	bne.n	8003b78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0308 	and.w	r3, r3, #8
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d03a      	beq.n	8003c18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d019      	beq.n	8003bde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003baa:	4b17      	ldr	r3, [pc, #92]	; (8003c08 <HAL_RCC_OscConfig+0x274>)
 8003bac:	2201      	movs	r2, #1
 8003bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb0:	f7fe fd9c 	bl	80026ec <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bb8:	f7fe fd98 	bl	80026ec <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e160      	b.n	8003e8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bca:	4b0d      	ldr	r3, [pc, #52]	; (8003c00 <HAL_RCC_OscConfig+0x26c>)
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0f0      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003bd6:	2001      	movs	r0, #1
 8003bd8:	f000 face 	bl	8004178 <RCC_Delay>
 8003bdc:	e01c      	b.n	8003c18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bde:	4b0a      	ldr	r3, [pc, #40]	; (8003c08 <HAL_RCC_OscConfig+0x274>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003be4:	f7fe fd82 	bl	80026ec <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bea:	e00f      	b.n	8003c0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bec:	f7fe fd7e 	bl	80026ec <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d908      	bls.n	8003c0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e146      	b.n	8003e8c <HAL_RCC_OscConfig+0x4f8>
 8003bfe:	bf00      	nop
 8003c00:	40021000 	.word	0x40021000
 8003c04:	42420000 	.word	0x42420000
 8003c08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c0c:	4b92      	ldr	r3, [pc, #584]	; (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1e9      	bne.n	8003bec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 80a6 	beq.w	8003d72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c26:	2300      	movs	r3, #0
 8003c28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c2a:	4b8b      	ldr	r3, [pc, #556]	; (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10d      	bne.n	8003c52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c36:	4b88      	ldr	r3, [pc, #544]	; (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	4a87      	ldr	r2, [pc, #540]	; (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c40:	61d3      	str	r3, [r2, #28]
 8003c42:	4b85      	ldr	r3, [pc, #532]	; (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c4a:	60bb      	str	r3, [r7, #8]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c52:	4b82      	ldr	r3, [pc, #520]	; (8003e5c <HAL_RCC_OscConfig+0x4c8>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d118      	bne.n	8003c90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c5e:	4b7f      	ldr	r3, [pc, #508]	; (8003e5c <HAL_RCC_OscConfig+0x4c8>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a7e      	ldr	r2, [pc, #504]	; (8003e5c <HAL_RCC_OscConfig+0x4c8>)
 8003c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c6a:	f7fe fd3f 	bl	80026ec <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c70:	e008      	b.n	8003c84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c72:	f7fe fd3b 	bl	80026ec <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b64      	cmp	r3, #100	; 0x64
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e103      	b.n	8003e8c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c84:	4b75      	ldr	r3, [pc, #468]	; (8003e5c <HAL_RCC_OscConfig+0x4c8>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d0f0      	beq.n	8003c72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d106      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x312>
 8003c98:	4b6f      	ldr	r3, [pc, #444]	; (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	4a6e      	ldr	r2, [pc, #440]	; (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003c9e:	f043 0301 	orr.w	r3, r3, #1
 8003ca2:	6213      	str	r3, [r2, #32]
 8003ca4:	e02d      	b.n	8003d02 <HAL_RCC_OscConfig+0x36e>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10c      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x334>
 8003cae:	4b6a      	ldr	r3, [pc, #424]	; (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	4a69      	ldr	r2, [pc, #420]	; (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003cb4:	f023 0301 	bic.w	r3, r3, #1
 8003cb8:	6213      	str	r3, [r2, #32]
 8003cba:	4b67      	ldr	r3, [pc, #412]	; (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	4a66      	ldr	r2, [pc, #408]	; (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003cc0:	f023 0304 	bic.w	r3, r3, #4
 8003cc4:	6213      	str	r3, [r2, #32]
 8003cc6:	e01c      	b.n	8003d02 <HAL_RCC_OscConfig+0x36e>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	2b05      	cmp	r3, #5
 8003cce:	d10c      	bne.n	8003cea <HAL_RCC_OscConfig+0x356>
 8003cd0:	4b61      	ldr	r3, [pc, #388]	; (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	4a60      	ldr	r2, [pc, #384]	; (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003cd6:	f043 0304 	orr.w	r3, r3, #4
 8003cda:	6213      	str	r3, [r2, #32]
 8003cdc:	4b5e      	ldr	r3, [pc, #376]	; (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	4a5d      	ldr	r2, [pc, #372]	; (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003ce2:	f043 0301 	orr.w	r3, r3, #1
 8003ce6:	6213      	str	r3, [r2, #32]
 8003ce8:	e00b      	b.n	8003d02 <HAL_RCC_OscConfig+0x36e>
 8003cea:	4b5b      	ldr	r3, [pc, #364]	; (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	4a5a      	ldr	r2, [pc, #360]	; (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003cf0:	f023 0301 	bic.w	r3, r3, #1
 8003cf4:	6213      	str	r3, [r2, #32]
 8003cf6:	4b58      	ldr	r3, [pc, #352]	; (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	4a57      	ldr	r2, [pc, #348]	; (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003cfc:	f023 0304 	bic.w	r3, r3, #4
 8003d00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d015      	beq.n	8003d36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d0a:	f7fe fcef 	bl	80026ec <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d10:	e00a      	b.n	8003d28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d12:	f7fe fceb 	bl	80026ec <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e0b1      	b.n	8003e8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d28:	4b4b      	ldr	r3, [pc, #300]	; (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0ee      	beq.n	8003d12 <HAL_RCC_OscConfig+0x37e>
 8003d34:	e014      	b.n	8003d60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d36:	f7fe fcd9 	bl	80026ec <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d3c:	e00a      	b.n	8003d54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d3e:	f7fe fcd5 	bl	80026ec <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e09b      	b.n	8003e8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d54:	4b40      	ldr	r3, [pc, #256]	; (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1ee      	bne.n	8003d3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d60:	7dfb      	ldrb	r3, [r7, #23]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d105      	bne.n	8003d72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d66:	4b3c      	ldr	r3, [pc, #240]	; (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	4a3b      	ldr	r2, [pc, #236]	; (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003d6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f000 8087 	beq.w	8003e8a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d7c:	4b36      	ldr	r3, [pc, #216]	; (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f003 030c 	and.w	r3, r3, #12
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	d061      	beq.n	8003e4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d146      	bne.n	8003e1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d90:	4b33      	ldr	r3, [pc, #204]	; (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d96:	f7fe fca9 	bl	80026ec <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d9c:	e008      	b.n	8003db0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d9e:	f7fe fca5 	bl	80026ec <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e06d      	b.n	8003e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003db0:	4b29      	ldr	r3, [pc, #164]	; (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1f0      	bne.n	8003d9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dc4:	d108      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003dc6:	4b24      	ldr	r3, [pc, #144]	; (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	4921      	ldr	r1, [pc, #132]	; (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dd8:	4b1f      	ldr	r3, [pc, #124]	; (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a19      	ldr	r1, [r3, #32]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	430b      	orrs	r3, r1
 8003dea:	491b      	ldr	r1, [pc, #108]	; (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003df0:	4b1b      	ldr	r3, [pc, #108]	; (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003df2:	2201      	movs	r2, #1
 8003df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df6:	f7fe fc79 	bl	80026ec <HAL_GetTick>
 8003dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dfc:	e008      	b.n	8003e10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dfe:	f7fe fc75 	bl	80026ec <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e03d      	b.n	8003e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e10:	4b11      	ldr	r3, [pc, #68]	; (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d0f0      	beq.n	8003dfe <HAL_RCC_OscConfig+0x46a>
 8003e1c:	e035      	b.n	8003e8a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e1e:	4b10      	ldr	r3, [pc, #64]	; (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e24:	f7fe fc62 	bl	80026ec <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e2c:	f7fe fc5e 	bl	80026ec <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e026      	b.n	8003e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e3e:	4b06      	ldr	r3, [pc, #24]	; (8003e58 <HAL_RCC_OscConfig+0x4c4>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1f0      	bne.n	8003e2c <HAL_RCC_OscConfig+0x498>
 8003e4a:	e01e      	b.n	8003e8a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	69db      	ldr	r3, [r3, #28]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d107      	bne.n	8003e64 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e019      	b.n	8003e8c <HAL_RCC_OscConfig+0x4f8>
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	40007000 	.word	0x40007000
 8003e60:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e64:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <HAL_RCC_OscConfig+0x500>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d106      	bne.n	8003e86 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d001      	beq.n	8003e8a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e000      	b.n	8003e8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3718      	adds	r7, #24
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	40021000 	.word	0x40021000

08003e98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e0d0      	b.n	800404e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003eac:	4b6a      	ldr	r3, [pc, #424]	; (8004058 <HAL_RCC_ClockConfig+0x1c0>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d910      	bls.n	8003edc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eba:	4b67      	ldr	r3, [pc, #412]	; (8004058 <HAL_RCC_ClockConfig+0x1c0>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f023 0207 	bic.w	r2, r3, #7
 8003ec2:	4965      	ldr	r1, [pc, #404]	; (8004058 <HAL_RCC_ClockConfig+0x1c0>)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eca:	4b63      	ldr	r3, [pc, #396]	; (8004058 <HAL_RCC_ClockConfig+0x1c0>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d001      	beq.n	8003edc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e0b8      	b.n	800404e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d020      	beq.n	8003f2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d005      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ef4:	4b59      	ldr	r3, [pc, #356]	; (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	4a58      	ldr	r2, [pc, #352]	; (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8003efa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003efe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d005      	beq.n	8003f18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f0c:	4b53      	ldr	r3, [pc, #332]	; (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	4a52      	ldr	r2, [pc, #328]	; (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8003f12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003f16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f18:	4b50      	ldr	r3, [pc, #320]	; (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	494d      	ldr	r1, [pc, #308]	; (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d040      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d107      	bne.n	8003f4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f3e:	4b47      	ldr	r3, [pc, #284]	; (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d115      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e07f      	b.n	800404e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d107      	bne.n	8003f66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f56:	4b41      	ldr	r3, [pc, #260]	; (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d109      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e073      	b.n	800404e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f66:	4b3d      	ldr	r3, [pc, #244]	; (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e06b      	b.n	800404e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f76:	4b39      	ldr	r3, [pc, #228]	; (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f023 0203 	bic.w	r2, r3, #3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	4936      	ldr	r1, [pc, #216]	; (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f88:	f7fe fbb0 	bl	80026ec <HAL_GetTick>
 8003f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f8e:	e00a      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f90:	f7fe fbac 	bl	80026ec <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e053      	b.n	800404e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fa6:	4b2d      	ldr	r3, [pc, #180]	; (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f003 020c 	and.w	r2, r3, #12
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d1eb      	bne.n	8003f90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fb8:	4b27      	ldr	r3, [pc, #156]	; (8004058 <HAL_RCC_ClockConfig+0x1c0>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d210      	bcs.n	8003fe8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc6:	4b24      	ldr	r3, [pc, #144]	; (8004058 <HAL_RCC_ClockConfig+0x1c0>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f023 0207 	bic.w	r2, r3, #7
 8003fce:	4922      	ldr	r1, [pc, #136]	; (8004058 <HAL_RCC_ClockConfig+0x1c0>)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd6:	4b20      	ldr	r3, [pc, #128]	; (8004058 <HAL_RCC_ClockConfig+0x1c0>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d001      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e032      	b.n	800404e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d008      	beq.n	8004006 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ff4:	4b19      	ldr	r3, [pc, #100]	; (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	4916      	ldr	r1, [pc, #88]	; (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8004002:	4313      	orrs	r3, r2
 8004004:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0308 	and.w	r3, r3, #8
 800400e:	2b00      	cmp	r3, #0
 8004010:	d009      	beq.n	8004026 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004012:	4b12      	ldr	r3, [pc, #72]	; (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	490e      	ldr	r1, [pc, #56]	; (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8004022:	4313      	orrs	r3, r2
 8004024:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004026:	f000 f821 	bl	800406c <HAL_RCC_GetSysClockFreq>
 800402a:	4602      	mov	r2, r0
 800402c:	4b0b      	ldr	r3, [pc, #44]	; (800405c <HAL_RCC_ClockConfig+0x1c4>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	091b      	lsrs	r3, r3, #4
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	490a      	ldr	r1, [pc, #40]	; (8004060 <HAL_RCC_ClockConfig+0x1c8>)
 8004038:	5ccb      	ldrb	r3, [r1, r3]
 800403a:	fa22 f303 	lsr.w	r3, r2, r3
 800403e:	4a09      	ldr	r2, [pc, #36]	; (8004064 <HAL_RCC_ClockConfig+0x1cc>)
 8004040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004042:	4b09      	ldr	r3, [pc, #36]	; (8004068 <HAL_RCC_ClockConfig+0x1d0>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f7fe fb0e 	bl	8002668 <HAL_InitTick>

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	40022000 	.word	0x40022000
 800405c:	40021000 	.word	0x40021000
 8004060:	08007ff4 	.word	0x08007ff4
 8004064:	20000560 	.word	0x20000560
 8004068:	20000564 	.word	0x20000564

0800406c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800406c:	b480      	push	{r7}
 800406e:	b087      	sub	sp, #28
 8004070:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004072:	2300      	movs	r3, #0
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	2300      	movs	r3, #0
 8004078:	60bb      	str	r3, [r7, #8]
 800407a:	2300      	movs	r3, #0
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	2300      	movs	r3, #0
 8004080:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004082:	2300      	movs	r3, #0
 8004084:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004086:	4b1e      	ldr	r3, [pc, #120]	; (8004100 <HAL_RCC_GetSysClockFreq+0x94>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f003 030c 	and.w	r3, r3, #12
 8004092:	2b04      	cmp	r3, #4
 8004094:	d002      	beq.n	800409c <HAL_RCC_GetSysClockFreq+0x30>
 8004096:	2b08      	cmp	r3, #8
 8004098:	d003      	beq.n	80040a2 <HAL_RCC_GetSysClockFreq+0x36>
 800409a:	e027      	b.n	80040ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800409c:	4b19      	ldr	r3, [pc, #100]	; (8004104 <HAL_RCC_GetSysClockFreq+0x98>)
 800409e:	613b      	str	r3, [r7, #16]
      break;
 80040a0:	e027      	b.n	80040f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	0c9b      	lsrs	r3, r3, #18
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	4a17      	ldr	r2, [pc, #92]	; (8004108 <HAL_RCC_GetSysClockFreq+0x9c>)
 80040ac:	5cd3      	ldrb	r3, [r2, r3]
 80040ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d010      	beq.n	80040dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040ba:	4b11      	ldr	r3, [pc, #68]	; (8004100 <HAL_RCC_GetSysClockFreq+0x94>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	0c5b      	lsrs	r3, r3, #17
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	4a11      	ldr	r2, [pc, #68]	; (800410c <HAL_RCC_GetSysClockFreq+0xa0>)
 80040c6:	5cd3      	ldrb	r3, [r2, r3]
 80040c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a0d      	ldr	r2, [pc, #52]	; (8004104 <HAL_RCC_GetSysClockFreq+0x98>)
 80040ce:	fb03 f202 	mul.w	r2, r3, r2
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d8:	617b      	str	r3, [r7, #20]
 80040da:	e004      	b.n	80040e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a0c      	ldr	r2, [pc, #48]	; (8004110 <HAL_RCC_GetSysClockFreq+0xa4>)
 80040e0:	fb02 f303 	mul.w	r3, r2, r3
 80040e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	613b      	str	r3, [r7, #16]
      break;
 80040ea:	e002      	b.n	80040f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040ec:	4b05      	ldr	r3, [pc, #20]	; (8004104 <HAL_RCC_GetSysClockFreq+0x98>)
 80040ee:	613b      	str	r3, [r7, #16]
      break;
 80040f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040f2:	693b      	ldr	r3, [r7, #16]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	371c      	adds	r7, #28
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bc80      	pop	{r7}
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40021000 	.word	0x40021000
 8004104:	007a1200 	.word	0x007a1200
 8004108:	0800800c 	.word	0x0800800c
 800410c:	0800801c 	.word	0x0800801c
 8004110:	003d0900 	.word	0x003d0900

08004114 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004118:	4b02      	ldr	r3, [pc, #8]	; (8004124 <HAL_RCC_GetHCLKFreq+0x10>)
 800411a:	681b      	ldr	r3, [r3, #0]
}
 800411c:	4618      	mov	r0, r3
 800411e:	46bd      	mov	sp, r7
 8004120:	bc80      	pop	{r7}
 8004122:	4770      	bx	lr
 8004124:	20000560 	.word	0x20000560

08004128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800412c:	f7ff fff2 	bl	8004114 <HAL_RCC_GetHCLKFreq>
 8004130:	4602      	mov	r2, r0
 8004132:	4b05      	ldr	r3, [pc, #20]	; (8004148 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	0a1b      	lsrs	r3, r3, #8
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	4903      	ldr	r1, [pc, #12]	; (800414c <HAL_RCC_GetPCLK1Freq+0x24>)
 800413e:	5ccb      	ldrb	r3, [r1, r3]
 8004140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004144:	4618      	mov	r0, r3
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40021000 	.word	0x40021000
 800414c:	08008004 	.word	0x08008004

08004150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004154:	f7ff ffde 	bl	8004114 <HAL_RCC_GetHCLKFreq>
 8004158:	4602      	mov	r2, r0
 800415a:	4b05      	ldr	r3, [pc, #20]	; (8004170 <HAL_RCC_GetPCLK2Freq+0x20>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	0adb      	lsrs	r3, r3, #11
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	4903      	ldr	r1, [pc, #12]	; (8004174 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004166:	5ccb      	ldrb	r3, [r1, r3]
 8004168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800416c:	4618      	mov	r0, r3
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40021000 	.word	0x40021000
 8004174:	08008004 	.word	0x08008004

08004178 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004180:	4b0a      	ldr	r3, [pc, #40]	; (80041ac <RCC_Delay+0x34>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a0a      	ldr	r2, [pc, #40]	; (80041b0 <RCC_Delay+0x38>)
 8004186:	fba2 2303 	umull	r2, r3, r2, r3
 800418a:	0a5b      	lsrs	r3, r3, #9
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	fb02 f303 	mul.w	r3, r2, r3
 8004192:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004194:	bf00      	nop
  }
  while (Delay --);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	1e5a      	subs	r2, r3, #1
 800419a:	60fa      	str	r2, [r7, #12]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1f9      	bne.n	8004194 <RCC_Delay+0x1c>
}
 80041a0:	bf00      	nop
 80041a2:	bf00      	nop
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bc80      	pop	{r7}
 80041aa:	4770      	bx	lr
 80041ac:	20000560 	.word	0x20000560
 80041b0:	10624dd3 	.word	0x10624dd3

080041b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e076      	b.n	80042b4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d108      	bne.n	80041e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041d6:	d009      	beq.n	80041ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	61da      	str	r2, [r3, #28]
 80041de:	e005      	b.n	80041ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d106      	bne.n	800420c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7fe f904 	bl	8002414 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004222:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004234:	431a      	orrs	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	431a      	orrs	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	431a      	orrs	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800425c:	431a      	orrs	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004270:	ea42 0103 	orr.w	r1, r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004278:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	430a      	orrs	r2, r1
 8004282:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	0c1a      	lsrs	r2, r3, #16
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f002 0204 	and.w	r2, r2, #4
 8004292:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	69da      	ldr	r2, [r3, #28]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b088      	sub	sp, #32
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	603b      	str	r3, [r7, #0]
 80042c8:	4613      	mov	r3, r2
 80042ca:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042cc:	f7fe fa0e 	bl	80026ec <HAL_GetTick>
 80042d0:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80042d2:	88fb      	ldrh	r3, [r7, #6]
 80042d4:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d001      	beq.n	80042e6 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80042e2:	2302      	movs	r3, #2
 80042e4:	e12a      	b.n	800453c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d002      	beq.n	80042f2 <HAL_SPI_Transmit+0x36>
 80042ec:	88fb      	ldrh	r3, [r7, #6]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e122      	b.n	800453c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d101      	bne.n	8004304 <HAL_SPI_Transmit+0x48>
 8004300:	2302      	movs	r3, #2
 8004302:	e11b      	b.n	800453c <HAL_SPI_Transmit+0x280>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2203      	movs	r2, #3
 8004310:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	88fa      	ldrh	r2, [r7, #6]
 8004324:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	88fa      	ldrh	r2, [r7, #6]
 800432a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004352:	d10f      	bne.n	8004374 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004362:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004372:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437e:	2b40      	cmp	r3, #64	; 0x40
 8004380:	d007      	beq.n	8004392 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004390:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800439a:	d152      	bne.n	8004442 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d002      	beq.n	80043aa <HAL_SPI_Transmit+0xee>
 80043a4:	8b7b      	ldrh	r3, [r7, #26]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d145      	bne.n	8004436 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ae:	881a      	ldrh	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ba:	1c9a      	adds	r2, r3, #2
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	3b01      	subs	r3, #1
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80043ce:	e032      	b.n	8004436 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d112      	bne.n	8004404 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e2:	881a      	ldrh	r2, [r3, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ee:	1c9a      	adds	r2, r3, #2
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	3b01      	subs	r3, #1
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	86da      	strh	r2, [r3, #54]	; 0x36
 8004402:	e018      	b.n	8004436 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004404:	f7fe f972 	bl	80026ec <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	429a      	cmp	r2, r3
 8004412:	d803      	bhi.n	800441c <HAL_SPI_Transmit+0x160>
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441a:	d102      	bne.n	8004422 <HAL_SPI_Transmit+0x166>
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d109      	bne.n	8004436 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e082      	b.n	800453c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800443a:	b29b      	uxth	r3, r3
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1c7      	bne.n	80043d0 <HAL_SPI_Transmit+0x114>
 8004440:	e053      	b.n	80044ea <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d002      	beq.n	8004450 <HAL_SPI_Transmit+0x194>
 800444a:	8b7b      	ldrh	r3, [r7, #26]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d147      	bne.n	80044e0 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	330c      	adds	r3, #12
 800445a:	7812      	ldrb	r2, [r2, #0]
 800445c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004462:	1c5a      	adds	r2, r3, #1
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800446c:	b29b      	uxth	r3, r3
 800446e:	3b01      	subs	r3, #1
 8004470:	b29a      	uxth	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004476:	e033      	b.n	80044e0 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b02      	cmp	r3, #2
 8004484:	d113      	bne.n	80044ae <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	330c      	adds	r3, #12
 8004490:	7812      	ldrb	r2, [r2, #0]
 8004492:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004498:	1c5a      	adds	r2, r3, #1
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	3b01      	subs	r3, #1
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80044ac:	e018      	b.n	80044e0 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044ae:	f7fe f91d 	bl	80026ec <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d803      	bhi.n	80044c6 <HAL_SPI_Transmit+0x20a>
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c4:	d102      	bne.n	80044cc <HAL_SPI_Transmit+0x210>
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d109      	bne.n	80044e0 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e02d      	b.n	800453c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1c6      	bne.n	8004478 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044ea:	69fa      	ldr	r2, [r7, #28]
 80044ec:	6839      	ldr	r1, [r7, #0]
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 fa5a 	bl	80049a8 <SPI_EndRxTxTransaction>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d002      	beq.n	8004500 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2220      	movs	r2, #32
 80044fe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10a      	bne.n	800451e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004508:	2300      	movs	r3, #0
 800450a:	617b      	str	r3, [r7, #20]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	617b      	str	r3, [r7, #20]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	617b      	str	r3, [r7, #20]
 800451c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e000      	b.n	800453c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800453a:	2300      	movs	r3, #0
  }
}
 800453c:	4618      	mov	r0, r3
 800453e:	3720      	adds	r7, #32
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b08a      	sub	sp, #40	; 0x28
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
 8004550:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004552:	2301      	movs	r3, #1
 8004554:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004556:	f7fe f8c9 	bl	80026ec <HAL_GetTick>
 800455a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004562:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800456a:	887b      	ldrh	r3, [r7, #2]
 800456c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800456e:	7ffb      	ldrb	r3, [r7, #31]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d00c      	beq.n	800458e <HAL_SPI_TransmitReceive+0x4a>
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800457a:	d106      	bne.n	800458a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d102      	bne.n	800458a <HAL_SPI_TransmitReceive+0x46>
 8004584:	7ffb      	ldrb	r3, [r7, #31]
 8004586:	2b04      	cmp	r3, #4
 8004588:	d001      	beq.n	800458e <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800458a:	2302      	movs	r3, #2
 800458c:	e17f      	b.n	800488e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d005      	beq.n	80045a0 <HAL_SPI_TransmitReceive+0x5c>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d002      	beq.n	80045a0 <HAL_SPI_TransmitReceive+0x5c>
 800459a:	887b      	ldrh	r3, [r7, #2]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e174      	b.n	800488e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d101      	bne.n	80045b2 <HAL_SPI_TransmitReceive+0x6e>
 80045ae:	2302      	movs	r3, #2
 80045b0:	e16d      	b.n	800488e <HAL_SPI_TransmitReceive+0x34a>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	d003      	beq.n	80045ce <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2205      	movs	r2, #5
 80045ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	887a      	ldrh	r2, [r7, #2]
 80045de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	887a      	ldrh	r2, [r7, #2]
 80045e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	887a      	ldrh	r2, [r7, #2]
 80045f0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	887a      	ldrh	r2, [r7, #2]
 80045f6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460e:	2b40      	cmp	r3, #64	; 0x40
 8004610:	d007      	beq.n	8004622 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004620:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800462a:	d17e      	bne.n	800472a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d002      	beq.n	800463a <HAL_SPI_TransmitReceive+0xf6>
 8004634:	8afb      	ldrh	r3, [r7, #22]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d16c      	bne.n	8004714 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463e:	881a      	ldrh	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464a:	1c9a      	adds	r2, r3, #2
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004654:	b29b      	uxth	r3, r3
 8004656:	3b01      	subs	r3, #1
 8004658:	b29a      	uxth	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800465e:	e059      	b.n	8004714 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b02      	cmp	r3, #2
 800466c:	d11b      	bne.n	80046a6 <HAL_SPI_TransmitReceive+0x162>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004672:	b29b      	uxth	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	d016      	beq.n	80046a6 <HAL_SPI_TransmitReceive+0x162>
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	2b01      	cmp	r3, #1
 800467c:	d113      	bne.n	80046a6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004682:	881a      	ldrh	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468e:	1c9a      	adds	r2, r3, #2
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004698:	b29b      	uxth	r3, r3
 800469a:	3b01      	subs	r3, #1
 800469c:	b29a      	uxth	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d119      	bne.n	80046e8 <HAL_SPI_TransmitReceive+0x1a4>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d014      	beq.n	80046e8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68da      	ldr	r2, [r3, #12]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c8:	b292      	uxth	r2, r2
 80046ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d0:	1c9a      	adds	r2, r3, #2
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046da:	b29b      	uxth	r3, r3
 80046dc:	3b01      	subs	r3, #1
 80046de:	b29a      	uxth	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046e4:	2301      	movs	r3, #1
 80046e6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80046e8:	f7fe f800 	bl	80026ec <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d80d      	bhi.n	8004714 <HAL_SPI_TransmitReceive+0x1d0>
 80046f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fe:	d009      	beq.n	8004714 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e0bc      	b.n	800488e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1a0      	bne.n	8004660 <HAL_SPI_TransmitReceive+0x11c>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004722:	b29b      	uxth	r3, r3
 8004724:	2b00      	cmp	r3, #0
 8004726:	d19b      	bne.n	8004660 <HAL_SPI_TransmitReceive+0x11c>
 8004728:	e082      	b.n	8004830 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d002      	beq.n	8004738 <HAL_SPI_TransmitReceive+0x1f4>
 8004732:	8afb      	ldrh	r3, [r7, #22]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d171      	bne.n	800481c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	330c      	adds	r3, #12
 8004742:	7812      	ldrb	r2, [r2, #0]
 8004744:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474a:	1c5a      	adds	r2, r3, #1
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004754:	b29b      	uxth	r3, r3
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800475e:	e05d      	b.n	800481c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b02      	cmp	r3, #2
 800476c:	d11c      	bne.n	80047a8 <HAL_SPI_TransmitReceive+0x264>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004772:	b29b      	uxth	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	d017      	beq.n	80047a8 <HAL_SPI_TransmitReceive+0x264>
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	2b01      	cmp	r3, #1
 800477c:	d114      	bne.n	80047a8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	330c      	adds	r3, #12
 8004788:	7812      	ldrb	r2, [r2, #0]
 800478a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004790:	1c5a      	adds	r2, r3, #1
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800479a:	b29b      	uxth	r3, r3
 800479c:	3b01      	subs	r3, #1
 800479e:	b29a      	uxth	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d119      	bne.n	80047ea <HAL_SPI_TransmitReceive+0x2a6>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d014      	beq.n	80047ea <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68da      	ldr	r2, [r3, #12]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ca:	b2d2      	uxtb	r2, r2
 80047cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d2:	1c5a      	adds	r2, r3, #1
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047dc:	b29b      	uxth	r3, r3
 80047de:	3b01      	subs	r3, #1
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047e6:	2301      	movs	r3, #1
 80047e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80047ea:	f7fd ff7f 	bl	80026ec <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d803      	bhi.n	8004802 <HAL_SPI_TransmitReceive+0x2be>
 80047fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004800:	d102      	bne.n	8004808 <HAL_SPI_TransmitReceive+0x2c4>
 8004802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004804:	2b00      	cmp	r3, #0
 8004806:	d109      	bne.n	800481c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e038      	b.n	800488e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004820:	b29b      	uxth	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d19c      	bne.n	8004760 <HAL_SPI_TransmitReceive+0x21c>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800482a:	b29b      	uxth	r3, r3
 800482c:	2b00      	cmp	r3, #0
 800482e:	d197      	bne.n	8004760 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004830:	6a3a      	ldr	r2, [r7, #32]
 8004832:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 f8b7 	bl	80049a8 <SPI_EndRxTxTransaction>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d008      	beq.n	8004852 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2220      	movs	r2, #32
 8004844:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e01d      	b.n	800488e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10a      	bne.n	8004870 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800485a:	2300      	movs	r3, #0
 800485c:	613b      	str	r3, [r7, #16]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	613b      	str	r3, [r7, #16]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	613b      	str	r3, [r7, #16]
 800486e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e000      	b.n	800488e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800488c:	2300      	movs	r3, #0
  }
}
 800488e:	4618      	mov	r0, r3
 8004890:	3728      	adds	r7, #40	; 0x28
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
	...

08004898 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b088      	sub	sp, #32
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	603b      	str	r3, [r7, #0]
 80048a4:	4613      	mov	r3, r2
 80048a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80048a8:	f7fd ff20 	bl	80026ec <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b0:	1a9b      	subs	r3, r3, r2
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	4413      	add	r3, r2
 80048b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80048b8:	f7fd ff18 	bl	80026ec <HAL_GetTick>
 80048bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80048be:	4b39      	ldr	r3, [pc, #228]	; (80049a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	015b      	lsls	r3, r3, #5
 80048c4:	0d1b      	lsrs	r3, r3, #20
 80048c6:	69fa      	ldr	r2, [r7, #28]
 80048c8:	fb02 f303 	mul.w	r3, r2, r3
 80048cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048ce:	e054      	b.n	800497a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d6:	d050      	beq.n	800497a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048d8:	f7fd ff08 	bl	80026ec <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	69fa      	ldr	r2, [r7, #28]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d902      	bls.n	80048ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d13d      	bne.n	800496a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80048fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004906:	d111      	bne.n	800492c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004910:	d004      	beq.n	800491c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800491a:	d107      	bne.n	800492c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800492a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004930:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004934:	d10f      	bne.n	8004956 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004954:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e017      	b.n	800499a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004970:	2300      	movs	r3, #0
 8004972:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	3b01      	subs	r3, #1
 8004978:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689a      	ldr	r2, [r3, #8]
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	4013      	ands	r3, r2
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	429a      	cmp	r2, r3
 8004988:	bf0c      	ite	eq
 800498a:	2301      	moveq	r3, #1
 800498c:	2300      	movne	r3, #0
 800498e:	b2db      	uxtb	r3, r3
 8004990:	461a      	mov	r2, r3
 8004992:	79fb      	ldrb	r3, [r7, #7]
 8004994:	429a      	cmp	r2, r3
 8004996:	d19b      	bne.n	80048d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3720      	adds	r7, #32
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	20000560 	.word	0x20000560

080049a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af02      	add	r7, sp, #8
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	2201      	movs	r2, #1
 80049bc:	2102      	movs	r1, #2
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f7ff ff6a 	bl	8004898 <SPI_WaitFlagStateUntilTimeout>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d007      	beq.n	80049da <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ce:	f043 0220 	orr.w	r2, r3, #32
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e013      	b.n	8004a02 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	2200      	movs	r2, #0
 80049e2:	2180      	movs	r1, #128	; 0x80
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f7ff ff57 	bl	8004898 <SPI_WaitFlagStateUntilTimeout>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d007      	beq.n	8004a00 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f4:	f043 0220 	orr.w	r2, r3, #32
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e000      	b.n	8004a02 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b082      	sub	sp, #8
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d101      	bne.n	8004a1c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e042      	b.n	8004aa2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d106      	bne.n	8004a36 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f7fd fd39 	bl	80024a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2224      	movs	r2, #36	; 0x24
 8004a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68da      	ldr	r2, [r3, #12]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a4c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 fcd4 	bl	80053fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	691a      	ldr	r2, [r3, #16]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a62:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695a      	ldr	r2, [r3, #20]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a72:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68da      	ldr	r2, [r3, #12]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a82:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2220      	movs	r2, #32
 8004a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2220      	movs	r2, #32
 8004a96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b084      	sub	sp, #16
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	60f8      	str	r0, [r7, #12]
 8004ab2:	60b9      	str	r1, [r7, #8]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2b20      	cmp	r3, #32
 8004ac2:	d112      	bne.n	8004aea <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d002      	beq.n	8004ad0 <HAL_UART_Receive_IT+0x26>
 8004aca:	88fb      	ldrh	r3, [r7, #6]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e00b      	b.n	8004aec <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004ada:	88fb      	ldrh	r3, [r7, #6]
 8004adc:	461a      	mov	r2, r3
 8004ade:	68b9      	ldr	r1, [r7, #8]
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f000 fab6 	bl	8005052 <UART_Start_Receive_IT>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	e000      	b.n	8004aec <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004aea:	2302      	movs	r3, #2
  }
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b0ba      	sub	sp, #232	; 0xe8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004b20:	2300      	movs	r3, #0
 8004b22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004b32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10f      	bne.n	8004b5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b3e:	f003 0320 	and.w	r3, r3, #32
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d009      	beq.n	8004b5a <HAL_UART_IRQHandler+0x66>
 8004b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b4a:	f003 0320 	and.w	r3, r3, #32
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d003      	beq.n	8004b5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fb93 	bl	800527e <UART_Receive_IT>
      return;
 8004b58:	e25b      	b.n	8005012 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 80de 	beq.w	8004d20 <HAL_UART_IRQHandler+0x22c>
 8004b64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d106      	bne.n	8004b7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b74:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 80d1 	beq.w	8004d20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00b      	beq.n	8004ba2 <HAL_UART_IRQHandler+0xae>
 8004b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d005      	beq.n	8004ba2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9a:	f043 0201 	orr.w	r2, r3, #1
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ba6:	f003 0304 	and.w	r3, r3, #4
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00b      	beq.n	8004bc6 <HAL_UART_IRQHandler+0xd2>
 8004bae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d005      	beq.n	8004bc6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bbe:	f043 0202 	orr.w	r2, r3, #2
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00b      	beq.n	8004bea <HAL_UART_IRQHandler+0xf6>
 8004bd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d005      	beq.n	8004bea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be2:	f043 0204 	orr.w	r2, r3, #4
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bee:	f003 0308 	and.w	r3, r3, #8
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d011      	beq.n	8004c1a <HAL_UART_IRQHandler+0x126>
 8004bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bfa:	f003 0320 	and.w	r3, r3, #32
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d105      	bne.n	8004c0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d005      	beq.n	8004c1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c12:	f043 0208 	orr.w	r2, r3, #8
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f000 81f2 	beq.w	8005008 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c28:	f003 0320 	and.w	r3, r3, #32
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d008      	beq.n	8004c42 <HAL_UART_IRQHandler+0x14e>
 8004c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c34:	f003 0320 	and.w	r3, r3, #32
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d002      	beq.n	8004c42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 fb1e 	bl	800527e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	bf14      	ite	ne
 8004c50:	2301      	movne	r3, #1
 8004c52:	2300      	moveq	r3, #0
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5e:	f003 0308 	and.w	r3, r3, #8
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d103      	bne.n	8004c6e <HAL_UART_IRQHandler+0x17a>
 8004c66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d04f      	beq.n	8004d0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 fa28 	bl	80050c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d041      	beq.n	8004d06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	3314      	adds	r3, #20
 8004c88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c90:	e853 3f00 	ldrex	r3, [r3]
 8004c94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004c98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ca0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	3314      	adds	r3, #20
 8004caa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004cae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004cb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004cba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004cbe:	e841 2300 	strex	r3, r2, [r1]
 8004cc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004cc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1d9      	bne.n	8004c82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d013      	beq.n	8004cfe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cda:	4a7e      	ldr	r2, [pc, #504]	; (8004ed4 <HAL_UART_IRQHandler+0x3e0>)
 8004cdc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7fd fe78 	bl	80029d8 <HAL_DMA_Abort_IT>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d016      	beq.n	8004d1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cfc:	e00e      	b.n	8004d1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f993 	bl	800502a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d04:	e00a      	b.n	8004d1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f98f 	bl	800502a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d0c:	e006      	b.n	8004d1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f98b 	bl	800502a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004d1a:	e175      	b.n	8005008 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d1c:	bf00      	nop
    return;
 8004d1e:	e173      	b.n	8005008 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	f040 814f 	bne.w	8004fc8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d2e:	f003 0310 	and.w	r3, r3, #16
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f000 8148 	beq.w	8004fc8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d3c:	f003 0310 	and.w	r3, r3, #16
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 8141 	beq.w	8004fc8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d46:	2300      	movs	r3, #0
 8004d48:	60bb      	str	r3, [r7, #8]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	60bb      	str	r3, [r7, #8]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	60bb      	str	r3, [r7, #8]
 8004d5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f000 80b6 	beq.w	8004ed8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f000 8145 	beq.w	800500c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	f080 813e 	bcs.w	800500c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d96:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	2b20      	cmp	r3, #32
 8004da0:	f000 8088 	beq.w	8004eb4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	330c      	adds	r3, #12
 8004daa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004db2:	e853 3f00 	ldrex	r3, [r3]
 8004db6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004dba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004dbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	330c      	adds	r3, #12
 8004dcc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004dd0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004dd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ddc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004de0:	e841 2300 	strex	r3, r2, [r1]
 8004de4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004de8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1d9      	bne.n	8004da4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	3314      	adds	r3, #20
 8004df6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dfa:	e853 3f00 	ldrex	r3, [r3]
 8004dfe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004e00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e02:	f023 0301 	bic.w	r3, r3, #1
 8004e06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	3314      	adds	r3, #20
 8004e10:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e14:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004e18:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004e1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e20:	e841 2300 	strex	r3, r2, [r1]
 8004e24:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004e26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1e1      	bne.n	8004df0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	3314      	adds	r3, #20
 8004e32:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e36:	e853 3f00 	ldrex	r3, [r3]
 8004e3a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004e3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	3314      	adds	r3, #20
 8004e4c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004e50:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e52:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e54:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e56:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e58:	e841 2300 	strex	r3, r2, [r1]
 8004e5c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004e5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1e3      	bne.n	8004e2c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2220      	movs	r2, #32
 8004e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	330c      	adds	r3, #12
 8004e78:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e7c:	e853 3f00 	ldrex	r3, [r3]
 8004e80:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e84:	f023 0310 	bic.w	r3, r3, #16
 8004e88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	330c      	adds	r3, #12
 8004e92:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004e96:	65ba      	str	r2, [r7, #88]	; 0x58
 8004e98:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e9e:	e841 2300 	strex	r3, r2, [r1]
 8004ea2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1e3      	bne.n	8004e72 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7fd fd57 	bl	8002962 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	4619      	mov	r1, r3
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f8b6 	bl	800503c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ed0:	e09c      	b.n	800500c <HAL_UART_IRQHandler+0x518>
 8004ed2:	bf00      	nop
 8004ed4:	08005189 	.word	0x08005189
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f000 808e 	beq.w	8005010 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004ef4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f000 8089 	beq.w	8005010 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	330c      	adds	r3, #12
 8004f04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f08:	e853 3f00 	ldrex	r3, [r3]
 8004f0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	330c      	adds	r3, #12
 8004f1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004f22:	647a      	str	r2, [r7, #68]	; 0x44
 8004f24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f2a:	e841 2300 	strex	r3, r2, [r1]
 8004f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1e3      	bne.n	8004efe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	3314      	adds	r3, #20
 8004f3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	e853 3f00 	ldrex	r3, [r3]
 8004f44:	623b      	str	r3, [r7, #32]
   return(result);
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	f023 0301 	bic.w	r3, r3, #1
 8004f4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	3314      	adds	r3, #20
 8004f56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004f5a:	633a      	str	r2, [r7, #48]	; 0x30
 8004f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f62:	e841 2300 	strex	r3, r2, [r1]
 8004f66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1e3      	bne.n	8004f36 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2220      	movs	r2, #32
 8004f72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	330c      	adds	r3, #12
 8004f82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	e853 3f00 	ldrex	r3, [r3]
 8004f8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f023 0310 	bic.w	r3, r3, #16
 8004f92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	330c      	adds	r3, #12
 8004f9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004fa0:	61fa      	str	r2, [r7, #28]
 8004fa2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa4:	69b9      	ldr	r1, [r7, #24]
 8004fa6:	69fa      	ldr	r2, [r7, #28]
 8004fa8:	e841 2300 	strex	r3, r2, [r1]
 8004fac:	617b      	str	r3, [r7, #20]
   return(result);
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1e3      	bne.n	8004f7c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004fba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 f83b 	bl	800503c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fc6:	e023      	b.n	8005010 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d009      	beq.n	8004fe8 <HAL_UART_IRQHandler+0x4f4>
 8004fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d003      	beq.n	8004fe8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f8e5 	bl	80051b0 <UART_Transmit_IT>
    return;
 8004fe6:	e014      	b.n	8005012 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00e      	beq.n	8005012 <HAL_UART_IRQHandler+0x51e>
 8004ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d008      	beq.n	8005012 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f924 	bl	800524e <UART_EndTransmit_IT>
    return;
 8005006:	e004      	b.n	8005012 <HAL_UART_IRQHandler+0x51e>
    return;
 8005008:	bf00      	nop
 800500a:	e002      	b.n	8005012 <HAL_UART_IRQHandler+0x51e>
      return;
 800500c:	bf00      	nop
 800500e:	e000      	b.n	8005012 <HAL_UART_IRQHandler+0x51e>
      return;
 8005010:	bf00      	nop
  }
}
 8005012:	37e8      	adds	r7, #232	; 0xe8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	bc80      	pop	{r7}
 8005028:	4770      	bx	lr

0800502a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800502a:	b480      	push	{r7}
 800502c:	b083      	sub	sp, #12
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005032:	bf00      	nop
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	bc80      	pop	{r7}
 800503a:	4770      	bx	lr

0800503c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	460b      	mov	r3, r1
 8005046:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	bc80      	pop	{r7}
 8005050:	4770      	bx	lr

08005052 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005052:	b480      	push	{r7}
 8005054:	b085      	sub	sp, #20
 8005056:	af00      	add	r7, sp, #0
 8005058:	60f8      	str	r0, [r7, #12]
 800505a:	60b9      	str	r1, [r7, #8]
 800505c:	4613      	mov	r3, r2
 800505e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	88fa      	ldrh	r2, [r7, #6]
 800506a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	88fa      	ldrh	r2, [r7, #6]
 8005070:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2222      	movs	r2, #34	; 0x22
 800507c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d007      	beq.n	8005098 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68da      	ldr	r2, [r3, #12]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005096:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	695a      	ldr	r2, [r3, #20]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f042 0201 	orr.w	r2, r2, #1
 80050a6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68da      	ldr	r2, [r3, #12]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0220 	orr.w	r2, r2, #32
 80050b6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	bc80      	pop	{r7}
 80050c2:	4770      	bx	lr

080050c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b095      	sub	sp, #84	; 0x54
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	330c      	adds	r3, #12
 80050d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d6:	e853 3f00 	ldrex	r3, [r3]
 80050da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	330c      	adds	r3, #12
 80050ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050ec:	643a      	str	r2, [r7, #64]	; 0x40
 80050ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050f4:	e841 2300 	strex	r3, r2, [r1]
 80050f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1e5      	bne.n	80050cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	3314      	adds	r3, #20
 8005106:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005108:	6a3b      	ldr	r3, [r7, #32]
 800510a:	e853 3f00 	ldrex	r3, [r3]
 800510e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	f023 0301 	bic.w	r3, r3, #1
 8005116:	64bb      	str	r3, [r7, #72]	; 0x48
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	3314      	adds	r3, #20
 800511e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005120:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005122:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005124:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005126:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005128:	e841 2300 	strex	r3, r2, [r1]
 800512c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800512e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1e5      	bne.n	8005100 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005138:	2b01      	cmp	r3, #1
 800513a:	d119      	bne.n	8005170 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	330c      	adds	r3, #12
 8005142:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	e853 3f00 	ldrex	r3, [r3]
 800514a:	60bb      	str	r3, [r7, #8]
   return(result);
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	f023 0310 	bic.w	r3, r3, #16
 8005152:	647b      	str	r3, [r7, #68]	; 0x44
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	330c      	adds	r3, #12
 800515a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800515c:	61ba      	str	r2, [r7, #24]
 800515e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005160:	6979      	ldr	r1, [r7, #20]
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	e841 2300 	strex	r3, r2, [r1]
 8005168:	613b      	str	r3, [r7, #16]
   return(result);
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1e5      	bne.n	800513c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2220      	movs	r2, #32
 8005174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800517e:	bf00      	nop
 8005180:	3754      	adds	r7, #84	; 0x54
 8005182:	46bd      	mov	sp, r7
 8005184:	bc80      	pop	{r7}
 8005186:	4770      	bx	lr

08005188 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005194:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f7ff ff41 	bl	800502a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051a8:	bf00      	nop
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2b21      	cmp	r3, #33	; 0x21
 80051c2:	d13e      	bne.n	8005242 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051cc:	d114      	bne.n	80051f8 <UART_Transmit_IT+0x48>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d110      	bne.n	80051f8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	881b      	ldrh	r3, [r3, #0]
 80051e0:	461a      	mov	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051ea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	1c9a      	adds	r2, r3, #2
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	621a      	str	r2, [r3, #32]
 80051f6:	e008      	b.n	800520a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	1c59      	adds	r1, r3, #1
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	6211      	str	r1, [r2, #32]
 8005202:	781a      	ldrb	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800520e:	b29b      	uxth	r3, r3
 8005210:	3b01      	subs	r3, #1
 8005212:	b29b      	uxth	r3, r3
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	4619      	mov	r1, r3
 8005218:	84d1      	strh	r1, [r2, #38]	; 0x26
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10f      	bne.n	800523e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68da      	ldr	r2, [r3, #12]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800522c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68da      	ldr	r2, [r3, #12]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800523c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800523e:	2300      	movs	r3, #0
 8005240:	e000      	b.n	8005244 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005242:	2302      	movs	r3, #2
  }
}
 8005244:	4618      	mov	r0, r3
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	bc80      	pop	{r7}
 800524c:	4770      	bx	lr

0800524e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b082      	sub	sp, #8
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68da      	ldr	r2, [r3, #12]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005264:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2220      	movs	r2, #32
 800526a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7ff fed2 	bl	8005018 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b08c      	sub	sp, #48	; 0x30
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b22      	cmp	r3, #34	; 0x22
 8005290:	f040 80ae 	bne.w	80053f0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800529c:	d117      	bne.n	80052ce <UART_Receive_IT+0x50>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d113      	bne.n	80052ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80052a6:	2300      	movs	r3, #0
 80052a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052bc:	b29a      	uxth	r2, r3
 80052be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c6:	1c9a      	adds	r2, r3, #2
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	629a      	str	r2, [r3, #40]	; 0x28
 80052cc:	e026      	b.n	800531c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80052d4:	2300      	movs	r3, #0
 80052d6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052e0:	d007      	beq.n	80052f2 <UART_Receive_IT+0x74>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10a      	bne.n	8005300 <UART_Receive_IT+0x82>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d106      	bne.n	8005300 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	b2da      	uxtb	r2, r3
 80052fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fc:	701a      	strb	r2, [r3, #0]
 80052fe:	e008      	b.n	8005312 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	b2db      	uxtb	r3, r3
 8005308:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800530c:	b2da      	uxtb	r2, r3
 800530e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005310:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005316:	1c5a      	adds	r2, r3, #1
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005320:	b29b      	uxth	r3, r3
 8005322:	3b01      	subs	r3, #1
 8005324:	b29b      	uxth	r3, r3
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	4619      	mov	r1, r3
 800532a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800532c:	2b00      	cmp	r3, #0
 800532e:	d15d      	bne.n	80053ec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68da      	ldr	r2, [r3, #12]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f022 0220 	bic.w	r2, r2, #32
 800533e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68da      	ldr	r2, [r3, #12]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800534e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	695a      	ldr	r2, [r3, #20]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 0201 	bic.w	r2, r2, #1
 800535e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2220      	movs	r2, #32
 8005364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005372:	2b01      	cmp	r3, #1
 8005374:	d135      	bne.n	80053e2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	330c      	adds	r3, #12
 8005382:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	e853 3f00 	ldrex	r3, [r3]
 800538a:	613b      	str	r3, [r7, #16]
   return(result);
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	f023 0310 	bic.w	r3, r3, #16
 8005392:	627b      	str	r3, [r7, #36]	; 0x24
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	330c      	adds	r3, #12
 800539a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800539c:	623a      	str	r2, [r7, #32]
 800539e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a0:	69f9      	ldr	r1, [r7, #28]
 80053a2:	6a3a      	ldr	r2, [r7, #32]
 80053a4:	e841 2300 	strex	r3, r2, [r1]
 80053a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1e5      	bne.n	800537c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0310 	and.w	r3, r3, #16
 80053ba:	2b10      	cmp	r3, #16
 80053bc:	d10a      	bne.n	80053d4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053be:	2300      	movs	r3, #0
 80053c0:	60fb      	str	r3, [r7, #12]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	60fb      	str	r3, [r7, #12]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053d8:	4619      	mov	r1, r3
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7ff fe2e 	bl	800503c <HAL_UARTEx_RxEventCallback>
 80053e0:	e002      	b.n	80053e8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f7fb fe84 	bl	80010f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80053e8:	2300      	movs	r3, #0
 80053ea:	e002      	b.n	80053f2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80053ec:	2300      	movs	r3, #0
 80053ee:	e000      	b.n	80053f2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80053f0:	2302      	movs	r3, #2
  }
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3730      	adds	r7, #48	; 0x30
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
	...

080053fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68da      	ldr	r2, [r3, #12]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	430a      	orrs	r2, r1
 8005418:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	689a      	ldr	r2, [r3, #8]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	431a      	orrs	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	4313      	orrs	r3, r2
 800542a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005436:	f023 030c 	bic.w	r3, r3, #12
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	6812      	ldr	r2, [r2, #0]
 800543e:	68b9      	ldr	r1, [r7, #8]
 8005440:	430b      	orrs	r3, r1
 8005442:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	699a      	ldr	r2, [r3, #24]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	430a      	orrs	r2, r1
 8005458:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a2c      	ldr	r2, [pc, #176]	; (8005510 <UART_SetConfig+0x114>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d103      	bne.n	800546c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005464:	f7fe fe74 	bl	8004150 <HAL_RCC_GetPCLK2Freq>
 8005468:	60f8      	str	r0, [r7, #12]
 800546a:	e002      	b.n	8005472 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800546c:	f7fe fe5c 	bl	8004128 <HAL_RCC_GetPCLK1Freq>
 8005470:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	4613      	mov	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	009a      	lsls	r2, r3, #2
 800547c:	441a      	add	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	fbb2 f3f3 	udiv	r3, r2, r3
 8005488:	4a22      	ldr	r2, [pc, #136]	; (8005514 <UART_SetConfig+0x118>)
 800548a:	fba2 2303 	umull	r2, r3, r2, r3
 800548e:	095b      	lsrs	r3, r3, #5
 8005490:	0119      	lsls	r1, r3, #4
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	4613      	mov	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4413      	add	r3, r2
 800549a:	009a      	lsls	r2, r3, #2
 800549c:	441a      	add	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80054a8:	4b1a      	ldr	r3, [pc, #104]	; (8005514 <UART_SetConfig+0x118>)
 80054aa:	fba3 0302 	umull	r0, r3, r3, r2
 80054ae:	095b      	lsrs	r3, r3, #5
 80054b0:	2064      	movs	r0, #100	; 0x64
 80054b2:	fb00 f303 	mul.w	r3, r0, r3
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	011b      	lsls	r3, r3, #4
 80054ba:	3332      	adds	r3, #50	; 0x32
 80054bc:	4a15      	ldr	r2, [pc, #84]	; (8005514 <UART_SetConfig+0x118>)
 80054be:	fba2 2303 	umull	r2, r3, r2, r3
 80054c2:	095b      	lsrs	r3, r3, #5
 80054c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054c8:	4419      	add	r1, r3
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	4613      	mov	r3, r2
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	009a      	lsls	r2, r3, #2
 80054d4:	441a      	add	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80054e0:	4b0c      	ldr	r3, [pc, #48]	; (8005514 <UART_SetConfig+0x118>)
 80054e2:	fba3 0302 	umull	r0, r3, r3, r2
 80054e6:	095b      	lsrs	r3, r3, #5
 80054e8:	2064      	movs	r0, #100	; 0x64
 80054ea:	fb00 f303 	mul.w	r3, r0, r3
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	011b      	lsls	r3, r3, #4
 80054f2:	3332      	adds	r3, #50	; 0x32
 80054f4:	4a07      	ldr	r2, [pc, #28]	; (8005514 <UART_SetConfig+0x118>)
 80054f6:	fba2 2303 	umull	r2, r3, r2, r3
 80054fa:	095b      	lsrs	r3, r3, #5
 80054fc:	f003 020f 	and.w	r2, r3, #15
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	440a      	add	r2, r1
 8005506:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005508:	bf00      	nop
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	40013800 	.word	0x40013800
 8005514:	51eb851f 	.word	0x51eb851f

08005518 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800551c:	4904      	ldr	r1, [pc, #16]	; (8005530 <MX_FATFS_Init+0x18>)
 800551e:	4805      	ldr	r0, [pc, #20]	; (8005534 <MX_FATFS_Init+0x1c>)
 8005520:	f000 f8ac 	bl	800567c <FATFS_LinkDriver>
 8005524:	4603      	mov	r3, r0
 8005526:	461a      	mov	r2, r3
 8005528:	4b03      	ldr	r3, [pc, #12]	; (8005538 <MX_FATFS_Init+0x20>)
 800552a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800552c:	bf00      	nop
 800552e:	bd80      	pop	{r7, pc}
 8005530:	20000aac 	.word	0x20000aac
 8005534:	2000056c 	.word	0x2000056c
 8005538:	20000aa8 	.word	0x20000aa8

0800553c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	4603      	mov	r3, r0
 8005544:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
    return SD_disk_initialize(pdrv);
 8005546:	79fb      	ldrb	r3, [r7, #7]
 8005548:	4618      	mov	r0, r3
 800554a:	f7fb ffd1 	bl	80014f0 <SD_disk_initialize>
 800554e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005550:	4618      	mov	r0, r3
 8005552:	3708      	adds	r7, #8
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	4603      	mov	r3, r0
 8005560:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
    return SD_disk_status(pdrv);
 8005562:	79fb      	ldrb	r3, [r7, #7]
 8005564:	4618      	mov	r0, r3
 8005566:	f7fc f8a9 	bl	80016bc <SD_disk_status>
 800556a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800556c:	4618      	mov	r0, r3
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	60b9      	str	r1, [r7, #8]
 800557c:	607a      	str	r2, [r7, #4]
 800557e:	603b      	str	r3, [r7, #0]
 8005580:	4603      	mov	r3, r0
 8005582:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 8005584:	7bf8      	ldrb	r0, [r7, #15]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	68b9      	ldr	r1, [r7, #8]
 800558c:	f7fc f8aa 	bl	80016e4 <SD_disk_read>
 8005590:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005592:	4618      	mov	r0, r3
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b084      	sub	sp, #16
 800559e:	af00      	add	r7, sp, #0
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
 80055a4:	603b      	str	r3, [r7, #0]
 80055a6:	4603      	mov	r3, r0
 80055a8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 80055aa:	7bf8      	ldrb	r0, [r7, #15]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	68b9      	ldr	r1, [r7, #8]
 80055b2:	f7fc f901 	bl	80017b8 <SD_disk_write>
 80055b6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3710      	adds	r7, #16
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	4603      	mov	r3, r0
 80055c8:	603a      	str	r2, [r7, #0]
 80055ca:	71fb      	strb	r3, [r7, #7]
 80055cc:	460b      	mov	r3, r1
 80055ce:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 80055d0:	79b9      	ldrb	r1, [r7, #6]
 80055d2:	79fb      	ldrb	r3, [r7, #7]
 80055d4:	683a      	ldr	r2, [r7, #0]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fc f972 	bl	80018c0 <SD_disk_ioctl>
 80055dc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3708      	adds	r7, #8
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
	...

080055e8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b087      	sub	sp, #28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	4613      	mov	r3, r2
 80055f4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80055f6:	2301      	movs	r3, #1
 80055f8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80055fa:	2300      	movs	r3, #0
 80055fc:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80055fe:	4b1e      	ldr	r3, [pc, #120]	; (8005678 <FATFS_LinkDriverEx+0x90>)
 8005600:	7a5b      	ldrb	r3, [r3, #9]
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2b01      	cmp	r3, #1
 8005606:	d831      	bhi.n	800566c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005608:	4b1b      	ldr	r3, [pc, #108]	; (8005678 <FATFS_LinkDriverEx+0x90>)
 800560a:	7a5b      	ldrb	r3, [r3, #9]
 800560c:	b2db      	uxtb	r3, r3
 800560e:	461a      	mov	r2, r3
 8005610:	4b19      	ldr	r3, [pc, #100]	; (8005678 <FATFS_LinkDriverEx+0x90>)
 8005612:	2100      	movs	r1, #0
 8005614:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8005616:	4b18      	ldr	r3, [pc, #96]	; (8005678 <FATFS_LinkDriverEx+0x90>)
 8005618:	7a5b      	ldrb	r3, [r3, #9]
 800561a:	b2db      	uxtb	r3, r3
 800561c:	4a16      	ldr	r2, [pc, #88]	; (8005678 <FATFS_LinkDriverEx+0x90>)
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	4413      	add	r3, r2
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8005626:	4b14      	ldr	r3, [pc, #80]	; (8005678 <FATFS_LinkDriverEx+0x90>)
 8005628:	7a5b      	ldrb	r3, [r3, #9]
 800562a:	b2db      	uxtb	r3, r3
 800562c:	461a      	mov	r2, r3
 800562e:	4b12      	ldr	r3, [pc, #72]	; (8005678 <FATFS_LinkDriverEx+0x90>)
 8005630:	4413      	add	r3, r2
 8005632:	79fa      	ldrb	r2, [r7, #7]
 8005634:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005636:	4b10      	ldr	r3, [pc, #64]	; (8005678 <FATFS_LinkDriverEx+0x90>)
 8005638:	7a5b      	ldrb	r3, [r3, #9]
 800563a:	b2db      	uxtb	r3, r3
 800563c:	1c5a      	adds	r2, r3, #1
 800563e:	b2d1      	uxtb	r1, r2
 8005640:	4a0d      	ldr	r2, [pc, #52]	; (8005678 <FATFS_LinkDriverEx+0x90>)
 8005642:	7251      	strb	r1, [r2, #9]
 8005644:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005646:	7dbb      	ldrb	r3, [r7, #22]
 8005648:	3330      	adds	r3, #48	; 0x30
 800564a:	b2da      	uxtb	r2, r3
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	3301      	adds	r3, #1
 8005654:	223a      	movs	r2, #58	; 0x3a
 8005656:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	3302      	adds	r3, #2
 800565c:	222f      	movs	r2, #47	; 0x2f
 800565e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	3303      	adds	r3, #3
 8005664:	2200      	movs	r2, #0
 8005666:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005668:	2300      	movs	r3, #0
 800566a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800566c:	7dfb      	ldrb	r3, [r7, #23]
}
 800566e:	4618      	mov	r0, r3
 8005670:	371c      	adds	r7, #28
 8005672:	46bd      	mov	sp, r7
 8005674:	bc80      	pop	{r7}
 8005676:	4770      	bx	lr
 8005678:	20000ab0 	.word	0x20000ab0

0800567c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005686:	2200      	movs	r2, #0
 8005688:	6839      	ldr	r1, [r7, #0]
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7ff ffac 	bl	80055e8 <FATFS_LinkDriverEx>
 8005690:	4603      	mov	r3, r0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <__itoa>:
 800569a:	1e93      	subs	r3, r2, #2
 800569c:	2b22      	cmp	r3, #34	; 0x22
 800569e:	b510      	push	{r4, lr}
 80056a0:	460c      	mov	r4, r1
 80056a2:	d904      	bls.n	80056ae <__itoa+0x14>
 80056a4:	2300      	movs	r3, #0
 80056a6:	461c      	mov	r4, r3
 80056a8:	700b      	strb	r3, [r1, #0]
 80056aa:	4620      	mov	r0, r4
 80056ac:	bd10      	pop	{r4, pc}
 80056ae:	2a0a      	cmp	r2, #10
 80056b0:	d109      	bne.n	80056c6 <__itoa+0x2c>
 80056b2:	2800      	cmp	r0, #0
 80056b4:	da07      	bge.n	80056c6 <__itoa+0x2c>
 80056b6:	232d      	movs	r3, #45	; 0x2d
 80056b8:	700b      	strb	r3, [r1, #0]
 80056ba:	2101      	movs	r1, #1
 80056bc:	4240      	negs	r0, r0
 80056be:	4421      	add	r1, r4
 80056c0:	f000 f806 	bl	80056d0 <__utoa>
 80056c4:	e7f1      	b.n	80056aa <__itoa+0x10>
 80056c6:	2100      	movs	r1, #0
 80056c8:	e7f9      	b.n	80056be <__itoa+0x24>

080056ca <itoa>:
 80056ca:	f7ff bfe6 	b.w	800569a <__itoa>
	...

080056d0 <__utoa>:
 80056d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056d2:	b08b      	sub	sp, #44	; 0x2c
 80056d4:	4605      	mov	r5, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	466e      	mov	r6, sp
 80056da:	4c1d      	ldr	r4, [pc, #116]	; (8005750 <__utoa+0x80>)
 80056dc:	f104 0c20 	add.w	ip, r4, #32
 80056e0:	4637      	mov	r7, r6
 80056e2:	6820      	ldr	r0, [r4, #0]
 80056e4:	6861      	ldr	r1, [r4, #4]
 80056e6:	3408      	adds	r4, #8
 80056e8:	c703      	stmia	r7!, {r0, r1}
 80056ea:	4564      	cmp	r4, ip
 80056ec:	463e      	mov	r6, r7
 80056ee:	d1f7      	bne.n	80056e0 <__utoa+0x10>
 80056f0:	7921      	ldrb	r1, [r4, #4]
 80056f2:	6820      	ldr	r0, [r4, #0]
 80056f4:	7139      	strb	r1, [r7, #4]
 80056f6:	1e91      	subs	r1, r2, #2
 80056f8:	2922      	cmp	r1, #34	; 0x22
 80056fa:	6038      	str	r0, [r7, #0]
 80056fc:	f04f 0100 	mov.w	r1, #0
 8005700:	d904      	bls.n	800570c <__utoa+0x3c>
 8005702:	7019      	strb	r1, [r3, #0]
 8005704:	460b      	mov	r3, r1
 8005706:	4618      	mov	r0, r3
 8005708:	b00b      	add	sp, #44	; 0x2c
 800570a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800570c:	1e58      	subs	r0, r3, #1
 800570e:	4684      	mov	ip, r0
 8005710:	fbb5 f7f2 	udiv	r7, r5, r2
 8005714:	fb02 5617 	mls	r6, r2, r7, r5
 8005718:	3628      	adds	r6, #40	; 0x28
 800571a:	446e      	add	r6, sp
 800571c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005720:	460c      	mov	r4, r1
 8005722:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005726:	462e      	mov	r6, r5
 8005728:	42b2      	cmp	r2, r6
 800572a:	463d      	mov	r5, r7
 800572c:	f101 0101 	add.w	r1, r1, #1
 8005730:	d9ee      	bls.n	8005710 <__utoa+0x40>
 8005732:	2200      	movs	r2, #0
 8005734:	545a      	strb	r2, [r3, r1]
 8005736:	1919      	adds	r1, r3, r4
 8005738:	1aa5      	subs	r5, r4, r2
 800573a:	42aa      	cmp	r2, r5
 800573c:	dae3      	bge.n	8005706 <__utoa+0x36>
 800573e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005742:	780e      	ldrb	r6, [r1, #0]
 8005744:	3201      	adds	r2, #1
 8005746:	7006      	strb	r6, [r0, #0]
 8005748:	f801 5901 	strb.w	r5, [r1], #-1
 800574c:	e7f4      	b.n	8005738 <__utoa+0x68>
 800574e:	bf00      	nop
 8005750:	0800801e 	.word	0x0800801e

08005754 <memset>:
 8005754:	4603      	mov	r3, r0
 8005756:	4402      	add	r2, r0
 8005758:	4293      	cmp	r3, r2
 800575a:	d100      	bne.n	800575e <memset+0xa>
 800575c:	4770      	bx	lr
 800575e:	f803 1b01 	strb.w	r1, [r3], #1
 8005762:	e7f9      	b.n	8005758 <memset+0x4>

08005764 <__libc_init_array>:
 8005764:	b570      	push	{r4, r5, r6, lr}
 8005766:	2600      	movs	r6, #0
 8005768:	4d0c      	ldr	r5, [pc, #48]	; (800579c <__libc_init_array+0x38>)
 800576a:	4c0d      	ldr	r4, [pc, #52]	; (80057a0 <__libc_init_array+0x3c>)
 800576c:	1b64      	subs	r4, r4, r5
 800576e:	10a4      	asrs	r4, r4, #2
 8005770:	42a6      	cmp	r6, r4
 8005772:	d109      	bne.n	8005788 <__libc_init_array+0x24>
 8005774:	f000 f81a 	bl	80057ac <_init>
 8005778:	2600      	movs	r6, #0
 800577a:	4d0a      	ldr	r5, [pc, #40]	; (80057a4 <__libc_init_array+0x40>)
 800577c:	4c0a      	ldr	r4, [pc, #40]	; (80057a8 <__libc_init_array+0x44>)
 800577e:	1b64      	subs	r4, r4, r5
 8005780:	10a4      	asrs	r4, r4, #2
 8005782:	42a6      	cmp	r6, r4
 8005784:	d105      	bne.n	8005792 <__libc_init_array+0x2e>
 8005786:	bd70      	pop	{r4, r5, r6, pc}
 8005788:	f855 3b04 	ldr.w	r3, [r5], #4
 800578c:	4798      	blx	r3
 800578e:	3601      	adds	r6, #1
 8005790:	e7ee      	b.n	8005770 <__libc_init_array+0xc>
 8005792:	f855 3b04 	ldr.w	r3, [r5], #4
 8005796:	4798      	blx	r3
 8005798:	3601      	adds	r6, #1
 800579a:	e7f2      	b.n	8005782 <__libc_init_array+0x1e>
 800579c:	08008044 	.word	0x08008044
 80057a0:	08008044 	.word	0x08008044
 80057a4:	08008044 	.word	0x08008044
 80057a8:	08008048 	.word	0x08008048

080057ac <_init>:
 80057ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ae:	bf00      	nop
 80057b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057b2:	bc08      	pop	{r3}
 80057b4:	469e      	mov	lr, r3
 80057b6:	4770      	bx	lr

080057b8 <_fini>:
 80057b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ba:	bf00      	nop
 80057bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057be:	bc08      	pop	{r3}
 80057c0:	469e      	mov	lr, r3
 80057c2:	4770      	bx	lr
